<Type Name="TryStatementSyntax" FullName="Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax">
  <TypeSignature Language="C#" Value="public sealed class TryStatementSyntax : Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TryStatementSyntax extends Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TryStatementSyntax&#xA;Inherits StatementSyntax" />
  <TypeSignature Language="F#" Value="type TryStatementSyntax = class&#xA;    inherit StatementSyntax" />
  <TypeSignature Language="C++ CLI" Value="public ref class TryStatementSyntax sealed : Microsoft::CodeAnalysis::CSharp::Syntax::StatementSyntax" />
  <TypeSignature Language="C++ CX" Value="public ref class TryStatementSyntax sealed : Microsoft::CodeAnalysis::CSharp::Syntax::StatementSyntax" />
  <TypeSignature Language="C++ WINRT" Value="class TryStatementSyntax sealed : Microsoft::CodeAnalysis::CSharp::Syntax::StatementSyntax" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public override void Accept (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Accept(class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Accept (visitor As CSharpSyntaxVisitor)" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor -&gt; unit" Usage="tryStatementSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::CSharp::CSharpSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::CSharp::CSharpSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value=" override void Accept(Microsoft::CodeAnalysis::CSharp::CSharpSyntaxVisitor const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public override TResult Accept&lt;TResult&gt; (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;TResult&gt; visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!TResult Accept&lt;TResult&gt;(class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1&lt;!!TResult&gt; visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Accept(Of TResult) (visitor As CSharpSyntaxVisitor(Of TResult)) As TResult" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;'Result&gt; -&gt; 'Result" Usage="tryStatementSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::CSharp::CSharpSyntaxVisitor&lt;TResult&gt; ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::CSharp::CSharpSyntaxVisitor&lt;TResult&gt; const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddBlockStatements">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax AddBlockStatements (params Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax AddBlockStatements(class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.AddBlockStatements(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddBlockStatements (ParamArray items As StatementSyntax()) As TryStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.AddBlockStatements : Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax" Usage="tryStatementSyntax.AddBlockStatements items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::TryStatementSyntax ^ AddBlockStatements(... cli::array &lt;Microsoft::CodeAnalysis::CSharp::Syntax::StatementSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCatches">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax AddCatches (params Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax AddCatches(class Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.AddCatches(Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddCatches (ParamArray items As CatchClauseSyntax()) As TryStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.AddCatches : Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax" Usage="tryStatementSyntax.AddCatches items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::TryStatementSyntax ^ AddCatches(... cli::array &lt;Microsoft::CodeAnalysis::CSharp::Syntax::CatchClauseSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax Block { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax Block" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.Block" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Block As BlockSyntax" />
      <MemberSignature Language="F#" Value="member this.Block : Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.Block" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::CSharp::Syntax::BlockSyntax ^ Block { Microsoft::CodeAnalysis::CSharp::Syntax::BlockSyntax ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::CSharp::Syntax::BlockSyntax ^ Block { Microsoft::CodeAnalysis::CSharp::Syntax::BlockSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catches">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt; Catches { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt; Catches" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.Catches" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Catches As SyntaxList(Of CatchClauseSyntax)" />
      <MemberSignature Language="F#" Value="member this.Catches : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt;" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.Catches" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::CSharp::Syntax::CatchClauseSyntax ^&gt; Catches { Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::CSharp::Syntax::CatchClauseSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finally">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax Finally { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax Finally" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.Finally" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Finally As FinallyClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.Finally : Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.Finally" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::CSharp::Syntax::FinallyClauseSyntax ^ Finally { Microsoft::CodeAnalysis::CSharp::Syntax::FinallyClauseSyntax ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::CSharp::Syntax::FinallyClauseSyntax ^ Finally { Microsoft::CodeAnalysis::CSharp::Syntax::FinallyClauseSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryKeyword">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxToken TryKeyword { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken TryKeyword" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.TryKeyword" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TryKeyword As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.TryKeyword : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.TryKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxToken TryKeyword { Microsoft::CodeAnalysis::SyntaxToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax Update (Microsoft.CodeAnalysis.SyntaxToken tryKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt; catches, Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax finally);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax Update(valuetype Microsoft.CodeAnalysis.SyntaxToken tryKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt; catches, class Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax finally) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (tryKeyword As SyntaxToken, block As BlockSyntax, catches As SyntaxList(Of CatchClauseSyntax), finally As FinallyClauseSyntax) As TryStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.Update : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt; * Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax" Usage="tryStatementSyntax.Update (tryKeyword, block, catches, finally)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::TryStatementSyntax ^ Update(Microsoft::CodeAnalysis::SyntaxToken tryKeyword, Microsoft::CodeAnalysis::CSharp::Syntax::BlockSyntax ^ block, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::CSharp::Syntax::CatchClauseSyntax ^&gt; catches, Microsoft::CodeAnalysis::CSharp::Syntax::FinallyClauseSyntax ^ finally);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tryKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="block" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="catches" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt;" />
        <Parameter Name="finally" Type="Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="tryKeyword">To be added.</param>
        <param name="block">To be added.</param>
        <param name="catches">To be added.</param>
        <param name="finally">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithBlock">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax WithBlock (Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax WithBlock(class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.WithBlock(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithBlock (block As BlockSyntax) As TryStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.WithBlock : Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax" Usage="tryStatementSyntax.WithBlock block" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::TryStatementSyntax ^ WithBlock(Microsoft::CodeAnalysis::CSharp::Syntax::BlockSyntax ^ block);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::TryStatementSyntax ^ WithBlock(Microsoft::CodeAnalysis::CSharp::Syntax::BlockSyntax ^ block);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::CSharp::Syntax::TryStatementSyntax WithBlock(Microsoft::CodeAnalysis::CSharp::Syntax::BlockSyntax const &amp; block);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="block" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
      </Parameters>
      <Docs>
        <param name="block">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithCatches">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax WithCatches (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt; catches);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax WithCatches(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt; catches) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.WithCatches(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithCatches (catches As SyntaxList(Of CatchClauseSyntax)) As TryStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.WithCatches : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax" Usage="tryStatementSyntax.WithCatches catches" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::TryStatementSyntax ^ WithCatches(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::CSharp::Syntax::CatchClauseSyntax ^&gt; catches);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catches" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="catches">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithFinally">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax WithFinally (Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax finally);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax WithFinally(class Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax finally) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.WithFinally(Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithFinally (finally As FinallyClauseSyntax) As TryStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.WithFinally : Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax" Usage="tryStatementSyntax.WithFinally finally" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::TryStatementSyntax ^ WithFinally(Microsoft::CodeAnalysis::CSharp::Syntax::FinallyClauseSyntax ^ finally);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::TryStatementSyntax ^ WithFinally(Microsoft::CodeAnalysis::CSharp::Syntax::FinallyClauseSyntax ^ finally);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::CSharp::Syntax::TryStatementSyntax WithFinally(Microsoft::CodeAnalysis::CSharp::Syntax::FinallyClauseSyntax const &amp; finally);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finally" Type="Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="finally">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTryKeyword">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax WithTryKeyword (Microsoft.CodeAnalysis.SyntaxToken tryKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax WithTryKeyword(valuetype Microsoft.CodeAnalysis.SyntaxToken tryKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax.WithTryKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithTryKeyword (tryKeyword As SyntaxToken) As TryStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.WithTryKeyword : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax" Usage="tryStatementSyntax.WithTryKeyword tryKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::TryStatementSyntax ^ WithTryKeyword(Microsoft::CodeAnalysis::SyntaxToken tryKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tryKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="tryKeyword">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>