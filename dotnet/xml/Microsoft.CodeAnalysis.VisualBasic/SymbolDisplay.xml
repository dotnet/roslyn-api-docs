<Type Name="SymbolDisplay" FullName="Microsoft.CodeAnalysis.VisualBasic.SymbolDisplay">
  <TypeSignature Language="C#" Value="public sealed class SymbolDisplay" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SymbolDisplay extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.SymbolDisplay" />
  <TypeSignature Language="VB.NET" Value="Public Module SymbolDisplay" />
  <TypeSignature Language="F#" Value="type SymbolDisplay = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class SymbolDisplay sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
 Displays a symbol in the VisualBasic style.
 </summary>
    <remarks>To be added.</remarks>
    <altmember cref="T:Microsoft.CodeAnalysis.CSharp.Symbols.SymbolDisplay" />
  </Docs>
  <Members>
    <Member MemberName="FormatPrimitive">
      <MemberSignature Language="C#" Value="public static string FormatPrimitive (object obj, bool quoteStrings, bool useHexadecimalNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPrimitive(object obj, bool quoteStrings, bool useHexadecimalNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SymbolDisplay.FormatPrimitive(System.Object,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPrimitive (obj As Object, quoteStrings As Boolean, useHexadecimalNumbers As Boolean) As String" />
      <MemberSignature Language="F#" Value="static member FormatPrimitive : obj * bool * bool -&gt; string" Usage="Microsoft.CodeAnalysis.VisualBasic.SymbolDisplay.FormatPrimitive (obj, quoteStrings, useHexadecimalNumbers)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ FormatPrimitive(System::Object ^ obj, bool quoteStrings, bool useHexadecimalNumbers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="quoteStrings" Type="System.Boolean" />
        <Parameter Name="useHexadecimalNumbers" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">A value to display as a string.</param>
        <param name="quoteStrings">Whether or not to quote string literals.</param>
        <param name="useHexadecimalNumbers">Whether or not to display integral literals in hexadecimal.</param>
        <summary>
 Returns a string representation of an object of primitive type.
 </summary>
        <returns>A string representation of an object of primitive type (or null if the type is not supported).</returns>
        <remarks>
 Handles <see cref="T:System.Boolean" />, <see cref="T:System.String" />, <see cref="T:System.Char" />, <see cref="T:System.SByte" /><see cref="T:System.Byte" />, <see cref="T:System.Int16" />, <see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, <see cref="T:System.UInt32" />,
 <see cref="T:System.Int64" />, <see cref="T:System.UInt64" />, <see cref="T:System.Double" />, <see cref="T:System.Single" />, <see cref="T:System.Decimal" />,
 <see cref="T:System.DateTime" />, and <c>Nothing</c>.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDisplayParts">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SymbolDisplayPart&gt; ToDisplayParts (Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.SymbolDisplayFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Collections.Immutable.ImmutableArray`1&lt;valuetype Microsoft.CodeAnalysis.SymbolDisplayPart&gt; ToDisplayParts(class Microsoft.CodeAnalysis.ISymbol symbol, class Microsoft.CodeAnalysis.SymbolDisplayFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SymbolDisplay.ToDisplayParts(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SymbolDisplayFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToDisplayParts (symbol As ISymbol, Optional format As SymbolDisplayFormat = null) As ImmutableArray(Of SymbolDisplayPart)" />
      <MemberSignature Language="F#" Value="static member ToDisplayParts : Microsoft.CodeAnalysis.ISymbol * Microsoft.CodeAnalysis.SymbolDisplayFormat -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SymbolDisplayPart&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.SymbolDisplay.ToDisplayParts (symbol, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SymbolDisplayPart&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.ISymbol" />
        <Parameter Name="format" Type="Microsoft.CodeAnalysis.SymbolDisplayFormat" />
      </Parameters>
      <Docs>
        <param name="symbol">The symbol to be displayed.</param>
        <param name="format">The formatting options to apply.  If Nothing Is passed, <see cref="P:Microsoft.CodeAnalysis.SymbolDisplayFormat.VisualBasicErrorMessageFormat" /> will be used.</param>
        <summary>
 Convert a symbol to an array of string parts, each of which has a kind. Useful for
 colorizing the display string.
 </summary>
        <returns>A list of display parts.</returns>
        <remarks>
 Parts are not localized until they are converted to strings.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDisplayString">
      <MemberSignature Language="C#" Value="public static string ToDisplayString (Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.SymbolDisplayFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ToDisplayString(class Microsoft.CodeAnalysis.ISymbol symbol, class Microsoft.CodeAnalysis.SymbolDisplayFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SymbolDisplay.ToDisplayString(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SymbolDisplayFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToDisplayString (symbol As ISymbol, Optional format As SymbolDisplayFormat = null) As String" />
      <MemberSignature Language="F#" Value="static member ToDisplayString : Microsoft.CodeAnalysis.ISymbol * Microsoft.CodeAnalysis.SymbolDisplayFormat -&gt; string" Usage="Microsoft.CodeAnalysis.VisualBasic.SymbolDisplay.ToDisplayString (symbol, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.ISymbol" />
        <Parameter Name="format" Type="Microsoft.CodeAnalysis.SymbolDisplayFormat" />
      </Parameters>
      <Docs>
        <param name="symbol">The symbol to be displayed.</param>
        <param name="format">The formatting options to apply.  If Nothing is passed, <see cref="P:Microsoft.CodeAnalysis.SymbolDisplayFormat.VisualBasicErrorMessageFormat" /> will be used.</param>
        <summary>
 Displays a symbol in the Visual Basic style, based on a <see cref="T:Microsoft.CodeAnalysis.SymbolDisplayFormat" />.
 </summary>
        <returns>A formatted string that can be displayed to the user.</returns>
        <remarks>
 The return value is not expected to be syntactically valid Visual Basic.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToMinimalDisplayParts">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SymbolDisplayPart&gt; ToMinimalDisplayParts (Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.SymbolDisplayFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Collections.Immutable.ImmutableArray`1&lt;valuetype Microsoft.CodeAnalysis.SymbolDisplayPart&gt; ToMinimalDisplayParts(class Microsoft.CodeAnalysis.ISymbol symbol, class Microsoft.CodeAnalysis.SemanticModel semanticModel, int32 position, class Microsoft.CodeAnalysis.SymbolDisplayFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SymbolDisplay.ToMinimalDisplayParts(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)" />
      <MemberSignature Language="F#" Value="static member ToMinimalDisplayParts : Microsoft.CodeAnalysis.ISymbol * Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.SymbolDisplayFormat -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SymbolDisplayPart&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.SymbolDisplay.ToMinimalDisplayParts (symbol, semanticModel, position, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SymbolDisplayPart&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.ISymbol" />
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="format" Type="Microsoft.CodeAnalysis.SymbolDisplayFormat" />
      </Parameters>
      <Docs>
        <param name="symbol">The symbol to be displayed.</param>
        <param name="semanticModel">Semantic information about the context in which the symbol is being displayed.</param>
        <param name="position">A position within the <see cref="T:Microsoft.CodeAnalysis.SyntaxTree" /> or <paramref name="semanticModel" />.</param>
        <param name="format">The formatting options to apply.  If null is passed, <see cref="P:Microsoft.CodeAnalysis.SymbolDisplayFormat.CSharpErrorMessageFormat" /> will be used.</param>
        <summary>
 Convert a symbol to an array of string parts, each of which has a kind. Useful for
 colorizing the display string.
 </summary>
        <returns>A list of display parts.</returns>
        <remarks>
 Parts are not localized until they are converted to strings.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToMinimalDisplayString">
      <MemberSignature Language="C#" Value="public static string ToMinimalDisplayString (Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.SymbolDisplayFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ToMinimalDisplayString(class Microsoft.CodeAnalysis.ISymbol symbol, class Microsoft.CodeAnalysis.SemanticModel semanticModel, int32 position, class Microsoft.CodeAnalysis.SymbolDisplayFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SymbolDisplay.ToMinimalDisplayString(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)" />
      <MemberSignature Language="F#" Value="static member ToMinimalDisplayString : Microsoft.CodeAnalysis.ISymbol * Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.SymbolDisplayFormat -&gt; string" Usage="Microsoft.CodeAnalysis.VisualBasic.SymbolDisplay.ToMinimalDisplayString (symbol, semanticModel, position, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.ISymbol" />
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="format" Type="Microsoft.CodeAnalysis.SymbolDisplayFormat" />
      </Parameters>
      <Docs>
        <param name="symbol">The symbol to be displayed.</param>
        <param name="semanticModel">Semantic information about the context in which the symbol is being displayed.</param>
        <param name="position">A position within the <see cref="T:Microsoft.CodeAnalysis.SyntaxTree" /> Or <paramref name="semanticModel" />.</param>
        <param name="format">The formatting options to apply.  If null is passed, <see cref="P:Microsoft.CodeAnalysis.SymbolDisplayFormat.CSharpErrorMessageFormat" /> will be used.</param>
        <summary>
 Displays a symbol in the Visual Basic style, based on a <see cref="T:Microsoft.CodeAnalysis.SymbolDisplayFormat" />.
 Based on the context, qualify type And member names as little as possible without
 introducing ambiguities.
 </summary>
        <returns>A formatted string that can be displayed to the user.</returns>
        <remarks>
 The return value is not expected to be syntactically valid Visual Basic.
 </remarks>
      </Docs>
    </Member>
  </Members>
</Type>