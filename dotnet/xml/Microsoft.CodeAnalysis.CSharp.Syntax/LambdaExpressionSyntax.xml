<Type Name="LambdaExpressionSyntax" FullName="Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax">
  <TypeSignature Language="C#" Value="public abstract class LambdaExpressionSyntax : Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit LambdaExpressionSyntax extends Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class LambdaExpressionSyntax&#xA;Inherits AnonymousFunctionExpressionSyntax" />
  <TypeSignature Language="F#" Value="type LambdaExpressionSyntax = class&#xA;    inherit AnonymousFunctionExpressionSyntax" />
  <TypeSignature Language="C++ CLI" Value="public ref class LambdaExpressionSyntax abstract : Microsoft::CodeAnalysis::CSharp::Syntax::AnonymousFunctionExpressionSyntax" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides the base class from which the classes that represent lambda expressions are derived.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ArrowToken">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxToken ArrowToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken ArrowToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax.ArrowToken" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ArrowToken As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.ArrowToken : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax.ArrowToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Microsoft::CodeAnalysis::SyntaxToken ArrowToken { Microsoft::CodeAnalysis::SyntaxToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>SyntaxToken representing equals greater than.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithArrowToken">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax WithArrowToken (Microsoft.CodeAnalysis.SyntaxToken arrowToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax WithArrowToken(valuetype Microsoft.CodeAnalysis.SyntaxToken arrowToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax.WithArrowToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithArrowToken (arrowToken As SyntaxToken) As LambdaExpressionSyntax" />
      <MemberSignature Language="F#" Value="member this.WithArrowToken : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax" Usage="lambdaExpressionSyntax.WithArrowToken arrowToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::LambdaExpressionSyntax ^ WithArrowToken(Microsoft::CodeAnalysis::SyntaxToken arrowToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrowToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="arrowToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAsyncKeyword">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax WithAsyncKeyword (Microsoft.CodeAnalysis.SyntaxToken asyncKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax WithAsyncKeyword(valuetype Microsoft.CodeAnalysis.SyntaxToken asyncKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax.WithAsyncKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithAsyncKeyword (asyncKeyword As SyntaxToken) As LambdaExpressionSyntax" />
      <MemberSignature Language="F#" Value="override this.WithAsyncKeyword : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax" Usage="lambdaExpressionSyntax.WithAsyncKeyword asyncKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::LambdaExpressionSyntax ^ WithAsyncKeyword(Microsoft::CodeAnalysis::SyntaxToken asyncKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="asyncKeyword">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithBody">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax WithBody (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax WithBody(class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax.WithBody(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithBody (body As CSharpSyntaxNode) As LambdaExpressionSyntax" />
      <MemberSignature Language="F#" Value="override this.WithBody : Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax" Usage="lambdaExpressionSyntax.WithBody body" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::LambdaExpressionSyntax ^ WithBody(Microsoft::CodeAnalysis::CSharp::CSharpSyntaxNode ^ body);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode" />
      </Parameters>
      <Docs>
        <param name="body">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>