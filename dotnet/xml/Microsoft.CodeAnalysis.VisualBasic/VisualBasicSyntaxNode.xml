<Type Name="VisualBasicSyntaxNode" FullName="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode">
  <TypeSignature Language="C#" Value="public abstract class VisualBasicSyntaxNode : Microsoft.CodeAnalysis.SyntaxNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VisualBasicSyntaxNode extends Microsoft.CodeAnalysis.SyntaxNode" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class VisualBasicSyntaxNode&#xA;Inherits SyntaxNode" />
  <TypeSignature Language="F#" Value="type VisualBasicSyntaxNode = class&#xA;    inherit SyntaxNode" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualBasicSyntaxNode abstract : Microsoft::CodeAnalysis::SyntaxNode" />
  <TypeSignature Language="C++ CX" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;public ref class VisualBasicSyntaxNode abstract : Microsoft::CodeAnalysis::SyntaxNode" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class VisualBasicSyntaxNode abstract : Microsoft::CodeAnalysis::SyntaxNode" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
 The base class for all nodes in the VB syntax tree.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public abstract void Accept (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void Accept(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Accept (visitor As VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="F#" Value="abstract member Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor -&gt; unit" Usage="visualBasicSyntaxNode.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value=" abstract void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract TResult Accept&lt;TResult&gt; (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt; visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance !!TResult Accept&lt;TResult&gt;(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor`1&lt;!!TResult&gt; visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.Accept``1(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor{``0})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Accept(Of TResult) (visitor As VisualBasicSyntaxVisitor(Of TResult)) As TResult" />
      <MemberSignature Language="F#" Value="abstract member Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;'Result&gt; -&gt; 'Result" Usage="visualBasicSyntaxNode.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; abstract TResult Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor&lt;TResult&gt; ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename TResult&gt;&#xA; abstract TResult Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor&lt;TResult&gt; const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializeFrom">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxNode DeserializeFrom (System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.SyntaxNode DeserializeFrom(class System.IO.Stream stream, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.DeserializeFrom(System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeFrom : System.IO.Stream * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.DeserializeFrom (stream, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Deserialize a syntax node from a byte stream.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindToken">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxToken FindToken (int position, bool findInsideTrivia = false);" />
      <MemberSignature Language="ILAsm" Value=".method public instance valuetype Microsoft.CodeAnalysis.SyntaxToken FindToken(int32 position, bool findInsideTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.FindToken(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindToken (position As Integer, Optional findInsideTrivia As Boolean = false) As SyntaxToken" />
      <MemberSignature Language="F#" Value="override this.FindToken : int * bool -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="visualBasicSyntaxNode.FindToken (position, findInsideTrivia)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="findInsideTrivia" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <param name="findInsideTrivia">To be added.</param>
        <summary>
 Finds a token according to the following rules:
 1)	If position matches the End of the node's Span, then its last token is returned. 
 
 2)	If node.FullSpan.Contains(position) then the token that contains given position is returned.
 
 3)	Otherwise an IndexOutOfRange is thrown
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindTrivia">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxTrivia FindTrivia (int textPosition, bool findInsideTrivia = false);" />
      <MemberSignature Language="ILAsm" Value=".method public instance valuetype Microsoft.CodeAnalysis.SyntaxTrivia FindTrivia(int32 textPosition, bool findInsideTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.FindTrivia(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindTrivia (textPosition As Integer, Optional findInsideTrivia As Boolean = false) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="override this.FindTrivia : int * bool -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="visualBasicSyntaxNode.FindTrivia (textPosition, findInsideTrivia)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textPosition" Type="System.Int32" />
        <Parameter Name="findInsideTrivia" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="textPosition">To be added.</param>
        <param name="findInsideTrivia">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDiagnostics">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Diagnostic&gt; GetDiagnostics ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.Diagnostic&gt; GetDiagnostics() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.GetDiagnostics" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDiagnostics () As IEnumerable(Of Diagnostic)" />
      <MemberSignature Language="F#" Value="override this.GetDiagnostics : unit -&gt; seq&lt;Microsoft.CodeAnalysis.Diagnostic&gt;" Usage="visualBasicSyntaxNode.GetDiagnostics " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::Diagnostic ^&gt; ^ GetDiagnostics();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Diagnostic&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Gets a list of all the diagnostics in the sub tree that has this node as its root.
 This method does not filter diagnostics based on compiler options like nowarn, warnaserror etc.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDirectives">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax&gt; GetDirectives (Func&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,bool&gt; filter = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.Generic.IList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax&gt; GetDirectives(class System.Func`2&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool&gt; filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.GetDirectives(System.Func{Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDirectives (Optional filter As Func(Of DirectiveTriviaSyntax, Boolean) = null) As IList(Of DirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="member this.GetDirectives : Func&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool&gt; -&gt; System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax&gt;" Usage="visualBasicSyntaxNode.GetDirectives filter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Func&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="filter">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFirstDirective">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax GetFirstDirective (Func&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,bool&gt; predicate = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax GetFirstDirective(class System.Func`2&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.GetFirstDirective(System.Func{Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstDirective (Optional predicate As Func(Of DirectiveTriviaSyntax, Boolean) = null) As DirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="member this.GetFirstDirective : Func&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax" Usage="visualBasicSyntaxNode.GetFirstDirective predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFirstToken">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxToken GetFirstToken (bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false);" />
      <MemberSignature Language="ILAsm" Value=".method public instance valuetype Microsoft.CodeAnalysis.SyntaxToken GetFirstToken(bool includeZeroWidth, bool includeSkipped, bool includeDirectives, bool includeDocumentationComments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.GetFirstToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstToken (Optional includeZeroWidth As Boolean = false, Optional includeSkipped As Boolean = false, Optional includeDirectives As Boolean = false, Optional includeDocumentationComments As Boolean = false) As SyntaxToken" />
      <MemberSignature Language="F#" Value="override this.GetFirstToken : bool * bool * bool * bool -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="visualBasicSyntaxNode.GetFirstToken (includeZeroWidth, includeSkipped, includeDirectives, includeDocumentationComments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeZeroWidth" Type="System.Boolean" />
        <Parameter Name="includeSkipped" Type="System.Boolean" />
        <Parameter Name="includeDirectives" Type="System.Boolean" />
        <Parameter Name="includeDocumentationComments" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includeZeroWidth">To be added.</param>
        <param name="includeSkipped">To be added.</param>
        <param name="includeDirectives">To be added.</param>
        <param name="includeDocumentationComments">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLastDirective">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax GetLastDirective (Func&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,bool&gt; predicate = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax GetLastDirective(class System.Func`2&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.GetLastDirective(System.Func{Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLastDirective (Optional predicate As Func(Of DirectiveTriviaSyntax, Boolean) = null) As DirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="member this.GetLastDirective : Func&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax" Usage="visualBasicSyntaxNode.GetLastDirective predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLastToken">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxToken GetLastToken (bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false);" />
      <MemberSignature Language="ILAsm" Value=".method public instance valuetype Microsoft.CodeAnalysis.SyntaxToken GetLastToken(bool includeZeroWidth, bool includeSkipped, bool includeDirectives, bool includeDocumentationComments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.GetLastToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLastToken (Optional includeZeroWidth As Boolean = false, Optional includeSkipped As Boolean = false, Optional includeDirectives As Boolean = false, Optional includeDocumentationComments As Boolean = false) As SyntaxToken" />
      <MemberSignature Language="F#" Value="override this.GetLastToken : bool * bool * bool * bool -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="visualBasicSyntaxNode.GetLastToken (includeZeroWidth, includeSkipped, includeDirectives, includeDocumentationComments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeZeroWidth" Type="System.Boolean" />
        <Parameter Name="includeSkipped" Type="System.Boolean" />
        <Parameter Name="includeDirectives" Type="System.Boolean" />
        <Parameter Name="includeDocumentationComments" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includeZeroWidth">To be added.</param>
        <param name="includeSkipped">To be added.</param>
        <param name="includeDirectives">To be added.</param>
        <param name="includeDocumentationComments">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLeadingTrivia">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxTriviaList GetLeadingTrivia ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance valuetype Microsoft.CodeAnalysis.SyntaxTriviaList GetLeadingTrivia() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.GetLeadingTrivia" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLeadingTrivia () As SyntaxTriviaList" />
      <MemberSignature Language="F#" Value="override this.GetLeadingTrivia : unit -&gt; Microsoft.CodeAnalysis.SyntaxTriviaList" Usage="visualBasicSyntaxNode.GetLeadingTrivia " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxTriviaList GetLeadingTrivia();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTriviaList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Get the preceding trivia nodes of this node. If this node is a token, returns the preceding trivia
 associated with this node. If this is a non-terminal, returns the preceding trivia of the first token
 of this node. 
 </summary>
        <returns>A list of the preceding trivia.</returns>
        <remarks>If this node is a non-terminal, the parents of the trivia will be the first token of this 
 non-terminal; NOT this node.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLocation">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Location GetLocation ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.Location GetLocation() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.GetLocation" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocation () As Location" />
      <MemberSignature Language="F#" Value="override this.GetLocation : unit -&gt; Microsoft.CodeAnalysis.Location" Usage="visualBasicSyntaxNode.GetLocation " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::Location ^ GetLocation();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::Location ^ GetLocation();" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::Location GetLocation();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Location</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Gets the location of this node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTrailingTrivia">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxTriviaList GetTrailingTrivia ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance valuetype Microsoft.CodeAnalysis.SyntaxTriviaList GetTrailingTrivia() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.GetTrailingTrivia" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTrailingTrivia () As SyntaxTriviaList" />
      <MemberSignature Language="F#" Value="override this.GetTrailingTrivia : unit -&gt; Microsoft.CodeAnalysis.SyntaxTriviaList" Usage="visualBasicSyntaxNode.GetTrailingTrivia " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxTriviaList GetTrailingTrivia();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTriviaList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Get the following trivia nodes of this node. If this node is a token, returns the following trivia
 associated with this node. If this is a non-terminal, returns the following trivia of the last token
 of this node. 
 </summary>
        <returns>A list of the following trivia.</returns>
        <remarks>If this node is a non-terminal, the parents of the trivia will be the first token of this 
 non-terminal; NOT this node.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertNodesInListCore">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.SyntaxNode InsertNodesInListCore (Microsoft.CodeAnalysis.SyntaxNode nodeInList, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; nodesToInsert, bool insertBefore);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.SyntaxNode InsertNodesInListCore(class Microsoft.CodeAnalysis.SyntaxNode nodeInList, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; nodesToInsert, bool insertBefore) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.InsertNodesInListCore(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function InsertNodesInListCore (nodeInList As SyntaxNode, nodesToInsert As IEnumerable(Of SyntaxNode), insertBefore As Boolean) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.InsertNodesInListCore : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * bool -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="visualBasicSyntaxNode.InsertNodesInListCore (nodeInList, nodesToInsert, insertBefore)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::SyntaxNode ^ InsertNodesInListCore(Microsoft::CodeAnalysis::SyntaxNode ^ nodeInList, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ nodesToInsert, bool insertBefore);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeInList" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="nodesToInsert" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="insertBefore" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nodeInList">To be added.</param>
        <param name="nodesToInsert">To be added.</param>
        <param name="insertBefore">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertTokensInListCore">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.SyntaxNode InsertTokensInListCore (Microsoft.CodeAnalysis.SyntaxToken originalToken, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; newTokens, bool insertBefore);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.SyntaxNode InsertTokensInListCore(valuetype Microsoft.CodeAnalysis.SyntaxToken originalToken, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; newTokens, bool insertBefore) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.InsertTokensInListCore(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function InsertTokensInListCore (originalToken As SyntaxToken, newTokens As IEnumerable(Of SyntaxToken), insertBefore As Boolean) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.InsertTokensInListCore : Microsoft.CodeAnalysis.SyntaxToken * seq&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; * bool -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="visualBasicSyntaxNode.InsertTokensInListCore (originalToken, newTokens, insertBefore)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::SyntaxNode ^ InsertTokensInListCore(Microsoft::CodeAnalysis::SyntaxToken originalToken, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxToken&gt; ^ newTokens, bool insertBefore);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="newTokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;" />
        <Parameter Name="insertBefore" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="originalToken">To be added.</param>
        <param name="newTokens">To be added.</param>
        <param name="insertBefore">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertTriviaInListCore">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.SyntaxNode InsertTriviaInListCore (Microsoft.CodeAnalysis.SyntaxTrivia originalTrivia, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; newTrivia, bool insertBefore);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.SyntaxNode InsertTriviaInListCore(valuetype Microsoft.CodeAnalysis.SyntaxTrivia originalTrivia, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; newTrivia, bool insertBefore) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.InsertTriviaInListCore(Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function InsertTriviaInListCore (originalTrivia As SyntaxTrivia, newTrivia As IEnumerable(Of SyntaxTrivia), insertBefore As Boolean) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.InsertTriviaInListCore : Microsoft.CodeAnalysis.SyntaxTrivia * seq&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; * bool -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="visualBasicSyntaxNode.InsertTriviaInListCore (originalTrivia, newTrivia, insertBefore)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::SyntaxNode ^ InsertTriviaInListCore(Microsoft::CodeAnalysis::SyntaxTrivia originalTrivia, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxTrivia&gt; ^ newTrivia, bool insertBefore);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalTrivia" Type="Microsoft.CodeAnalysis.SyntaxTrivia" />
        <Parameter Name="newTrivia" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
        <Parameter Name="insertBefore" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="originalTrivia">To be added.</param>
        <param name="newTrivia">To be added.</param>
        <param name="insertBefore">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirective">
      <MemberSignature Language="C#" Value="public bool IsDirective { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirective" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.IsDirective" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirective As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsDirective : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.IsDirective" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirective { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsDirective { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Returns True if this node represents a directive.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentToCore">
      <MemberSignature Language="C#" Value="protected override bool IsEquivalentToCore (Microsoft.CodeAnalysis.SyntaxNode node, bool topLevel = false);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsEquivalentToCore(class Microsoft.CodeAnalysis.SyntaxNode node, bool topLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.IsEquivalentToCore(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsEquivalentToCore (node As SyntaxNode, Optional topLevel As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentToCore : Microsoft.CodeAnalysis.SyntaxNode * bool -&gt; bool" Usage="visualBasicSyntaxNode.IsEquivalentToCore (node, topLevel)" />
      <MemberSignature Language="C++ WINRT" Value=" override bool IsEquivalentToCore(Microsoft::CodeAnalysis::SyntaxNode const &amp; node, bool topLevel = false);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="topLevel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <param name="topLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.SyntaxKind Kind ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind Kind() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.Kind" />
      <MemberSignature Language="VB.NET" Value="Public Function Kind () As SyntaxKind" />
      <MemberSignature Language="F#" Value="member this.Kind : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" Usage="visualBasicSyntaxNode.Kind " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::SyntaxKind Kind();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::SyntaxKind Kind();" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::VisualBasic::SyntaxKind Kind();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Returns the <see cref="T:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" /> of the node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public override string Language { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.Language" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Language As String" />
      <MemberSignature Language="F#" Value="member this.Language : string" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.Language" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Language { System::String ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property Platform::String ^ Language { Platform::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The language name this node is syntax of.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalizeWhitespaceCore">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.SyntaxNode NormalizeWhitespaceCore (string indentation, string eol, bool elasticTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.SyntaxNode NormalizeWhitespaceCore(string indentation, string eol, bool elasticTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.NormalizeWhitespaceCore(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function NormalizeWhitespaceCore (indentation As String, eol As String, elasticTrivia As Boolean) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.NormalizeWhitespaceCore : string * string * bool -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="visualBasicSyntaxNode.NormalizeWhitespaceCore (indentation, eol, elasticTrivia)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::SyntaxNode ^ NormalizeWhitespaceCore(System::String ^ indentation, System::String ^ eol, bool elasticTrivia);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; override Microsoft::CodeAnalysis::SyntaxNode ^ NormalizeWhitespaceCore(Platform::String ^ indentation, Platform::String ^ eol, bool elasticTrivia);" />
      <MemberSignature Language="C++ WINRT" Value=" override Microsoft::CodeAnalysis::SyntaxNode NormalizeWhitespaceCore(std::wstring const &amp; indentation, std::wstring const &amp; eol, bool elasticTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indentation" Type="System.String" />
        <Parameter Name="eol" Type="System.String" />
        <Parameter Name="elasticTrivia" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="indentation">To be added.</param>
        <param name="eol">To be added.</param>
        <param name="elasticTrivia">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveNodesCore">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.SyntaxNode RemoveNodesCore (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; nodes, Microsoft.CodeAnalysis.SyntaxRemoveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.SyntaxNode RemoveNodesCore(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; nodes, valuetype Microsoft.CodeAnalysis.SyntaxRemoveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.RemoveNodesCore(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxRemoveOptions)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function RemoveNodesCore (nodes As IEnumerable(Of SyntaxNode), options As SyntaxRemoveOptions) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.RemoveNodesCore : seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * Microsoft.CodeAnalysis.SyntaxRemoveOptions -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="visualBasicSyntaxNode.RemoveNodesCore (nodes, options)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::SyntaxNode ^ RemoveNodesCore(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ nodes, Microsoft::CodeAnalysis::SyntaxRemoveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.SyntaxRemoveOptions" />
      </Parameters>
      <Docs>
        <param name="nodes">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceCore&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.SyntaxNode ReplaceCore&lt;TNode&gt; (System.Collections.Generic.IEnumerable&lt;TNode&gt; nodes = null, Func&lt;TNode,TNode,Microsoft.CodeAnalysis.SyntaxNode&gt; computeReplacementNode = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; tokens = null, Func&lt;Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken&gt; computeReplacementToken = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; trivia = null, Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia&gt; computeReplacementTrivia = null) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.SyntaxNode ReplaceCore&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TNode&gt; nodes, class System.Func`3&lt;!!TNode, !!TNode, class Microsoft.CodeAnalysis.SyntaxNode&gt; computeReplacementNode, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; tokens, class System.Func`3&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken, valuetype Microsoft.CodeAnalysis.SyntaxToken, valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; computeReplacementToken, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; trivia, class System.Func`3&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia, valuetype Microsoft.CodeAnalysis.SyntaxTrivia, valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; computeReplacementTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.ReplaceCore``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ReplaceCore(Of TNode As SyntaxNode) (Optional nodes As IEnumerable(Of TNode) = null, Optional computeReplacementNode As Func(Of TNode, TNode, SyntaxNode) = null, Optional tokens As IEnumerable(Of SyntaxToken) = null, Optional computeReplacementToken As Func(Of SyntaxToken, SyntaxToken, SyntaxToken) = null, Optional trivia As IEnumerable(Of SyntaxTrivia) = null, Optional computeReplacementTrivia As Func(Of SyntaxTrivia, SyntaxTrivia, SyntaxTrivia) = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.ReplaceCore : seq&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * Func&lt;'Node, 'Node, Microsoft.CodeAnalysis.SyntaxNode (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode and 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; * Func&lt;Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; * Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="visualBasicSyntaxNode.ReplaceCore (nodes, computeReplacementNode, tokens, computeReplacementToken, trivia, computeReplacementTrivia)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;TNode&gt;" />
        <Parameter Name="computeReplacementNode" Type="System.Func&lt;TNode,TNode,Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="tokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;" />
        <Parameter Name="computeReplacementToken" Type="System.Func&lt;Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken&gt;" />
        <Parameter Name="trivia" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
        <Parameter Name="computeReplacementTrivia" Type="System.Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="nodes">To be added.</param>
        <param name="computeReplacementNode">To be added.</param>
        <param name="tokens">To be added.</param>
        <param name="computeReplacementToken">To be added.</param>
        <param name="trivia">To be added.</param>
        <param name="computeReplacementTrivia">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceNodeInListCore">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.SyntaxNode ReplaceNodeInListCore (Microsoft.CodeAnalysis.SyntaxNode originalNode, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; replacementNodes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.SyntaxNode ReplaceNodeInListCore(class Microsoft.CodeAnalysis.SyntaxNode originalNode, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; replacementNodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.ReplaceNodeInListCore(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ReplaceNodeInListCore (originalNode As SyntaxNode, replacementNodes As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.ReplaceNodeInListCore : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="visualBasicSyntaxNode.ReplaceNodeInListCore (originalNode, replacementNodes)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::SyntaxNode ^ ReplaceNodeInListCore(Microsoft::CodeAnalysis::SyntaxNode ^ originalNode, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ replacementNodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalNode" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="replacementNodes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="originalNode">To be added.</param>
        <param name="replacementNodes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceTokenInListCore">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.SyntaxNode ReplaceTokenInListCore (Microsoft.CodeAnalysis.SyntaxToken originalToken, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; newTokens);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.SyntaxNode ReplaceTokenInListCore(valuetype Microsoft.CodeAnalysis.SyntaxToken originalToken, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; newTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.ReplaceTokenInListCore(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ReplaceTokenInListCore (originalToken As SyntaxToken, newTokens As IEnumerable(Of SyntaxToken)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.ReplaceTokenInListCore : Microsoft.CodeAnalysis.SyntaxToken * seq&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="visualBasicSyntaxNode.ReplaceTokenInListCore (originalToken, newTokens)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::SyntaxNode ^ ReplaceTokenInListCore(Microsoft::CodeAnalysis::SyntaxToken originalToken, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxToken&gt; ^ newTokens);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="newTokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;" />
      </Parameters>
      <Docs>
        <param name="originalToken">To be added.</param>
        <param name="newTokens">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceTriviaInListCore">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.SyntaxNode ReplaceTriviaInListCore (Microsoft.CodeAnalysis.SyntaxTrivia originalTrivia, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; newTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.SyntaxNode ReplaceTriviaInListCore(valuetype Microsoft.CodeAnalysis.SyntaxTrivia originalTrivia, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; newTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.ReplaceTriviaInListCore(Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ReplaceTriviaInListCore (originalTrivia As SyntaxTrivia, newTrivia As IEnumerable(Of SyntaxTrivia)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.ReplaceTriviaInListCore : Microsoft.CodeAnalysis.SyntaxTrivia * seq&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="visualBasicSyntaxNode.ReplaceTriviaInListCore (originalTrivia, newTrivia)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::SyntaxNode ^ ReplaceTriviaInListCore(Microsoft::CodeAnalysis::SyntaxTrivia originalTrivia, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxTrivia&gt; ^ newTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalTrivia" Type="Microsoft.CodeAnalysis.SyntaxTrivia" />
        <Parameter Name="newTrivia" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
      </Parameters>
      <Docs>
        <param name="originalTrivia">To be added.</param>
        <param name="newTrivia">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpanStart">
      <MemberSignature Language="C#" Value="public int SpanStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SpanStart" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.SpanStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SpanStart As Integer" />
      <MemberSignature Language="F#" Value="member this.SpanStart : int" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.SpanStart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SpanStart { int get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property int SpanStart { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Same as accessing <see cref="P:Microsoft.CodeAnalysis.Text.TextSpan.Start" /> on <see cref="P:Microsoft.CodeAnalysis.SyntaxNode.Span" />.
 </summary>
        <value>To be added.</value>
        <remarks>
 Slight performance improvement.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyntaxTreeCore">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.SyntaxTree SyntaxTreeCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.SyntaxTree SyntaxTreeCore" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.SyntaxTreeCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property SyntaxTreeCore As SyntaxTree" />
      <MemberSignature Language="F#" Value="member this.SyntaxTreeCore : Microsoft.CodeAnalysis.SyntaxTree" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode.SyntaxTreeCore" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Microsoft::CodeAnalysis::SyntaxTree ^ SyntaxTreeCore { Microsoft::CodeAnalysis::SyntaxTree ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual property Microsoft::CodeAnalysis::SyntaxTree ^ SyntaxTreeCore { Microsoft::CodeAnalysis::SyntaxTree ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTree</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>