<Type Name="IIncrementOrDecrementOperation" FullName="Microsoft.CodeAnalysis.Operations.IIncrementOrDecrementOperation">
  <TypeSignature Language="C#" Value="public interface IIncrementOrDecrementOperation : Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IIncrementOrDecrementOperation implements class Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Operations.IIncrementOrDecrementOperation" />
  <TypeSignature Language="VB.NET" Value="Public Interface IIncrementOrDecrementOperation&#xA;Implements IOperation" />
  <TypeSignature Language="F#" Value="type IIncrementOrDecrementOperation = interface&#xA;    interface IOperation" />
  <TypeSignature Language="C++ CLI" Value="public interface class IIncrementOrDecrementOperation : Microsoft::CodeAnalysis::IOperation" />
  <TypeSignature Language="C++ CX" Value="public interface class IIncrementOrDecrementOperation : Microsoft::CodeAnalysis::IOperation" />
  <TypeSignature Language="C++ WINRT" Value="__interface IIncrementOrDecrementOperation : Microsoft::CodeAnalysis::IOperation" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.CodeAnalysis.IOperation</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents an <see cref="F:Microsoft.CodeAnalysis.OperationKind.Increment" /> or <see cref="F:Microsoft.CodeAnalysis.OperationKind.Decrement" /> operation.
            Note that this operation is different from an <see cref="T:Microsoft.CodeAnalysis.Operations.IUnaryOperation" /> as it mutates the <see cref="P:Microsoft.CodeAnalysis.Operations.IIncrementOrDecrementOperation.Target" />,
            while unary operator expression does not mutate it's operand.
            <para>
            Current usage:
             (1) C# increment expression or decrement expression.
            </para></summary>
    <remarks>
            This interface is reserved for implementation by its associated APIs. We reserve the right to
            change it in the future.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsChecked">
      <MemberSignature Language="C#" Value="public bool IsChecked { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsChecked" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IIncrementOrDecrementOperation.IsChecked" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsChecked As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsChecked : bool" Usage="Microsoft.CodeAnalysis.Operations.IIncrementOrDecrementOperation.IsChecked" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsChecked { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsChecked { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> if overflow checking is performed for the arithmetic operation.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLifted">
      <MemberSignature Language="C#" Value="public bool IsLifted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLifted" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IIncrementOrDecrementOperation.IsLifted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLifted As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsLifted : bool" Usage="Microsoft.CodeAnalysis.Operations.IIncrementOrDecrementOperation.IsLifted" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLifted { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsLifted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> if this is a 'lifted' increment operator.  When there is an 
            operator that is defined to work on a value type, 'lifted' operators are 
            created to work on the <see cref="T:System.Nullable`1" /> versions of those
            value types.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPostfix">
      <MemberSignature Language="C#" Value="public bool IsPostfix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPostfix" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IIncrementOrDecrementOperation.IsPostfix" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPostfix As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsPostfix : bool" Usage="Microsoft.CodeAnalysis.Operations.IIncrementOrDecrementOperation.IsPostfix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPostfix { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsPostfix { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> if this is a postfix expression.
            <see langword="false" /> if this is a prefix expression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperatorMethod">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IMethodSymbol OperatorMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IMethodSymbol OperatorMethod" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IIncrementOrDecrementOperation.OperatorMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OperatorMethod As IMethodSymbol" />
      <MemberSignature Language="F#" Value="member this.OperatorMethod : Microsoft.CodeAnalysis.IMethodSymbol" Usage="Microsoft.CodeAnalysis.Operations.IIncrementOrDecrementOperation.OperatorMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::IMethodSymbol ^ OperatorMethod { Microsoft::CodeAnalysis::IMethodSymbol ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IMethodSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Operator method used by the operation, null if the operation does not use an operator method.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IOperation Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IOperation Target" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IIncrementOrDecrementOperation.Target" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Target As IOperation" />
      <MemberSignature Language="F#" Value="member this.Target : Microsoft.CodeAnalysis.IOperation" Usage="Microsoft.CodeAnalysis.Operations.IIncrementOrDecrementOperation.Target" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ Target { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ Target { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Target of the assignment.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>