<Type Name="VisualBasicCompilation" FullName="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation">
  <TypeSignature Language="C#" Value="public sealed class VisualBasicCompilation : Microsoft.CodeAnalysis.Compilation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit VisualBasicCompilation extends Microsoft.CodeAnalysis.Compilation" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class VisualBasicCompilation&#xA;Inherits Compilation" />
  <TypeSignature Language="F#" Value="type VisualBasicCompilation = class&#xA;    inherit Compilation" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.Compilation</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
 The Compilation object is an immutable representation of a single invocation of the
 compiler. Although immutable, a Compilation is also on-demand, in that a compilation can be
 created quickly, but will that compiler parts or all of the code in order to respond to
 method or properties. Also, a compilation can produce a new compilation with a small change
 from the current compilation. This is, in many cases, more efficient than creating a new
 compilation from scratch, as the new compilation can share information from the old
 compilation.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddReferences">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation AddReferences (params Microsoft.CodeAnalysis.MetadataReference[] references);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation AddReferences(class Microsoft.CodeAnalysis.MetadataReference[] references) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.AddReferences(Microsoft.CodeAnalysis.MetadataReference[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddReferences (ParamArray references As MetadataReference()) As VisualBasicCompilation" />
      <MemberSignature Language="F#" Value="override this.AddReferences : Microsoft.CodeAnalysis.MetadataReference[] -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" Usage="visualBasicCompilation.AddReferences references" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="references" Type="Microsoft.CodeAnalysis.MetadataReference[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="references">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddReferences">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation AddReferences (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.MetadataReference&gt; references);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation AddReferences(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.MetadataReference&gt; references) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.AddReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddReferences (references As IEnumerable(Of MetadataReference)) As VisualBasicCompilation" />
      <MemberSignature Language="F#" Value="override this.AddReferences : seq&lt;Microsoft.CodeAnalysis.MetadataReference&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" Usage="visualBasicCompilation.AddReferences references" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="references" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.MetadataReference&gt;" />
      </Parameters>
      <Docs>
        <param name="references">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSyntaxTrees">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation AddSyntaxTrees (params Microsoft.CodeAnalysis.SyntaxTree[] trees);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation AddSyntaxTrees(class Microsoft.CodeAnalysis.SyntaxTree[] trees) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.AddSyntaxTrees(Microsoft.CodeAnalysis.SyntaxTree[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSyntaxTrees (ParamArray trees As SyntaxTree()) As VisualBasicCompilation" />
      <MemberSignature Language="F#" Value="override this.AddSyntaxTrees : Microsoft.CodeAnalysis.SyntaxTree[] -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" Usage="visualBasicCompilation.AddSyntaxTrees trees" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trees" Type="Microsoft.CodeAnalysis.SyntaxTree[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trees">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSyntaxTrees">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation AddSyntaxTrees (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTree&gt; trees);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation AddSyntaxTrees(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxTree&gt; trees) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.AddSyntaxTrees(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSyntaxTrees (trees As IEnumerable(Of SyntaxTree)) As VisualBasicCompilation" />
      <MemberSignature Language="F#" Value="override this.AddSyntaxTrees : seq&lt;Microsoft.CodeAnalysis.SyntaxTree&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" Usage="visualBasicCompilation.AddSyntaxTrees trees" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trees" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTree&gt;" />
      </Parameters>
      <Docs>
        <param name="trees">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendDefaultVersionResource">
      <MemberSignature Language="C#" Value="protected override void AppendDefaultVersionResource (System.IO.Stream resourceStream);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AppendDefaultVersionResource(class System.IO.Stream resourceStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.AppendDefaultVersionResource(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AppendDefaultVersionResource (resourceStream As Stream)" />
      <MemberSignature Language="F#" Value="override this.AppendDefaultVersionResource : System.IO.Stream -&gt; unit" Usage="visualBasicCompilation.AppendDefaultVersionResource resourceStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="resourceStream">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassifyConversion">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Conversion ClassifyConversion (Microsoft.CodeAnalysis.ITypeSymbol source, Microsoft.CodeAnalysis.ITypeSymbol destination);" />
      <MemberSignature Language="ILAsm" Value=".method public instance valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion ClassifyConversion(class Microsoft.CodeAnalysis.ITypeSymbol source, class Microsoft.CodeAnalysis.ITypeSymbol destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.ClassifyConversion(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.ITypeSymbol)" />
      <MemberSignature Language="VB.NET" Value="Public Function ClassifyConversion (source As ITypeSymbol, destination As ITypeSymbol) As Conversion" />
      <MemberSignature Language="F#" Value="member this.ClassifyConversion : Microsoft.CodeAnalysis.ITypeSymbol * Microsoft.CodeAnalysis.ITypeSymbol -&gt; Microsoft.CodeAnalysis.VisualBasic.Conversion" Usage="visualBasicCompilation.ClassifyConversion (source, destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Conversion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
        <Parameter Name="destination" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="destination">To be added.</param>
        <summary>
 Determine what kind of conversion, if any, there is between the types 
 "source" and "destination".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As VisualBasicCompilation" />
      <MemberSignature Language="F#" Value="override this.Clone : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" Usage="visualBasicCompilation.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Create a duplicate of this compilation with different symbol instances
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonAddSyntaxTrees">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.Compilation CommonAddSyntaxTrees (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTree&gt; trees);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.Compilation CommonAddSyntaxTrees(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxTree&gt; trees) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonAddSyntaxTrees(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonAddSyntaxTrees (trees As IEnumerable(Of SyntaxTree)) As Compilation" />
      <MemberSignature Language="F#" Value="override this.CommonAddSyntaxTrees : seq&lt;Microsoft.CodeAnalysis.SyntaxTree&gt; -&gt; Microsoft.CodeAnalysis.Compilation" Usage="visualBasicCompilation.CommonAddSyntaxTrees trees" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Compilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trees" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTree&gt;" />
      </Parameters>
      <Docs>
        <param name="trees">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonAssembly">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.IAssemblySymbol CommonAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IAssemblySymbol CommonAssembly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonAssembly" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CommonAssembly As IAssemblySymbol" />
      <MemberSignature Language="F#" Value="member this.CommonAssembly : Microsoft.CodeAnalysis.IAssemblySymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IAssemblySymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonClone">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.Compilation CommonClone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.Compilation CommonClone() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonClone" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonClone () As Compilation" />
      <MemberSignature Language="F#" Value="override this.CommonClone : unit -&gt; Microsoft.CodeAnalysis.Compilation" Usage="visualBasicCompilation.CommonClone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Compilation</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonContainsSyntaxTree">
      <MemberSignature Language="C#" Value="protected override bool CommonContainsSyntaxTree (Microsoft.CodeAnalysis.SyntaxTree syntaxTree);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool CommonContainsSyntaxTree(class Microsoft.CodeAnalysis.SyntaxTree syntaxTree) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonContainsSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree)" />
      <MemberSignature Language="F#" Value="override this.CommonContainsSyntaxTree : Microsoft.CodeAnalysis.SyntaxTree -&gt; bool" Usage="visualBasicCompilation.CommonContainsSyntaxTree syntaxTree" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syntaxTree" Type="Microsoft.CodeAnalysis.SyntaxTree" />
      </Parameters>
      <Docs>
        <param name="syntaxTree">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonCreateAnonymousTypeSymbol">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.INamedTypeSymbol CommonCreateAnonymousTypeSymbol (System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ITypeSymbol&gt; memberTypes, System.Collections.Immutable.ImmutableArray&lt;string&gt; memberNames, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Location&gt; memberLocations, System.Collections.Immutable.ImmutableArray&lt;bool&gt; memberIsReadOnly);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.INamedTypeSymbol CommonCreateAnonymousTypeSymbol(valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.ITypeSymbol&gt; memberTypes, valuetype System.Collections.Immutable.ImmutableArray`1&lt;string&gt; memberNames, valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.Location&gt; memberLocations, valuetype System.Collections.Immutable.ImmutableArray`1&lt;bool&gt; memberIsReadOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonCreateAnonymousTypeSymbol(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeSymbol},System.Collections.Immutable.ImmutableArray{System.String},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Location},System.Collections.Immutable.ImmutableArray{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonCreateAnonymousTypeSymbol (memberTypes As ImmutableArray(Of ITypeSymbol), memberNames As ImmutableArray(Of String), memberLocations As ImmutableArray(Of Location), memberIsReadOnly As ImmutableArray(Of Boolean)) As INamedTypeSymbol" />
      <MemberSignature Language="F#" Value="override this.CommonCreateAnonymousTypeSymbol : System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ITypeSymbol&gt; * System.Collections.Immutable.ImmutableArray&lt;string&gt; * System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Location&gt; * System.Collections.Immutable.ImmutableArray&lt;bool&gt; -&gt; Microsoft.CodeAnalysis.INamedTypeSymbol" Usage="visualBasicCompilation.CommonCreateAnonymousTypeSymbol (memberTypes, memberNames, memberLocations, memberIsReadOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamedTypeSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberTypes" Type="System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ITypeSymbol&gt;" />
        <Parameter Name="memberNames" Type="System.Collections.Immutable.ImmutableArray&lt;System.String&gt;" />
        <Parameter Name="memberLocations" Type="System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Location&gt;" />
        <Parameter Name="memberIsReadOnly" Type="System.Collections.Immutable.ImmutableArray&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="memberTypes">To be added.</param>
        <param name="memberNames">To be added.</param>
        <param name="memberLocations">To be added.</param>
        <param name="memberIsReadOnly">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonCreateArrayTypeSymbol">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.IArrayTypeSymbol CommonCreateArrayTypeSymbol (Microsoft.CodeAnalysis.ITypeSymbol elementType, int rank);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.IArrayTypeSymbol CommonCreateArrayTypeSymbol(class Microsoft.CodeAnalysis.ITypeSymbol elementType, int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonCreateArrayTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonCreateArrayTypeSymbol (elementType As ITypeSymbol, rank As Integer) As IArrayTypeSymbol" />
      <MemberSignature Language="F#" Value="override this.CommonCreateArrayTypeSymbol : Microsoft.CodeAnalysis.ITypeSymbol * int -&gt; Microsoft.CodeAnalysis.IArrayTypeSymbol" Usage="visualBasicCompilation.CommonCreateArrayTypeSymbol (elementType, rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IArrayTypeSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="elementType">To be added.</param>
        <param name="rank">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonCreateErrorNamespaceSymbol">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.INamespaceSymbol CommonCreateErrorNamespaceSymbol (Microsoft.CodeAnalysis.INamespaceSymbol container, string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.INamespaceSymbol CommonCreateErrorNamespaceSymbol(class Microsoft.CodeAnalysis.INamespaceSymbol container, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonCreateErrorNamespaceSymbol(Microsoft.CodeAnalysis.INamespaceSymbol,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonCreateErrorNamespaceSymbol (container As INamespaceSymbol, name As String) As INamespaceSymbol" />
      <MemberSignature Language="F#" Value="override this.CommonCreateErrorNamespaceSymbol : Microsoft.CodeAnalysis.INamespaceSymbol * string -&gt; Microsoft.CodeAnalysis.INamespaceSymbol" Usage="visualBasicCompilation.CommonCreateErrorNamespaceSymbol (container, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamespaceSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="Microsoft.CodeAnalysis.INamespaceSymbol" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonCreateErrorTypeSymbol">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.INamedTypeSymbol CommonCreateErrorTypeSymbol (Microsoft.CodeAnalysis.INamespaceOrTypeSymbol container, string name, int arity);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.INamedTypeSymbol CommonCreateErrorTypeSymbol(class Microsoft.CodeAnalysis.INamespaceOrTypeSymbol container, string name, int32 arity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonCreateErrorTypeSymbol(Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonCreateErrorTypeSymbol (container As INamespaceOrTypeSymbol, name As String, arity As Integer) As INamedTypeSymbol" />
      <MemberSignature Language="F#" Value="override this.CommonCreateErrorTypeSymbol : Microsoft.CodeAnalysis.INamespaceOrTypeSymbol * string * int -&gt; Microsoft.CodeAnalysis.INamedTypeSymbol" Usage="visualBasicCompilation.CommonCreateErrorTypeSymbol (container, name, arity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamedTypeSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="Microsoft.CodeAnalysis.INamespaceOrTypeSymbol" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="arity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <param name="name">To be added.</param>
        <param name="arity">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonCreatePointerTypeSymbol">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.IPointerTypeSymbol CommonCreatePointerTypeSymbol (Microsoft.CodeAnalysis.ITypeSymbol elementType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.IPointerTypeSymbol CommonCreatePointerTypeSymbol(class Microsoft.CodeAnalysis.ITypeSymbol elementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonCreatePointerTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonCreatePointerTypeSymbol (elementType As ITypeSymbol) As IPointerTypeSymbol" />
      <MemberSignature Language="F#" Value="override this.CommonCreatePointerTypeSymbol : Microsoft.CodeAnalysis.ITypeSymbol -&gt; Microsoft.CodeAnalysis.IPointerTypeSymbol" Usage="visualBasicCompilation.CommonCreatePointerTypeSymbol elementType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IPointerTypeSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
      </Parameters>
      <Docs>
        <param name="elementType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonCreateTupleTypeSymbol">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.INamedTypeSymbol CommonCreateTupleTypeSymbol (Microsoft.CodeAnalysis.INamedTypeSymbol underlyingType, System.Collections.Immutable.ImmutableArray&lt;string&gt; elementNames, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Location&gt; elementLocations);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.INamedTypeSymbol CommonCreateTupleTypeSymbol(class Microsoft.CodeAnalysis.INamedTypeSymbol underlyingType, valuetype System.Collections.Immutable.ImmutableArray`1&lt;string&gt; elementNames, valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.Location&gt; elementLocations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonCreateTupleTypeSymbol(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Collections.Immutable.ImmutableArray{System.String},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Location})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonCreateTupleTypeSymbol (underlyingType As INamedTypeSymbol, elementNames As ImmutableArray(Of String), elementLocations As ImmutableArray(Of Location)) As INamedTypeSymbol" />
      <MemberSignature Language="F#" Value="override this.CommonCreateTupleTypeSymbol : Microsoft.CodeAnalysis.INamedTypeSymbol * System.Collections.Immutable.ImmutableArray&lt;string&gt; * System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Location&gt; -&gt; Microsoft.CodeAnalysis.INamedTypeSymbol" Usage="visualBasicCompilation.CommonCreateTupleTypeSymbol (underlyingType, elementNames, elementLocations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamedTypeSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="underlyingType" Type="Microsoft.CodeAnalysis.INamedTypeSymbol" />
        <Parameter Name="elementNames" Type="System.Collections.Immutable.ImmutableArray&lt;System.String&gt;" />
        <Parameter Name="elementLocations" Type="System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Location&gt;" />
      </Parameters>
      <Docs>
        <param name="underlyingType">To be added.</param>
        <param name="elementNames">To be added.</param>
        <param name="elementLocations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonCreateTupleTypeSymbol">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.INamedTypeSymbol CommonCreateTupleTypeSymbol (System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ITypeSymbol&gt; elementTypes, System.Collections.Immutable.ImmutableArray&lt;string&gt; elementNames, System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Location&gt; elementLocations);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.INamedTypeSymbol CommonCreateTupleTypeSymbol(valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.ITypeSymbol&gt; elementTypes, valuetype System.Collections.Immutable.ImmutableArray`1&lt;string&gt; elementNames, valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.Location&gt; elementLocations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonCreateTupleTypeSymbol(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeSymbol},System.Collections.Immutable.ImmutableArray{System.String},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Location})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonCreateTupleTypeSymbol (elementTypes As ImmutableArray(Of ITypeSymbol), elementNames As ImmutableArray(Of String), elementLocations As ImmutableArray(Of Location)) As INamedTypeSymbol" />
      <MemberSignature Language="F#" Value="override this.CommonCreateTupleTypeSymbol : System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ITypeSymbol&gt; * System.Collections.Immutable.ImmutableArray&lt;string&gt; * System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Location&gt; -&gt; Microsoft.CodeAnalysis.INamedTypeSymbol" Usage="visualBasicCompilation.CommonCreateTupleTypeSymbol (elementTypes, elementNames, elementLocations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamedTypeSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementTypes" Type="System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ITypeSymbol&gt;" />
        <Parameter Name="elementNames" Type="System.Collections.Immutable.ImmutableArray&lt;System.String&gt;" />
        <Parameter Name="elementLocations" Type="System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Location&gt;" />
      </Parameters>
      <Docs>
        <param name="elementTypes">To be added.</param>
        <param name="elementNames">To be added.</param>
        <param name="elementLocations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonDynamicType">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.ITypeSymbol CommonDynamicType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.ITypeSymbol CommonDynamicType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonDynamicType" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CommonDynamicType As ITypeSymbol" />
      <MemberSignature Language="F#" Value="member this.CommonDynamicType : Microsoft.CodeAnalysis.ITypeSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonDynamicType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ITypeSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonGetAssemblyOrModuleSymbol">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.ISymbol CommonGetAssemblyOrModuleSymbol (Microsoft.CodeAnalysis.MetadataReference reference);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.ISymbol CommonGetAssemblyOrModuleSymbol(class Microsoft.CodeAnalysis.MetadataReference reference) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonGetAssemblyOrModuleSymbol(Microsoft.CodeAnalysis.MetadataReference)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonGetAssemblyOrModuleSymbol (reference As MetadataReference) As ISymbol" />
      <MemberSignature Language="F#" Value="override this.CommonGetAssemblyOrModuleSymbol : Microsoft.CodeAnalysis.MetadataReference -&gt; Microsoft.CodeAnalysis.ISymbol" Usage="visualBasicCompilation.CommonGetAssemblyOrModuleSymbol reference" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ISymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reference" Type="Microsoft.CodeAnalysis.MetadataReference" />
      </Parameters>
      <Docs>
        <param name="reference">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonGetCompilationNamespace">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.INamespaceSymbol CommonGetCompilationNamespace (Microsoft.CodeAnalysis.INamespaceSymbol namespaceSymbol);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.INamespaceSymbol CommonGetCompilationNamespace(class Microsoft.CodeAnalysis.INamespaceSymbol namespaceSymbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonGetCompilationNamespace(Microsoft.CodeAnalysis.INamespaceSymbol)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonGetCompilationNamespace (namespaceSymbol As INamespaceSymbol) As INamespaceSymbol" />
      <MemberSignature Language="F#" Value="override this.CommonGetCompilationNamespace : Microsoft.CodeAnalysis.INamespaceSymbol -&gt; Microsoft.CodeAnalysis.INamespaceSymbol" Usage="visualBasicCompilation.CommonGetCompilationNamespace namespaceSymbol" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamespaceSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceSymbol" Type="Microsoft.CodeAnalysis.INamespaceSymbol" />
      </Parameters>
      <Docs>
        <param name="namespaceSymbol">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonGetEntryPoint">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.IMethodSymbol CommonGetEntryPoint (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.IMethodSymbol CommonGetEntryPoint(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonGetEntryPoint(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.CommonGetEntryPoint : System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IMethodSymbol" Usage="visualBasicCompilation.CommonGetEntryPoint cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IMethodSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonGetSemanticModel">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.SemanticModel CommonGetSemanticModel (Microsoft.CodeAnalysis.SyntaxTree syntaxTree, bool ignoreAccessibility);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.SemanticModel CommonGetSemanticModel(class Microsoft.CodeAnalysis.SyntaxTree syntaxTree, bool ignoreAccessibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonGetSemanticModel(Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.CommonGetSemanticModel : Microsoft.CodeAnalysis.SyntaxTree * bool -&gt; Microsoft.CodeAnalysis.SemanticModel" Usage="visualBasicCompilation.CommonGetSemanticModel (syntaxTree, ignoreAccessibility)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SemanticModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syntaxTree" Type="Microsoft.CodeAnalysis.SyntaxTree" />
        <Parameter Name="ignoreAccessibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="syntaxTree">To be added.</param>
        <param name="ignoreAccessibility">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonGetSpecialType">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.INamedTypeSymbol CommonGetSpecialType (Microsoft.CodeAnalysis.SpecialType specialType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.INamedTypeSymbol CommonGetSpecialType(valuetype Microsoft.CodeAnalysis.SpecialType specialType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonGetSpecialType(Microsoft.CodeAnalysis.SpecialType)" />
      <MemberSignature Language="F#" Value="override this.CommonGetSpecialType : Microsoft.CodeAnalysis.SpecialType -&gt; Microsoft.CodeAnalysis.INamedTypeSymbol" Usage="visualBasicCompilation.CommonGetSpecialType specialType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamedTypeSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="specialType" Type="Microsoft.CodeAnalysis.SpecialType" />
      </Parameters>
      <Docs>
        <param name="specialType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonGetTypeByMetadataName">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.INamedTypeSymbol CommonGetTypeByMetadataName (string metadataName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.INamedTypeSymbol CommonGetTypeByMetadataName(string metadataName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonGetTypeByMetadataName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonGetTypeByMetadataName (metadataName As String) As INamedTypeSymbol" />
      <MemberSignature Language="F#" Value="override this.CommonGetTypeByMetadataName : string -&gt; Microsoft.CodeAnalysis.INamedTypeSymbol" Usage="visualBasicCompilation.CommonGetTypeByMetadataName metadataName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamedTypeSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadataName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="metadataName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonGlobalNamespace">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.INamespaceSymbol CommonGlobalNamespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.INamespaceSymbol CommonGlobalNamespace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonGlobalNamespace" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CommonGlobalNamespace As INamespaceSymbol" />
      <MemberSignature Language="F#" Value="member this.CommonGlobalNamespace : Microsoft.CodeAnalysis.INamespaceSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonGlobalNamespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamespaceSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonObjectType">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.INamedTypeSymbol CommonObjectType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.INamedTypeSymbol CommonObjectType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonObjectType" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CommonObjectType As INamedTypeSymbol" />
      <MemberSignature Language="F#" Value="member this.CommonObjectType : Microsoft.CodeAnalysis.INamedTypeSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonObjectType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamedTypeSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonOptions">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.CompilationOptions CommonOptions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonOptions" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CommonOptions As CompilationOptions" />
      <MemberSignature Language="F#" Value="member this.CommonOptions : Microsoft.CodeAnalysis.CompilationOptions" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonRemoveAllSyntaxTrees">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.Compilation CommonRemoveAllSyntaxTrees ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.Compilation CommonRemoveAllSyntaxTrees() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonRemoveAllSyntaxTrees" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonRemoveAllSyntaxTrees () As Compilation" />
      <MemberSignature Language="F#" Value="override this.CommonRemoveAllSyntaxTrees : unit -&gt; Microsoft.CodeAnalysis.Compilation" Usage="visualBasicCompilation.CommonRemoveAllSyntaxTrees " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Compilation</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonRemoveSyntaxTrees">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.Compilation CommonRemoveSyntaxTrees (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTree&gt; trees);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.Compilation CommonRemoveSyntaxTrees(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxTree&gt; trees) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonRemoveSyntaxTrees(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonRemoveSyntaxTrees (trees As IEnumerable(Of SyntaxTree)) As Compilation" />
      <MemberSignature Language="F#" Value="override this.CommonRemoveSyntaxTrees : seq&lt;Microsoft.CodeAnalysis.SyntaxTree&gt; -&gt; Microsoft.CodeAnalysis.Compilation" Usage="visualBasicCompilation.CommonRemoveSyntaxTrees trees" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Compilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trees" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTree&gt;" />
      </Parameters>
      <Docs>
        <param name="trees">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonReplaceSyntaxTree">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.Compilation CommonReplaceSyntaxTree (Microsoft.CodeAnalysis.SyntaxTree oldTree, Microsoft.CodeAnalysis.SyntaxTree newTree);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.Compilation CommonReplaceSyntaxTree(class Microsoft.CodeAnalysis.SyntaxTree oldTree, class Microsoft.CodeAnalysis.SyntaxTree newTree) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonReplaceSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxTree)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonReplaceSyntaxTree (oldTree As SyntaxTree, newTree As SyntaxTree) As Compilation" />
      <MemberSignature Language="F#" Value="override this.CommonReplaceSyntaxTree : Microsoft.CodeAnalysis.SyntaxTree * Microsoft.CodeAnalysis.SyntaxTree -&gt; Microsoft.CodeAnalysis.Compilation" Usage="visualBasicCompilation.CommonReplaceSyntaxTree (oldTree, newTree)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Compilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldTree" Type="Microsoft.CodeAnalysis.SyntaxTree" />
        <Parameter Name="newTree" Type="Microsoft.CodeAnalysis.SyntaxTree" />
      </Parameters>
      <Docs>
        <param name="oldTree">To be added.</param>
        <param name="newTree">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonScriptClass">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.INamedTypeSymbol CommonScriptClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.INamedTypeSymbol CommonScriptClass" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonScriptClass" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CommonScriptClass As INamedTypeSymbol" />
      <MemberSignature Language="F#" Value="member this.CommonScriptClass : Microsoft.CodeAnalysis.INamedTypeSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonScriptClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamedTypeSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonSourceModule">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.IModuleSymbol CommonSourceModule { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IModuleSymbol CommonSourceModule" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonSourceModule" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CommonSourceModule As IModuleSymbol" />
      <MemberSignature Language="F#" Value="member this.CommonSourceModule : Microsoft.CodeAnalysis.IModuleSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonSourceModule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IModuleSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonSyntaxTrees">
      <MemberSignature Language="C#" Value="protected override System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTree&gt; CommonSyntaxTrees { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxTree&gt; CommonSyntaxTrees" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonSyntaxTrees" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CommonSyntaxTrees As IEnumerable(Of SyntaxTree)" />
      <MemberSignature Language="F#" Value="member this.CommonSyntaxTrees : seq&lt;Microsoft.CodeAnalysis.SyntaxTree&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonSyntaxTrees" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTree&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithAssemblyName">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.Compilation CommonWithAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.Compilation CommonWithAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonWithAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithAssemblyName (assemblyName As String) As Compilation" />
      <MemberSignature Language="F#" Value="override this.CommonWithAssemblyName : string -&gt; Microsoft.CodeAnalysis.Compilation" Usage="visualBasicCompilation.CommonWithAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Compilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithOptions">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.Compilation CommonWithOptions (Microsoft.CodeAnalysis.CompilationOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.Compilation CommonWithOptions(class Microsoft.CodeAnalysis.CompilationOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonWithOptions(Microsoft.CodeAnalysis.CompilationOptions)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithOptions (options As CompilationOptions) As Compilation" />
      <MemberSignature Language="F#" Value="override this.CommonWithOptions : Microsoft.CodeAnalysis.CompilationOptions -&gt; Microsoft.CodeAnalysis.Compilation" Usage="visualBasicCompilation.CommonWithOptions options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Compilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.CompilationOptions" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithReferences">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.Compilation CommonWithReferences (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.MetadataReference&gt; newReferences);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.Compilation CommonWithReferences(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.MetadataReference&gt; newReferences) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonWithReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithReferences (newReferences As IEnumerable(Of MetadataReference)) As Compilation" />
      <MemberSignature Language="F#" Value="override this.CommonWithReferences : seq&lt;Microsoft.CodeAnalysis.MetadataReference&gt; -&gt; Microsoft.CodeAnalysis.Compilation" Usage="visualBasicCompilation.CommonWithReferences newReferences" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Compilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newReferences" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.MetadataReference&gt;" />
      </Parameters>
      <Docs>
        <param name="newReferences">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithScriptCompilationInfo">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.Compilation CommonWithScriptCompilationInfo (Microsoft.CodeAnalysis.ScriptCompilationInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.Compilation CommonWithScriptCompilationInfo(class Microsoft.CodeAnalysis.ScriptCompilationInfo info) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CommonWithScriptCompilationInfo(Microsoft.CodeAnalysis.ScriptCompilationInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithScriptCompilationInfo (info As ScriptCompilationInfo) As Compilation" />
      <MemberSignature Language="F#" Value="override this.CommonWithScriptCompilationInfo : Microsoft.CodeAnalysis.ScriptCompilationInfo -&gt; Microsoft.CodeAnalysis.Compilation" Usage="visualBasicCompilation.CommonWithScriptCompilationInfo info" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Compilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="Microsoft.CodeAnalysis.ScriptCompilationInfo" />
      </Parameters>
      <Docs>
        <param name="info">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsSymbolsWithName">
      <MemberSignature Language="C#" Value="public override bool ContainsSymbolsWithName (Func&lt;string,bool&gt; predicate, Microsoft.CodeAnalysis.SymbolFilter filter = Microsoft.CodeAnalysis.SymbolFilter.TypeAndMember, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ContainsSymbolsWithName(class System.Func`2&lt;string, bool&gt; predicate, valuetype Microsoft.CodeAnalysis.SymbolFilter filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.ContainsSymbolsWithName(System.Func{System.String,System.Boolean},Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.ContainsSymbolsWithName : Func&lt;string, bool&gt; * Microsoft.CodeAnalysis.SymbolFilter * System.Threading.CancellationToken -&gt; bool" Usage="visualBasicCompilation.ContainsSymbolsWithName (predicate, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;System.String,System.Boolean&gt;" />
        <Parameter Name="filter" Type="Microsoft.CodeAnalysis.SymbolFilter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="predicate">To be added.</param>
        <param name="filter">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Return true if there Is a source declaration symbol name that meets given predicate.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsSyntaxTree">
      <MemberSignature Language="C#" Value="public bool ContainsSyntaxTree (Microsoft.CodeAnalysis.SyntaxTree syntaxTree);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool ContainsSyntaxTree(class Microsoft.CodeAnalysis.SyntaxTree syntaxTree) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.ContainsSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree)" />
      <MemberSignature Language="F#" Value="override this.ContainsSyntaxTree : Microsoft.CodeAnalysis.SyntaxTree -&gt; bool" Usage="visualBasicCompilation.ContainsSyntaxTree syntaxTree" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syntaxTree" Type="Microsoft.CodeAnalysis.SyntaxTree" />
      </Parameters>
      <Docs>
        <param name="syntaxTree">To be added.</param>
        <summary>
 Is the passed in syntax tree in this compilation?
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation Create (string assemblyName, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTree&gt; syntaxTrees = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.MetadataReference&gt; references = null, Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation Create(string assemblyName, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxTree&gt; syntaxTrees, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.MetadataReference&gt; references, class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.Create(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference},Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (assemblyName As String, Optional syntaxTrees As IEnumerable(Of SyntaxTree) = null, Optional references As IEnumerable(Of MetadataReference) = null, Optional options As VisualBasicCompilationOptions = null) As VisualBasicCompilation" />
      <MemberSignature Language="F#" Value="static member Create : string * seq&lt;Microsoft.CodeAnalysis.SyntaxTree&gt; * seq&lt;Microsoft.CodeAnalysis.MetadataReference&gt; * Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.Create (assemblyName, syntaxTrees, references, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="syntaxTrees" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTree&gt;" />
        <Parameter Name="references" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.MetadataReference&gt;" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" />
      </Parameters>
      <Docs>
        <param name="assemblyName">Simple assembly name.</param>
        <param name="syntaxTrees">The syntax trees with the source code for the new compilation.</param>
        <param name="references">The references for the new compilation.</param>
        <param name="options">The compiler options to use.</param>
        <summary>
 Create a new compilation from scratch.
 </summary>
        <returns>A new compilation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectiveReferences">
      <MemberSignature Language="C#" Value="public override System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.MetadataReference&gt; DirectiveReferences { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.MetadataReference&gt; DirectiveReferences" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.DirectiveReferences" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DirectiveReferences As ImmutableArray(Of MetadataReference)" />
      <MemberSignature Language="F#" Value="member this.DirectiveReferences : System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.MetadataReference&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.DirectiveReferences" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.MetadataReference&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclarationDiagnostics">
      <MemberSignature Language="C#" Value="public override System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt; GetDeclarationDiagnostics (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.Diagnostic&gt; GetDeclarationDiagnostics(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.GetDeclarationDiagnostics(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetDeclarationDiagnostics : System.Threading.CancellationToken -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt;" Usage="visualBasicCompilation.GetDeclarationDiagnostics cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">Cancellation token to allow cancelling the operation.</param>
        <summary>
 Get declarations diagnostics for the entire compilation. This includes diagnostics from declarations, BUT NOT
 the bodies of methods or initializers. The set of declaration diagnostics is cached, so calling this method a second time
 should be fast.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDiagnostics">
      <MemberSignature Language="C#" Value="public override System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt; GetDiagnostics (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.Diagnostic&gt; GetDiagnostics(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.GetDiagnostics(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetDiagnostics : System.Threading.CancellationToken -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt;" Usage="visualBasicCompilation.GetDiagnostics cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">Cancellation token to allow cancelling the operation.</param>
        <summary>
 Get all diagnostics for the entire compilation. This includes diagnostics from parsing, declarations, and
 the bodies of methods. Getting all the diagnostics is potentially a length operations, as it requires parsing and
 compiling all the code. The set of diagnostics is not caches, so each call to this method will recompile all
 methods.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodBodyDiagnostics">
      <MemberSignature Language="C#" Value="public override System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt; GetMethodBodyDiagnostics (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.Diagnostic&gt; GetMethodBodyDiagnostics(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.GetMethodBodyDiagnostics(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetMethodBodyDiagnostics : System.Threading.CancellationToken -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt;" Usage="visualBasicCompilation.GetMethodBodyDiagnostics cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">Cancellation token to allow cancelling the operation.</param>
        <summary>
 Get method body diagnostics for the entire compilation. This includes diagnostics only from 
 the bodies of methods and initializers. These diagnostics are NOT cached, so calling this method a second time
 repeats significant work.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParseDiagnostics">
      <MemberSignature Language="C#" Value="public override System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt; GetParseDiagnostics (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.Diagnostic&gt; GetParseDiagnostics(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.GetParseDiagnostics(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetParseDiagnostics : System.Threading.CancellationToken -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt;" Usage="visualBasicCompilation.GetParseDiagnostics cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Get parse diagnostics for the entire compilation. This includes diagnostics from parsing BUT NOT from declarations and
 the bodies of methods or initializers. The set of parse diagnostics is cached, so calling this method a second time
 should be fast.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSemanticModel">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SemanticModel GetSemanticModel (Microsoft.CodeAnalysis.SyntaxTree syntaxTree, bool ignoreAccessibility = false);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.SemanticModel GetSemanticModel(class Microsoft.CodeAnalysis.SyntaxTree syntaxTree, bool ignoreAccessibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.GetSemanticModel(Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.GetSemanticModel : Microsoft.CodeAnalysis.SyntaxTree * bool -&gt; Microsoft.CodeAnalysis.SemanticModel" Usage="visualBasicCompilation.GetSemanticModel (syntaxTree, ignoreAccessibility)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SemanticModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syntaxTree" Type="Microsoft.CodeAnalysis.SyntaxTree" />
        <Parameter Name="ignoreAccessibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="syntaxTree">To be added.</param>
        <param name="ignoreAccessibility">To be added.</param>
        <summary> 
 Get a fresh SemanticModel.  Note that each invocation gets a fresh SemanticModel, each of
 which has a cache.  Therefore, one effectively clears the cache by discarding the
 SemanticModel.
</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSymbolsWithName">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.ISymbol&gt; GetSymbolsWithName (Func&lt;string,bool&gt; predicate, Microsoft.CodeAnalysis.SymbolFilter filter = Microsoft.CodeAnalysis.SymbolFilter.TypeAndMember, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.ISymbol&gt; GetSymbolsWithName(class System.Func`2&lt;string, bool&gt; predicate, valuetype Microsoft.CodeAnalysis.SymbolFilter filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.GetSymbolsWithName(System.Func{System.String,System.Boolean},Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.GetSymbolsWithName : Func&lt;string, bool&gt; * Microsoft.CodeAnalysis.SymbolFilter * System.Threading.CancellationToken -&gt; seq&lt;Microsoft.CodeAnalysis.ISymbol&gt;" Usage="visualBasicCompilation.GetSymbolsWithName (predicate, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.ISymbol&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;System.String,System.Boolean&gt;" />
        <Parameter Name="filter" Type="Microsoft.CodeAnalysis.SymbolFilter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="predicate">To be added.</param>
        <param name="filter">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Return source declaration symbols whose name meets given predicate.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCaseSensitive">
      <MemberSignature Language="C#" Value="public override bool IsCaseSensitive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCaseSensitive" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.IsCaseSensitive" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsCaseSensitive As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsCaseSensitive : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.IsCaseSensitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public override string Language { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.Language" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Language As String" />
      <MemberSignature Language="F#" Value="member this.Language : string" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageVersion">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.LanguageVersion LanguageVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.VisualBasic.LanguageVersion LanguageVersion" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.LanguageVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LanguageVersion As LanguageVersion" />
      <MemberSignature Language="F#" Value="member this.LanguageVersion : Microsoft.CodeAnalysis.VisualBasic.LanguageVersion" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.LanguageVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.LanguageVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The language version that was used to parse the syntax trees of this compilation.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions Options" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="member this.Options : Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferencedAssemblyNames">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.AssemblyIdentity&gt; ReferencedAssemblyNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.AssemblyIdentity&gt; ReferencedAssemblyNames" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.ReferencedAssemblyNames" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReferencedAssemblyNames As IEnumerable(Of AssemblyIdentity)" />
      <MemberSignature Language="F#" Value="member this.ReferencedAssemblyNames : seq&lt;Microsoft.CodeAnalysis.AssemblyIdentity&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.ReferencedAssemblyNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.AssemblyIdentity&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllReferences">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation RemoveAllReferences ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation RemoveAllReferences() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.RemoveAllReferences" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAllReferences () As VisualBasicCompilation" />
      <MemberSignature Language="F#" Value="override this.RemoveAllReferences : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" Usage="visualBasicCompilation.RemoveAllReferences " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllSyntaxTrees">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation RemoveAllSyntaxTrees ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation RemoveAllSyntaxTrees() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.RemoveAllSyntaxTrees" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAllSyntaxTrees () As VisualBasicCompilation" />
      <MemberSignature Language="F#" Value="override this.RemoveAllSyntaxTrees : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" Usage="visualBasicCompilation.RemoveAllSyntaxTrees " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveReferences">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation RemoveReferences (params Microsoft.CodeAnalysis.MetadataReference[] references);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation RemoveReferences(class Microsoft.CodeAnalysis.MetadataReference[] references) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.RemoveReferences(Microsoft.CodeAnalysis.MetadataReference[])" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveReferences (ParamArray references As MetadataReference()) As VisualBasicCompilation" />
      <MemberSignature Language="F#" Value="override this.RemoveReferences : Microsoft.CodeAnalysis.MetadataReference[] -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" Usage="visualBasicCompilation.RemoveReferences references" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="references" Type="Microsoft.CodeAnalysis.MetadataReference[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="references">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveReferences">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation RemoveReferences (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.MetadataReference&gt; references);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation RemoveReferences(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.MetadataReference&gt; references) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.RemoveReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveReferences (references As IEnumerable(Of MetadataReference)) As VisualBasicCompilation" />
      <MemberSignature Language="F#" Value="override this.RemoveReferences : seq&lt;Microsoft.CodeAnalysis.MetadataReference&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" Usage="visualBasicCompilation.RemoveReferences references" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="references" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.MetadataReference&gt;" />
      </Parameters>
      <Docs>
        <param name="references">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveSyntaxTrees">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation RemoveSyntaxTrees (params Microsoft.CodeAnalysis.SyntaxTree[] trees);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation RemoveSyntaxTrees(class Microsoft.CodeAnalysis.SyntaxTree[] trees) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.RemoveSyntaxTrees(Microsoft.CodeAnalysis.SyntaxTree[])" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveSyntaxTrees (ParamArray trees As SyntaxTree()) As VisualBasicCompilation" />
      <MemberSignature Language="F#" Value="override this.RemoveSyntaxTrees : Microsoft.CodeAnalysis.SyntaxTree[] -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" Usage="visualBasicCompilation.RemoveSyntaxTrees trees" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trees" Type="Microsoft.CodeAnalysis.SyntaxTree[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trees">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveSyntaxTrees">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation RemoveSyntaxTrees (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTree&gt; trees);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation RemoveSyntaxTrees(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxTree&gt; trees) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.RemoveSyntaxTrees(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveSyntaxTrees (trees As IEnumerable(Of SyntaxTree)) As VisualBasicCompilation" />
      <MemberSignature Language="F#" Value="override this.RemoveSyntaxTrees : seq&lt;Microsoft.CodeAnalysis.SyntaxTree&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" Usage="visualBasicCompilation.RemoveSyntaxTrees trees" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trees" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTree&gt;" />
      </Parameters>
      <Docs>
        <param name="trees">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceReference">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation ReplaceReference (Microsoft.CodeAnalysis.MetadataReference oldReference, Microsoft.CodeAnalysis.MetadataReference newReference);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation ReplaceReference(class Microsoft.CodeAnalysis.MetadataReference oldReference, class Microsoft.CodeAnalysis.MetadataReference newReference) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.ReplaceReference(Microsoft.CodeAnalysis.MetadataReference,Microsoft.CodeAnalysis.MetadataReference)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplaceReference (oldReference As MetadataReference, newReference As MetadataReference) As VisualBasicCompilation" />
      <MemberSignature Language="F#" Value="override this.ReplaceReference : Microsoft.CodeAnalysis.MetadataReference * Microsoft.CodeAnalysis.MetadataReference -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" Usage="visualBasicCompilation.ReplaceReference (oldReference, newReference)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldReference" Type="Microsoft.CodeAnalysis.MetadataReference" />
        <Parameter Name="newReference" Type="Microsoft.CodeAnalysis.MetadataReference" />
      </Parameters>
      <Docs>
        <param name="oldReference">To be added.</param>
        <param name="newReference">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceSyntaxTree">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation ReplaceSyntaxTree (Microsoft.CodeAnalysis.SyntaxTree oldTree, Microsoft.CodeAnalysis.SyntaxTree newTree);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation ReplaceSyntaxTree(class Microsoft.CodeAnalysis.SyntaxTree oldTree, class Microsoft.CodeAnalysis.SyntaxTree newTree) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.ReplaceSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxTree)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplaceSyntaxTree (oldTree As SyntaxTree, newTree As SyntaxTree) As VisualBasicCompilation" />
      <MemberSignature Language="F#" Value="override this.ReplaceSyntaxTree : Microsoft.CodeAnalysis.SyntaxTree * Microsoft.CodeAnalysis.SyntaxTree -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" Usage="visualBasicCompilation.ReplaceSyntaxTree (oldTree, newTree)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldTree" Type="Microsoft.CodeAnalysis.SyntaxTree" />
        <Parameter Name="newTree" Type="Microsoft.CodeAnalysis.SyntaxTree" />
      </Parameters>
      <Docs>
        <param name="oldTree">To be added.</param>
        <param name="newTree">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyntaxTrees">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SyntaxTree&gt; SyntaxTrees { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.SyntaxTree&gt; SyntaxTrees" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.SyntaxTrees" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyntaxTrees As ImmutableArray(Of SyntaxTree)" />
      <MemberSignature Language="F#" Value="member this.SyntaxTrees : System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SyntaxTree&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.SyntaxTrees" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SyntaxTree&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Get a read-only list of the syntax trees that this compilation was created with.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToMetadataReference">
      <MemberSignature Language="C#" Value="public override Microsoft.CodeAnalysis.CompilationReference ToMetadataReference (System.Collections.Immutable.ImmutableArray&lt;string&gt; aliases = null, bool embedInteropTypes = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.CodeAnalysis.CompilationReference ToMetadataReference(valuetype System.Collections.Immutable.ImmutableArray`1&lt;string&gt; aliases, bool embedInteropTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.ToMetadataReference(System.Collections.Immutable.ImmutableArray{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToMetadataReference (Optional aliases As ImmutableArray(Of String) = null, Optional embedInteropTypes As Boolean = false) As CompilationReference" />
      <MemberSignature Language="F#" Value="override this.ToMetadataReference : System.Collections.Immutable.ImmutableArray&lt;string&gt; * bool -&gt; Microsoft.CodeAnalysis.CompilationReference" Usage="visualBasicCompilation.ToMetadataReference (aliases, embedInteropTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aliases" Type="System.Collections.Immutable.ImmutableArray&lt;System.String&gt;" />
        <Parameter Name="embedInteropTypes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="aliases">To be added.</param>
        <param name="embedInteropTypes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAssemblyName">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation WithAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation WithAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.WithAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithAssemblyName (assemblyName As String) As VisualBasicCompilation" />
      <MemberSignature Language="F#" Value="override this.WithAssemblyName : string -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" Usage="visualBasicCompilation.WithAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">To be added.</param>
        <summary>
 Creates a new compilation with the specified name.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithOptions">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation WithOptions (Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions newOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation WithOptions(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions newOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.WithOptions(Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithOptions (newOptions As VisualBasicCompilationOptions) As VisualBasicCompilation" />
      <MemberSignature Language="F#" Value="override this.WithOptions : Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" Usage="visualBasicCompilation.WithOptions newOptions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newOptions" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" />
      </Parameters>
      <Docs>
        <param name="newOptions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithReferences">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation WithReferences (params Microsoft.CodeAnalysis.MetadataReference[] newReferences);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation WithReferences(class Microsoft.CodeAnalysis.MetadataReference[] newReferences) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.WithReferences(Microsoft.CodeAnalysis.MetadataReference[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WithReferences (ParamArray newReferences As MetadataReference()) As VisualBasicCompilation" />
      <MemberSignature Language="F#" Value="override this.WithReferences : Microsoft.CodeAnalysis.MetadataReference[] -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" Usage="visualBasicCompilation.WithReferences newReferences" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newReferences" Type="Microsoft.CodeAnalysis.MetadataReference[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newReferences">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithReferences">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation WithReferences (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.MetadataReference&gt; newReferences);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation WithReferences(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.MetadataReference&gt; newReferences) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.WithReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithReferences (newReferences As IEnumerable(Of MetadataReference)) As VisualBasicCompilation" />
      <MemberSignature Language="F#" Value="override this.WithReferences : seq&lt;Microsoft.CodeAnalysis.MetadataReference&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" Usage="visualBasicCompilation.WithReferences newReferences" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newReferences" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.MetadataReference&gt;" />
      </Parameters>
      <Docs>
        <param name="newReferences">To be added.</param>
        <summary>
 Creates a new compilation with the specified references.
 </summary>
        <returns>To be added.</returns>
        <remarks>
 The new <see cref="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation" /> will query the given <see cref="T:Microsoft.CodeAnalysis.MetadataReference" /> for the underlying 
 metadata as soon as the are needed. 
 
 The New compilation uses whatever metadata is currently being provided by the <see cref="T:Microsoft.CodeAnalysis.MetadataReference" />.
 E.g. if the current compilation references a metadata file that has changed since the creation of the compilation
 the New compilation is going to use the updated version, while the current compilation will be using the previous (it doesn't change).
 </remarks>
      </Docs>
    </Member>
  </Members>
</Type>