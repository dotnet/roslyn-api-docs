<Type Name="SyntaxTokenParser+Result" FullName="Microsoft.CodeAnalysis.CSharp.SyntaxTokenParser+Result">
  <TypeSignature Language="C#" Value="public readonly struct SyntaxTokenParser.Result" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit SyntaxTokenParser/Result extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CSharp.SyntaxTokenParser.Result" />
  <TypeSignature Language="VB.NET" Value="Public Structure SyntaxTokenParser.Result" />
  <TypeSignature Language="F#" Value="type SyntaxTokenParser.Result = struct" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
    <AssemblyVersion>4.12.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The result of a call to <see cref="M:Microsoft.CodeAnalysis.CSharp.SyntaxTokenParser.ParseNextToken" />. This is also a context object that can be used to reset the parser to
            before the token it represents was parsed.
            </summary>
    <remarks>
            This type is not default safe. Attempts to use <code>default(Result)</code> will result in undefined behavior.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="ContextualKind">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.SyntaxKind ContextualKind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind ContextualKind" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.SyntaxTokenParser.Result.ContextualKind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContextualKind As SyntaxKind" />
      <MemberSignature Language="F#" Value="member this.ContextualKind : Microsoft.CodeAnalysis.CSharp.SyntaxKind" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxTokenParser.Result.ContextualKind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.SyntaxKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            If the parsed token is potentially a contextual keyword, this will return the contextual kind of the token. Otherwise, it
            will return <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.None" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxToken Token { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken Token" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.SyntaxTokenParser.Result.Token" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Token As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.Token : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxTokenParser.Result.Token" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The token that was parsed.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
