<Type Name="Formatter" FullName="Microsoft.CodeAnalysis.Formatting.Formatter">
  <TypeSignature Language="C#" Value="public static class Formatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Formatter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Formatting.Formatter" />
  <TypeSignature Language="VB.NET" Value="Public Class Formatter" />
  <TypeSignature Language="F#" Value="type Formatter = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Formats whitespace in documents or syntax trees.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Annotation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxAnnotation Annotation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.CodeAnalysis.SyntaxAnnotation Annotation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Formatting.Formatter.Annotation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Annotation As SyntaxAnnotation" />
      <MemberSignature Language="F#" Value="member this.Annotation : Microsoft.CodeAnalysis.SyntaxAnnotation" Usage="Microsoft.CodeAnalysis.Formatting.Formatter.Annotation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxAnnotation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The annotation used to mark portions of a syntax tree to be formatted.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxNode Format (Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.SyntaxNode Format(class Microsoft.CodeAnalysis.SyntaxNode node, class Microsoft.CodeAnalysis.Workspace workspace, class Microsoft.CodeAnalysis.Options.OptionSet options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Formatting.Formatter.Format(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member Format : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.Workspace * Microsoft.CodeAnalysis.Options.OptionSet * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="Microsoft.CodeAnalysis.Formatting.Formatter.Format (node, workspace, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="workspace" Type="Microsoft.CodeAnalysis.Workspace" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.Options.OptionSet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="node">The root node of a syntax tree to format.</param>
        <param name="workspace">A workspace used to give the formatting context.</param>
        <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the workspace will be used.</param>
        <param name="cancellationToken">An optional cancellation token.</param>
        <summary>
            Formats the whitespace of a syntax tree.
            </summary>
        <returns>The formatted tree's root node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxNode Format (Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.SyntaxAnnotation annotation, Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.SyntaxNode Format(class Microsoft.CodeAnalysis.SyntaxNode node, class Microsoft.CodeAnalysis.SyntaxAnnotation annotation, class Microsoft.CodeAnalysis.Workspace workspace, class Microsoft.CodeAnalysis.Options.OptionSet options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Formatting.Formatter.Format(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxAnnotation,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member Format : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxAnnotation * Microsoft.CodeAnalysis.Workspace * Microsoft.CodeAnalysis.Options.OptionSet * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="Microsoft.CodeAnalysis.Formatting.Formatter.Format (node, annotation, workspace, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="annotation" Type="Microsoft.CodeAnalysis.SyntaxAnnotation" />
        <Parameter Name="workspace" Type="Microsoft.CodeAnalysis.Workspace" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.Options.OptionSet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="node">The root node of a syntax tree to format.</param>
        <param name="annotation">The annotation used to find nodes to identify spans to format.</param>
        <param name="workspace">A workspace used to give the formatting context.</param>
        <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the workspace will be used.</param>
        <param name="cancellationToken">An optional cancellation token.</param>
        <summary>
            Formats the whitespace in areas of a syntax tree corresponding to annotated nodes.
            </summary>
        <returns>The formatted tree's root node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxNode Format (Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.Text.TextSpan span, Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.SyntaxNode Format(class Microsoft.CodeAnalysis.SyntaxNode node, valuetype Microsoft.CodeAnalysis.Text.TextSpan span, class Microsoft.CodeAnalysis.Workspace workspace, class Microsoft.CodeAnalysis.Options.OptionSet options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Formatting.Formatter.Format(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member Format : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.Text.TextSpan * Microsoft.CodeAnalysis.Workspace * Microsoft.CodeAnalysis.Options.OptionSet * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="Microsoft.CodeAnalysis.Formatting.Formatter.Format (node, span, workspace, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="span" Type="Microsoft.CodeAnalysis.Text.TextSpan" />
        <Parameter Name="workspace" Type="Microsoft.CodeAnalysis.Workspace" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.Options.OptionSet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="node">The root node of a syntax tree to format.</param>
        <param name="span">The span within the node's full span to format.</param>
        <param name="workspace">A workspace used to give the formatting context.</param>
        <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the workspace will be used.</param>
        <param name="cancellationToken">An optional cancellation token.</param>
        <summary>
            Formats the whitespace in areas of a syntax tree identified by a span.
            </summary>
        <returns>The formatted tree's root node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxNode Format (Microsoft.CodeAnalysis.SyntaxNode node, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Text.TextSpan&gt; spans, Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.SyntaxNode Format(class Microsoft.CodeAnalysis.SyntaxNode node, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.Text.TextSpan&gt; spans, class Microsoft.CodeAnalysis.Workspace workspace, class Microsoft.CodeAnalysis.Options.OptionSet options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Formatting.Formatter.Format(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member Format : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.Text.TextSpan&gt; * Microsoft.CodeAnalysis.Workspace * Microsoft.CodeAnalysis.Options.OptionSet * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="Microsoft.CodeAnalysis.Formatting.Formatter.Format (node, spans, workspace, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="spans" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Text.TextSpan&gt;" />
        <Parameter Name="workspace" Type="Microsoft.CodeAnalysis.Workspace" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.Options.OptionSet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="node">The root node of a syntax tree to format.</param>
        <param name="spans">The spans within the node's full span to format.</param>
        <param name="workspace">A workspace used to give the formatting context.</param>
        <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the workspace will be used.</param>
        <param name="cancellationToken">An optional cancellation token.</param>
        <summary>
            Formats the whitespace in areas of a syntax tree identified by multiple non-overlapping spans.
            </summary>
        <returns>The formatted tree's root node.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Document&gt; FormatAsync (Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.CodeAnalysis.Document&gt; FormatAsync(class Microsoft.CodeAnalysis.Document document, class Microsoft.CodeAnalysis.Options.OptionSet options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member FormatAsync : Microsoft.CodeAnalysis.Document * Microsoft.CodeAnalysis.Options.OptionSet * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Document&gt;" Usage="Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync (document, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.CodeAnalysis.Formatting.Formatter/&lt;FormatAsync&gt;d__5))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Document&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="Microsoft.CodeAnalysis.Document" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.Options.OptionSet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="document">The document to format.</param>
        <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the document's workspace will be used.</param>
        <param name="cancellationToken">An optional cancellation token.</param>
        <summary>
            Formats the whitespace in a document.
            </summary>
        <returns>The formatted document.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Document&gt; FormatAsync (Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.SyntaxAnnotation annotation, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.CodeAnalysis.Document&gt; FormatAsync(class Microsoft.CodeAnalysis.Document document, class Microsoft.CodeAnalysis.SyntaxAnnotation annotation, class Microsoft.CodeAnalysis.Options.OptionSet options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.SyntaxAnnotation,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member FormatAsync : Microsoft.CodeAnalysis.Document * Microsoft.CodeAnalysis.SyntaxAnnotation * Microsoft.CodeAnalysis.Options.OptionSet * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Document&gt;" Usage="Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync (document, annotation, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Document&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="Microsoft.CodeAnalysis.Document" />
        <Parameter Name="annotation" Type="Microsoft.CodeAnalysis.SyntaxAnnotation" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.Options.OptionSet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="document">The document to format.</param>
        <param name="annotation">The annotation used to find on nodes to identify spans to format.</param>
        <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the document's workspace will be used.</param>
        <param name="cancellationToken">An optional cancellation token.</param>
        <summary>
            Formats the whitespace in areas of a document corresponding to annotated nodes.
            </summary>
        <returns>The formatted document.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Document&gt; FormatAsync (Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan span, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.CodeAnalysis.Document&gt; FormatAsync(class Microsoft.CodeAnalysis.Document document, valuetype Microsoft.CodeAnalysis.Text.TextSpan span, class Microsoft.CodeAnalysis.Options.OptionSet options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member FormatAsync : Microsoft.CodeAnalysis.Document * Microsoft.CodeAnalysis.Text.TextSpan * Microsoft.CodeAnalysis.Options.OptionSet * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Document&gt;" Usage="Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync (document, span, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.CodeAnalysis.Formatting.Formatter/&lt;FormatAsync&gt;d__6))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Document&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="Microsoft.CodeAnalysis.Document" />
        <Parameter Name="span" Type="Microsoft.CodeAnalysis.Text.TextSpan" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.Options.OptionSet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="document">The document to format.</param>
        <param name="span">The span of the document's text to format.</param>
        <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the document's workspace will be used.</param>
        <param name="cancellationToken">An optional cancellation token.</param>
        <summary>
            Formats the whitespace in an area of a document corresponding to a text span.
            </summary>
        <returns>The formatted document.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Document&gt; FormatAsync (Microsoft.CodeAnalysis.Document document, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Text.TextSpan&gt; spans, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.CodeAnalysis.Document&gt; FormatAsync(class Microsoft.CodeAnalysis.Document document, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.Text.TextSpan&gt; spans, class Microsoft.CodeAnalysis.Options.OptionSet options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync(Microsoft.CodeAnalysis.Document,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member FormatAsync : Microsoft.CodeAnalysis.Document * seq&lt;Microsoft.CodeAnalysis.Text.TextSpan&gt; * Microsoft.CodeAnalysis.Options.OptionSet * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Document&gt;" Usage="Microsoft.CodeAnalysis.Formatting.Formatter.FormatAsync (document, spans, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Document&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="Microsoft.CodeAnalysis.Document" />
        <Parameter Name="spans" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Text.TextSpan&gt;" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.Options.OptionSet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="document">The document to format.</param>
        <param name="spans">The spans of the document's text to format.</param>
        <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the document's workspace will be used.</param>
        <param name="cancellationToken">An optional cancellation token.</param>
        <summary>
            Formats the whitespace in areas of a document corresponding to multiple non-overlapping spans.
            </summary>
        <returns>The formatted document.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFormattedTextChanges">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.Text.TextChange&gt; GetFormattedTextChanges (Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;valuetype Microsoft.CodeAnalysis.Text.TextChange&gt; GetFormattedTextChanges(class Microsoft.CodeAnalysis.SyntaxNode node, class Microsoft.CodeAnalysis.Workspace workspace, class Microsoft.CodeAnalysis.Options.OptionSet options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Formatting.Formatter.GetFormattedTextChanges(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetFormattedTextChanges : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.Workspace * Microsoft.CodeAnalysis.Options.OptionSet * System.Threading.CancellationToken -&gt; System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.Text.TextChange&gt;" Usage="Microsoft.CodeAnalysis.Formatting.Formatter.GetFormattedTextChanges (node, workspace, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.Text.TextChange&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="workspace" Type="Microsoft.CodeAnalysis.Workspace" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.Options.OptionSet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="node">The root node of a syntax tree to format.</param>
        <param name="workspace">A workspace used to give the formatting context.</param>
        <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the workspace will be used.</param>
        <param name="cancellationToken">An optional cancellation token.</param>
        <summary>
            Determines the changes necessary to format the whitespace of a syntax tree.
            </summary>
        <returns>The changes necessary to format the tree.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFormattedTextChanges">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.Text.TextChange&gt; GetFormattedTextChanges (Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.Text.TextSpan span, Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;valuetype Microsoft.CodeAnalysis.Text.TextChange&gt; GetFormattedTextChanges(class Microsoft.CodeAnalysis.SyntaxNode node, valuetype Microsoft.CodeAnalysis.Text.TextSpan span, class Microsoft.CodeAnalysis.Workspace workspace, class Microsoft.CodeAnalysis.Options.OptionSet options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Formatting.Formatter.GetFormattedTextChanges(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetFormattedTextChanges : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.Text.TextSpan * Microsoft.CodeAnalysis.Workspace * Microsoft.CodeAnalysis.Options.OptionSet * System.Threading.CancellationToken -&gt; System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.Text.TextChange&gt;" Usage="Microsoft.CodeAnalysis.Formatting.Formatter.GetFormattedTextChanges (node, span, workspace, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.Text.TextChange&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="span" Type="Microsoft.CodeAnalysis.Text.TextSpan" />
        <Parameter Name="workspace" Type="Microsoft.CodeAnalysis.Workspace" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.Options.OptionSet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="node">The root node of a syntax tree to format.</param>
        <param name="span">The span within the node's full span to format.</param>
        <param name="workspace">A workspace used to give the formatting context.</param>
        <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the workspace will be used.</param>
        <param name="cancellationToken">An optional cancellation token.</param>
        <summary>
            Determines the changes necessary to format the whitespace of a syntax tree.
            </summary>
        <returns>The changes necessary to format the tree.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFormattedTextChanges">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.Text.TextChange&gt; GetFormattedTextChanges (Microsoft.CodeAnalysis.SyntaxNode node, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Text.TextSpan&gt; spans, Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.Options.OptionSet options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;valuetype Microsoft.CodeAnalysis.Text.TextChange&gt; GetFormattedTextChanges(class Microsoft.CodeAnalysis.SyntaxNode node, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.Text.TextSpan&gt; spans, class Microsoft.CodeAnalysis.Workspace workspace, class Microsoft.CodeAnalysis.Options.OptionSet options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Formatting.Formatter.GetFormattedTextChanges(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextSpan},Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetFormattedTextChanges : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.Text.TextSpan&gt; * Microsoft.CodeAnalysis.Workspace * Microsoft.CodeAnalysis.Options.OptionSet * System.Threading.CancellationToken -&gt; System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.Text.TextChange&gt;" Usage="Microsoft.CodeAnalysis.Formatting.Formatter.GetFormattedTextChanges (node, spans, workspace, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.Text.TextChange&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="spans" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Text.TextSpan&gt;" />
        <Parameter Name="workspace" Type="Microsoft.CodeAnalysis.Workspace" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.Options.OptionSet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="node">The root node of a syntax tree to format.</param>
        <param name="spans">The spans within the node's full span to format.</param>
        <param name="workspace">A workspace used to give the formatting context.</param>
        <param name="options">An optional set of formatting options. If these options are not supplied the current set of options from the workspace will be used.</param>
        <param name="cancellationToken">An optional cancellation token.</param>
        <summary>
            Determines the changes necessary to format the whitespace of a syntax tree.
            </summary>
        <returns>The changes necessary to format the tree.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>