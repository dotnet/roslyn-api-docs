<Type Name="GlobalImport" FullName="Microsoft.CodeAnalysis.VisualBasic.GlobalImport">
  <TypeSignature Language="C#" Value="public sealed class GlobalImport : IEquatable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed GlobalImport extends System.Object implements class System.IEquatable`1&lt;class Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.GlobalImport" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class GlobalImport&#xA;Implements IEquatable(Of GlobalImport)" />
  <TypeSignature Language="F#" Value="type GlobalImport = class&#xA;    interface IEquatable&lt;GlobalImport&gt;" />
  <TypeSignature Language="C++ CLI" Value="public ref class GlobalImport sealed : IEquatable&lt;Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{GetDebuggerDisplay(), nq}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
 Represents a Visual Basic global imports.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Clause">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax Clause { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax Clause" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.GlobalImport.Clause" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Clause As ImportsClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.Clause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.GlobalImport.Clause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportsClauseSyntax ^ Clause { Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportsClauseSyntax ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportsClauseSyntax ^ Clause { Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportsClauseSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The import clause (a namespace name, an alias, or an XML namespace alias).
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Microsoft.CodeAnalysis.VisualBasic.GlobalImport other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class Microsoft.CodeAnalysis.VisualBasic.GlobalImport other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.GlobalImport.Equals(Microsoft.CodeAnalysis.VisualBasic.GlobalImport)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As GlobalImport) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : Microsoft.CodeAnalysis.VisualBasic.GlobalImport -&gt; bool" Usage="globalImport.Equals other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^ other) = IEquatable&lt;Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^&gt;::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.CodeAnalysis.VisualBasic.GlobalImport" />
      </Parameters>
      <Docs>
        <param name="other">A GlobalImport object to compare with this object</param>
        <summary>
 Determines whether the current object is equal to another object of the same type.
 </summary>
        <returns>A boolean value.  True if the current object is equal to the other parameter; otherwise, False.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.GlobalImport.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="globalImport.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override bool Equals(Platform::Object ^ obj);" />
      <MemberSignature Language="C++ WINRT" Value=" override bool Equals(winrt::Windows::Foundation::IInspectable const &amp; obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">An object to compare with this object</param>
        <summary>
 Determines if the current object is equal to another object.
 </summary>
        <returns>A boolean value.  True if the current object is equal to the other parameter; otherwise, False.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.GlobalImport.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="globalImport.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="C++ WINRT" Value=" override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Creates a hashcode for this instance.
 </summary>
        <returns>A hashcode representing this instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.GlobalImport.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Microsoft.CodeAnalysis.VisualBasic.GlobalImport.Name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Platform::String ^ Name { Platform::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The import name.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Microsoft.CodeAnalysis.VisualBasic.GlobalImport left, Microsoft.CodeAnalysis.VisualBasic.GlobalImport right);" />
      <MemberSignature Language="ILAsm" Value=".method public static specialname bool op_Equality(class Microsoft.CodeAnalysis.VisualBasic.GlobalImport left, class Microsoft.CodeAnalysis.VisualBasic.GlobalImport right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.GlobalImport.op_Equality(Microsoft.CodeAnalysis.VisualBasic.GlobalImport,Microsoft.CodeAnalysis.VisualBasic.GlobalImport)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As GlobalImport, right As GlobalImport) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( = ) : Microsoft.CodeAnalysis.VisualBasic.GlobalImport * Microsoft.CodeAnalysis.VisualBasic.GlobalImport -&gt; bool" Usage="left = right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^ left, Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.GlobalImport" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.GlobalImport" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
 Operator for Equality with GlobalImport Objects.
 </summary>
        <returns>True if the two items are Equal.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Microsoft.CodeAnalysis.VisualBasic.GlobalImport left, Microsoft.CodeAnalysis.VisualBasic.GlobalImport right);" />
      <MemberSignature Language="ILAsm" Value=".method public static specialname bool op_Inequality(class Microsoft.CodeAnalysis.VisualBasic.GlobalImport left, class Microsoft.CodeAnalysis.VisualBasic.GlobalImport right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.GlobalImport.op_Inequality(Microsoft.CodeAnalysis.VisualBasic.GlobalImport,Microsoft.CodeAnalysis.VisualBasic.GlobalImport)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As GlobalImport, right As GlobalImport) As Boolean" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Microsoft.CodeAnalysis.VisualBasic.GlobalImport * Microsoft.CodeAnalysis.VisualBasic.GlobalImport -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.GlobalImport.op_Inequality (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^ left, Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.GlobalImport" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.GlobalImport" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
 Overloaded Operator for Inequality ith GlobalImport Objects.
 </summary>
        <returns>Returns True if the two items are not Equal.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; Parse (System.Collections.Generic.IEnumerable&lt;string&gt; importedNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; Parse(class System.Collections.Generic.IEnumerable`1&lt;string&gt; importedNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.GlobalImport.Parse(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (importedNames As IEnumerable(Of String)) As IEnumerable(Of GlobalImport)" />
      <MemberSignature Language="F#" Value="static member Parse : seq&lt;string&gt; -&gt; seq&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.GlobalImport.Parse importedNames" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^&gt; ^ Parse(System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ importedNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importedNames" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="importedNames">The collection of strings to be parsed.</param>
        <summary>
 Parses a collection of strings representing imports to create collection of GlobalImports.
 </summary>
        <returns>A collection of GlobalImports</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.GlobalImport Parse (string importedNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.GlobalImport Parse(string importedNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.GlobalImport.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (importedNames As String) As GlobalImport" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; Microsoft.CodeAnalysis.VisualBasic.GlobalImport" Usage="Microsoft.CodeAnalysis.VisualBasic.GlobalImport.Parse importedNames" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^ Parse(System::String ^ importedNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.GlobalImport</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importedNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="importedNames">The string containing the text to be parsed.</param>
        <summary>
 Parses a specified string to create a GlobalImport instance.
 </summary>
        <returns>A GlobalImport instance. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; Parse (params string[] importedNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; Parse(string[] importedNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.GlobalImport.Parse(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (ParamArray importedNames As String()) As IEnumerable(Of GlobalImport)" />
      <MemberSignature Language="F#" Value="static member Parse : string[] -&gt; seq&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.GlobalImport.Parse importedNames" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^&gt; ^ Parse(... cli::array &lt;System::String ^&gt; ^ importedNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importedNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="importedNames">The string arrays to be parsed.</param>
        <summary>
 Parses a parameter array of string arrays representing imports to create a collection of GlobalImports.
 </summary>
        <returns>A collection of GlobalImports.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; Parse (System.Collections.Generic.IEnumerable&lt;string&gt; importedNames, out System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt; diagnostics);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; Parse(class System.Collections.Generic.IEnumerable`1&lt;string&gt; importedNames, [out] valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.Diagnostic&gt;&amp; diagnostics) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.GlobalImport.Parse(System.Collections.Generic.IEnumerable{System.String},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (importedNames As IEnumerable(Of String), ByRef diagnostics As ImmutableArray(Of Diagnostic)) As IEnumerable(Of GlobalImport)" />
      <MemberSignature Language="F#" Value="static member Parse : seq&lt;string&gt; *  -&gt; seq&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.GlobalImport.Parse (importedNames, diagnostics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^&gt; ^ Parse(System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ importedNames, [Runtime::InteropServices::Out] System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::Diagnostic ^&gt; % diagnostics);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importedNames" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="diagnostics" Type="System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="importedNames">A collection of strings to be parsed.</param>
        <param name="diagnostics">A ImmutableArray of diagnostics.</param>
        <summary>
 Parses a collection of strings representing imports to create a collection of GlobalImport instance and diagnostics
 </summary>
        <returns>A collection of GlobalImports.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.GlobalImport Parse (string importedNames, out System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt; diagnostics);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.GlobalImport Parse(string importedNames, [out] valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.Diagnostic&gt;&amp; diagnostics) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.GlobalImport.Parse(System.String,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (importedNames As String, ByRef diagnostics As ImmutableArray(Of Diagnostic)) As GlobalImport" />
      <MemberSignature Language="F#" Value="static member Parse : string *  -&gt; Microsoft.CodeAnalysis.VisualBasic.GlobalImport" Usage="Microsoft.CodeAnalysis.VisualBasic.GlobalImport.Parse (importedNames, diagnostics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^ Parse(System::String ^ importedNames, [Runtime::InteropServices::Out] System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::Diagnostic ^&gt; % diagnostics);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.GlobalImport</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importedNames" Type="System.String" />
        <Parameter Name="diagnostics" Type="System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Diagnostic&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="importedNames">The string containing the text to be parsed.</param>
        <param name="diagnostics">An ImmutableArray of diagnostics created during parse.</param>
        <summary>
 Parses a specified string to create a GlobalImport instance with diagnostics info.
 </summary>
        <returns>A GlobalImport instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>