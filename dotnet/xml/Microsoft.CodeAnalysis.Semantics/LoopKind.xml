<Type Name="LoopKind" FullName="Microsoft.CodeAnalysis.Semantics.LoopKind">
  <TypeSignature Language="C#" Value="public enum LoopKind" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LoopKind extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Semantics.LoopKind" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
            Kinds of loops.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="For" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.Semantics.LoopKind For = int32(2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.Semantics.LoopKind.For" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Semantics.LoopKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates a C# for loop or a VB For loop.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="ForEach">
      <MemberSignature Language="C#" Value="ForEach" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.Semantics.LoopKind ForEach = int32(3)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.Semantics.LoopKind.ForEach" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Semantics.LoopKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates a C# foreach loop or a VB For Each loop.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.Semantics.LoopKind None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.Semantics.LoopKind.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Semantics.LoopKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="WhileUntil">
      <MemberSignature Language="C#" Value="WhileUntil" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.Semantics.LoopKind WhileUntil = int32(1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.Semantics.LoopKind.WhileUntil" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Semantics.LoopKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates a C# while or do loop, or a VB While or Do loop.
            </summary>
      </Docs>
    </Member>
  </Members>
</Type>