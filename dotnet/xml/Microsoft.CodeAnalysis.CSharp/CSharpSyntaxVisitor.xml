<Type Name="CSharpSyntaxVisitor" FullName="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor">
  <TypeSignature Language="C#" Value="public abstract class CSharpSyntaxVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CSharpSyntaxVisitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CSharpSyntaxVisitor" />
  <TypeSignature Language="F#" Value="type CSharpSyntaxVisitor = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class CSharpSyntaxVisitor abstract" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents a <see cref="T:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode" /> visitor that visits only the single CSharpSyntaxNode
            passed into its Visit method.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CSharpSyntaxVisitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CSharpSyntaxVisitor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultVisit">
      <MemberSignature Language="C#" Value="public virtual void DefaultVisit (Microsoft.CodeAnalysis.SyntaxNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DefaultVisit(class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.DefaultVisit(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DefaultVisit (node As SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member DefaultVisit : Microsoft.CodeAnalysis.SyntaxNode -&gt; unit&#xA;override this.DefaultVisit : Microsoft.CodeAnalysis.SyntaxNode -&gt; unit" Usage="cSharpSyntaxVisitor.DefaultVisit node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DefaultVisit(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public virtual void Visit (Microsoft.CodeAnalysis.SyntaxNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Visit(class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.Visit(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Visit (node As SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member Visit : Microsoft.CodeAnalysis.SyntaxNode -&gt; unit&#xA;override this.Visit : Microsoft.CodeAnalysis.SyntaxNode -&gt; unit" Usage="cSharpSyntaxVisitor.Visit node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Visit(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAccessorDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitAccessorDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitAccessorDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAccessorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAccessorDeclaration (node As AccessorDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAccessorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax -&gt; unit&#xA;override this.VisitAccessorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitAccessorDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAccessorDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::AccessorDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AccessorDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAccessorList">
      <MemberSignature Language="C#" Value="public virtual void VisitAccessorList (Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitAccessorList(class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAccessorList(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAccessorList (node As AccessorListSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAccessorList : Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax -&gt; unit&#xA;override this.VisitAccessorList : Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitAccessorList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAccessorList(Microsoft::CodeAnalysis::CSharp::Syntax::AccessorListSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AccessorListSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAliasQualifiedName">
      <MemberSignature Language="C#" Value="public virtual void VisitAliasQualifiedName (Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitAliasQualifiedName(class Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAliasQualifiedName (node As AliasQualifiedNameSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAliasQualifiedName : Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax -&gt; unit&#xA;override this.VisitAliasQualifiedName : Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitAliasQualifiedName node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAliasQualifiedName(Microsoft::CodeAnalysis::CSharp::Syntax::AliasQualifiedNameSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AliasQualifiedNameSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAnonymousMethodExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitAnonymousMethodExpression (Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitAnonymousMethodExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAnonymousMethodExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAnonymousMethodExpression (node As AnonymousMethodExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAnonymousMethodExpression : Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax -&gt; unit&#xA;override this.VisitAnonymousMethodExpression : Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitAnonymousMethodExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAnonymousMethodExpression(Microsoft::CodeAnalysis::CSharp::Syntax::AnonymousMethodExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AnonymousMethodExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAnonymousObjectCreationExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitAnonymousObjectCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitAnonymousObjectCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAnonymousObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAnonymousObjectCreationExpression (node As AnonymousObjectCreationExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAnonymousObjectCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax -&gt; unit&#xA;override this.VisitAnonymousObjectCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitAnonymousObjectCreationExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAnonymousObjectCreationExpression(Microsoft::CodeAnalysis::CSharp::Syntax::AnonymousObjectCreationExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AnonymousObjectCreationExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAnonymousObjectMemberDeclarator">
      <MemberSignature Language="C#" Value="public virtual void VisitAnonymousObjectMemberDeclarator (Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitAnonymousObjectMemberDeclarator(class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAnonymousObjectMemberDeclarator (node As AnonymousObjectMemberDeclaratorSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAnonymousObjectMemberDeclarator : Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax -&gt; unit&#xA;override this.VisitAnonymousObjectMemberDeclarator : Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitAnonymousObjectMemberDeclarator node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAnonymousObjectMemberDeclarator(Microsoft::CodeAnalysis::CSharp::Syntax::AnonymousObjectMemberDeclaratorSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AnonymousObjectMemberDeclaratorSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitArgument">
      <MemberSignature Language="C#" Value="public virtual void VisitArgument (Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitArgument(class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitArgument(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitArgument (node As ArgumentSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitArgument : Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax -&gt; unit&#xA;override this.VisitArgument : Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitArgument node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitArgument(Microsoft::CodeAnalysis::CSharp::Syntax::ArgumentSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ArgumentSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitArgumentList">
      <MemberSignature Language="C#" Value="public virtual void VisitArgumentList (Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitArgumentList(class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitArgumentList (node As ArgumentListSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitArgumentList : Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax -&gt; unit&#xA;override this.VisitArgumentList : Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitArgumentList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitArgumentList(Microsoft::CodeAnalysis::CSharp::Syntax::ArgumentListSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ArgumentListSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitArrayCreationExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitArrayCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitArrayCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitArrayCreationExpression (node As ArrayCreationExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax -&gt; unit&#xA;override this.VisitArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitArrayCreationExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitArrayCreationExpression(Microsoft::CodeAnalysis::CSharp::Syntax::ArrayCreationExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ArrayCreationExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitArrayRankSpecifier">
      <MemberSignature Language="C#" Value="public virtual void VisitArrayRankSpecifier (Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitArrayRankSpecifier(class Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitArrayRankSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitArrayRankSpecifier (node As ArrayRankSpecifierSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitArrayRankSpecifier : Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax -&gt; unit&#xA;override this.VisitArrayRankSpecifier : Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitArrayRankSpecifier node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitArrayRankSpecifier(Microsoft::CodeAnalysis::CSharp::Syntax::ArrayRankSpecifierSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ArrayRankSpecifierSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitArrayType">
      <MemberSignature Language="C#" Value="public virtual void VisitArrayType (Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitArrayType(class Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitArrayType (node As ArrayTypeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitArrayType : Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax -&gt; unit&#xA;override this.VisitArrayType : Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitArrayType node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitArrayType(Microsoft::CodeAnalysis::CSharp::Syntax::ArrayTypeSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ArrayTypeSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitArrowExpressionClause">
      <MemberSignature Language="C#" Value="public virtual void VisitArrowExpressionClause (Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitArrowExpressionClause(class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitArrowExpressionClause(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitArrowExpressionClause (node As ArrowExpressionClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitArrowExpressionClause : Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax -&gt; unit&#xA;override this.VisitArrowExpressionClause : Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitArrowExpressionClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitArrowExpressionClause(Microsoft::CodeAnalysis::CSharp::Syntax::ArrowExpressionClauseSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ArrowExpressionClauseSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAssignmentExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitAssignmentExpression (Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitAssignmentExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAssignmentExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAssignmentExpression (node As AssignmentExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAssignmentExpression : Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax -&gt; unit&#xA;override this.VisitAssignmentExpression : Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitAssignmentExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAssignmentExpression(Microsoft::CodeAnalysis::CSharp::Syntax::AssignmentExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AssignmentExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAttribute">
      <MemberSignature Language="C#" Value="public virtual void VisitAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAttribute (node As AttributeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax -&gt; unit&#xA;override this.VisitAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitAttribute node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAttribute(Microsoft::CodeAnalysis::CSharp::Syntax::AttributeSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AttributeSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAttributeArgument">
      <MemberSignature Language="C#" Value="public virtual void VisitAttributeArgument (Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitAttributeArgument(class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAttributeArgument (node As AttributeArgumentSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAttributeArgument : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax -&gt; unit&#xA;override this.VisitAttributeArgument : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitAttributeArgument node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAttributeArgument(Microsoft::CodeAnalysis::CSharp::Syntax::AttributeArgumentSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AttributeArgumentSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAttributeArgumentList">
      <MemberSignature Language="C#" Value="public virtual void VisitAttributeArgumentList (Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitAttributeArgumentList(class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAttributeArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAttributeArgumentList (node As AttributeArgumentListSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAttributeArgumentList : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax -&gt; unit&#xA;override this.VisitAttributeArgumentList : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitAttributeArgumentList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAttributeArgumentList(Microsoft::CodeAnalysis::CSharp::Syntax::AttributeArgumentListSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AttributeArgumentListSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAttributeList">
      <MemberSignature Language="C#" Value="public virtual void VisitAttributeList (Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitAttributeList(class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAttributeList(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAttributeList (node As AttributeListSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAttributeList : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax -&gt; unit&#xA;override this.VisitAttributeList : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitAttributeList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAttributeList(Microsoft::CodeAnalysis::CSharp::Syntax::AttributeListSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AttributeListSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAttributeTargetSpecifier">
      <MemberSignature Language="C#" Value="public virtual void VisitAttributeTargetSpecifier (Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitAttributeTargetSpecifier(class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAttributeTargetSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAttributeTargetSpecifier (node As AttributeTargetSpecifierSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAttributeTargetSpecifier : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax -&gt; unit&#xA;override this.VisitAttributeTargetSpecifier : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitAttributeTargetSpecifier node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAttributeTargetSpecifier(Microsoft::CodeAnalysis::CSharp::Syntax::AttributeTargetSpecifierSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AttributeTargetSpecifierSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAwaitExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitAwaitExpression (Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitAwaitExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitAwaitExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAwaitExpression (node As AwaitExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAwaitExpression : Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax -&gt; unit&#xA;override this.VisitAwaitExpression : Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitAwaitExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAwaitExpression(Microsoft::CodeAnalysis::CSharp::Syntax::AwaitExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AwaitExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBadDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitBadDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitBadDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitBadDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitBadDirectiveTrivia (node As BadDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitBadDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitBadDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitBadDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitBadDirectiveTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::BadDirectiveTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a BadDirectiveTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBaseExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitBaseExpression (Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitBaseExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitBaseExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitBaseExpression (node As BaseExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitBaseExpression : Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax -&gt; unit&#xA;override this.VisitBaseExpression : Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitBaseExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitBaseExpression(Microsoft::CodeAnalysis::CSharp::Syntax::BaseExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a BaseExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBaseList">
      <MemberSignature Language="C#" Value="public virtual void VisitBaseList (Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitBaseList(class Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitBaseList(Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitBaseList (node As BaseListSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitBaseList : Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax -&gt; unit&#xA;override this.VisitBaseList : Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitBaseList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitBaseList(Microsoft::CodeAnalysis::CSharp::Syntax::BaseListSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a BaseListSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBinaryExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitBinaryExpression (Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitBinaryExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitBinaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitBinaryExpression (node As BinaryExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitBinaryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax -&gt; unit&#xA;override this.VisitBinaryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitBinaryExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitBinaryExpression(Microsoft::CodeAnalysis::CSharp::Syntax::BinaryExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a BinaryExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitBlock (Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitBlock(class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitBlock(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitBlock (node As BlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitBlock : Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax -&gt; unit&#xA;override this.VisitBlock : Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitBlock(Microsoft::CodeAnalysis::CSharp::Syntax::BlockSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a BlockSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBracketedArgumentList">
      <MemberSignature Language="C#" Value="public virtual void VisitBracketedArgumentList (Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitBracketedArgumentList(class Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitBracketedArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitBracketedArgumentList (node As BracketedArgumentListSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitBracketedArgumentList : Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax -&gt; unit&#xA;override this.VisitBracketedArgumentList : Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitBracketedArgumentList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitBracketedArgumentList(Microsoft::CodeAnalysis::CSharp::Syntax::BracketedArgumentListSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a BracketedArgumentListSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBracketedParameterList">
      <MemberSignature Language="C#" Value="public virtual void VisitBracketedParameterList (Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitBracketedParameterList(class Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitBracketedParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitBracketedParameterList (node As BracketedParameterListSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitBracketedParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax -&gt; unit&#xA;override this.VisitBracketedParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitBracketedParameterList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitBracketedParameterList(Microsoft::CodeAnalysis::CSharp::Syntax::BracketedParameterListSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a BracketedParameterListSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBreakStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitBreakStatement (Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitBreakStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitBreakStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitBreakStatement (node As BreakStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitBreakStatement : Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax -&gt; unit&#xA;override this.VisitBreakStatement : Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitBreakStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitBreakStatement(Microsoft::CodeAnalysis::CSharp::Syntax::BreakStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a BreakStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCasePatternSwitchLabel">
      <MemberSignature Language="C#" Value="public virtual void VisitCasePatternSwitchLabel (Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitCasePatternSwitchLabel(class Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCasePatternSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCasePatternSwitchLabel (node As CasePatternSwitchLabelSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCasePatternSwitchLabel : Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax -&gt; unit&#xA;override this.VisitCasePatternSwitchLabel : Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitCasePatternSwitchLabel node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCasePatternSwitchLabel(Microsoft::CodeAnalysis::CSharp::Syntax::CasePatternSwitchLabelSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CasePatternSwitchLabelSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCaseSwitchLabel">
      <MemberSignature Language="C#" Value="public virtual void VisitCaseSwitchLabel (Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitCaseSwitchLabel(class Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCaseSwitchLabel (node As CaseSwitchLabelSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCaseSwitchLabel : Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax -&gt; unit&#xA;override this.VisitCaseSwitchLabel : Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitCaseSwitchLabel node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCaseSwitchLabel(Microsoft::CodeAnalysis::CSharp::Syntax::CaseSwitchLabelSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CaseSwitchLabelSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCastExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitCastExpression (Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitCastExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCastExpression(Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCastExpression (node As CastExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCastExpression : Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax -&gt; unit&#xA;override this.VisitCastExpression : Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitCastExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCastExpression(Microsoft::CodeAnalysis::CSharp::Syntax::CastExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CastExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCatchClause">
      <MemberSignature Language="C#" Value="public virtual void VisitCatchClause (Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitCatchClause(class Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCatchClause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCatchClause (node As CatchClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCatchClause : Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax -&gt; unit&#xA;override this.VisitCatchClause : Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitCatchClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCatchClause(Microsoft::CodeAnalysis::CSharp::Syntax::CatchClauseSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CatchClauseSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCatchDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitCatchDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitCatchDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCatchDeclaration (node As CatchDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCatchDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax -&gt; unit&#xA;override this.VisitCatchDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitCatchDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCatchDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::CatchDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CatchDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCatchFilterClause">
      <MemberSignature Language="C#" Value="public virtual void VisitCatchFilterClause (Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitCatchFilterClause(class Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCatchFilterClause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCatchFilterClause (node As CatchFilterClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCatchFilterClause : Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax -&gt; unit&#xA;override this.VisitCatchFilterClause : Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitCatchFilterClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCatchFilterClause(Microsoft::CodeAnalysis::CSharp::Syntax::CatchFilterClauseSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CatchFilterClauseSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCheckedExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitCheckedExpression (Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitCheckedExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCheckedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCheckedExpression (node As CheckedExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCheckedExpression : Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax -&gt; unit&#xA;override this.VisitCheckedExpression : Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitCheckedExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCheckedExpression(Microsoft::CodeAnalysis::CSharp::Syntax::CheckedExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CheckedExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCheckedStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitCheckedStatement (Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitCheckedStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCheckedStatement(Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCheckedStatement (node As CheckedStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCheckedStatement : Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax -&gt; unit&#xA;override this.VisitCheckedStatement : Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitCheckedStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCheckedStatement(Microsoft::CodeAnalysis::CSharp::Syntax::CheckedStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CheckedStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitClassDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitClassDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitClassDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitClassDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitClassDeclaration (node As ClassDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitClassDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax -&gt; unit&#xA;override this.VisitClassDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitClassDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitClassDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::ClassDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ClassDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitClassOrStructConstraint">
      <MemberSignature Language="C#" Value="public virtual void VisitClassOrStructConstraint (Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitClassOrStructConstraint(class Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitClassOrStructConstraint (node As ClassOrStructConstraintSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitClassOrStructConstraint : Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax -&gt; unit&#xA;override this.VisitClassOrStructConstraint : Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitClassOrStructConstraint node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitClassOrStructConstraint(Microsoft::CodeAnalysis::CSharp::Syntax::ClassOrStructConstraintSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ClassOrStructConstraintSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCompilationUnit">
      <MemberSignature Language="C#" Value="public virtual void VisitCompilationUnit (Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitCompilationUnit(class Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCompilationUnit(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCompilationUnit (node As CompilationUnitSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCompilationUnit : Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax -&gt; unit&#xA;override this.VisitCompilationUnit : Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitCompilationUnit node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCompilationUnit(Microsoft::CodeAnalysis::CSharp::Syntax::CompilationUnitSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CompilationUnitSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConditionalAccessExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitConditionalAccessExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitConditionalAccessExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitConditionalAccessExpression (node As ConditionalAccessExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitConditionalAccessExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax -&gt; unit&#xA;override this.VisitConditionalAccessExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitConditionalAccessExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitConditionalAccessExpression(Microsoft::CodeAnalysis::CSharp::Syntax::ConditionalAccessExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ConditionalAccessExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConditionalExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitConditionalExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitConditionalExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitConditionalExpression (node As ConditionalExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitConditionalExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax -&gt; unit&#xA;override this.VisitConditionalExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitConditionalExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitConditionalExpression(Microsoft::CodeAnalysis::CSharp::Syntax::ConditionalExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ConditionalExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConstantPattern">
      <MemberSignature Language="C#" Value="public virtual void VisitConstantPattern (Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitConstantPattern(class Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitConstantPattern(Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitConstantPattern (node As ConstantPatternSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitConstantPattern : Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax -&gt; unit&#xA;override this.VisitConstantPattern : Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitConstantPattern node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitConstantPattern(Microsoft::CodeAnalysis::CSharp::Syntax::ConstantPatternSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ConstantPatternSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConstructorConstraint">
      <MemberSignature Language="C#" Value="public virtual void VisitConstructorConstraint (Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitConstructorConstraint(class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitConstructorConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitConstructorConstraint (node As ConstructorConstraintSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitConstructorConstraint : Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax -&gt; unit&#xA;override this.VisitConstructorConstraint : Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitConstructorConstraint node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitConstructorConstraint(Microsoft::CodeAnalysis::CSharp::Syntax::ConstructorConstraintSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ConstructorConstraintSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConstructorDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitConstructorDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitConstructorDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitConstructorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitConstructorDeclaration (node As ConstructorDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitConstructorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax -&gt; unit&#xA;override this.VisitConstructorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitConstructorDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitConstructorDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::ConstructorDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ConstructorDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConstructorInitializer">
      <MemberSignature Language="C#" Value="public virtual void VisitConstructorInitializer (Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitConstructorInitializer(class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitConstructorInitializer(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitConstructorInitializer (node As ConstructorInitializerSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitConstructorInitializer : Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax -&gt; unit&#xA;override this.VisitConstructorInitializer : Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitConstructorInitializer node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitConstructorInitializer(Microsoft::CodeAnalysis::CSharp::Syntax::ConstructorInitializerSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ConstructorInitializerSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitContinueStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitContinueStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitContinueStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitContinueStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitContinueStatement (node As ContinueStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitContinueStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax -&gt; unit&#xA;override this.VisitContinueStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitContinueStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitContinueStatement(Microsoft::CodeAnalysis::CSharp::Syntax::ContinueStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ContinueStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConversionOperatorDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitConversionOperatorDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitConversionOperatorDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitConversionOperatorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitConversionOperatorDeclaration (node As ConversionOperatorDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitConversionOperatorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax -&gt; unit&#xA;override this.VisitConversionOperatorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitConversionOperatorDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitConversionOperatorDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::ConversionOperatorDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ConversionOperatorDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConversionOperatorMemberCref">
      <MemberSignature Language="C#" Value="public virtual void VisitConversionOperatorMemberCref (Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitConversionOperatorMemberCref(class Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitConversionOperatorMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitConversionOperatorMemberCref (node As ConversionOperatorMemberCrefSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitConversionOperatorMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax -&gt; unit&#xA;override this.VisitConversionOperatorMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitConversionOperatorMemberCref node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitConversionOperatorMemberCref(Microsoft::CodeAnalysis::CSharp::Syntax::ConversionOperatorMemberCrefSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ConversionOperatorMemberCrefSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCrefBracketedParameterList">
      <MemberSignature Language="C#" Value="public virtual void VisitCrefBracketedParameterList (Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitCrefBracketedParameterList(class Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCrefBracketedParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCrefBracketedParameterList (node As CrefBracketedParameterListSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCrefBracketedParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax -&gt; unit&#xA;override this.VisitCrefBracketedParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitCrefBracketedParameterList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCrefBracketedParameterList(Microsoft::CodeAnalysis::CSharp::Syntax::CrefBracketedParameterListSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CrefBracketedParameterListSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCrefParameter">
      <MemberSignature Language="C#" Value="public virtual void VisitCrefParameter (Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitCrefParameter(class Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCrefParameter(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCrefParameter (node As CrefParameterSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCrefParameter : Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax -&gt; unit&#xA;override this.VisitCrefParameter : Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitCrefParameter node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCrefParameter(Microsoft::CodeAnalysis::CSharp::Syntax::CrefParameterSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CrefParameterSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCrefParameterList">
      <MemberSignature Language="C#" Value="public virtual void VisitCrefParameterList (Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitCrefParameterList(class Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitCrefParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCrefParameterList (node As CrefParameterListSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCrefParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax -&gt; unit&#xA;override this.VisitCrefParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitCrefParameterList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCrefParameterList(Microsoft::CodeAnalysis::CSharp::Syntax::CrefParameterListSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CrefParameterListSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDeclarationExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitDeclarationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitDeclarationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDeclarationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitDeclarationExpression (node As DeclarationExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitDeclarationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax -&gt; unit&#xA;override this.VisitDeclarationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitDeclarationExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitDeclarationExpression(Microsoft::CodeAnalysis::CSharp::Syntax::DeclarationExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DeclarationExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDeclarationPattern">
      <MemberSignature Language="C#" Value="public virtual void VisitDeclarationPattern (Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitDeclarationPattern(class Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDeclarationPattern(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitDeclarationPattern (node As DeclarationPatternSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitDeclarationPattern : Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax -&gt; unit&#xA;override this.VisitDeclarationPattern : Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitDeclarationPattern node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitDeclarationPattern(Microsoft::CodeAnalysis::CSharp::Syntax::DeclarationPatternSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DeclarationPatternSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDefaultExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitDefaultExpression (Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitDefaultExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDefaultExpression(Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitDefaultExpression (node As DefaultExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitDefaultExpression : Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax -&gt; unit&#xA;override this.VisitDefaultExpression : Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitDefaultExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitDefaultExpression(Microsoft::CodeAnalysis::CSharp::Syntax::DefaultExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DefaultExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDefaultSwitchLabel">
      <MemberSignature Language="C#" Value="public virtual void VisitDefaultSwitchLabel (Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitDefaultSwitchLabel(class Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDefaultSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitDefaultSwitchLabel (node As DefaultSwitchLabelSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitDefaultSwitchLabel : Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax -&gt; unit&#xA;override this.VisitDefaultSwitchLabel : Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitDefaultSwitchLabel node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitDefaultSwitchLabel(Microsoft::CodeAnalysis::CSharp::Syntax::DefaultSwitchLabelSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DefaultSwitchLabelSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDefineDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitDefineDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitDefineDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDefineDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitDefineDirectiveTrivia (node As DefineDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitDefineDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitDefineDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitDefineDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitDefineDirectiveTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::DefineDirectiveTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DefineDirectiveTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDelegateDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitDelegateDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitDelegateDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitDelegateDeclaration (node As DelegateDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitDelegateDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax -&gt; unit&#xA;override this.VisitDelegateDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitDelegateDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitDelegateDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::DelegateDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DelegateDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDestructorDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitDestructorDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitDestructorDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDestructorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitDestructorDeclaration (node As DestructorDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitDestructorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax -&gt; unit&#xA;override this.VisitDestructorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitDestructorDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitDestructorDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::DestructorDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DestructorDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDiscardDesignation">
      <MemberSignature Language="C#" Value="public virtual void VisitDiscardDesignation (Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitDiscardDesignation(class Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDiscardDesignation(Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitDiscardDesignation (node As DiscardDesignationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitDiscardDesignation : Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax -&gt; unit&#xA;override this.VisitDiscardDesignation : Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitDiscardDesignation node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitDiscardDesignation(Microsoft::CodeAnalysis::CSharp::Syntax::DiscardDesignationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DiscardDesignationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDocumentationCommentTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitDocumentationCommentTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitDocumentationCommentTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitDocumentationCommentTrivia (node As DocumentationCommentTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitDocumentationCommentTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax -&gt; unit&#xA;override this.VisitDocumentationCommentTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitDocumentationCommentTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitDocumentationCommentTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::DocumentationCommentTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DocumentationCommentTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDoStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitDoStatement (Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitDoStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitDoStatement(Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitDoStatement (node As DoStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitDoStatement : Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax -&gt; unit&#xA;override this.VisitDoStatement : Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitDoStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitDoStatement(Microsoft::CodeAnalysis::CSharp::Syntax::DoStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DoStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElementAccessExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitElementAccessExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitElementAccessExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitElementAccessExpression (node As ElementAccessExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitElementAccessExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax -&gt; unit&#xA;override this.VisitElementAccessExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitElementAccessExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitElementAccessExpression(Microsoft::CodeAnalysis::CSharp::Syntax::ElementAccessExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ElementAccessExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElementBindingExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitElementBindingExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitElementBindingExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitElementBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitElementBindingExpression (node As ElementBindingExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitElementBindingExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax -&gt; unit&#xA;override this.VisitElementBindingExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitElementBindingExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitElementBindingExpression(Microsoft::CodeAnalysis::CSharp::Syntax::ElementBindingExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ElementBindingExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElifDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitElifDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitElifDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitElifDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitElifDirectiveTrivia (node As ElifDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitElifDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitElifDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitElifDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitElifDirectiveTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::ElifDirectiveTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ElifDirectiveTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElseClause">
      <MemberSignature Language="C#" Value="public virtual void VisitElseClause (Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitElseClause(class Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitElseClause(Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitElseClause (node As ElseClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitElseClause : Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax -&gt; unit&#xA;override this.VisitElseClause : Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitElseClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitElseClause(Microsoft::CodeAnalysis::CSharp::Syntax::ElseClauseSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ElseClauseSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElseDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitElseDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitElseDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitElseDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitElseDirectiveTrivia (node As ElseDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitElseDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitElseDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitElseDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitElseDirectiveTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::ElseDirectiveTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ElseDirectiveTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEmptyStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitEmptyStatement (Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitEmptyStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitEmptyStatement(Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEmptyStatement (node As EmptyStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEmptyStatement : Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax -&gt; unit&#xA;override this.VisitEmptyStatement : Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitEmptyStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEmptyStatement(Microsoft::CodeAnalysis::CSharp::Syntax::EmptyStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a EmptyStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEndIfDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitEndIfDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitEndIfDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitEndIfDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEndIfDirectiveTrivia (node As EndIfDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEndIfDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitEndIfDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitEndIfDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEndIfDirectiveTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::EndIfDirectiveTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a EndIfDirectiveTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEndRegionDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitEndRegionDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitEndRegionDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitEndRegionDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEndRegionDirectiveTrivia (node As EndRegionDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEndRegionDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitEndRegionDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitEndRegionDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEndRegionDirectiveTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::EndRegionDirectiveTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a EndRegionDirectiveTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEnumDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitEnumDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitEnumDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitEnumDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEnumDeclaration (node As EnumDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEnumDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax -&gt; unit&#xA;override this.VisitEnumDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitEnumDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEnumDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::EnumDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a EnumDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEnumMemberDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitEnumMemberDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitEnumMemberDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitEnumMemberDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEnumMemberDeclaration (node As EnumMemberDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEnumMemberDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax -&gt; unit&#xA;override this.VisitEnumMemberDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitEnumMemberDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEnumMemberDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::EnumMemberDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a EnumMemberDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEqualsValueClause">
      <MemberSignature Language="C#" Value="public virtual void VisitEqualsValueClause (Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitEqualsValueClause(class Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitEqualsValueClause(Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEqualsValueClause (node As EqualsValueClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEqualsValueClause : Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax -&gt; unit&#xA;override this.VisitEqualsValueClause : Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitEqualsValueClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEqualsValueClause(Microsoft::CodeAnalysis::CSharp::Syntax::EqualsValueClauseSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a EqualsValueClauseSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitErrorDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitErrorDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitErrorDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitErrorDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitErrorDirectiveTrivia (node As ErrorDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitErrorDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitErrorDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitErrorDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitErrorDirectiveTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::ErrorDirectiveTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ErrorDirectiveTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEventDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitEventDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitEventDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitEventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEventDeclaration (node As EventDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEventDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax -&gt; unit&#xA;override this.VisitEventDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitEventDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEventDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::EventDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a EventDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEventFieldDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitEventFieldDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitEventFieldDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitEventFieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEventFieldDeclaration (node As EventFieldDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEventFieldDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax -&gt; unit&#xA;override this.VisitEventFieldDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitEventFieldDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEventFieldDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::EventFieldDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a EventFieldDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExplicitInterfaceSpecifier">
      <MemberSignature Language="C#" Value="public virtual void VisitExplicitInterfaceSpecifier (Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitExplicitInterfaceSpecifier(class Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitExplicitInterfaceSpecifier (node As ExplicitInterfaceSpecifierSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitExplicitInterfaceSpecifier : Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax -&gt; unit&#xA;override this.VisitExplicitInterfaceSpecifier : Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitExplicitInterfaceSpecifier node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitExplicitInterfaceSpecifier(Microsoft::CodeAnalysis::CSharp::Syntax::ExplicitInterfaceSpecifierSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ExplicitInterfaceSpecifierSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExpressionStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitExpressionStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitExpressionStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitExpressionStatement (node As ExpressionStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitExpressionStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax -&gt; unit&#xA;override this.VisitExpressionStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitExpressionStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitExpressionStatement(Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ExpressionStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExternAliasDirective">
      <MemberSignature Language="C#" Value="public virtual void VisitExternAliasDirective (Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitExternAliasDirective(class Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitExternAliasDirective(Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitExternAliasDirective (node As ExternAliasDirectiveSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitExternAliasDirective : Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax -&gt; unit&#xA;override this.VisitExternAliasDirective : Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitExternAliasDirective node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitExternAliasDirective(Microsoft::CodeAnalysis::CSharp::Syntax::ExternAliasDirectiveSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ExternAliasDirectiveSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitFieldDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitFieldDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitFieldDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitFieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitFieldDeclaration (node As FieldDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitFieldDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax -&gt; unit&#xA;override this.VisitFieldDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitFieldDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitFieldDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::FieldDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a FieldDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitFinallyClause">
      <MemberSignature Language="C#" Value="public virtual void VisitFinallyClause (Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitFinallyClause(class Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitFinallyClause(Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitFinallyClause (node As FinallyClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitFinallyClause : Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax -&gt; unit&#xA;override this.VisitFinallyClause : Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitFinallyClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitFinallyClause(Microsoft::CodeAnalysis::CSharp::Syntax::FinallyClauseSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a FinallyClauseSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitFixedStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitFixedStatement (Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitFixedStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitFixedStatement(Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitFixedStatement (node As FixedStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitFixedStatement : Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax -&gt; unit&#xA;override this.VisitFixedStatement : Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitFixedStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitFixedStatement(Microsoft::CodeAnalysis::CSharp::Syntax::FixedStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a FixedStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitForEachStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitForEachStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitForEachStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitForEachStatement (node As ForEachStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitForEachStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax -&gt; unit&#xA;override this.VisitForEachStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitForEachStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitForEachStatement(Microsoft::CodeAnalysis::CSharp::Syntax::ForEachStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ForEachStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitForEachVariableStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitForEachVariableStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitForEachVariableStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitForEachVariableStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitForEachVariableStatement (node As ForEachVariableStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitForEachVariableStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax -&gt; unit&#xA;override this.VisitForEachVariableStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitForEachVariableStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitForEachVariableStatement(Microsoft::CodeAnalysis::CSharp::Syntax::ForEachVariableStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ForEachVariableStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitForStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitForStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitForStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitForStatement (node As ForStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitForStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax -&gt; unit&#xA;override this.VisitForStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitForStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitForStatement(Microsoft::CodeAnalysis::CSharp::Syntax::ForStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ForStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitFromClause">
      <MemberSignature Language="C#" Value="public virtual void VisitFromClause (Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitFromClause(class Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitFromClause(Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitFromClause (node As FromClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitFromClause : Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax -&gt; unit&#xA;override this.VisitFromClause : Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitFromClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitFromClause(Microsoft::CodeAnalysis::CSharp::Syntax::FromClauseSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a FromClauseSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGenericName">
      <MemberSignature Language="C#" Value="public virtual void VisitGenericName (Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitGenericName(class Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitGenericName(Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitGenericName (node As GenericNameSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitGenericName : Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax -&gt; unit&#xA;override this.VisitGenericName : Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitGenericName node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitGenericName(Microsoft::CodeAnalysis::CSharp::Syntax::GenericNameSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a GenericNameSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGlobalStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitGlobalStatement (Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitGlobalStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitGlobalStatement(Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitGlobalStatement (node As GlobalStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitGlobalStatement : Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax -&gt; unit&#xA;override this.VisitGlobalStatement : Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitGlobalStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitGlobalStatement(Microsoft::CodeAnalysis::CSharp::Syntax::GlobalStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a GlobalStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGotoStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitGotoStatement (Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitGotoStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitGotoStatement(Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitGotoStatement (node As GotoStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitGotoStatement : Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax -&gt; unit&#xA;override this.VisitGotoStatement : Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitGotoStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitGotoStatement(Microsoft::CodeAnalysis::CSharp::Syntax::GotoStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a GotoStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGroupClause">
      <MemberSignature Language="C#" Value="public virtual void VisitGroupClause (Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitGroupClause(class Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitGroupClause(Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitGroupClause (node As GroupClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitGroupClause : Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax -&gt; unit&#xA;override this.VisitGroupClause : Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitGroupClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitGroupClause(Microsoft::CodeAnalysis::CSharp::Syntax::GroupClauseSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a GroupClauseSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIdentifierName">
      <MemberSignature Language="C#" Value="public virtual void VisitIdentifierName (Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitIdentifierName(class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitIdentifierName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitIdentifierName (node As IdentifierNameSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitIdentifierName : Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax -&gt; unit&#xA;override this.VisitIdentifierName : Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitIdentifierName node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitIdentifierName(Microsoft::CodeAnalysis::CSharp::Syntax::IdentifierNameSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a IdentifierNameSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIfDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitIfDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitIfDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitIfDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitIfDirectiveTrivia (node As IfDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitIfDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitIfDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitIfDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitIfDirectiveTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::IfDirectiveTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a IfDirectiveTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIfStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitIfStatement (Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitIfStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitIfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitIfStatement (node As IfStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitIfStatement : Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax -&gt; unit&#xA;override this.VisitIfStatement : Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitIfStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitIfStatement(Microsoft::CodeAnalysis::CSharp::Syntax::IfStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a IfStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitImplicitArrayCreationExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitImplicitArrayCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitImplicitArrayCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitImplicitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitImplicitArrayCreationExpression (node As ImplicitArrayCreationExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitImplicitArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax -&gt; unit&#xA;override this.VisitImplicitArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitImplicitArrayCreationExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitImplicitArrayCreationExpression(Microsoft::CodeAnalysis::CSharp::Syntax::ImplicitArrayCreationExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ImplicitArrayCreationExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitImplicitElementAccess">
      <MemberSignature Language="C#" Value="public virtual void VisitImplicitElementAccess (Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitImplicitElementAccess(class Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitImplicitElementAccess(Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitImplicitElementAccess (node As ImplicitElementAccessSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitImplicitElementAccess : Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax -&gt; unit&#xA;override this.VisitImplicitElementAccess : Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitImplicitElementAccess node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitImplicitElementAccess(Microsoft::CodeAnalysis::CSharp::Syntax::ImplicitElementAccessSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ImplicitElementAccessSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitImplicitStackAllocArrayCreationExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitImplicitStackAllocArrayCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitImplicitStackAllocArrayCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitImplicitStackAllocArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitImplicitStackAllocArrayCreationExpression (node As ImplicitStackAllocArrayCreationExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitImplicitStackAllocArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax -&gt; unit&#xA;override this.VisitImplicitStackAllocArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitImplicitStackAllocArrayCreationExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitImplicitStackAllocArrayCreationExpression(Microsoft::CodeAnalysis::CSharp::Syntax::ImplicitStackAllocArrayCreationExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ImplicitStackAllocArrayCreationExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIncompleteMember">
      <MemberSignature Language="C#" Value="public virtual void VisitIncompleteMember (Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitIncompleteMember(class Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitIncompleteMember(Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitIncompleteMember (node As IncompleteMemberSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitIncompleteMember : Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax -&gt; unit&#xA;override this.VisitIncompleteMember : Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitIncompleteMember node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitIncompleteMember(Microsoft::CodeAnalysis::CSharp::Syntax::IncompleteMemberSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a IncompleteMemberSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIndexerDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitIndexerDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitIndexerDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitIndexerDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitIndexerDeclaration (node As IndexerDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitIndexerDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax -&gt; unit&#xA;override this.VisitIndexerDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitIndexerDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitIndexerDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::IndexerDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a IndexerDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIndexerMemberCref">
      <MemberSignature Language="C#" Value="public virtual void VisitIndexerMemberCref (Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitIndexerMemberCref(class Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitIndexerMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitIndexerMemberCref (node As IndexerMemberCrefSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitIndexerMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax -&gt; unit&#xA;override this.VisitIndexerMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitIndexerMemberCref node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitIndexerMemberCref(Microsoft::CodeAnalysis::CSharp::Syntax::IndexerMemberCrefSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a IndexerMemberCrefSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInitializerExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitInitializerExpression (Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitInitializerExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitInitializerExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitInitializerExpression (node As InitializerExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitInitializerExpression : Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax -&gt; unit&#xA;override this.VisitInitializerExpression : Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitInitializerExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitInitializerExpression(Microsoft::CodeAnalysis::CSharp::Syntax::InitializerExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a InitializerExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterfaceDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitInterfaceDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitInterfaceDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitInterfaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitInterfaceDeclaration (node As InterfaceDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitInterfaceDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax -&gt; unit&#xA;override this.VisitInterfaceDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitInterfaceDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitInterfaceDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::InterfaceDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a InterfaceDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterpolatedStringExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitInterpolatedStringExpression (Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitInterpolatedStringExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitInterpolatedStringExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitInterpolatedStringExpression (node As InterpolatedStringExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitInterpolatedStringExpression : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax -&gt; unit&#xA;override this.VisitInterpolatedStringExpression : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitInterpolatedStringExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitInterpolatedStringExpression(Microsoft::CodeAnalysis::CSharp::Syntax::InterpolatedStringExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a InterpolatedStringExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterpolatedStringText">
      <MemberSignature Language="C#" Value="public virtual void VisitInterpolatedStringText (Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitInterpolatedStringText(class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitInterpolatedStringText(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitInterpolatedStringText (node As InterpolatedStringTextSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitInterpolatedStringText : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax -&gt; unit&#xA;override this.VisitInterpolatedStringText : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitInterpolatedStringText node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitInterpolatedStringText(Microsoft::CodeAnalysis::CSharp::Syntax::InterpolatedStringTextSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a InterpolatedStringTextSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterpolation">
      <MemberSignature Language="C#" Value="public virtual void VisitInterpolation (Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitInterpolation(class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitInterpolation(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitInterpolation (node As InterpolationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitInterpolation : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax -&gt; unit&#xA;override this.VisitInterpolation : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitInterpolation node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitInterpolation(Microsoft::CodeAnalysis::CSharp::Syntax::InterpolationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a InterpolationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterpolationAlignmentClause">
      <MemberSignature Language="C#" Value="public virtual void VisitInterpolationAlignmentClause (Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitInterpolationAlignmentClause(class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitInterpolationAlignmentClause(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitInterpolationAlignmentClause (node As InterpolationAlignmentClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitInterpolationAlignmentClause : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax -&gt; unit&#xA;override this.VisitInterpolationAlignmentClause : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitInterpolationAlignmentClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitInterpolationAlignmentClause(Microsoft::CodeAnalysis::CSharp::Syntax::InterpolationAlignmentClauseSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a InterpolationAlignmentClauseSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterpolationFormatClause">
      <MemberSignature Language="C#" Value="public virtual void VisitInterpolationFormatClause (Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitInterpolationFormatClause(class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitInterpolationFormatClause(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitInterpolationFormatClause (node As InterpolationFormatClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitInterpolationFormatClause : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax -&gt; unit&#xA;override this.VisitInterpolationFormatClause : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitInterpolationFormatClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitInterpolationFormatClause(Microsoft::CodeAnalysis::CSharp::Syntax::InterpolationFormatClauseSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a InterpolationFormatClauseSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInvocationExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitInvocationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitInvocationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitInvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitInvocationExpression (node As InvocationExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitInvocationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax -&gt; unit&#xA;override this.VisitInvocationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitInvocationExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitInvocationExpression(Microsoft::CodeAnalysis::CSharp::Syntax::InvocationExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a InvocationExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIsPatternExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitIsPatternExpression (Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitIsPatternExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitIsPatternExpression(Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitIsPatternExpression (node As IsPatternExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitIsPatternExpression : Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax -&gt; unit&#xA;override this.VisitIsPatternExpression : Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitIsPatternExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitIsPatternExpression(Microsoft::CodeAnalysis::CSharp::Syntax::IsPatternExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a IsPatternExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitJoinClause">
      <MemberSignature Language="C#" Value="public virtual void VisitJoinClause (Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitJoinClause(class Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitJoinClause(Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitJoinClause (node As JoinClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitJoinClause : Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax -&gt; unit&#xA;override this.VisitJoinClause : Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitJoinClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitJoinClause(Microsoft::CodeAnalysis::CSharp::Syntax::JoinClauseSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a JoinClauseSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitJoinIntoClause">
      <MemberSignature Language="C#" Value="public virtual void VisitJoinIntoClause (Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitJoinIntoClause(class Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitJoinIntoClause(Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitJoinIntoClause (node As JoinIntoClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitJoinIntoClause : Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax -&gt; unit&#xA;override this.VisitJoinIntoClause : Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitJoinIntoClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitJoinIntoClause(Microsoft::CodeAnalysis::CSharp::Syntax::JoinIntoClauseSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a JoinIntoClauseSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLabeledStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitLabeledStatement (Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitLabeledStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitLabeledStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitLabeledStatement (node As LabeledStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitLabeledStatement : Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax -&gt; unit&#xA;override this.VisitLabeledStatement : Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitLabeledStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitLabeledStatement(Microsoft::CodeAnalysis::CSharp::Syntax::LabeledStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a LabeledStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLetClause">
      <MemberSignature Language="C#" Value="public virtual void VisitLetClause (Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitLetClause(class Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitLetClause(Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitLetClause (node As LetClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitLetClause : Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax -&gt; unit&#xA;override this.VisitLetClause : Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitLetClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitLetClause(Microsoft::CodeAnalysis::CSharp::Syntax::LetClauseSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a LetClauseSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLineDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitLineDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitLineDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitLineDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitLineDirectiveTrivia (node As LineDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitLineDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitLineDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitLineDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitLineDirectiveTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::LineDirectiveTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a LineDirectiveTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLiteralExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitLiteralExpression (Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitLiteralExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitLiteralExpression(Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitLiteralExpression (node As LiteralExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitLiteralExpression : Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax -&gt; unit&#xA;override this.VisitLiteralExpression : Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitLiteralExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitLiteralExpression(Microsoft::CodeAnalysis::CSharp::Syntax::LiteralExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a LiteralExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLoadDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitLoadDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitLoadDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitLoadDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitLoadDirectiveTrivia (node As LoadDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitLoadDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitLoadDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitLoadDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitLoadDirectiveTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::LoadDirectiveTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a LoadDirectiveTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLocalDeclarationStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitLocalDeclarationStatement (Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitLocalDeclarationStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitLocalDeclarationStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitLocalDeclarationStatement (node As LocalDeclarationStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitLocalDeclarationStatement : Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax -&gt; unit&#xA;override this.VisitLocalDeclarationStatement : Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitLocalDeclarationStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitLocalDeclarationStatement(Microsoft::CodeAnalysis::CSharp::Syntax::LocalDeclarationStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a LocalDeclarationStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLocalFunctionStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitLocalFunctionStatement (Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitLocalFunctionStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitLocalFunctionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitLocalFunctionStatement (node As LocalFunctionStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitLocalFunctionStatement : Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax -&gt; unit&#xA;override this.VisitLocalFunctionStatement : Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitLocalFunctionStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitLocalFunctionStatement(Microsoft::CodeAnalysis::CSharp::Syntax::LocalFunctionStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a LocalFunctionStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLockStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitLockStatement (Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitLockStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitLockStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitLockStatement (node As LockStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitLockStatement : Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax -&gt; unit&#xA;override this.VisitLockStatement : Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitLockStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitLockStatement(Microsoft::CodeAnalysis::CSharp::Syntax::LockStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a LockStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMakeRefExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitMakeRefExpression (Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitMakeRefExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitMakeRefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitMakeRefExpression (node As MakeRefExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitMakeRefExpression : Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax -&gt; unit&#xA;override this.VisitMakeRefExpression : Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitMakeRefExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitMakeRefExpression(Microsoft::CodeAnalysis::CSharp::Syntax::MakeRefExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a MakeRefExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMemberAccessExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitMemberAccessExpression (Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitMemberAccessExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitMemberAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitMemberAccessExpression (node As MemberAccessExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitMemberAccessExpression : Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax -&gt; unit&#xA;override this.VisitMemberAccessExpression : Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitMemberAccessExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitMemberAccessExpression(Microsoft::CodeAnalysis::CSharp::Syntax::MemberAccessExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a MemberAccessExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMemberBindingExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitMemberBindingExpression (Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitMemberBindingExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitMemberBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitMemberBindingExpression (node As MemberBindingExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitMemberBindingExpression : Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax -&gt; unit&#xA;override this.VisitMemberBindingExpression : Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitMemberBindingExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitMemberBindingExpression(Microsoft::CodeAnalysis::CSharp::Syntax::MemberBindingExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a MemberBindingExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMethodDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitMethodDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitMethodDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitMethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitMethodDeclaration (node As MethodDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitMethodDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax -&gt; unit&#xA;override this.VisitMethodDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitMethodDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitMethodDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::MethodDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a MethodDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNameColon">
      <MemberSignature Language="C#" Value="public virtual void VisitNameColon (Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitNameColon(class Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitNameColon(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitNameColon (node As NameColonSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitNameColon : Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax -&gt; unit&#xA;override this.VisitNameColon : Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitNameColon node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitNameColon(Microsoft::CodeAnalysis::CSharp::Syntax::NameColonSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a NameColonSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNameEquals">
      <MemberSignature Language="C#" Value="public virtual void VisitNameEquals (Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitNameEquals(class Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitNameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitNameEquals (node As NameEqualsSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitNameEquals : Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax -&gt; unit&#xA;override this.VisitNameEquals : Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitNameEquals node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitNameEquals(Microsoft::CodeAnalysis::CSharp::Syntax::NameEqualsSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a NameEqualsSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNameMemberCref">
      <MemberSignature Language="C#" Value="public virtual void VisitNameMemberCref (Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitNameMemberCref(class Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitNameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitNameMemberCref (node As NameMemberCrefSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitNameMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax -&gt; unit&#xA;override this.VisitNameMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitNameMemberCref node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitNameMemberCref(Microsoft::CodeAnalysis::CSharp::Syntax::NameMemberCrefSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a NameMemberCrefSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNamespaceDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitNamespaceDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitNamespaceDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitNamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitNamespaceDeclaration (node As NamespaceDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitNamespaceDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax -&gt; unit&#xA;override this.VisitNamespaceDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitNamespaceDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitNamespaceDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::NamespaceDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a NamespaceDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNullableType">
      <MemberSignature Language="C#" Value="public virtual void VisitNullableType (Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitNullableType(class Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitNullableType(Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitNullableType (node As NullableTypeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitNullableType : Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax -&gt; unit&#xA;override this.VisitNullableType : Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitNullableType node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitNullableType(Microsoft::CodeAnalysis::CSharp::Syntax::NullableTypeSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a NullableTypeSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitObjectCreationExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitObjectCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitObjectCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitObjectCreationExpression (node As ObjectCreationExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitObjectCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax -&gt; unit&#xA;override this.VisitObjectCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitObjectCreationExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitObjectCreationExpression(Microsoft::CodeAnalysis::CSharp::Syntax::ObjectCreationExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ObjectCreationExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOmittedArraySizeExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitOmittedArraySizeExpression (Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitOmittedArraySizeExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitOmittedArraySizeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitOmittedArraySizeExpression (node As OmittedArraySizeExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitOmittedArraySizeExpression : Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax -&gt; unit&#xA;override this.VisitOmittedArraySizeExpression : Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitOmittedArraySizeExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitOmittedArraySizeExpression(Microsoft::CodeAnalysis::CSharp::Syntax::OmittedArraySizeExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a OmittedArraySizeExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOmittedTypeArgument">
      <MemberSignature Language="C#" Value="public virtual void VisitOmittedTypeArgument (Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitOmittedTypeArgument(class Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitOmittedTypeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitOmittedTypeArgument (node As OmittedTypeArgumentSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitOmittedTypeArgument : Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax -&gt; unit&#xA;override this.VisitOmittedTypeArgument : Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitOmittedTypeArgument node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitOmittedTypeArgument(Microsoft::CodeAnalysis::CSharp::Syntax::OmittedTypeArgumentSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a OmittedTypeArgumentSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOperatorDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitOperatorDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitOperatorDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitOperatorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitOperatorDeclaration (node As OperatorDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitOperatorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax -&gt; unit&#xA;override this.VisitOperatorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitOperatorDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitOperatorDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::OperatorDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a OperatorDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOperatorMemberCref">
      <MemberSignature Language="C#" Value="public virtual void VisitOperatorMemberCref (Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitOperatorMemberCref(class Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitOperatorMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitOperatorMemberCref (node As OperatorMemberCrefSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitOperatorMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax -&gt; unit&#xA;override this.VisitOperatorMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitOperatorMemberCref node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitOperatorMemberCref(Microsoft::CodeAnalysis::CSharp::Syntax::OperatorMemberCrefSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a OperatorMemberCrefSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOrderByClause">
      <MemberSignature Language="C#" Value="public virtual void VisitOrderByClause (Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitOrderByClause(class Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitOrderByClause(Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitOrderByClause (node As OrderByClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitOrderByClause : Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax -&gt; unit&#xA;override this.VisitOrderByClause : Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitOrderByClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitOrderByClause(Microsoft::CodeAnalysis::CSharp::Syntax::OrderByClauseSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a OrderByClauseSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOrdering">
      <MemberSignature Language="C#" Value="public virtual void VisitOrdering (Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitOrdering(class Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitOrdering(Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitOrdering (node As OrderingSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitOrdering : Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax -&gt; unit&#xA;override this.VisitOrdering : Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitOrdering node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitOrdering(Microsoft::CodeAnalysis::CSharp::Syntax::OrderingSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a OrderingSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitParameter">
      <MemberSignature Language="C#" Value="public virtual void VisitParameter (Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitParameter(class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitParameter(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitParameter (node As ParameterSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitParameter : Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax -&gt; unit&#xA;override this.VisitParameter : Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitParameter node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitParameter(Microsoft::CodeAnalysis::CSharp::Syntax::ParameterSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ParameterSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitParameterList">
      <MemberSignature Language="C#" Value="public virtual void VisitParameterList (Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitParameterList(class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitParameterList (node As ParameterListSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax -&gt; unit&#xA;override this.VisitParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitParameterList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitParameterList(Microsoft::CodeAnalysis::CSharp::Syntax::ParameterListSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ParameterListSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitParenthesizedExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitParenthesizedExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitParenthesizedExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitParenthesizedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitParenthesizedExpression (node As ParenthesizedExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitParenthesizedExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax -&gt; unit&#xA;override this.VisitParenthesizedExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitParenthesizedExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitParenthesizedExpression(Microsoft::CodeAnalysis::CSharp::Syntax::ParenthesizedExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ParenthesizedExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitParenthesizedLambdaExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitParenthesizedLambdaExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitParenthesizedLambdaExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitParenthesizedLambdaExpression (node As ParenthesizedLambdaExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitParenthesizedLambdaExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax -&gt; unit&#xA;override this.VisitParenthesizedLambdaExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitParenthesizedLambdaExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitParenthesizedLambdaExpression(Microsoft::CodeAnalysis::CSharp::Syntax::ParenthesizedLambdaExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ParenthesizedLambdaExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitParenthesizedVariableDesignation">
      <MemberSignature Language="C#" Value="public virtual void VisitParenthesizedVariableDesignation (Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitParenthesizedVariableDesignation(class Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitParenthesizedVariableDesignation(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitParenthesizedVariableDesignation (node As ParenthesizedVariableDesignationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitParenthesizedVariableDesignation : Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax -&gt; unit&#xA;override this.VisitParenthesizedVariableDesignation : Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitParenthesizedVariableDesignation node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitParenthesizedVariableDesignation(Microsoft::CodeAnalysis::CSharp::Syntax::ParenthesizedVariableDesignationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ParenthesizedVariableDesignationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPointerType">
      <MemberSignature Language="C#" Value="public virtual void VisitPointerType (Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitPointerType(class Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitPointerType(Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitPointerType (node As PointerTypeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitPointerType : Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax -&gt; unit&#xA;override this.VisitPointerType : Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitPointerType node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitPointerType(Microsoft::CodeAnalysis::CSharp::Syntax::PointerTypeSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a PointerTypeSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPostfixUnaryExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitPostfixUnaryExpression (Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitPostfixUnaryExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitPostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitPostfixUnaryExpression (node As PostfixUnaryExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitPostfixUnaryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax -&gt; unit&#xA;override this.VisitPostfixUnaryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitPostfixUnaryExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitPostfixUnaryExpression(Microsoft::CodeAnalysis::CSharp::Syntax::PostfixUnaryExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a PostfixUnaryExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPragmaChecksumDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitPragmaChecksumDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitPragmaChecksumDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitPragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitPragmaChecksumDirectiveTrivia (node As PragmaChecksumDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitPragmaChecksumDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitPragmaChecksumDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitPragmaChecksumDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitPragmaChecksumDirectiveTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::PragmaChecksumDirectiveTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a PragmaChecksumDirectiveTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPragmaWarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitPragmaWarningDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitPragmaWarningDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitPragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitPragmaWarningDirectiveTrivia (node As PragmaWarningDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitPragmaWarningDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitPragmaWarningDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitPragmaWarningDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitPragmaWarningDirectiveTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::PragmaWarningDirectiveTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a PragmaWarningDirectiveTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPredefinedType">
      <MemberSignature Language="C#" Value="public virtual void VisitPredefinedType (Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitPredefinedType(class Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitPredefinedType(Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitPredefinedType (node As PredefinedTypeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitPredefinedType : Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax -&gt; unit&#xA;override this.VisitPredefinedType : Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitPredefinedType node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitPredefinedType(Microsoft::CodeAnalysis::CSharp::Syntax::PredefinedTypeSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a PredefinedTypeSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPrefixUnaryExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitPrefixUnaryExpression (Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitPrefixUnaryExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitPrefixUnaryExpression (node As PrefixUnaryExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitPrefixUnaryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax -&gt; unit&#xA;override this.VisitPrefixUnaryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitPrefixUnaryExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitPrefixUnaryExpression(Microsoft::CodeAnalysis::CSharp::Syntax::PrefixUnaryExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a PrefixUnaryExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPropertyDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitPropertyDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitPropertyDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitPropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitPropertyDeclaration (node As PropertyDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitPropertyDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax -&gt; unit&#xA;override this.VisitPropertyDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitPropertyDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitPropertyDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::PropertyDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a PropertyDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitQualifiedCref">
      <MemberSignature Language="C#" Value="public virtual void VisitQualifiedCref (Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitQualifiedCref(class Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitQualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitQualifiedCref (node As QualifiedCrefSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitQualifiedCref : Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax -&gt; unit&#xA;override this.VisitQualifiedCref : Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitQualifiedCref node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitQualifiedCref(Microsoft::CodeAnalysis::CSharp::Syntax::QualifiedCrefSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a QualifiedCrefSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitQualifiedName">
      <MemberSignature Language="C#" Value="public virtual void VisitQualifiedName (Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitQualifiedName(class Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitQualifiedName (node As QualifiedNameSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitQualifiedName : Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax -&gt; unit&#xA;override this.VisitQualifiedName : Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitQualifiedName node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitQualifiedName(Microsoft::CodeAnalysis::CSharp::Syntax::QualifiedNameSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a QualifiedNameSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitQueryBody">
      <MemberSignature Language="C#" Value="public virtual void VisitQueryBody (Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitQueryBody(class Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitQueryBody(Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitQueryBody (node As QueryBodySyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitQueryBody : Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax -&gt; unit&#xA;override this.VisitQueryBody : Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitQueryBody node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitQueryBody(Microsoft::CodeAnalysis::CSharp::Syntax::QueryBodySyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a QueryBodySyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitQueryContinuation">
      <MemberSignature Language="C#" Value="public virtual void VisitQueryContinuation (Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitQueryContinuation(class Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitQueryContinuation(Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitQueryContinuation (node As QueryContinuationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitQueryContinuation : Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax -&gt; unit&#xA;override this.VisitQueryContinuation : Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitQueryContinuation node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitQueryContinuation(Microsoft::CodeAnalysis::CSharp::Syntax::QueryContinuationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a QueryContinuationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitQueryExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitQueryExpression (Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitQueryExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitQueryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitQueryExpression (node As QueryExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitQueryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax -&gt; unit&#xA;override this.VisitQueryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitQueryExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitQueryExpression(Microsoft::CodeAnalysis::CSharp::Syntax::QueryExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a QueryExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitReferenceDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitReferenceDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitReferenceDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitReferenceDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitReferenceDirectiveTrivia (node As ReferenceDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitReferenceDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitReferenceDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitReferenceDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitReferenceDirectiveTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::ReferenceDirectiveTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ReferenceDirectiveTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRefExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitRefExpression (Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitRefExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitRefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitRefExpression (node As RefExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitRefExpression : Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax -&gt; unit&#xA;override this.VisitRefExpression : Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitRefExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitRefExpression(Microsoft::CodeAnalysis::CSharp::Syntax::RefExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a RefExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRefType">
      <MemberSignature Language="C#" Value="public virtual void VisitRefType (Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitRefType(class Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitRefType(Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitRefType (node As RefTypeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitRefType : Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax -&gt; unit&#xA;override this.VisitRefType : Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitRefType node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitRefType(Microsoft::CodeAnalysis::CSharp::Syntax::RefTypeSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a RefTypeSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRefTypeExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitRefTypeExpression (Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitRefTypeExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitRefTypeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitRefTypeExpression (node As RefTypeExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitRefTypeExpression : Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax -&gt; unit&#xA;override this.VisitRefTypeExpression : Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitRefTypeExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitRefTypeExpression(Microsoft::CodeAnalysis::CSharp::Syntax::RefTypeExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a RefTypeExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRefValueExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitRefValueExpression (Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitRefValueExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitRefValueExpression(Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitRefValueExpression (node As RefValueExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitRefValueExpression : Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax -&gt; unit&#xA;override this.VisitRefValueExpression : Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitRefValueExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitRefValueExpression(Microsoft::CodeAnalysis::CSharp::Syntax::RefValueExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a RefValueExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRegionDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitRegionDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitRegionDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitRegionDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitRegionDirectiveTrivia (node As RegionDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitRegionDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitRegionDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitRegionDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitRegionDirectiveTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::RegionDirectiveTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a RegionDirectiveTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitReturnStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitReturnStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitReturnStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitReturnStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitReturnStatement (node As ReturnStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitReturnStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax -&gt; unit&#xA;override this.VisitReturnStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitReturnStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitReturnStatement(Microsoft::CodeAnalysis::CSharp::Syntax::ReturnStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ReturnStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSelectClause">
      <MemberSignature Language="C#" Value="public virtual void VisitSelectClause (Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitSelectClause(class Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitSelectClause(Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSelectClause (node As SelectClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSelectClause : Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax -&gt; unit&#xA;override this.VisitSelectClause : Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitSelectClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSelectClause(Microsoft::CodeAnalysis::CSharp::Syntax::SelectClauseSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a SelectClauseSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitShebangDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitShebangDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitShebangDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitShebangDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitShebangDirectiveTrivia (node As ShebangDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitShebangDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitShebangDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitShebangDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitShebangDirectiveTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::ShebangDirectiveTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ShebangDirectiveTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSimpleBaseType">
      <MemberSignature Language="C#" Value="public virtual void VisitSimpleBaseType (Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitSimpleBaseType(class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitSimpleBaseType(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSimpleBaseType (node As SimpleBaseTypeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSimpleBaseType : Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax -&gt; unit&#xA;override this.VisitSimpleBaseType : Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitSimpleBaseType node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSimpleBaseType(Microsoft::CodeAnalysis::CSharp::Syntax::SimpleBaseTypeSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a SimpleBaseTypeSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSimpleLambdaExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitSimpleLambdaExpression (Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitSimpleLambdaExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitSimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSimpleLambdaExpression (node As SimpleLambdaExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSimpleLambdaExpression : Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax -&gt; unit&#xA;override this.VisitSimpleLambdaExpression : Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitSimpleLambdaExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSimpleLambdaExpression(Microsoft::CodeAnalysis::CSharp::Syntax::SimpleLambdaExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a SimpleLambdaExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSingleVariableDesignation">
      <MemberSignature Language="C#" Value="public virtual void VisitSingleVariableDesignation (Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitSingleVariableDesignation(class Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitSingleVariableDesignation(Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSingleVariableDesignation (node As SingleVariableDesignationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSingleVariableDesignation : Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax -&gt; unit&#xA;override this.VisitSingleVariableDesignation : Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitSingleVariableDesignation node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSingleVariableDesignation(Microsoft::CodeAnalysis::CSharp::Syntax::SingleVariableDesignationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a SingleVariableDesignationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSizeOfExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitSizeOfExpression (Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitSizeOfExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitSizeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSizeOfExpression (node As SizeOfExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSizeOfExpression : Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax -&gt; unit&#xA;override this.VisitSizeOfExpression : Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitSizeOfExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSizeOfExpression(Microsoft::CodeAnalysis::CSharp::Syntax::SizeOfExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a SizeOfExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSkippedTokensTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitSkippedTokensTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitSkippedTokensTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitSkippedTokensTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSkippedTokensTrivia (node As SkippedTokensTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSkippedTokensTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax -&gt; unit&#xA;override this.VisitSkippedTokensTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitSkippedTokensTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSkippedTokensTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::SkippedTokensTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a SkippedTokensTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitStackAllocArrayCreationExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitStackAllocArrayCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitStackAllocArrayCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitStackAllocArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitStackAllocArrayCreationExpression (node As StackAllocArrayCreationExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitStackAllocArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax -&gt; unit&#xA;override this.VisitStackAllocArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitStackAllocArrayCreationExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitStackAllocArrayCreationExpression(Microsoft::CodeAnalysis::CSharp::Syntax::StackAllocArrayCreationExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a StackAllocArrayCreationExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitStructDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitStructDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitStructDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitStructDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitStructDeclaration (node As StructDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitStructDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax -&gt; unit&#xA;override this.VisitStructDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitStructDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitStructDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::StructDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a StructDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSwitchSection">
      <MemberSignature Language="C#" Value="public virtual void VisitSwitchSection (Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitSwitchSection(class Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitSwitchSection(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSwitchSection (node As SwitchSectionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSwitchSection : Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax -&gt; unit&#xA;override this.VisitSwitchSection : Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitSwitchSection node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSwitchSection(Microsoft::CodeAnalysis::CSharp::Syntax::SwitchSectionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a SwitchSectionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSwitchStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitSwitchStatement (Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitSwitchStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitSwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSwitchStatement (node As SwitchStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSwitchStatement : Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax -&gt; unit&#xA;override this.VisitSwitchStatement : Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitSwitchStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSwitchStatement(Microsoft::CodeAnalysis::CSharp::Syntax::SwitchStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a SwitchStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitThisExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitThisExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitThisExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitThisExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitThisExpression (node As ThisExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitThisExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax -&gt; unit&#xA;override this.VisitThisExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitThisExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitThisExpression(Microsoft::CodeAnalysis::CSharp::Syntax::ThisExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ThisExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitThrowExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitThrowExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitThrowExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitThrowExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitThrowExpression (node As ThrowExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitThrowExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax -&gt; unit&#xA;override this.VisitThrowExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitThrowExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitThrowExpression(Microsoft::CodeAnalysis::CSharp::Syntax::ThrowExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ThrowExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitThrowStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitThrowStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitThrowStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitThrowStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitThrowStatement (node As ThrowStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitThrowStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax -&gt; unit&#xA;override this.VisitThrowStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitThrowStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitThrowStatement(Microsoft::CodeAnalysis::CSharp::Syntax::ThrowStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ThrowStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTryStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitTryStatement (Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitTryStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTryStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTryStatement (node As TryStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTryStatement : Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax -&gt; unit&#xA;override this.VisitTryStatement : Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitTryStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTryStatement(Microsoft::CodeAnalysis::CSharp::Syntax::TryStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TryStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTupleElement">
      <MemberSignature Language="C#" Value="public virtual void VisitTupleElement (Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitTupleElement(class Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTupleElement(Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTupleElement (node As TupleElementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTupleElement : Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax -&gt; unit&#xA;override this.VisitTupleElement : Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitTupleElement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTupleElement(Microsoft::CodeAnalysis::CSharp::Syntax::TupleElementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TupleElementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTupleExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitTupleExpression (Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitTupleExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTupleExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTupleExpression (node As TupleExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTupleExpression : Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax -&gt; unit&#xA;override this.VisitTupleExpression : Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitTupleExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTupleExpression(Microsoft::CodeAnalysis::CSharp::Syntax::TupleExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TupleExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTupleType">
      <MemberSignature Language="C#" Value="public virtual void VisitTupleType (Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitTupleType(class Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTupleType(Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTupleType (node As TupleTypeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTupleType : Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax -&gt; unit&#xA;override this.VisitTupleType : Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitTupleType node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTupleType(Microsoft::CodeAnalysis::CSharp::Syntax::TupleTypeSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TupleTypeSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeArgumentList">
      <MemberSignature Language="C#" Value="public virtual void VisitTypeArgumentList (Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitTypeArgumentList(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTypeArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTypeArgumentList (node As TypeArgumentListSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeArgumentList : Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax -&gt; unit&#xA;override this.VisitTypeArgumentList : Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitTypeArgumentList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTypeArgumentList(Microsoft::CodeAnalysis::CSharp::Syntax::TypeArgumentListSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TypeArgumentListSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeConstraint">
      <MemberSignature Language="C#" Value="public virtual void VisitTypeConstraint (Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitTypeConstraint(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTypeConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTypeConstraint (node As TypeConstraintSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeConstraint : Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax -&gt; unit&#xA;override this.VisitTypeConstraint : Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitTypeConstraint node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTypeConstraint(Microsoft::CodeAnalysis::CSharp::Syntax::TypeConstraintSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TypeConstraintSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeCref">
      <MemberSignature Language="C#" Value="public virtual void VisitTypeCref (Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitTypeCref(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTypeCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTypeCref (node As TypeCrefSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeCref : Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax -&gt; unit&#xA;override this.VisitTypeCref : Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitTypeCref node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTypeCref(Microsoft::CodeAnalysis::CSharp::Syntax::TypeCrefSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TypeCrefSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeOfExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitTypeOfExpression (Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitTypeOfExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTypeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTypeOfExpression (node As TypeOfExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeOfExpression : Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax -&gt; unit&#xA;override this.VisitTypeOfExpression : Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitTypeOfExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTypeOfExpression(Microsoft::CodeAnalysis::CSharp::Syntax::TypeOfExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TypeOfExpressionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeParameter">
      <MemberSignature Language="C#" Value="public virtual void VisitTypeParameter (Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitTypeParameter(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTypeParameter(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTypeParameter (node As TypeParameterSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeParameter : Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax -&gt; unit&#xA;override this.VisitTypeParameter : Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitTypeParameter node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTypeParameter(Microsoft::CodeAnalysis::CSharp::Syntax::TypeParameterSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TypeParameterSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeParameterConstraintClause">
      <MemberSignature Language="C#" Value="public virtual void VisitTypeParameterConstraintClause (Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitTypeParameterConstraintClause(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTypeParameterConstraintClause (node As TypeParameterConstraintClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeParameterConstraintClause : Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax -&gt; unit&#xA;override this.VisitTypeParameterConstraintClause : Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitTypeParameterConstraintClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTypeParameterConstraintClause(Microsoft::CodeAnalysis::CSharp::Syntax::TypeParameterConstraintClauseSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TypeParameterConstraintClauseSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeParameterList">
      <MemberSignature Language="C#" Value="public virtual void VisitTypeParameterList (Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitTypeParameterList(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitTypeParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTypeParameterList (node As TypeParameterListSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax -&gt; unit&#xA;override this.VisitTypeParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitTypeParameterList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTypeParameterList(Microsoft::CodeAnalysis::CSharp::Syntax::TypeParameterListSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TypeParameterListSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUndefDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitUndefDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitUndefDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitUndefDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitUndefDirectiveTrivia (node As UndefDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitUndefDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitUndefDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitUndefDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitUndefDirectiveTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::UndefDirectiveTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a UndefDirectiveTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUnsafeStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitUnsafeStatement (Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitUnsafeStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitUnsafeStatement(Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitUnsafeStatement (node As UnsafeStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitUnsafeStatement : Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax -&gt; unit&#xA;override this.VisitUnsafeStatement : Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitUnsafeStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitUnsafeStatement(Microsoft::CodeAnalysis::CSharp::Syntax::UnsafeStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a UnsafeStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUsingDirective">
      <MemberSignature Language="C#" Value="public virtual void VisitUsingDirective (Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitUsingDirective(class Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitUsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitUsingDirective (node As UsingDirectiveSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitUsingDirective : Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax -&gt; unit&#xA;override this.VisitUsingDirective : Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitUsingDirective node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitUsingDirective(Microsoft::CodeAnalysis::CSharp::Syntax::UsingDirectiveSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a UsingDirectiveSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUsingStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitUsingStatement (Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitUsingStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitUsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitUsingStatement (node As UsingStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitUsingStatement : Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax -&gt; unit&#xA;override this.VisitUsingStatement : Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitUsingStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitUsingStatement(Microsoft::CodeAnalysis::CSharp::Syntax::UsingStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a UsingStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitVariableDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitVariableDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitVariableDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitVariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitVariableDeclaration (node As VariableDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitVariableDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax -&gt; unit&#xA;override this.VisitVariableDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitVariableDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitVariableDeclaration(Microsoft::CodeAnalysis::CSharp::Syntax::VariableDeclarationSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a VariableDeclarationSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitVariableDeclarator">
      <MemberSignature Language="C#" Value="public virtual void VisitVariableDeclarator (Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitVariableDeclarator(class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitVariableDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitVariableDeclarator (node As VariableDeclaratorSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitVariableDeclarator : Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax -&gt; unit&#xA;override this.VisitVariableDeclarator : Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitVariableDeclarator node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitVariableDeclarator(Microsoft::CodeAnalysis::CSharp::Syntax::VariableDeclaratorSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a VariableDeclaratorSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitWarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitWarningDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitWarningDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitWarningDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitWarningDirectiveTrivia (node As WarningDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitWarningDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitWarningDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitWarningDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitWarningDirectiveTrivia(Microsoft::CodeAnalysis::CSharp::Syntax::WarningDirectiveTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a WarningDirectiveTriviaSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitWhenClause">
      <MemberSignature Language="C#" Value="public virtual void VisitWhenClause (Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitWhenClause(class Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitWhenClause(Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitWhenClause (node As WhenClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitWhenClause : Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax -&gt; unit&#xA;override this.VisitWhenClause : Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitWhenClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitWhenClause(Microsoft::CodeAnalysis::CSharp::Syntax::WhenClauseSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a WhenClauseSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitWhereClause">
      <MemberSignature Language="C#" Value="public virtual void VisitWhereClause (Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitWhereClause(class Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitWhereClause(Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitWhereClause (node As WhereClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitWhereClause : Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax -&gt; unit&#xA;override this.VisitWhereClause : Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitWhereClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitWhereClause(Microsoft::CodeAnalysis::CSharp::Syntax::WhereClauseSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a WhereClauseSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitWhileStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitWhileStatement (Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitWhileStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitWhileStatement(Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitWhileStatement (node As WhileStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitWhileStatement : Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax -&gt; unit&#xA;override this.VisitWhileStatement : Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitWhileStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitWhileStatement(Microsoft::CodeAnalysis::CSharp::Syntax::WhileStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a WhileStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlCDataSection">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlCDataSection (Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitXmlCDataSection(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlCDataSection(Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlCDataSection (node As XmlCDataSectionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlCDataSection : Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax -&gt; unit&#xA;override this.VisitXmlCDataSection : Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitXmlCDataSection node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlCDataSection(Microsoft::CodeAnalysis::CSharp::Syntax::XmlCDataSectionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlCDataSectionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlComment">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlComment (Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitXmlComment(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlComment(Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlComment (node As XmlCommentSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlComment : Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax -&gt; unit&#xA;override this.VisitXmlComment : Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitXmlComment node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlComment(Microsoft::CodeAnalysis::CSharp::Syntax::XmlCommentSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlCommentSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlCrefAttribute">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlCrefAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitXmlCrefAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlCrefAttribute (node As XmlCrefAttributeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlCrefAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax -&gt; unit&#xA;override this.VisitXmlCrefAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitXmlCrefAttribute node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlCrefAttribute(Microsoft::CodeAnalysis::CSharp::Syntax::XmlCrefAttributeSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlCrefAttributeSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlElement">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlElement (Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitXmlElement(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlElement (node As XmlElementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax -&gt; unit&#xA;override this.VisitXmlElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitXmlElement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlElement(Microsoft::CodeAnalysis::CSharp::Syntax::XmlElementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlElementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlElementEndTag">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlElementEndTag (Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitXmlElementEndTag(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlElementEndTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlElementEndTag (node As XmlElementEndTagSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlElementEndTag : Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax -&gt; unit&#xA;override this.VisitXmlElementEndTag : Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitXmlElementEndTag node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlElementEndTag(Microsoft::CodeAnalysis::CSharp::Syntax::XmlElementEndTagSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlElementEndTagSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlElementStartTag">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlElementStartTag (Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitXmlElementStartTag(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlElementStartTag (node As XmlElementStartTagSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlElementStartTag : Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax -&gt; unit&#xA;override this.VisitXmlElementStartTag : Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitXmlElementStartTag node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlElementStartTag(Microsoft::CodeAnalysis::CSharp::Syntax::XmlElementStartTagSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlElementStartTagSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlEmptyElement">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlEmptyElement (Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitXmlEmptyElement(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlEmptyElement (node As XmlEmptyElementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlEmptyElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax -&gt; unit&#xA;override this.VisitXmlEmptyElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitXmlEmptyElement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlEmptyElement(Microsoft::CodeAnalysis::CSharp::Syntax::XmlEmptyElementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlEmptyElementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlName">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlName (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitXmlName(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlName (node As XmlNameSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlName : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax -&gt; unit&#xA;override this.VisitXmlName : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitXmlName node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlName(Microsoft::CodeAnalysis::CSharp::Syntax::XmlNameSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlNameSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlNameAttribute">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlNameAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitXmlNameAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlNameAttribute (node As XmlNameAttributeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlNameAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax -&gt; unit&#xA;override this.VisitXmlNameAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitXmlNameAttribute node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlNameAttribute(Microsoft::CodeAnalysis::CSharp::Syntax::XmlNameAttributeSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlNameAttributeSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlPrefix">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlPrefix (Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitXmlPrefix(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlPrefix(Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlPrefix (node As XmlPrefixSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlPrefix : Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax -&gt; unit&#xA;override this.VisitXmlPrefix : Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitXmlPrefix node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlPrefix(Microsoft::CodeAnalysis::CSharp::Syntax::XmlPrefixSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlPrefixSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlProcessingInstruction">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlProcessingInstruction (Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitXmlProcessingInstruction(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlProcessingInstruction (node As XmlProcessingInstructionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlProcessingInstruction : Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax -&gt; unit&#xA;override this.VisitXmlProcessingInstruction : Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitXmlProcessingInstruction node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlProcessingInstruction(Microsoft::CodeAnalysis::CSharp::Syntax::XmlProcessingInstructionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlProcessingInstructionSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlText">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlText (Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitXmlText(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlText(Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlText (node As XmlTextSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlText : Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax -&gt; unit&#xA;override this.VisitXmlText : Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitXmlText node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlText(Microsoft::CodeAnalysis::CSharp::Syntax::XmlTextSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlTextSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlTextAttribute">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlTextAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitXmlTextAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitXmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlTextAttribute (node As XmlTextAttributeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlTextAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax -&gt; unit&#xA;override this.VisitXmlTextAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitXmlTextAttribute node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlTextAttribute(Microsoft::CodeAnalysis::CSharp::Syntax::XmlTextAttributeSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlTextAttributeSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitYieldStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitYieldStatement (Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitYieldStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor.VisitYieldStatement(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitYieldStatement (node As YieldStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitYieldStatement : Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax -&gt; unit&#xA;override this.VisitYieldStatement : Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax -&gt; unit" Usage="cSharpSyntaxVisitor.VisitYieldStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitYieldStatement(Microsoft::CodeAnalysis::CSharp::Syntax::YieldStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a YieldStatementSyntax node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>