<Type Name="SourceText" FullName="Microsoft.CodeAnalysis.Text.SourceText">
  <TypeSignature Language="C#" Value="public abstract class SourceText" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SourceText extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Text.SourceText" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SourceText" />
  <TypeSignature Language="F#" Value="type SourceText = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class SourceText abstract" />
  <TypeSignature Language="C++ CX" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;public ref class SourceText abstract" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class SourceText abstract" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            An abstraction of source text.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SourceText (System.Collections.Immutable.ImmutableArray&lt;byte&gt; checksum = null, Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm = Microsoft.CodeAnalysis.Text.SourceHashAlgorithm.Sha1, Microsoft.CodeAnalysis.Text.SourceTextContainer container = null);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; checksum, valuetype Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm, class Microsoft.CodeAnalysis.Text.SourceTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.#ctor(System.Collections.Immutable.ImmutableArray{System.Byte},Microsoft.CodeAnalysis.Text.SourceHashAlgorithm,Microsoft.CodeAnalysis.Text.SourceTextContainer)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (Optional checksum As ImmutableArray(Of Byte) = null, Optional checksumAlgorithm As SourceHashAlgorithm = Microsoft.CodeAnalysis.Text.SourceHashAlgorithm.Sha1, Optional container As SourceTextContainer = null)" />
      <MemberSignature Language="F#" Value="new Microsoft.CodeAnalysis.Text.SourceText : System.Collections.Immutable.ImmutableArray&lt;byte&gt; * Microsoft.CodeAnalysis.Text.SourceHashAlgorithm * Microsoft.CodeAnalysis.Text.SourceTextContainer -&gt; Microsoft.CodeAnalysis.Text.SourceText" Usage="new Microsoft.CodeAnalysis.Text.SourceText (checksum, checksumAlgorithm, container)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="checksum" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
        <Parameter Name="checksumAlgorithm" Type="Microsoft.CodeAnalysis.Text.SourceHashAlgorithm" />
        <Parameter Name="container" Type="Microsoft.CodeAnalysis.Text.SourceTextContainer" />
      </Parameters>
      <Docs>
        <param name="checksum">To be added.</param>
        <param name="checksumAlgorithm">To be added.</param>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBeEmbedded">
      <MemberSignature Language="C#" Value="public bool CanBeEmbedded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanBeEmbedded" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Text.SourceText.CanBeEmbedded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanBeEmbedded As Boolean" />
      <MemberSignature Language="F#" Value="member this.CanBeEmbedded : bool" Usage="Microsoft.CodeAnalysis.Text.SourceText.CanBeEmbedded" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanBeEmbedded { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool CanBeEmbedded { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Indicates whether this source text can be embedded in the PDB.
             </summary>
        <value>To be added.</value>
        <remarks>
             If this text was constructed via <see cref="M:Microsoft.CodeAnalysis.Text.SourceText.From(System.Byte[],System.Int32,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm,System.Boolean,System.Boolean)" /> or
             <see cref="M:Microsoft.CodeAnalysis.Text.SourceText.From(System.IO.Stream,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm,System.Boolean,System.Boolean)" />, then the canBeEmbedded arg must have
             been true.
            
             Otherwise, <see cref="P:Microsoft.CodeAnalysis.Text.SourceText.Encoding" /> must be non-null.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChecksumAlgorithm">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Text.SourceHashAlgorithm ChecksumAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.Text.SourceHashAlgorithm ChecksumAlgorithm" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Text.SourceText.ChecksumAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChecksumAlgorithm As SourceHashAlgorithm" />
      <MemberSignature Language="F#" Value="member this.ChecksumAlgorithm : Microsoft.CodeAnalysis.Text.SourceHashAlgorithm" Usage="Microsoft.CodeAnalysis.Text.SourceText.ChecksumAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::Text::SourceHashAlgorithm ChecksumAlgorithm { Microsoft::CodeAnalysis::Text::SourceHashAlgorithm get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::Text::SourceHashAlgorithm ChecksumAlgorithm { Microsoft::CodeAnalysis::Text::SourceHashAlgorithm get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.SourceHashAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Hash algorithm to use to calculate checksum of the text that's saved to PDB.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Container">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.Text.SourceTextContainer Container { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.Text.SourceTextContainer Container" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Text.SourceText.Container" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Container As SourceTextContainer" />
      <MemberSignature Language="F#" Value="member this.Container : Microsoft.CodeAnalysis.Text.SourceTextContainer" Usage="Microsoft.CodeAnalysis.Text.SourceText.Container" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::CodeAnalysis::Text::SourceTextContainer ^ Container { Microsoft::CodeAnalysis::Text::SourceTextContainer ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property Microsoft::CodeAnalysis::Text::SourceTextContainer ^ Container { Microsoft::CodeAnalysis::Text::SourceTextContainer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.SourceTextContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The container of this <see cref="T:Microsoft.CodeAnalysis.Text.SourceText" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentEquals">
      <MemberSignature Language="C#" Value="public bool ContentEquals (Microsoft.CodeAnalysis.Text.SourceText other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ContentEquals(class Microsoft.CodeAnalysis.Text.SourceText other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.ContentEquals(Microsoft.CodeAnalysis.Text.SourceText)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContentEquals (other As SourceText) As Boolean" />
      <MemberSignature Language="F#" Value="member this.ContentEquals : Microsoft.CodeAnalysis.Text.SourceText -&gt; bool" Usage="sourceText.ContentEquals other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContentEquals(Microsoft::CodeAnalysis::Text::SourceText ^ other);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; bool ContentEquals(Microsoft::CodeAnalysis::Text::SourceText ^ other);" />
      <MemberSignature Language="C++ WINRT" Value="bool ContentEquals(Microsoft::CodeAnalysis::Text::SourceText const &amp; other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.CodeAnalysis.Text.SourceText" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>
            Compares the content with content of another <see cref="T:Microsoft.CodeAnalysis.Text.SourceText" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentEqualsImpl">
      <MemberSignature Language="C#" Value="protected virtual bool ContentEqualsImpl (Microsoft.CodeAnalysis.Text.SourceText other);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ContentEqualsImpl(class Microsoft.CodeAnalysis.Text.SourceText other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.ContentEqualsImpl(Microsoft.CodeAnalysis.Text.SourceText)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ContentEqualsImpl (other As SourceText) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ContentEqualsImpl : Microsoft.CodeAnalysis.Text.SourceText -&gt; bool&#xA;override this.ContentEqualsImpl : Microsoft.CodeAnalysis.Text.SourceText -&gt; bool" Usage="sourceText.ContentEqualsImpl other" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ContentEqualsImpl(Microsoft::CodeAnalysis::Text::SourceText ^ other);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual bool ContentEqualsImpl(Microsoft::CodeAnalysis::Text::SourceText ^ other);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual bool ContentEqualsImpl(Microsoft::CodeAnalysis::Text::SourceText const &amp; other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.CodeAnalysis.Text.SourceText" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>
            Implements equality comparison of the content of two different instances of <see cref="T:Microsoft.CodeAnalysis.Text.SourceText" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public abstract void CopyTo (int sourceIndex, char[] destination, int destinationIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(int32 sourceIndex, char[] destination, int32 destinationIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub CopyTo (sourceIndex As Integer, destination As Char(), destinationIndex As Integer, count As Integer)" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : int * char[] * int * int -&gt; unit" Usage="sourceText.CopyTo (sourceIndex, destination, destinationIndex, count)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void CopyTo(int sourceIndex, cli::array &lt;char&gt; ^ destination, int destinationIndex, int count);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract void CopyTo(int sourceIndex, Platform::Array &lt;char16&gt; ^ destination, int destinationIndex, int count);" />
      <MemberSignature Language="C++ WINRT" Value=" abstract void CopyTo(int sourceIndex, std::Array &lt;char&gt; const &amp; destination, int destinationIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.Char[]" />
        <Parameter Name="destinationIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceIndex">To be added.</param>
        <param name="destination">To be added.</param>
        <param name="destinationIndex">To be added.</param>
        <param name="count">To be added.</param>
        <summary>
            Copy a range of characters from this SourceText to a destination array.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Text.SourceText.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="Microsoft.CodeAnalysis.Text.SourceText.Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Encoding of the file that the text was read from or is going to be saved to.
            <c>null</c> if the encoding is unspecified.
            </summary>
        <value>To be added.</value>
        <remarks>
            If the encoding is not specified the source isn't debuggable.
            If an encoding-less <see cref="T:Microsoft.CodeAnalysis.Text.SourceText" /> is written to a file a <see cref="P:System.Text.Encoding.UTF8" /> shall be used as a default.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Text.SourceText From (string text, System.Text.Encoding encoding = null, Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm = Microsoft.CodeAnalysis.Text.SourceHashAlgorithm.Sha1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Text.SourceText From(string text, class System.Text.Encoding encoding, valuetype Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.From(System.String,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm)" />
      <MemberSignature Language="F#" Value="static member From : string * System.Text.Encoding * Microsoft.CodeAnalysis.Text.SourceHashAlgorithm -&gt; Microsoft.CodeAnalysis.Text.SourceText" Usage="Microsoft.CodeAnalysis.Text.SourceText.From (text, encoding, checksumAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.SourceText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="checksumAlgorithm" Type="Microsoft.CodeAnalysis.Text.SourceHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="text">Text.</param>
        <param name="encoding">
            Encoding of the file that the <paramref name="text" /> was read from or is going to be saved to.
            <c>null</c> if the encoding is unspecified.
            If the encoding is not specified the resulting <see cref="T:Microsoft.CodeAnalysis.Text.SourceText" /> isn't debuggable.
            If an encoding-less <see cref="T:Microsoft.CodeAnalysis.Text.SourceText" /> is written to a file a <see cref="P:System.Text.Encoding.UTF8" /> shall be used as a default.
            </param>
        <param name="checksumAlgorithm">
            Hash algorithm to use to calculate checksum of the text that's saved to PDB.
            </param>
        <summary>
            Constructs a <see cref="T:Microsoft.CodeAnalysis.Text.SourceText" /> from text in a string.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> is null.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="checksumAlgorithm" /> is not supported.</exception>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Text.SourceText From (System.IO.Stream stream, System.Text.Encoding encoding, Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm, bool throwIfBinaryDetected);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Text.SourceText From(class System.IO.Stream stream, class System.Text.Encoding encoding, valuetype Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm, bool throwIfBinaryDetected) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.From(System.IO.Stream,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm,System.Boolean)" />
      <MemberSignature Language="F#" Value="static member From : System.IO.Stream * System.Text.Encoding * Microsoft.CodeAnalysis.Text.SourceHashAlgorithm * bool -&gt; Microsoft.CodeAnalysis.Text.SourceText" Usage="Microsoft.CodeAnalysis.Text.SourceText.From (stream, encoding, checksumAlgorithm, throwIfBinaryDetected)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::Text::SourceText ^ From(System::IO::Stream ^ stream, System::Text::Encoding ^ encoding, Microsoft::CodeAnalysis::Text::SourceHashAlgorithm checksumAlgorithm, bool throwIfBinaryDetected);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.SourceText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="checksumAlgorithm" Type="Microsoft.CodeAnalysis.Text.SourceHashAlgorithm" />
        <Parameter Name="throwIfBinaryDetected" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="checksumAlgorithm">To be added.</param>
        <param name="throwIfBinaryDetected">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Text.SourceText From (System.IO.TextReader reader, int length, System.Text.Encoding encoding = null, Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm = Microsoft.CodeAnalysis.Text.SourceHashAlgorithm.Sha1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Text.SourceText From(class System.IO.TextReader reader, int32 length, class System.Text.Encoding encoding, valuetype Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.From(System.IO.TextReader,System.Int32,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm)" />
      <MemberSignature Language="F#" Value="static member From : System.IO.TextReader * int * System.Text.Encoding * Microsoft.CodeAnalysis.Text.SourceHashAlgorithm -&gt; Microsoft.CodeAnalysis.Text.SourceText" Usage="Microsoft.CodeAnalysis.Text.SourceText.From (reader, length, encoding, checksumAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.SourceText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="checksumAlgorithm" Type="Microsoft.CodeAnalysis.Text.SourceHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="reader">TextReader</param>
        <param name="length">length of content from <paramref name="reader" /></param>
        <param name="encoding">
            Encoding of the file that the <paramref name="reader" /> was read from or is going to be saved to.
            <c>null</c> if the encoding is unspecified.
            If the encoding is not specified the resulting <see cref="T:Microsoft.CodeAnalysis.Text.SourceText" /> isn't debuggable.
            If an encoding-less <see cref="T:Microsoft.CodeAnalysis.Text.SourceText" /> is written to a file a <see cref="P:System.Text.Encoding.UTF8" /> shall be used as a default.
            </param>
        <param name="checksumAlgorithm">
            Hash algorithm to use to calculate checksum of the text that's saved to PDB.
            </param>
        <summary>
            Constructs a <see cref="T:Microsoft.CodeAnalysis.Text.SourceText" /> from text in a string.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> is null.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="checksumAlgorithm" /> is not supported.</exception>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Text.SourceText From (byte[] buffer, int length, System.Text.Encoding encoding, Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm, bool throwIfBinaryDetected);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Text.SourceText From(unsigned int8[] buffer, int32 length, class System.Text.Encoding encoding, valuetype Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm, bool throwIfBinaryDetected) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.From(System.Byte[],System.Int32,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm,System.Boolean)" />
      <MemberSignature Language="F#" Value="static member From : byte[] * int * System.Text.Encoding * Microsoft.CodeAnalysis.Text.SourceHashAlgorithm * bool -&gt; Microsoft.CodeAnalysis.Text.SourceText" Usage="Microsoft.CodeAnalysis.Text.SourceText.From (buffer, length, encoding, checksumAlgorithm, throwIfBinaryDetected)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::Text::SourceText ^ From(cli::array &lt;System::Byte&gt; ^ buffer, int length, System::Text::Encoding ^ encoding, Microsoft::CodeAnalysis::Text::SourceHashAlgorithm checksumAlgorithm, bool throwIfBinaryDetected);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.SourceText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="checksumAlgorithm" Type="Microsoft.CodeAnalysis.Text.SourceHashAlgorithm" />
        <Parameter Name="throwIfBinaryDetected" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="length">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="checksumAlgorithm">To be added.</param>
        <param name="throwIfBinaryDetected">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Text.SourceText From (System.IO.Stream stream, System.Text.Encoding encoding = null, Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm = Microsoft.CodeAnalysis.Text.SourceHashAlgorithm.Sha1, bool throwIfBinaryDetected = false, bool canBeEmbedded = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Text.SourceText From(class System.IO.Stream stream, class System.Text.Encoding encoding, valuetype Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm, bool throwIfBinaryDetected, bool canBeEmbedded) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.From(System.IO.Stream,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm,System.Boolean,System.Boolean)" />
      <MemberSignature Language="F#" Value="static member From : System.IO.Stream * System.Text.Encoding * Microsoft.CodeAnalysis.Text.SourceHashAlgorithm * bool * bool -&gt; Microsoft.CodeAnalysis.Text.SourceText" Usage="Microsoft.CodeAnalysis.Text.SourceText.From (stream, encoding, checksumAlgorithm, throwIfBinaryDetected, canBeEmbedded)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.SourceText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="checksumAlgorithm" Type="Microsoft.CodeAnalysis.Text.SourceHashAlgorithm" />
        <Parameter Name="throwIfBinaryDetected" Type="System.Boolean" />
        <Parameter Name="canBeEmbedded" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">Stream. The stream must be seekable.</param>
        <param name="encoding">
            Data encoding to use if the stream doesn't start with Byte Order Mark specifying the encoding.
            <see cref="P:System.Text.Encoding.UTF8" /> if not specified.
            </param>
        <param name="checksumAlgorithm">
            Hash algorithm to use to calculate checksum of the text that's saved to PDB.
            </param>
        <param name="throwIfBinaryDetected">If the decoded text contains at least two consecutive NUL
            characters, then an <see cref="T:System.IO.InvalidDataException" /> is thrown.</param>
        <param name="canBeEmbedded">True if the text can be passed to <see cref="M:Microsoft.CodeAnalysis.EmbeddedText.FromSource(System.String,Microsoft.CodeAnalysis.Text.SourceText)" /> and be embedded in a PDB.</param>
        <summary>
            Constructs a <see cref="T:Microsoft.CodeAnalysis.Text.SourceText" /> from stream content.
            </summary>
        <returns>To be added.</returns>
        <remarks>Reads from the beginning of the stream. Leaves the stream open.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> is null.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> doesn't support reading or seeking.
            <paramref name="checksumAlgorithm" /> is not supported.
            </exception>
        <exception cref="T:System.Text.DecoderFallbackException">If the given encoding is set to use a throwing decoder as a fallback</exception>
        <exception cref="T:System.IO.InvalidDataException">Two consecutive NUL characters were detected in the decoded text and <paramref name="throwIfBinaryDetected" /> was true.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Text.SourceText From (byte[] buffer, int length, System.Text.Encoding encoding = null, Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm = Microsoft.CodeAnalysis.Text.SourceHashAlgorithm.Sha1, bool throwIfBinaryDetected = false, bool canBeEmbedded = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Text.SourceText From(unsigned int8[] buffer, int32 length, class System.Text.Encoding encoding, valuetype Microsoft.CodeAnalysis.Text.SourceHashAlgorithm checksumAlgorithm, bool throwIfBinaryDetected, bool canBeEmbedded) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.From(System.Byte[],System.Int32,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm,System.Boolean,System.Boolean)" />
      <MemberSignature Language="F#" Value="static member From : byte[] * int * System.Text.Encoding * Microsoft.CodeAnalysis.Text.SourceHashAlgorithm * bool * bool -&gt; Microsoft.CodeAnalysis.Text.SourceText" Usage="Microsoft.CodeAnalysis.Text.SourceText.From (buffer, length, encoding, checksumAlgorithm, throwIfBinaryDetected, canBeEmbedded)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.SourceText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="checksumAlgorithm" Type="Microsoft.CodeAnalysis.Text.SourceHashAlgorithm" />
        <Parameter Name="throwIfBinaryDetected" Type="System.Boolean" />
        <Parameter Name="canBeEmbedded" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="buffer">The encoded source buffer.</param>
        <param name="length">The number of bytes to read from the buffer.</param>
        <param name="encoding">
            Data encoding to use if the encoded buffer doesn't start with Byte Order Mark.
            <see cref="P:System.Text.Encoding.UTF8" /> if not specified.
            </param>
        <param name="checksumAlgorithm">
            Hash algorithm to use to calculate checksum of the text that's saved to PDB.
            </param>
        <param name="throwIfBinaryDetected">If the decoded text contains at least two consecutive NUL
            characters, then an <see cref="T:System.IO.InvalidDataException" /> is thrown.</param>
        <param name="canBeEmbedded">True if the text can be passed to <see cref="M:Microsoft.CodeAnalysis.EmbeddedText.FromSource(System.String,Microsoft.CodeAnalysis.Text.SourceText)" /> and be embedded in a PDB.</param>
        <summary>
            Constructs a <see cref="T:Microsoft.CodeAnalysis.Text.SourceText" /> from a byte array.
            </summary>
        <returns>The decoded text.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> is null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="length" /> is negative or longer than the <paramref name="buffer" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="checksumAlgorithm" /> is not supported.</exception>
        <exception cref="T:System.Text.DecoderFallbackException">If the given encoding is set to use a throwing decoder as a fallback</exception>
        <exception cref="T:System.IO.InvalidDataException">Two consecutive NUL characters were detected in the decoded text and <paramref name="throwIfBinaryDetected" /> was true.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetChangeRanges">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.Text.TextChangeRange&gt; GetChangeRanges (Microsoft.CodeAnalysis.Text.SourceText oldText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;valuetype Microsoft.CodeAnalysis.Text.TextChangeRange&gt; GetChangeRanges(class Microsoft.CodeAnalysis.Text.SourceText oldText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.GetChangeRanges(Microsoft.CodeAnalysis.Text.SourceText)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChangeRanges (oldText As SourceText) As IReadOnlyList(Of TextChangeRange)" />
      <MemberSignature Language="F#" Value="abstract member GetChangeRanges : Microsoft.CodeAnalysis.Text.SourceText -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.Text.TextChangeRange&gt;&#xA;override this.GetChangeRanges : Microsoft.CodeAnalysis.Text.SourceText -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.Text.TextChangeRange&gt;" Usage="sourceText.GetChangeRanges oldText" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::Text::TextChangeRange&gt; ^ GetChangeRanges(Microsoft::CodeAnalysis::Text::SourceText ^ oldText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.Text.TextChangeRange&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldText" Type="Microsoft.CodeAnalysis.Text.SourceText" />
      </Parameters>
      <Docs>
        <param name="oldText">To be added.</param>
        <summary>
            Gets the set of <see cref="T:Microsoft.CodeAnalysis.Text.TextChangeRange" /> that describe how the text changed
            between this text an older version. This may be multiple detailed changes
            or a single change encompassing the entire text.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChecksum">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;byte&gt; GetChecksum ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; GetChecksum() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.GetChecksum" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChecksum () As ImmutableArray(Of Byte)" />
      <MemberSignature Language="F#" Value="member this.GetChecksum : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;byte&gt;" Usage="sourceText.GetChecksum " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; GetChecksum();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLinesCore">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.CodeAnalysis.Text.TextLineCollection GetLinesCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.CodeAnalysis.Text.TextLineCollection GetLinesCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.GetLinesCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetLinesCore () As TextLineCollection" />
      <MemberSignature Language="F#" Value="abstract member GetLinesCore : unit -&gt; Microsoft.CodeAnalysis.Text.TextLineCollection&#xA;override this.GetLinesCore : unit -&gt; Microsoft.CodeAnalysis.Text.TextLineCollection" Usage="sourceText.GetLinesCore " />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Microsoft::CodeAnalysis::Text::TextLineCollection ^ GetLinesCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.TextLineCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Called from <see cref="P:Microsoft.CodeAnalysis.Text.SourceText.Lines" /> to initialize the <see cref="T:Microsoft.CodeAnalysis.Text.TextLineCollection" />. Thereafter,
            the collection is cached.
            </summary>
        <returns>A new <see cref="T:Microsoft.CodeAnalysis.Text.TextLineCollection" /> representing the individual text lines.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSubText">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.Text.SourceText GetSubText (Microsoft.CodeAnalysis.Text.TextSpan span);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.Text.SourceText GetSubText(valuetype Microsoft.CodeAnalysis.Text.TextSpan span) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.GetSubText(Microsoft.CodeAnalysis.Text.TextSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubText (span As TextSpan) As SourceText" />
      <MemberSignature Language="F#" Value="abstract member GetSubText : Microsoft.CodeAnalysis.Text.TextSpan -&gt; Microsoft.CodeAnalysis.Text.SourceText&#xA;override this.GetSubText : Microsoft.CodeAnalysis.Text.TextSpan -&gt; Microsoft.CodeAnalysis.Text.SourceText" Usage="sourceText.GetSubText span" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::CodeAnalysis::Text::SourceText ^ GetSubText(Microsoft::CodeAnalysis::Text::TextSpan span);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.SourceText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="Microsoft.CodeAnalysis.Text.TextSpan" />
      </Parameters>
      <Docs>
        <param name="span">To be added.</param>
        <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.Text.SourceText" /> that contains the characters in the specified span of this text.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSubText">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Text.SourceText GetSubText (int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.Text.SourceText GetSubText(int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.GetSubText(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSubText (start As Integer) As SourceText" />
      <MemberSignature Language="F#" Value="member this.GetSubText : int -&gt; Microsoft.CodeAnalysis.Text.SourceText" Usage="sourceText.GetSubText start" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::Text::SourceText ^ GetSubText(int start);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::Text::SourceText ^ GetSubText(int start);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::Text::SourceText GetSubText(int start);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.SourceText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <summary>
            Returns a <see cref="T:Microsoft.CodeAnalysis.Text.SourceText" /> that has the contents of this text including and after the start position.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextChanges">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.Text.TextChange&gt; GetTextChanges (Microsoft.CodeAnalysis.Text.SourceText oldText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;valuetype Microsoft.CodeAnalysis.Text.TextChange&gt; GetTextChanges(class Microsoft.CodeAnalysis.Text.SourceText oldText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.GetTextChanges(Microsoft.CodeAnalysis.Text.SourceText)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTextChanges (oldText As SourceText) As IReadOnlyList(Of TextChange)" />
      <MemberSignature Language="F#" Value="abstract member GetTextChanges : Microsoft.CodeAnalysis.Text.SourceText -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.Text.TextChange&gt;&#xA;override this.GetTextChanges : Microsoft.CodeAnalysis.Text.SourceText -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.Text.TextChange&gt;" Usage="sourceText.GetTextChanges oldText" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::Text::TextChange&gt; ^ GetTextChanges(Microsoft::CodeAnalysis::Text::SourceText ^ oldText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.Text.TextChange&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldText" Type="Microsoft.CodeAnalysis.Text.SourceText" />
      </Parameters>
      <Docs>
        <param name="oldText">To be added.</param>
        <summary>
            Gets the set of <see cref="T:Microsoft.CodeAnalysis.Text.TextChange" /> that describe how the text changed
            between this text and an older version. This may be multiple detailed changes 
            or a single change encompassing the entire text.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public abstract char this[int position] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Text.SourceText.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public MustOverride ReadOnly Property Item(position As Integer) As Char" />
      <MemberSignature Language="F#" Value="member this.Item(int) : char" Usage="Microsoft.CodeAnalysis.Text.SourceText.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property char default[int] { char get(int position); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="position">The position to get the character from.</param>
        <summary>
            Returns a character at given position.
            </summary>
        <value>The character.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">When position is negative or 
            greater than <see cref="P:Microsoft.CodeAnalysis.Text.SourceText.Length" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public abstract int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Text.SourceText.Length" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Length As Integer" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="Microsoft.CodeAnalysis.Text.SourceText.Length" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Length { int get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract property int Length { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The length of the text in characters.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lines">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Text.TextLineCollection Lines { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.Text.TextLineCollection Lines" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Text.SourceText.Lines" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Lines As TextLineCollection" />
      <MemberSignature Language="F#" Value="member this.Lines : Microsoft.CodeAnalysis.Text.TextLineCollection" Usage="Microsoft.CodeAnalysis.Text.SourceText.Lines" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::Text::TextLineCollection ^ Lines { Microsoft::CodeAnalysis::Text::TextLineCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.TextLineCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The collection of individual text lines.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Text.SourceText Replace (Microsoft.CodeAnalysis.Text.TextSpan span, string newText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.Text.SourceText Replace(valuetype Microsoft.CodeAnalysis.Text.TextSpan span, string newText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.Replace(Microsoft.CodeAnalysis.Text.TextSpan,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (span As TextSpan, newText As String) As SourceText" />
      <MemberSignature Language="F#" Value="member this.Replace : Microsoft.CodeAnalysis.Text.TextSpan * string -&gt; Microsoft.CodeAnalysis.Text.SourceText" Usage="sourceText.Replace (span, newText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::Text::SourceText ^ Replace(Microsoft::CodeAnalysis::Text::TextSpan span, System::String ^ newText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.SourceText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="Microsoft.CodeAnalysis.Text.TextSpan" />
        <Parameter Name="newText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="span">To be added.</param>
        <param name="newText">To be added.</param>
        <summary>
            Returns a new SourceText with the specified span of characters replaced by the new text.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Text.SourceText Replace (int start, int length, string newText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.Text.SourceText Replace(int32 start, int32 length, string newText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.Replace(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (start As Integer, length As Integer, newText As String) As SourceText" />
      <MemberSignature Language="F#" Value="member this.Replace : int * int * string -&gt; Microsoft.CodeAnalysis.Text.SourceText" Usage="sourceText.Replace (start, length, newText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::Text::SourceText ^ Replace(int start, int length, System::String ^ newText);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::Text::SourceText ^ Replace(int start, int length, Platform::String ^ newText);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::Text::SourceText Replace(int start, int length, std::wstring const &amp; newText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.SourceText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="newText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="length">To be added.</param>
        <param name="newText">To be added.</param>
        <summary>
            Returns a new SourceText with the specified range of characters replaced by the new text.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="sourceText.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override Platform::String ^ ToString();" />
      <MemberSignature Language="C++ WINRT" Value=" override std::wstring ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Provides a string representation of the SourceText.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public virtual string ToString (Microsoft.CodeAnalysis.Text.TextSpan span);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(valuetype Microsoft.CodeAnalysis.Text.TextSpan span) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.ToString(Microsoft.CodeAnalysis.Text.TextSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToString (span As TextSpan) As String" />
      <MemberSignature Language="F#" Value="override this.ToString : Microsoft.CodeAnalysis.Text.TextSpan -&gt; string" Usage="sourceText.ToString span" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(Microsoft::CodeAnalysis::Text::TextSpan span);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="Microsoft.CodeAnalysis.Text.TextSpan" />
      </Parameters>
      <Docs>
        <param name="span">To be added.</param>
        <summary>
            Gets a string containing the characters in specified span.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">When given span is outside of the text range.</exception>
      </Docs>
    </Member>
    <Member MemberName="WithChanges">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Text.SourceText WithChanges (params Microsoft.CodeAnalysis.Text.TextChange[] changes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.Text.SourceText WithChanges(valuetype Microsoft.CodeAnalysis.Text.TextChange[] changes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.WithChanges(Microsoft.CodeAnalysis.Text.TextChange[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WithChanges (ParamArray changes As TextChange()) As SourceText" />
      <MemberSignature Language="F#" Value="member this.WithChanges : Microsoft.CodeAnalysis.Text.TextChange[] -&gt; Microsoft.CodeAnalysis.Text.SourceText" Usage="sourceText.WithChanges changes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::Text::SourceText ^ WithChanges(... cli::array &lt;Microsoft::CodeAnalysis::Text::TextChange&gt; ^ changes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.SourceText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changes" Type="Microsoft.CodeAnalysis.Text.TextChange[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="changes">To be added.</param>
        <summary>
            Constructs a new SourceText from this text with the specified changes.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithChanges">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.Text.SourceText WithChanges (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Text.TextChange&gt; changes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.Text.SourceText WithChanges(class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.Text.TextChange&gt; changes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.WithChanges(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChange})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WithChanges (changes As IEnumerable(Of TextChange)) As SourceText" />
      <MemberSignature Language="F#" Value="abstract member WithChanges : seq&lt;Microsoft.CodeAnalysis.Text.TextChange&gt; -&gt; Microsoft.CodeAnalysis.Text.SourceText&#xA;override this.WithChanges : seq&lt;Microsoft.CodeAnalysis.Text.TextChange&gt; -&gt; Microsoft.CodeAnalysis.Text.SourceText" Usage="sourceText.WithChanges changes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::CodeAnalysis::Text::SourceText ^ WithChanges(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::Text::TextChange&gt; ^ changes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.SourceText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Text.TextChange&gt;" />
      </Parameters>
      <Docs>
        <param name="changes">To be added.</param>
        <summary>
            Constructs a new SourceText from this text with the specified changes.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.TextWriter textWriter, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(class System.IO.TextWriter textWriter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.Write(System.IO.TextWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.Write : System.IO.TextWriter * System.Threading.CancellationToken -&gt; unit" Usage="sourceText.Write (textWriter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="textWriter">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
            Write this <see cref="T:Microsoft.CodeAnalysis.Text.SourceText" /> to a text writer.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (System.IO.TextWriter writer, Microsoft.CodeAnalysis.Text.TextSpan span, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.TextWriter writer, valuetype Microsoft.CodeAnalysis.Text.TextSpan span, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.SourceText.Write(System.IO.TextWriter,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member Write : System.IO.TextWriter * Microsoft.CodeAnalysis.Text.TextSpan * System.Threading.CancellationToken -&gt; unit&#xA;override this.Write : System.IO.TextWriter * Microsoft.CodeAnalysis.Text.TextSpan * System.Threading.CancellationToken -&gt; unit" Usage="sourceText.Write (writer, span, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="span" Type="Microsoft.CodeAnalysis.Text.TextSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="span">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
            Write a span of text to a text writer.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>