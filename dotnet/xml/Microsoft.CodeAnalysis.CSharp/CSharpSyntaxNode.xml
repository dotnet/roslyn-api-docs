<Type Name="CSharpSyntaxNode" FullName="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode">
  <TypeSignature Language="C#" Value="public abstract class CSharpSyntaxNode : Microsoft.CodeAnalysis.SyntaxNode, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CSharpSyntaxNode extends Microsoft.CodeAnalysis.SyntaxNode implements class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CSharpSyntaxNode&#xA;Inherits SyntaxNode&#xA;Implements IFormattable" />
  <TypeSignature Language="F#" Value="type CSharpSyntaxNode = class&#xA;    inherit SyntaxNode&#xA;    interface IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CSharpSyntaxNode abstract : Microsoft::CodeAnalysis::SyntaxNode" />
  <TypeSignature Language="C++ CX" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;public ref class CSharpSyntaxNode abstract : Microsoft::CodeAnalysis::SyntaxNode" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class CSharpSyntaxNode abstract : Microsoft::CodeAnalysis::SyntaxNode" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents a non-terminal node in the syntax tree.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public abstract void Accept (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Accept(class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Accept (visitor As CSharpSyntaxVisitor)" />
      <MemberSignature Language="F#" Value="abstract member Accept : Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor -&gt; unit" Usage="cSharpSyntaxNode.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Accept(Microsoft::CodeAnalysis::CSharp::CSharpSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract void Accept(Microsoft::CodeAnalysis::CSharp::CSharpSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value=" abstract void Accept(Microsoft::CodeAnalysis::CSharp::CSharpSyntaxVisitor const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract TResult Accept&lt;TResult&gt; (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;TResult&gt; visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult Accept&lt;TResult&gt;(class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1&lt;!!TResult&gt; visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Accept(Of TResult) (visitor As CSharpSyntaxVisitor(Of TResult)) As TResult" />
      <MemberSignature Language="F#" Value="abstract member Accept : Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;'Result&gt; -&gt; 'Result" Usage="cSharpSyntaxNode.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; abstract TResult Accept(Microsoft::CodeAnalysis::CSharp::CSharpSyntaxVisitor&lt;TResult&gt; ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename TResult&gt;&#xA; abstract TResult Accept(Microsoft::CodeAnalysis::CSharp::CSharpSyntaxVisitor&lt;TResult&gt; const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializeFrom">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxNode DeserializeFrom (System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.SyntaxNode DeserializeFrom(class System.IO.Stream stream, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.DeserializeFrom(System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeFrom : System.IO.Stream * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.DeserializeFrom (stream, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
            Deserialize a syntax node from the byte stream.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EquivalentToCore">
      <MemberSignature Language="C#" Value="protected override bool EquivalentToCore (Microsoft.CodeAnalysis.SyntaxNode other);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool EquivalentToCore(class Microsoft.CodeAnalysis.SyntaxNode other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.EquivalentToCore(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EquivalentToCore (other As SyntaxNode) As Boolean" />
      <MemberSignature Language="F#" Value="override this.EquivalentToCore : Microsoft.CodeAnalysis.SyntaxNode -&gt; bool" Usage="cSharpSyntaxNode.EquivalentToCore other" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool EquivalentToCore(Microsoft::CodeAnalysis::SyntaxNode ^ other);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; override bool EquivalentToCore(Microsoft::CodeAnalysis::SyntaxNode ^ other);" />
      <MemberSignature Language="C++ WINRT" Value=" override bool EquivalentToCore(Microsoft::CodeAnalysis::SyntaxNode const &amp; other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="other"></param>
        <summary>
            Determine if this node is structurally equivalent to another.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindToken">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxToken FindToken (int position, bool findInsideTrivia = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxToken FindToken(int32 position, bool findInsideTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.FindToken(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindToken (position As Integer, Optional findInsideTrivia As Boolean = false) As SyntaxToken" />
      <MemberSignature Language="F#" Value="override this.FindToken : int * bool -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="cSharpSyntaxNode.FindToken (position, findInsideTrivia)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="findInsideTrivia" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <param name="findInsideTrivia">To be added.</param>
        <summary>
            Finds a token according to the following rules:
            1) If position matches the End of the node/s FullSpan and the node is CompilationUnit,
               then EoF is returned. 
            
             2) If node.FullSpan.Contains(position) then the token that contains given position is
                returned.
            
             3) Otherwise an ArgumentOutOfRangeException is thrown
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindTrivia">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxTrivia FindTrivia (int position, bool findInsideTrivia = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxTrivia FindTrivia(int32 position, bool findInsideTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.FindTrivia(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindTrivia (position As Integer, Optional findInsideTrivia As Boolean = false) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="override this.FindTrivia : int * bool -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="cSharpSyntaxNode.FindTrivia (position, findInsideTrivia)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="findInsideTrivia" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="position">The character position of the trivia relative to the beginning of
            the file.</param>
        <param name="findInsideTrivia">Whether to search inside structured trivia.</param>
        <summary>
            Finds a descendant trivia of this node whose span includes the supplied position.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindTrivia">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxTrivia FindTrivia (int position, Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia,bool&gt; stepInto);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxTrivia FindTrivia(int32 position, class System.Func`2&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia, bool&gt; stepInto) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.FindTrivia(System.Int32,System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindTrivia (position As Integer, stepInto As Func(Of SyntaxTrivia, Boolean)) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="override this.FindTrivia : int * Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia, bool&gt; -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="cSharpSyntaxNode.FindTrivia (position, stepInto)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxTrivia FindTrivia(int position, Func&lt;Microsoft::CodeAnalysis::SyntaxTrivia, bool&gt; ^ stepInto);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="stepInto" Type="System.Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="position">The character position of the trivia relative to the beginning of
            the file.</param>
        <param name="stepInto">Specifies a function that determines per trivia node, whether to
            descend into structured trivia of that node.</param>
        <summary>
            Finds a descendant trivia of this node at the specified position, where the position is
            within the span of the node.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDiagnostics">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Diagnostic&gt; GetDiagnostics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.Diagnostic&gt; GetDiagnostics() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.GetDiagnostics" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDiagnostics () As IEnumerable(Of Diagnostic)" />
      <MemberSignature Language="F#" Value="override this.GetDiagnostics : unit -&gt; seq&lt;Microsoft.CodeAnalysis.Diagnostic&gt;" Usage="cSharpSyntaxNode.GetDiagnostics " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::Diagnostic ^&gt; ^ GetDiagnostics();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Diagnostic&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets a list of all the diagnostics in the sub tree that has this node as its root.
            This method does not filter diagnostics based on #pragmas and compiler options
            like nowarn, warnaserror etc.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFirstDirective">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax GetFirstDirective (Func&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,bool&gt; predicate = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax GetFirstDirective(class System.Func`2&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.GetFirstDirective(System.Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstDirective (Optional predicate As Func(Of DirectiveTriviaSyntax, Boolean) = null) As DirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="member this.GetFirstDirective : Func&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax, bool&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax" Usage="cSharpSyntaxNode.GetFirstDirective predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate">To be added.</param>
        <summary>
            Gets the first directive of the tree rooted by this node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFirstToken">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxToken GetFirstToken (bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxToken GetFirstToken(bool includeZeroWidth, bool includeSkipped, bool includeDirectives, bool includeDocumentationComments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.GetFirstToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstToken (Optional includeZeroWidth As Boolean = false, Optional includeSkipped As Boolean = false, Optional includeDirectives As Boolean = false, Optional includeDocumentationComments As Boolean = false) As SyntaxToken" />
      <MemberSignature Language="F#" Value="override this.GetFirstToken : bool * bool * bool * bool -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="cSharpSyntaxNode.GetFirstToken (includeZeroWidth, includeSkipped, includeDirectives, includeDocumentationComments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeZeroWidth" Type="System.Boolean" />
        <Parameter Name="includeSkipped" Type="System.Boolean" />
        <Parameter Name="includeDirectives" Type="System.Boolean" />
        <Parameter Name="includeDocumentationComments" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includeZeroWidth">True if zero width tokens should be included, false by
            default.</param>
        <param name="includeSkipped">True if skipped tokens should be included, false by default.</param>
        <param name="includeDirectives">True if directives should be included, false by default.</param>
        <param name="includeDocumentationComments">True if documentation comments should be
            included, false by default.</param>
        <summary>
            Gets the first token of the tree rooted by this node.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLastDirective">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax GetLastDirective (Func&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,bool&gt; predicate = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax GetLastDirective(class System.Func`2&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.GetLastDirective(System.Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLastDirective (Optional predicate As Func(Of DirectiveTriviaSyntax, Boolean) = null) As DirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="member this.GetLastDirective : Func&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax, bool&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax" Usage="cSharpSyntaxNode.GetLastDirective predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate">To be added.</param>
        <summary>
            Gets the last directive of the tree rooted by this node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLastToken">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxToken GetLastToken (bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxToken GetLastToken(bool includeZeroWidth, bool includeSkipped, bool includeDirectives, bool includeDocumentationComments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.GetLastToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLastToken (Optional includeZeroWidth As Boolean = false, Optional includeSkipped As Boolean = false, Optional includeDirectives As Boolean = false, Optional includeDocumentationComments As Boolean = false) As SyntaxToken" />
      <MemberSignature Language="F#" Value="override this.GetLastToken : bool * bool * bool * bool -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="cSharpSyntaxNode.GetLastToken (includeZeroWidth, includeSkipped, includeDirectives, includeDocumentationComments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeZeroWidth" Type="System.Boolean" />
        <Parameter Name="includeSkipped" Type="System.Boolean" />
        <Parameter Name="includeDirectives" Type="System.Boolean" />
        <Parameter Name="includeDocumentationComments" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includeZeroWidth">True if zero width tokens should be included, false by
            default.</param>
        <param name="includeSkipped">True if skipped tokens should be included, false by default.</param>
        <param name="includeDirectives">True if directives should be included, false by default.</param>
        <param name="includeDocumentationComments">True if documentation comments should be
            included, false by default.</param>
        <summary>
            Gets the last non-zero-width token of the tree rooted by this node.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLeadingTrivia">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxTriviaList GetLeadingTrivia ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxTriviaList GetLeadingTrivia() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.GetLeadingTrivia" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLeadingTrivia () As SyntaxTriviaList" />
      <MemberSignature Language="F#" Value="override this.GetLeadingTrivia : unit -&gt; Microsoft.CodeAnalysis.SyntaxTriviaList" Usage="cSharpSyntaxNode.GetLeadingTrivia " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxTriviaList GetLeadingTrivia();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTriviaList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            The list of trivia that appears before this node in the source code.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLocation">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Location GetLocation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.Location GetLocation() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.GetLocation" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocation () As Location" />
      <MemberSignature Language="F#" Value="override this.GetLocation : unit -&gt; Microsoft.CodeAnalysis.Location" Usage="cSharpSyntaxNode.GetLocation " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::Location ^ GetLocation();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::Location ^ GetLocation();" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::Location GetLocation();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Location</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.Location" /> for this node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTrailingTrivia">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxTriviaList GetTrailingTrivia ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxTriviaList GetTrailingTrivia() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.GetTrailingTrivia" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTrailingTrivia () As SyntaxTriviaList" />
      <MemberSignature Language="F#" Value="override this.GetTrailingTrivia : unit -&gt; Microsoft.CodeAnalysis.SyntaxTriviaList" Usage="cSharpSyntaxNode.GetTrailingTrivia " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxTriviaList GetTrailingTrivia();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTriviaList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            The list of trivia that appears after this node in the source code.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertNodesInListCore">
      <MemberSignature Language="C#" Value="protected internal override Microsoft.CodeAnalysis.SyntaxNode InsertNodesInListCore (Microsoft.CodeAnalysis.SyntaxNode nodeInList, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; nodesToInsert, bool insertBefore);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class Microsoft.CodeAnalysis.SyntaxNode InsertNodesInListCore(class Microsoft.CodeAnalysis.SyntaxNode nodeInList, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; nodesToInsert, bool insertBefore) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.InsertNodesInListCore(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function InsertNodesInListCore (nodeInList As SyntaxNode, nodesToInsert As IEnumerable(Of SyntaxNode), insertBefore As Boolean) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.InsertNodesInListCore : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * bool -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="cSharpSyntaxNode.InsertNodesInListCore (nodeInList, nodesToInsert, insertBefore)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override Microsoft::CodeAnalysis::SyntaxNode ^ InsertNodesInListCore(Microsoft::CodeAnalysis::SyntaxNode ^ nodeInList, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ nodesToInsert, bool insertBefore);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeInList" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="nodesToInsert" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="insertBefore" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nodeInList">To be added.</param>
        <param name="nodesToInsert">To be added.</param>
        <param name="insertBefore">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertTokensInListCore">
      <MemberSignature Language="C#" Value="protected internal override Microsoft.CodeAnalysis.SyntaxNode InsertTokensInListCore (Microsoft.CodeAnalysis.SyntaxToken originalToken, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; newTokens, bool insertBefore);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class Microsoft.CodeAnalysis.SyntaxNode InsertTokensInListCore(valuetype Microsoft.CodeAnalysis.SyntaxToken originalToken, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; newTokens, bool insertBefore) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.InsertTokensInListCore(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function InsertTokensInListCore (originalToken As SyntaxToken, newTokens As IEnumerable(Of SyntaxToken), insertBefore As Boolean) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.InsertTokensInListCore : Microsoft.CodeAnalysis.SyntaxToken * seq&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; * bool -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="cSharpSyntaxNode.InsertTokensInListCore (originalToken, newTokens, insertBefore)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override Microsoft::CodeAnalysis::SyntaxNode ^ InsertTokensInListCore(Microsoft::CodeAnalysis::SyntaxToken originalToken, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxToken&gt; ^ newTokens, bool insertBefore);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="newTokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;" />
        <Parameter Name="insertBefore" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="originalToken">To be added.</param>
        <param name="newTokens">To be added.</param>
        <param name="insertBefore">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertTriviaInListCore">
      <MemberSignature Language="C#" Value="protected internal override Microsoft.CodeAnalysis.SyntaxNode InsertTriviaInListCore (Microsoft.CodeAnalysis.SyntaxTrivia originalTrivia, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; newTrivia, bool insertBefore);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class Microsoft.CodeAnalysis.SyntaxNode InsertTriviaInListCore(valuetype Microsoft.CodeAnalysis.SyntaxTrivia originalTrivia, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; newTrivia, bool insertBefore) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.InsertTriviaInListCore(Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function InsertTriviaInListCore (originalTrivia As SyntaxTrivia, newTrivia As IEnumerable(Of SyntaxTrivia), insertBefore As Boolean) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.InsertTriviaInListCore : Microsoft.CodeAnalysis.SyntaxTrivia * seq&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; * bool -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="cSharpSyntaxNode.InsertTriviaInListCore (originalTrivia, newTrivia, insertBefore)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override Microsoft::CodeAnalysis::SyntaxNode ^ InsertTriviaInListCore(Microsoft::CodeAnalysis::SyntaxTrivia originalTrivia, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxTrivia&gt; ^ newTrivia, bool insertBefore);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalTrivia" Type="Microsoft.CodeAnalysis.SyntaxTrivia" />
        <Parameter Name="newTrivia" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
        <Parameter Name="insertBefore" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="originalTrivia">To be added.</param>
        <param name="newTrivia">To be added.</param>
        <param name="insertBefore">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentToCore">
      <MemberSignature Language="C#" Value="protected override bool IsEquivalentToCore (Microsoft.CodeAnalysis.SyntaxNode node, bool topLevel = false);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsEquivalentToCore(class Microsoft.CodeAnalysis.SyntaxNode node, bool topLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.IsEquivalentToCore(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsEquivalentToCore (node As SyntaxNode, Optional topLevel As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentToCore : Microsoft.CodeAnalysis.SyntaxNode * bool -&gt; bool" Usage="cSharpSyntaxNode.IsEquivalentToCore (node, topLevel)" />
      <MemberSignature Language="C++ WINRT" Value=" override bool IsEquivalentToCore(Microsoft::CodeAnalysis::SyntaxNode const &amp; node, bool topLevel = false);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="topLevel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <param name="topLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.SyntaxKind Kind ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind Kind() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.Kind" />
      <MemberSignature Language="VB.NET" Value="Public Function Kind () As SyntaxKind" />
      <MemberSignature Language="F#" Value="member this.Kind : unit -&gt; Microsoft.CodeAnalysis.CSharp.SyntaxKind" Usage="cSharpSyntaxNode.Kind " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::SyntaxKind Kind();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::SyntaxKind Kind();" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::CSharp::SyntaxKind Kind();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns the <see cref="T:Microsoft.CodeAnalysis.CSharp.SyntaxKind" /> of the node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public override string Language { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.Language" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Language As String" />
      <MemberSignature Language="F#" Value="member this.Language : string" Usage="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.Language" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Language { System::String ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property Platform::String ^ Language { Platform::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The language name that this node is syntax of.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalizeWhitespaceCore">
      <MemberSignature Language="C#" Value="protected internal override Microsoft.CodeAnalysis.SyntaxNode NormalizeWhitespaceCore (string indentation, string eol, bool elasticTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class Microsoft.CodeAnalysis.SyntaxNode NormalizeWhitespaceCore(string indentation, string eol, bool elasticTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.NormalizeWhitespaceCore(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function NormalizeWhitespaceCore (indentation As String, eol As String, elasticTrivia As Boolean) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.NormalizeWhitespaceCore : string * string * bool -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="cSharpSyntaxNode.NormalizeWhitespaceCore (indentation, eol, elasticTrivia)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override Microsoft::CodeAnalysis::SyntaxNode ^ NormalizeWhitespaceCore(System::String ^ indentation, System::String ^ eol, bool elasticTrivia);" />
      <MemberSignature Language="C++ CX" Value="protected public:&#xA; override Microsoft::CodeAnalysis::SyntaxNode ^ NormalizeWhitespaceCore(Platform::String ^ indentation, Platform::String ^ eol, bool elasticTrivia);" />
      <MemberSignature Language="C++ WINRT" Value=" override Microsoft::CodeAnalysis::SyntaxNode NormalizeWhitespaceCore(std::wstring const &amp; indentation, std::wstring const &amp; eol, bool elasticTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indentation" Type="System.String" />
        <Parameter Name="eol" Type="System.String" />
        <Parameter Name="elasticTrivia" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="indentation">To be added.</param>
        <param name="eol">To be added.</param>
        <param name="elasticTrivia">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveNodesCore">
      <MemberSignature Language="C#" Value="protected internal override Microsoft.CodeAnalysis.SyntaxNode RemoveNodesCore (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; nodes, Microsoft.CodeAnalysis.SyntaxRemoveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class Microsoft.CodeAnalysis.SyntaxNode RemoveNodesCore(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; nodes, valuetype Microsoft.CodeAnalysis.SyntaxRemoveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.RemoveNodesCore(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxRemoveOptions)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function RemoveNodesCore (nodes As IEnumerable(Of SyntaxNode), options As SyntaxRemoveOptions) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.RemoveNodesCore : seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * Microsoft.CodeAnalysis.SyntaxRemoveOptions -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="cSharpSyntaxNode.RemoveNodesCore (nodes, options)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override Microsoft::CodeAnalysis::SyntaxNode ^ RemoveNodesCore(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ nodes, Microsoft::CodeAnalysis::SyntaxRemoveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.SyntaxRemoveOptions" />
      </Parameters>
      <Docs>
        <param name="nodes">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceCore&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="protected internal override Microsoft.CodeAnalysis.SyntaxNode ReplaceCore&lt;TNode&gt; (System.Collections.Generic.IEnumerable&lt;TNode&gt; nodes = null, Func&lt;TNode,TNode,Microsoft.CodeAnalysis.SyntaxNode&gt; computeReplacementNode = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; tokens = null, Func&lt;Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken&gt; computeReplacementToken = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; trivia = null, Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia&gt; computeReplacementTrivia = null) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class Microsoft.CodeAnalysis.SyntaxNode ReplaceCore&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TNode&gt; nodes, class System.Func`3&lt;!!TNode, !!TNode, class Microsoft.CodeAnalysis.SyntaxNode&gt; computeReplacementNode, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; tokens, class System.Func`3&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken, valuetype Microsoft.CodeAnalysis.SyntaxToken, valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; computeReplacementToken, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; trivia, class System.Func`3&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia, valuetype Microsoft.CodeAnalysis.SyntaxTrivia, valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; computeReplacementTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.ReplaceCore``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ReplaceCore(Of TNode As SyntaxNode) (Optional nodes As IEnumerable(Of TNode) = null, Optional computeReplacementNode As Func(Of TNode, TNode, SyntaxNode) = null, Optional tokens As IEnumerable(Of SyntaxToken) = null, Optional computeReplacementToken As Func(Of SyntaxToken, SyntaxToken, SyntaxToken) = null, Optional trivia As IEnumerable(Of SyntaxTrivia) = null, Optional computeReplacementTrivia As Func(Of SyntaxTrivia, SyntaxTrivia, SyntaxTrivia) = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.ReplaceCore : seq&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * Func&lt;'Node, 'Node, Microsoft.CodeAnalysis.SyntaxNode (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode and 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; * Func&lt;Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken, Microsoft.CodeAnalysis.SyntaxToken&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; * Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="cSharpSyntaxNode.ReplaceCore (nodes, computeReplacementNode, tokens, computeReplacementToken, trivia, computeReplacementTrivia)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;TNode&gt;" />
        <Parameter Name="computeReplacementNode" Type="System.Func&lt;TNode,TNode,Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="tokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;" />
        <Parameter Name="computeReplacementToken" Type="System.Func&lt;Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken&gt;" />
        <Parameter Name="trivia" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
        <Parameter Name="computeReplacementTrivia" Type="System.Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="nodes">To be added.</param>
        <param name="computeReplacementNode">To be added.</param>
        <param name="tokens">To be added.</param>
        <param name="computeReplacementToken">To be added.</param>
        <param name="trivia">To be added.</param>
        <param name="computeReplacementTrivia">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceNodeInListCore">
      <MemberSignature Language="C#" Value="protected internal override Microsoft.CodeAnalysis.SyntaxNode ReplaceNodeInListCore (Microsoft.CodeAnalysis.SyntaxNode originalNode, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; replacementNodes);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class Microsoft.CodeAnalysis.SyntaxNode ReplaceNodeInListCore(class Microsoft.CodeAnalysis.SyntaxNode originalNode, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; replacementNodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.ReplaceNodeInListCore(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ReplaceNodeInListCore (originalNode As SyntaxNode, replacementNodes As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.ReplaceNodeInListCore : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="cSharpSyntaxNode.ReplaceNodeInListCore (originalNode, replacementNodes)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override Microsoft::CodeAnalysis::SyntaxNode ^ ReplaceNodeInListCore(Microsoft::CodeAnalysis::SyntaxNode ^ originalNode, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ replacementNodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalNode" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="replacementNodes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="originalNode">To be added.</param>
        <param name="replacementNodes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceTokenInListCore">
      <MemberSignature Language="C#" Value="protected internal override Microsoft.CodeAnalysis.SyntaxNode ReplaceTokenInListCore (Microsoft.CodeAnalysis.SyntaxToken originalToken, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; newTokens);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class Microsoft.CodeAnalysis.SyntaxNode ReplaceTokenInListCore(valuetype Microsoft.CodeAnalysis.SyntaxToken originalToken, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; newTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.ReplaceTokenInListCore(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ReplaceTokenInListCore (originalToken As SyntaxToken, newTokens As IEnumerable(Of SyntaxToken)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.ReplaceTokenInListCore : Microsoft.CodeAnalysis.SyntaxToken * seq&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="cSharpSyntaxNode.ReplaceTokenInListCore (originalToken, newTokens)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override Microsoft::CodeAnalysis::SyntaxNode ^ ReplaceTokenInListCore(Microsoft::CodeAnalysis::SyntaxToken originalToken, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxToken&gt; ^ newTokens);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="newTokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;" />
      </Parameters>
      <Docs>
        <param name="originalToken">To be added.</param>
        <param name="newTokens">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceTriviaInListCore">
      <MemberSignature Language="C#" Value="protected internal override Microsoft.CodeAnalysis.SyntaxNode ReplaceTriviaInListCore (Microsoft.CodeAnalysis.SyntaxTrivia originalTrivia, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; newTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class Microsoft.CodeAnalysis.SyntaxNode ReplaceTriviaInListCore(valuetype Microsoft.CodeAnalysis.SyntaxTrivia originalTrivia, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; newTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.ReplaceTriviaInListCore(Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ReplaceTriviaInListCore (originalTrivia As SyntaxTrivia, newTrivia As IEnumerable(Of SyntaxTrivia)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.ReplaceTriviaInListCore : Microsoft.CodeAnalysis.SyntaxTrivia * seq&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="cSharpSyntaxNode.ReplaceTriviaInListCore (originalTrivia, newTrivia)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override Microsoft::CodeAnalysis::SyntaxNode ^ ReplaceTriviaInListCore(Microsoft::CodeAnalysis::SyntaxTrivia originalTrivia, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxTrivia&gt; ^ newTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalTrivia" Type="Microsoft.CodeAnalysis.SyntaxTrivia" />
        <Parameter Name="newTrivia" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
      </Parameters>
      <Docs>
        <param name="originalTrivia">To be added.</param>
        <param name="newTrivia">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyntaxTreeCore">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.SyntaxTree SyntaxTreeCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.SyntaxTree SyntaxTreeCore" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.SyntaxTreeCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property SyntaxTreeCore As SyntaxTree" />
      <MemberSignature Language="F#" Value="member this.SyntaxTreeCore : Microsoft.CodeAnalysis.SyntaxTree" Usage="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.SyntaxTreeCore" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Microsoft::CodeAnalysis::SyntaxTree ^ SyntaxTreeCore { Microsoft::CodeAnalysis::SyntaxTree ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; virtual property Microsoft::CodeAnalysis::SyntaxTree ^ SyntaxTreeCore { Microsoft::CodeAnalysis::SyntaxTree ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTree</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, formatProvider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>