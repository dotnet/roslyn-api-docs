<Type Name="SyntaxNodeExtensions" FullName="Microsoft.CodeAnalysis.SyntaxNodeExtensions">
  <TypeSignature Language="C#" Value="public static class SyntaxNodeExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit SyntaxNodeExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.SyntaxNodeExtensions" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetCurrentNode&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static TNode GetCurrentNode&lt;TNode&gt; (this Microsoft.CodeAnalysis.SyntaxNode root, TNode node) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TNode GetCurrentNode&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(class Microsoft.CodeAnalysis.SyntaxNode root, !!TNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNode``1(Microsoft.CodeAnalysis.SyntaxNode,``0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.SyntaxNode" RefType="this" />
        <Parameter Name="node" Type="TNode" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="root">The root of the subtree containing the current node corresponding to the original tracked node.</param>
        <param name="node">The node instance originally tracked.</param>
        <summary>
            Gets the node within the subtree corresponding to the original tracked node.
            Use TrackNodes to start tracking nodes.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentNodes&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TNode&gt; GetCurrentNodes&lt;TNode&gt; (this Microsoft.CodeAnalysis.SyntaxNode root, System.Collections.Generic.IEnumerable&lt;TNode&gt; nodes) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TNode&gt; GetCurrentNodes&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(class Microsoft.CodeAnalysis.SyntaxNode root, class System.Collections.Generic.IEnumerable`1&lt;!!TNode&gt; nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNodes``1(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.CodeAnalysis.SyntaxNodeExtensions/&lt;GetCurrentNodes&gt;d__40`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.SyntaxNode" RefType="this" />
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="root">The root of the subtree containing the current nodes corresponding to the original tracked nodes.</param>
        <param name="nodes">One or more node instances originally tracked.</param>
        <summary>
            Gets the nodes within the subtree corresponding to the original tracked nodes.
            Use TrackNodes to start tracking nodes.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentNodes&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TNode&gt; GetCurrentNodes&lt;TNode&gt; (this Microsoft.CodeAnalysis.SyntaxNode root, TNode node) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TNode&gt; GetCurrentNodes&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(class Microsoft.CodeAnalysis.SyntaxNode root, !!TNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNodes``1(Microsoft.CodeAnalysis.SyntaxNode,``0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.SyntaxNode" RefType="this" />
        <Parameter Name="node" Type="TNode" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="root">The root of the subtree containing the current node corresponding to the original tracked node.</param>
        <param name="node">The node instance originally tracked.</param>
        <summary>
            Gets the nodes within the subtree corresponding to the original tracked node.
            Use TrackNodes to start tracking nodes.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertNodesAfter&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot InsertNodesAfter&lt;TRoot&gt; (this TRoot root, Microsoft.CodeAnalysis.SyntaxNode nodeInList, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; newNodes) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot InsertNodesAfter&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, class Microsoft.CodeAnalysis.SyntaxNode nodeInList, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; newNodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertNodesAfter``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="nodeInList" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="newNodes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">The type of the root node.</typeparam>
        <param name="root">The root of the tree of nodes.</param>
        <param name="nodeInList">The node to insert after; a descendant of the root node an element of a list member.</param>
        <param name="newNodes">A sequence of nodes to insert into the tree immediately after the specified node.</param>
        <summary>
            Creates a new tree of nodes with new nodes inserted after the specified node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertNodesBefore&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot InsertNodesBefore&lt;TRoot&gt; (this TRoot root, Microsoft.CodeAnalysis.SyntaxNode nodeInList, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; newNodes) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot InsertNodesBefore&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, class Microsoft.CodeAnalysis.SyntaxNode nodeInList, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; newNodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertNodesBefore``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="nodeInList" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="newNodes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">The type of the root node.</typeparam>
        <param name="root">The root of the tree of nodes.</param>
        <param name="nodeInList">The node to insert before; a descendant of the root node an element of a list member.</param>
        <param name="newNodes">A sequence of nodes to insert into the tree immediately before the specified node.</param>
        <summary>
            Creates a new tree of nodes with new nodes inserted before the specified node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertTokensAfter&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot InsertTokensAfter&lt;TRoot&gt; (this TRoot root, Microsoft.CodeAnalysis.SyntaxToken tokenInList, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; newTokens) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot InsertTokensAfter&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, valuetype Microsoft.CodeAnalysis.SyntaxToken tokenInList, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; newTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTokensAfter``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="tokenInList" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="newTokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">The type of the root node.</typeparam>
        <param name="root">The root of the tree of nodes.</param>
        <param name="tokenInList">The token to insert after; a descendant of the root node and an element of a list member.</param>
        <param name="newTokens">A sequence of tokens to insert into the tree immediately after the specified token.</param>
        <summary>
            Creates a new tree of nodes with new tokens inserted after the specified token.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertTokensBefore&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot InsertTokensBefore&lt;TRoot&gt; (this TRoot root, Microsoft.CodeAnalysis.SyntaxToken tokenInList, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; newTokens) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot InsertTokensBefore&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, valuetype Microsoft.CodeAnalysis.SyntaxToken tokenInList, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; newTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTokensBefore``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="tokenInList" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="newTokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">The type of the root node.</typeparam>
        <param name="root">The root of the tree of nodes.</param>
        <param name="tokenInList">The token to insert before; a descendant of the root node and an element of a list member.</param>
        <param name="newTokens">A sequence of tokens to insert into the tree immediately before the specified token.</param>
        <summary>
            Creates a new tree of nodes with new tokens inserted before the specified token.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertTriviaAfter&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot InsertTriviaAfter&lt;TRoot&gt; (this TRoot root, Microsoft.CodeAnalysis.SyntaxTrivia trivia, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; newTrivia) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot InsertTriviaAfter&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, valuetype Microsoft.CodeAnalysis.SyntaxTrivia trivia, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; newTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTriviaAfter``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="trivia" Type="Microsoft.CodeAnalysis.SyntaxTrivia" />
        <Parameter Name="newTrivia" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">The type of the root node.</typeparam>
        <param name="root">The root of the tree of nodes.</param>
        <param name="trivia">The trivia to insert after; a descendant of the root node.</param>
        <param name="newTrivia">A sequence of trivia to insert into the tree immediately after the specified trivia.</param>
        <summary>
            Creates a new tree of nodes with new trivia inserted after the specified trivia.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertTriviaBefore&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot InsertTriviaBefore&lt;TRoot&gt; (this TRoot root, Microsoft.CodeAnalysis.SyntaxTrivia trivia, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; newTrivia) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot InsertTriviaBefore&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, valuetype Microsoft.CodeAnalysis.SyntaxTrivia trivia, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; newTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTriviaBefore``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="trivia" Type="Microsoft.CodeAnalysis.SyntaxTrivia" />
        <Parameter Name="newTrivia" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">The type of the root node.</typeparam>
        <param name="root">The root of the tree of nodes.</param>
        <param name="trivia">The trivia to insert before; a descendant of the root node.</param>
        <param name="newTrivia">A sequence of trivia to insert into the tree immediately before the specified trivia.</param>
        <summary>
            Creates a new tree of nodes with new trivia inserted before the specified trivia.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalizeWhitespace&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static TNode NormalizeWhitespace&lt;TNode&gt; (this TNode node, string indentation, bool elasticTrivia) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TNode NormalizeWhitespace&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(!!TNode node, string indentation, bool elasticTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.NormalizeWhitespace``1(``0,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="TNode" RefType="this" />
        <Parameter Name="indentation" Type="System.String" />
        <Parameter Name="elasticTrivia" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">The type of the node.</typeparam>
        <param name="node">The node to format.</param>
        <param name="indentation">A sequence of whitespace characters that defines a single level of indentation.</param>
        <param name="elasticTrivia">If true the replaced trivia is elastic trivia.</param>
        <summary>
            Creates a new syntax node with all whitespace and end of line trivia replaced with
            regularly formatted trivia.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalizeWhitespace&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static TNode NormalizeWhitespace&lt;TNode&gt; (this TNode node, string indentation = &quot;    &quot;, string eol = &quot;&#xD;&#xA;&quot;, bool elasticTrivia = false) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TNode NormalizeWhitespace&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(!!TNode node, string indentation, string eol, bool elasticTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.NormalizeWhitespace``1(``0,System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="TNode" RefType="this" />
        <Parameter Name="indentation" Type="System.String" />
        <Parameter Name="eol" Type="System.String" />
        <Parameter Name="elasticTrivia" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">The type of the node.</typeparam>
        <param name="node">The node to format.</param>
        <param name="indentation">An optional sequence of whitespace characters that defines a single level of indentation.</param>
        <param name="eol">An optional sequence of whitespace characters used for end of line.</param>
        <param name="elasticTrivia">If true the replaced trivia is elastic trivia.</param>
        <summary>
            Creates a new syntax node with all whitespace and end of line trivia replaced with
            regularly formatted trivia.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveNode&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot RemoveNode&lt;TRoot&gt; (this TRoot root, Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.SyntaxRemoveOptions options) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot RemoveNode&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, class Microsoft.CodeAnalysis.SyntaxNode node, valuetype Microsoft.CodeAnalysis.SyntaxRemoveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.RemoveNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxRemoveOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.SyntaxRemoveOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">The type of the root node.</typeparam>
        <param name="root">The root node from which to remove a descendant node from.</param>
        <param name="node">The node to remove.</param>
        <param name="options">Options that determine how the node's trivia is treated.</param>
        <summary>
            Creates a new tree of nodes with the specified node removed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveNodes&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot RemoveNodes&lt;TRoot&gt; (this TRoot root, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; nodes, Microsoft.CodeAnalysis.SyntaxRemoveOptions options) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot RemoveNodes&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; nodes, valuetype Microsoft.CodeAnalysis.SyntaxRemoveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.RemoveNodes``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxRemoveOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.SyntaxRemoveOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">The type of the root node.</typeparam>
        <param name="root">The root node from which to remove a descendant node from.</param>
        <param name="nodes">The nodes to remove.</param>
        <param name="options">Options that determine how the nodes' trivia is treated.</param>
        <summary>
            Creates a new tree of nodes with the specified nodes removed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceNode&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot ReplaceNode&lt;TRoot&gt; (this TRoot root, Microsoft.CodeAnalysis.SyntaxNode oldNode, Microsoft.CodeAnalysis.SyntaxNode newNode) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot ReplaceNode&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, class Microsoft.CodeAnalysis.SyntaxNode oldNode, class Microsoft.CodeAnalysis.SyntaxNode newNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="oldNode" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="newNode" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">The type of the root node.</typeparam>
        <param name="root">The root node of the tree of nodes.</param>
        <param name="oldNode">The node to be replaced; a descendant of the root node.</param>
        <param name="newNode">The new node to use in the new tree in place of the old node.</param>
        <summary>
            Creates a new tree of nodes with the specified old node replaced with a new node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceNode&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot ReplaceNode&lt;TRoot&gt; (this TRoot root, Microsoft.CodeAnalysis.SyntaxNode oldNode, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; newNodes) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot ReplaceNode&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, class Microsoft.CodeAnalysis.SyntaxNode oldNode, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; newNodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="oldNode" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="newNodes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">The type of the root node.</typeparam>
        <param name="root">The root of the tree of nodes.</param>
        <param name="oldNode">The node to be replaced; a descendant of the root node and an element of a list member.</param>
        <param name="newNodes">A sequence of nodes to use in the tree in place of the old node.</param>
        <summary>
            Creates a new tree of nodes with specified old node replaced with a new nodes.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceNodes&lt;TRoot,TNode&gt;">
      <MemberSignature Language="C#" Value="public static TRoot ReplaceNodes&lt;TRoot,TNode&gt; (this TRoot root, System.Collections.Generic.IEnumerable&lt;TNode&gt; nodes, Func&lt;TNode,TNode,Microsoft.CodeAnalysis.SyntaxNode&gt; computeReplacementNode) where TRoot : Microsoft.CodeAnalysis.SyntaxNode where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot ReplaceNodes&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot, (class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(!!TRoot root, class System.Collections.Generic.IEnumerable`1&lt;!!TNode&gt; nodes, class System.Func`3&lt;!!TNode, !!TNode, class Microsoft.CodeAnalysis.SyntaxNode&gt; computeReplacementNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNodes``2(``0,System.Collections.Generic.IEnumerable{``1},System.Func{``1,``1,Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;TNode&gt;" />
        <Parameter Name="computeReplacementNode" Type="System.Func&lt;TNode,TNode,Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">The type of the root node.</typeparam>
        <typeparam name="TNode">The type of the nodes being replaced.</typeparam>
        <param name="root">The root node of the tree of nodes.</param>
        <param name="nodes">The nodes to be replaced; descendants of the root node.</param>
        <param name="computeReplacementNode">A function that computes a replacement node for the
            argument nodes. The first argument is the original node. The second argument is the same
            node potentially rewritten with replaced descendants.</param>
        <summary>
            Creates a new tree of nodes with the specified old node replaced with a new node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceSyntax&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot ReplaceSyntax&lt;TRoot&gt; (this TRoot root, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; nodes, Func&lt;Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode&gt; computeReplacementNode, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; tokens, Func&lt;Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken&gt; computeReplacementToken, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; trivia, Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia&gt; computeReplacementTrivia) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot ReplaceSyntax&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; nodes, class System.Func`3&lt;class Microsoft.CodeAnalysis.SyntaxNode, class Microsoft.CodeAnalysis.SyntaxNode, class Microsoft.CodeAnalysis.SyntaxNode&gt; computeReplacementNode, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; tokens, class System.Func`3&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken, valuetype Microsoft.CodeAnalysis.SyntaxToken, valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; computeReplacementToken, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; trivia, class System.Func`3&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia, valuetype Microsoft.CodeAnalysis.SyntaxTrivia, valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; computeReplacementTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceSyntax``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="computeReplacementNode" Type="System.Func&lt;Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="tokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;" />
        <Parameter Name="computeReplacementToken" Type="System.Func&lt;Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken&gt;" />
        <Parameter Name="trivia" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
        <Parameter Name="computeReplacementTrivia" Type="System.Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">The type of the root node.</typeparam>
        <param name="root">The root node of the tree of nodes.</param>
        <param name="nodes">The nodes to be replaced.</param>
        <param name="computeReplacementNode">A function that computes a replacement node for the
            argument nodes. The first argument is the original node. The second argument is the same
            node potentially rewritten with replaced descendants.</param>
        <param name="tokens">The tokens to be replaced.</param>
        <param name="computeReplacementToken">A function that computes a replacement token for
            the argument tokens. The first argument is the original token. The second argument is
            the same token potentially rewritten with replaced trivia.</param>
        <param name="trivia">The trivia to be replaced.</param>
        <param name="computeReplacementTrivia">A function that computes replacement trivia for
            the specified arguments. The first argument is the original trivia. The second argument is
            the same trivia with potentially rewritten sub structure.</param>
        <summary>
            Creates a new tree of nodes with the specified nodes, tokens and trivia replaced.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceToken&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot ReplaceToken&lt;TRoot&gt; (this TRoot root, Microsoft.CodeAnalysis.SyntaxToken oldToken, Microsoft.CodeAnalysis.SyntaxToken newToken) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot ReplaceToken&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, valuetype Microsoft.CodeAnalysis.SyntaxToken oldToken, valuetype Microsoft.CodeAnalysis.SyntaxToken newToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceToken``1(``0,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="oldToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="newToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">The type of the root node.</typeparam>
        <param name="root">The root node of the tree of nodes.</param>
        <param name="oldToken">The token to be replaced.</param>
        <param name="newToken">The new token to use in the new tree in place of the old
            token.</param>
        <summary>
            Creates a new tree of nodes with the specified old token replaced with a new token.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceToken&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot ReplaceToken&lt;TRoot&gt; (this TRoot root, Microsoft.CodeAnalysis.SyntaxToken tokenInList, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; newTokens) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot ReplaceToken&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, valuetype Microsoft.CodeAnalysis.SyntaxToken tokenInList, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; newTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceToken``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="tokenInList" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="newTokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">The type of the root node.</typeparam>
        <param name="root">The root of the tree of nodes.</param>
        <param name="tokenInList">The token to be replaced; a descendant of the root node and an element of a list member.</param>
        <param name="newTokens">A sequence of tokens to use in the tree in place of the specified token.</param>
        <summary>
            Creates a new tree of nodes with the specified old token replaced with new tokens.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceTokens&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot ReplaceTokens&lt;TRoot&gt; (this TRoot root, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; tokens, Func&lt;Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken&gt; computeReplacementToken) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot ReplaceTokens&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; tokens, class System.Func`3&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken, valuetype Microsoft.CodeAnalysis.SyntaxToken, valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; computeReplacementToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTokens``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="tokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;" />
        <Parameter Name="computeReplacementToken" Type="System.Func&lt;Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">The type of the root node.</typeparam>
        <param name="root">The root node of the tree of nodes.</param>
        <param name="tokens">The token to be replaced; descendants of the root node.</param>
        <param name="computeReplacementToken">A function that computes a replacement token for
            the argument tokens. The first argument is the original token. The second argument is
            the same token potentially rewritten with replaced trivia.</param>
        <summary>
            Creates a new tree of nodes with the specified old node replaced with a new node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceTrivia&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot ReplaceTrivia&lt;TRoot&gt; (this TRoot root, Microsoft.CodeAnalysis.SyntaxTrivia trivia, Microsoft.CodeAnalysis.SyntaxTrivia newTrivia) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot ReplaceTrivia&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, valuetype Microsoft.CodeAnalysis.SyntaxTrivia trivia, valuetype Microsoft.CodeAnalysis.SyntaxTrivia newTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="trivia" Type="Microsoft.CodeAnalysis.SyntaxTrivia" />
        <Parameter Name="newTrivia" Type="Microsoft.CodeAnalysis.SyntaxTrivia" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">The type of the root node.</typeparam>
        <param name="root">The root node of the tree of nodes.</param>
        <param name="trivia">The trivia to be replaced.</param>
        <param name="newTrivia">The new trivia to use in the new tree in place of the old trivia.</param>
        <summary>
            Creates a new tree of nodes with the specified trivia replaced with new trivia.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceTrivia&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot ReplaceTrivia&lt;TRoot&gt; (this TRoot root, Microsoft.CodeAnalysis.SyntaxTrivia oldTrivia, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; newTrivia) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot ReplaceTrivia&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, valuetype Microsoft.CodeAnalysis.SyntaxTrivia oldTrivia, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; newTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="oldTrivia" Type="Microsoft.CodeAnalysis.SyntaxTrivia" />
        <Parameter Name="newTrivia" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">The type of the root node.</typeparam>
        <param name="root">The root of the tree of nodes.</param>
        <param name="oldTrivia">The trivia to be replaced; a descendant of the root node.</param>
        <param name="newTrivia">A sequence of trivia to use in the tree in place of the specified trivia.</param>
        <summary>
            Creates a new tree of nodes with the specified old trivia replaced with new trivia.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceTrivia&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot ReplaceTrivia&lt;TRoot&gt; (this TRoot root, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; trivia, Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia&gt; computeReplacementTrivia) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot ReplaceTrivia&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; trivia, class System.Func`3&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia, valuetype Microsoft.CodeAnalysis.SyntaxTrivia, valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; computeReplacementTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="trivia" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
        <Parameter Name="computeReplacementTrivia" Type="System.Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">The type of the root node.</typeparam>
        <param name="root">The root node of the tree of nodes.</param>
        <param name="trivia">The trivia to be replaced; descendants of the root node.</param>
        <param name="computeReplacementTrivia">A function that computes replacement trivia for
            the specified arguments. The first argument is the original trivia. The second argument is
            the same trivia with potentially rewritten sub structure.</param>
        <summary>
            Creates a new tree of nodes with the specified trivia replaced with new trivia.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackNodes&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot TrackNodes&lt;TRoot&gt; (this TRoot root, params Microsoft.CodeAnalysis.SyntaxNode[] nodes) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot TrackNodes&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, class Microsoft.CodeAnalysis.SyntaxNode[] nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.TrackNodes``1(``0,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="nodes" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TRoot">To be added.</typeparam>
        <param name="root">The root of the subtree containing the nodes to be tracked.</param>
        <param name="nodes">One or more nodes that are descendants of the root node.</param>
        <summary>
            Creates a new tree of nodes with the specified nodes being tracked.
            
            Use GetCurrentNode on the subtree resulting from this operation, or any transformation of it,
            to get the current node corresponding to the original tracked node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackNodes&lt;TRoot&gt;">
      <MemberSignature Language="C#" Value="public static TRoot TrackNodes&lt;TRoot&gt; (this TRoot root, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; nodes) where TRoot : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRoot TrackNodes&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TRoot&gt;(!!TRoot root, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.TrackNodes``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRoot</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRoot">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="TRoot" RefType="this" />
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TRoot">To be added.</typeparam>
        <param name="root">The root of the subtree containing the nodes to be tracked.</param>
        <param name="nodes">One or more nodes that are descendants of the root node.</param>
        <summary>
            Creates a new tree of nodes with the specified nodes being tracked.
            
            Use GetCurrentNode on the subtree resulting from this operation, or any transformation of it,
            to get the current node corresponding to the original tracked node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithLeadingTrivia&lt;TSyntax&gt;">
      <MemberSignature Language="C#" Value="public static TSyntax WithLeadingTrivia&lt;TSyntax&gt; (this TSyntax node, params Microsoft.CodeAnalysis.SyntaxTrivia[] trivia) where TSyntax : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSyntax WithLeadingTrivia&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TSyntax&gt;(!!TSyntax node, valuetype Microsoft.CodeAnalysis.SyntaxTrivia[] trivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSyntax</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSyntax">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="TSyntax" RefType="this" />
        <Parameter Name="trivia" Type="Microsoft.CodeAnalysis.SyntaxTrivia[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSyntax">To be added.</typeparam>
        <param name="node">To be added.</param>
        <param name="trivia">To be added.</param>
        <summary>
            Creates a new node from this node with the leading trivia replaced.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithLeadingTrivia&lt;TSyntax&gt;">
      <MemberSignature Language="C#" Value="public static TSyntax WithLeadingTrivia&lt;TSyntax&gt; (this TSyntax node, Microsoft.CodeAnalysis.SyntaxTriviaList trivia) where TSyntax : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSyntax WithLeadingTrivia&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TSyntax&gt;(!!TSyntax node, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSyntax</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSyntax">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="TSyntax" RefType="this" />
        <Parameter Name="trivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <typeparam name="TSyntax">To be added.</typeparam>
        <param name="node">To be added.</param>
        <param name="trivia">To be added.</param>
        <summary>
            Creates a new node from this node with the leading trivia replaced.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithLeadingTrivia&lt;TSyntax&gt;">
      <MemberSignature Language="C#" Value="public static TSyntax WithLeadingTrivia&lt;TSyntax&gt; (this TSyntax node, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; trivia) where TSyntax : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSyntax WithLeadingTrivia&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TSyntax&gt;(!!TSyntax node, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; trivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSyntax</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSyntax">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="TSyntax" RefType="this" />
        <Parameter Name="trivia" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSyntax">To be added.</typeparam>
        <param name="node">To be added.</param>
        <param name="trivia">To be added.</param>
        <summary>
            Creates a new node from this node with the leading trivia replaced.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithoutLeadingTrivia&lt;TSyntax&gt;">
      <MemberSignature Language="C#" Value="public static TSyntax WithoutLeadingTrivia&lt;TSyntax&gt; (this TSyntax node) where TSyntax : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSyntax WithoutLeadingTrivia&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TSyntax&gt;(!!TSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutLeadingTrivia``1(``0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSyntax</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSyntax">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="TSyntax" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSyntax">To be added.</typeparam>
        <param name="node">To be added.</param>
        <summary>
            Creates a new node from this node with the leading trivia removed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithoutTrailingTrivia&lt;TSyntax&gt;">
      <MemberSignature Language="C#" Value="public static TSyntax WithoutTrailingTrivia&lt;TSyntax&gt; (this TSyntax node) where TSyntax : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSyntax WithoutTrailingTrivia&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TSyntax&gt;(!!TSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutTrailingTrivia``1(``0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSyntax</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSyntax">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="TSyntax" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSyntax">To be added.</typeparam>
        <param name="node">To be added.</param>
        <summary>
            Creates a new node from this node with the trailing trivia removed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithoutTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken WithoutTrivia (this Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken WithoutTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutTrivia(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" RefType="this" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>
            Creates a new token from this token without leading or trailing trivia.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithoutTrivia&lt;TSyntax&gt;">
      <MemberSignature Language="C#" Value="public static TSyntax WithoutTrivia&lt;TSyntax&gt; (this TSyntax syntax) where TSyntax : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSyntax WithoutTrivia&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TSyntax&gt;(!!TSyntax syntax) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutTrivia``1(``0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSyntax</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSyntax">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="syntax" Type="TSyntax" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSyntax">To be added.</typeparam>
        <param name="syntax">To be added.</param>
        <summary>
            Creates a new node from this node without leading or trailing trivia.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTrailingTrivia&lt;TSyntax&gt;">
      <MemberSignature Language="C#" Value="public static TSyntax WithTrailingTrivia&lt;TSyntax&gt; (this TSyntax node, params Microsoft.CodeAnalysis.SyntaxTrivia[] trivia) where TSyntax : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSyntax WithTrailingTrivia&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TSyntax&gt;(!!TSyntax node, valuetype Microsoft.CodeAnalysis.SyntaxTrivia[] trivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSyntax</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSyntax">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="TSyntax" RefType="this" />
        <Parameter Name="trivia" Type="Microsoft.CodeAnalysis.SyntaxTrivia[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TSyntax">To be added.</typeparam>
        <param name="node">To be added.</param>
        <param name="trivia">To be added.</param>
        <summary>
            Creates a new node from this node with the trailing trivia replaced.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTrailingTrivia&lt;TSyntax&gt;">
      <MemberSignature Language="C#" Value="public static TSyntax WithTrailingTrivia&lt;TSyntax&gt; (this TSyntax node, Microsoft.CodeAnalysis.SyntaxTriviaList trivia) where TSyntax : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSyntax WithTrailingTrivia&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TSyntax&gt;(!!TSyntax node, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSyntax</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSyntax">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="TSyntax" RefType="this" />
        <Parameter Name="trivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <typeparam name="TSyntax">To be added.</typeparam>
        <param name="node">To be added.</param>
        <param name="trivia">To be added.</param>
        <summary>
            Creates a new node from this node with the trailing trivia replaced.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTrailingTrivia&lt;TSyntax&gt;">
      <MemberSignature Language="C#" Value="public static TSyntax WithTrailingTrivia&lt;TSyntax&gt; (this TSyntax node, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; trivia) where TSyntax : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSyntax WithTrailingTrivia&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TSyntax&gt;(!!TSyntax node, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; trivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSyntax</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSyntax">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="TSyntax" RefType="this" />
        <Parameter Name="trivia" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSyntax">To be added.</typeparam>
        <param name="node">To be added.</param>
        <param name="trivia">To be added.</param>
        <summary>
            Creates a new node from this node with the trailing trivia replaced.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTriviaFrom&lt;TSyntax&gt;">
      <MemberSignature Language="C#" Value="public static TSyntax WithTriviaFrom&lt;TSyntax&gt; (this TSyntax syntax, Microsoft.CodeAnalysis.SyntaxNode node) where TSyntax : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSyntax WithTriviaFrom&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TSyntax&gt;(!!TSyntax syntax, class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTriviaFrom``1(``0,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSyntax</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSyntax">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="syntax" Type="TSyntax" RefType="this" />
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <typeparam name="TSyntax">To be added.</typeparam>
        <param name="syntax">To be added.</param>
        <param name="node">To be added.</param>
        <summary>
            Creates a new node from this node with both the leading and trailing trivia of the specified node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>