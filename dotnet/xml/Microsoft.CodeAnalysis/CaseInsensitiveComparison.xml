<Type Name="CaseInsensitiveComparison" FullName="Microsoft.CodeAnalysis.CaseInsensitiveComparison">
  <TypeSignature Language="C#" Value="public static class CaseInsensitiveComparison" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CaseInsensitiveComparison extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CaseInsensitiveComparison" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Case-insensitive operations (mostly comparison) on unicode strings.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string left, string right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string left, string right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.Compare(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.String" />
        <Parameter Name="right" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="left">First identifier to compare</param>
        <param name="right">Second identifier to compare</param>
        <summary>
            Compares two VB identifiers according to the VB identifier comparison rules.
            </summary>
        <returns>-1 if <paramref name="left" /> &lt; <paramref name="right" />, 1 if <paramref name="left" /> &gt; <paramref name="right" />, 0 if they are equal.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public static StringComparer Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer Comparer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CaseInsensitiveComparison.Comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a StringComparer that compares strings according the VB identifier comparison rules.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public static bool EndsWith (string value, string possibleEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EndsWith(string value, string possibleEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.EndsWith(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="possibleEnd" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"></param>
        <param name="possibleEnd"></param>
        <summary>
            Determines if the string 'value' end with string 'possibleEnd'.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (string left, string right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(string left, string right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.Equals(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.String" />
        <Parameter Name="right" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="left">First identifier to compare</param>
        <param name="right">Second identifier to compare</param>
        <summary>
            Determines if two VB identifiers are equal according to the VB identifier comparison rules.
            </summary>
        <returns>true if the identifiers should be considered the same.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public static int GetHashCode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetHashCode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.GetHashCode(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">identifier to get the hash code for</param>
        <summary>
            Gets a case-insensitive hash code for VB identifiers.
            </summary>
        <returns>The hash code for the given identifier</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public static bool StartsWith (string value, string possibleStart);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool StartsWith(string value, string possibleStart) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.StartsWith(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="possibleStart" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"></param>
        <param name="possibleStart"></param>
        <summary>
            Determines if the string 'value' starts with string 'possibleStart'.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static char ToLower (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLower(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.ToLower(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"></param>
        <summary>
            ToLower implements the Unicode lowercase mapping
            as described in ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt.
            VB uses these mappings for case-insensitive comparison.
            </summary>
        <returns>If <paramref name="c" /> is upper case, then this returns its Unicode lower case equivalent. Otherwise, <paramref name="c" /> is returned unmodified.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static string ToLower (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToLower(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.ToLower(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"></param>
        <summary>
            Convert a string to lower case per Unicode
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static void ToLower (System.Text.StringBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ToLower(class System.Text.StringBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.ToLower(System.Text.StringBuilder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Text.StringBuilder" />
      </Parameters>
      <Docs>
        <param name="builder"></param>
        <summary>
            In-place convert string in StringBuilder to lower case per Unicode rules
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>