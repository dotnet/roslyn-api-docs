<Type Name="Match&lt;TNode&gt;" FullName="Microsoft.CodeAnalysis.Differencing.Match&lt;TNode&gt;">
  <TypeSignature Language="C#" Value="public sealed class Match&lt;TNode&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Match`1&lt;TNode&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Differencing.Match`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Match(Of TNode)" />
  <TypeSignature Language="F#" Value="type Match&lt;'Node&gt; = class" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TNode&gt;&#xA;public ref class Match sealed" />
  <TypeSignature Language="C++ WINRT" Value="template &lt;typename TNode&gt;&#xA;class Match sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TNode" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TNode">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Differencing.TreeComparer&lt;TNode&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.Differencing.TreeComparer`1&lt;!TNode&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Differencing.Match`1.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As TreeComparer(Of TNode)" />
      <MemberSignature Language="F#" Value="member this.Comparer : Microsoft.CodeAnalysis.Differencing.TreeComparer&lt;'Node&gt;" Usage="Microsoft.CodeAnalysis.Differencing.Match&lt;'Node&gt;.Comparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::Differencing::TreeComparer&lt;TNode&gt; ^ Comparer { Microsoft::CodeAnalysis::Differencing::TreeComparer&lt;TNode&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Differencing.TreeComparer&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSequenceEdits">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Differencing.Edit&lt;TNode&gt;&gt; GetSequenceEdits (System.Collections.Generic.IEnumerable&lt;TNode&gt; oldNodes, System.Collections.Generic.IEnumerable&lt;TNode&gt; newNodes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.Differencing.Edit`1&lt;!TNode&gt;&gt; GetSequenceEdits(class System.Collections.Generic.IEnumerable`1&lt;!TNode&gt; oldNodes, class System.Collections.Generic.IEnumerable`1&lt;!TNode&gt; newNodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Differencing.Match`1.GetSequenceEdits(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSequenceEdits (oldNodes As IEnumerable(Of TNode), newNodes As IEnumerable(Of TNode)) As IEnumerable(Of Edit(Of TNode))" />
      <MemberSignature Language="F#" Value="member this.GetSequenceEdits : seq&lt;'Node&gt; * seq&lt;'Node&gt; -&gt; seq&lt;Microsoft.CodeAnalysis.Differencing.Edit&lt;'Node&gt;&gt;" Usage="match.GetSequenceEdits (oldNodes, newNodes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::Differencing::Edit&lt;TNode&gt;&gt; ^ GetSequenceEdits(System::Collections::Generic::IEnumerable&lt;TNode&gt; ^ oldNodes, System::Collections::Generic::IEnumerable&lt;TNode&gt; ^ newNodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Differencing.Edit&lt;TNode&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldNodes" Type="System.Collections.Generic.IEnumerable&lt;TNode&gt;" />
        <Parameter Name="newNodes" Type="System.Collections.Generic.IEnumerable&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <param name="oldNodes">To be added.</param>
        <param name="newNodes">To be added.</param>
        <summary>
            Returns an edit script (a sequence of edits) that transform a sequence of nodes <paramref name="oldNodes" />
            to a sequence of nodes <paramref name="newNodes" />. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="oldNodes" /> or <paramref name="newNodes" /> is a null reference.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetTreeEdits">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Differencing.EditScript&lt;TNode&gt; GetTreeEdits ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.Differencing.EditScript`1&lt;!TNode&gt; GetTreeEdits() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Differencing.Match`1.GetTreeEdits" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTreeEdits () As EditScript(Of TNode)" />
      <MemberSignature Language="F#" Value="member this.GetTreeEdits : unit -&gt; Microsoft.CodeAnalysis.Differencing.EditScript&lt;'Node&gt;" Usage="match.GetTreeEdits " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::Differencing::EditScript&lt;TNode&gt; ^ GetTreeEdits();" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::Differencing::EditScript&lt;TNode&gt; GetTreeEdits();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Differencing.EditScript&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns an edit script (a sequence of edits) that transform <see cref="P:Microsoft.CodeAnalysis.Differencing.Match`1.OldRoot" /> subtree 
            to <see cref="P:Microsoft.CodeAnalysis.Differencing.Match`1.NewRoot" /> subtree.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;TNode,TNode&gt; Matches { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;!TNode, !TNode&gt; Matches" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Differencing.Match`1.Matches" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Matches As IReadOnlyDictionary(Of TNode, TNode)" />
      <MemberSignature Language="F#" Value="member this.Matches : System.Collections.Generic.IReadOnlyDictionary&lt;'Node, 'Node&gt;" Usage="Microsoft.CodeAnalysis.Differencing.Match&lt;'Node&gt;.Matches" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyDictionary&lt;TNode, TNode&gt; ^ Matches { System::Collections::Generic::IReadOnlyDictionary&lt;TNode, TNode&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;TNode,TNode&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewRoot">
      <MemberSignature Language="C#" Value="public TNode NewRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TNode NewRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Differencing.Match`1.NewRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewRoot As TNode" />
      <MemberSignature Language="F#" Value="member this.NewRoot : 'Node" Usage="Microsoft.CodeAnalysis.Differencing.Match&lt;'Node&gt;.NewRoot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TNode NewRoot { TNode get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property TNode NewRoot { TNode get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OldRoot">
      <MemberSignature Language="C#" Value="public TNode OldRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TNode OldRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Differencing.Match`1.OldRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OldRoot As TNode" />
      <MemberSignature Language="F#" Value="member this.OldRoot : 'Node" Usage="Microsoft.CodeAnalysis.Differencing.Match&lt;'Node&gt;.OldRoot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TNode OldRoot { TNode get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property TNode OldRoot { TNode get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReverseMatches">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;TNode,TNode&gt; ReverseMatches { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;!TNode, !TNode&gt; ReverseMatches" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Differencing.Match`1.ReverseMatches" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReverseMatches As IReadOnlyDictionary(Of TNode, TNode)" />
      <MemberSignature Language="F#" Value="member this.ReverseMatches : System.Collections.Generic.IReadOnlyDictionary&lt;'Node, 'Node&gt;" Usage="Microsoft.CodeAnalysis.Differencing.Match&lt;'Node&gt;.ReverseMatches" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyDictionary&lt;TNode, TNode&gt; ^ ReverseMatches { System::Collections::Generic::IReadOnlyDictionary&lt;TNode, TNode&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;TNode,TNode&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetNewNode">
      <MemberSignature Language="C#" Value="public bool TryGetNewNode (TNode oldNode, out TNode newNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetNewNode(!TNode oldNode, [out] !TNode&amp; newNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Differencing.Match`1.TryGetNewNode(`0,`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetNewNode (oldNode As TNode, ByRef newNode As TNode) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryGetNewNode : 'Node *  -&gt; bool" Usage="match.TryGetNewNode (oldNode, newNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetNewNode(TNode oldNode, [Runtime::InteropServices::Out] TNode % newNode);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; bool TryGetNewNode(TNode oldNode, [Runtime::InteropServices::Out] TNode &amp;  newNode);" />
      <MemberSignature Language="C++ WINRT" Value="bool TryGetNewNode(TNode oldNode, [Runtime::InteropServices::Out] TNode &amp; newNode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldNode" Type="TNode" />
        <Parameter Name="newNode" Type="TNode&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="oldNode">To be added.</param>
        <param name="newNode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetOldNode">
      <MemberSignature Language="C#" Value="public bool TryGetOldNode (TNode newNode, out TNode oldNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetOldNode(!TNode newNode, [out] !TNode&amp; oldNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Differencing.Match`1.TryGetOldNode(`0,`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetOldNode (newNode As TNode, ByRef oldNode As TNode) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryGetOldNode : 'Node *  -&gt; bool" Usage="match.TryGetOldNode (newNode, oldNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetOldNode(TNode newNode, [Runtime::InteropServices::Out] TNode % oldNode);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; bool TryGetOldNode(TNode newNode, [Runtime::InteropServices::Out] TNode &amp;  oldNode);" />
      <MemberSignature Language="C++ WINRT" Value="bool TryGetOldNode(TNode newNode, [Runtime::InteropServices::Out] TNode &amp; oldNode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newNode" Type="TNode" />
        <Parameter Name="oldNode" Type="TNode&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="newNode">To be added.</param>
        <param name="oldNode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>