<Type Name="CandidateReason" FullName="Microsoft.CodeAnalysis.CandidateReason">
  <TypeSignature Language="C#" Value="public enum CandidateReason" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CandidateReason extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CandidateReason" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
            Indicates the reasons why a candidate (or set of candidate) symbols were not considered
            correct in SemanticInfo. Higher values take precedence over lower values, so if, for
            example, there a symbol with a given name that was inaccessible, and other with the wrong
            arity, only the inaccessible one would be reported in the SemanticInfo.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Ambiguous">
      <MemberSignature Language="C#" Value="Ambiguous" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.CandidateReason Ambiguous = int32(15)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.CandidateReason.Ambiguous" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CandidateReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Multiple ambiguous symbols were available with the same name. This can occur if "using"
            statements bring multiple namespaces into scope, and the same type is available in
            multiple. This can also occur if multiple properties of the same name are available in a
            multiple interface inheritance situation.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Inaccessible">
      <MemberSignature Language="C#" Value="Inaccessible" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.CandidateReason Inaccessible = int32(8)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.CandidateReason.Inaccessible" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CandidateReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The candidate symbol had an accessibility modifier (private, protected, ...) that made
            it inaccessible.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="LateBound">
      <MemberSignature Language="C#" Value="LateBound" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.CandidateReason LateBound = int32(14)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.CandidateReason.LateBound" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CandidateReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Method could not be selected statically.
            The candidate symbols are the methods there were considered during overload resolution 
            (which may or may not be applicable methods). 
            </summary>
      </Docs>
    </Member>
    <Member MemberName="MemberGroup">
      <MemberSignature Language="C#" Value="MemberGroup" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.CandidateReason MemberGroup = int32(16)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.CandidateReason.MemberGroup" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CandidateReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            CandidateSymbols are members of a group of results. This is used when there isn't a problem,
            but there is more than one result, for example nameof(int.ToString).
            </summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.CandidateReason None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.CandidateReason.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CandidateReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            No CandidateSymbols.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="NotAnAttributeType">
      <MemberSignature Language="C#" Value="NotAnAttributeType" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.CandidateReason NotAnAttributeType = int32(4)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.CandidateReason.NotAnAttributeType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CandidateReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Only an attribute type was valid in the given location, but the candidate symbol was
            of the wrong kind.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="NotAnEvent">
      <MemberSignature Language="C#" Value="NotAnEvent" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.CandidateReason NotAnEvent = int32(2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.CandidateReason.NotAnEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CandidateReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Only an event was valid in the given location, but the candidate symbols was
            of the wrong kind.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="NotATypeOrNamespace">
      <MemberSignature Language="C#" Value="NotATypeOrNamespace" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.CandidateReason NotATypeOrNamespace = int32(1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.CandidateReason.NotATypeOrNamespace" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CandidateReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Only a type or namespace was valid in the given location, but the candidate symbols was
            of the wrong kind.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="NotAValue">
      <MemberSignature Language="C#" Value="NotAValue" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.CandidateReason NotAValue = int32(9)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.CandidateReason.NotAValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CandidateReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The candidate symbol was in a place where a value was required, but was not a value
            (e.g., was a type or namespace).
            </summary>
      </Docs>
    </Member>
    <Member MemberName="NotAVariable">
      <MemberSignature Language="C#" Value="NotAVariable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.CandidateReason NotAVariable = int32(10)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.CandidateReason.NotAVariable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CandidateReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The candidate symbol was in a place where a variable (or sometimes, a property) was
            required, but was not allowed there because it isn't a symbol that can be assigned to. 
            For example, the left hand side of an assignment, or a ref or out parameter.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="NotAWithEventsMember">
      <MemberSignature Language="C#" Value="NotAWithEventsMember" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.CandidateReason NotAWithEventsMember = int32(3)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.CandidateReason.NotAWithEventsMember" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CandidateReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The candidate symbol must be a WithEvents member, but it was not. 
            </summary>
      </Docs>
    </Member>
    <Member MemberName="NotCreatable">
      <MemberSignature Language="C#" Value="NotCreatable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.CandidateReason NotCreatable = int32(6)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.CandidateReason.NotCreatable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CandidateReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The candidate symbol existed, but was not allowed to be created in a new expression. 
            For example, interfaces, static classes, and unconstrained type parameters.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="NotInvocable">
      <MemberSignature Language="C#" Value="NotInvocable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.CandidateReason NotInvocable = int32(11)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.CandidateReason.NotInvocable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CandidateReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The candidate symbol was used in a way that an invocable member (method, or variable of
            delegate type) was required, but the candidate symbol was not invocable.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="NotReferencable">
      <MemberSignature Language="C#" Value="NotReferencable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.CandidateReason NotReferencable = int32(7)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.CandidateReason.NotReferencable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CandidateReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The candidate symbol existed, but was not allowed to be referenced. For example, the
            "get_XXX" method used to implement a property named "XXX" may not be directly
            referenced. Similarly, the type "System.Void" can not be directly referenced.
            Also occurs if "this" is used in a context (static method or field initializer)
            where "this" is not available.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="OverloadResolutionFailure">
      <MemberSignature Language="C#" Value="OverloadResolutionFailure" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.CandidateReason OverloadResolutionFailure = int32(13)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.CandidateReason.OverloadResolutionFailure" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CandidateReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Overload resolution did not choose a method. The candidate symbols are the methods there
            were considered during overload resolution (which may or may not be applicable methods). 
            </summary>
      </Docs>
    </Member>
    <Member MemberName="StaticInstanceMismatch">
      <MemberSignature Language="C#" Value="StaticInstanceMismatch" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.CandidateReason StaticInstanceMismatch = int32(12)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.CandidateReason.StaticInstanceMismatch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CandidateReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The candidate symbol must be an instance variable, but was used as static, or the
            reverse. 
            </summary>
      </Docs>
    </Member>
    <Member MemberName="WrongArity">
      <MemberSignature Language="C#" Value="WrongArity" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.CandidateReason WrongArity = int32(5)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.CandidateReason.WrongArity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CandidateReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The candidate symbol takes a different number of type parameters that was required.
            </summary>
      </Docs>
    </Member>
  </Members>
</Type>