<Type Name="SyntheticLocalKind" FullName="Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind">
  <TypeSignature Language="C#" Value="public enum SyntheticLocalKind" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SyntheticLocalKind extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind" />
  <TypeSignature Language="VB.NET" Value="Public Enum SyntheticLocalKind" />
  <TypeSignature Language="F#" Value="type SyntheticLocalKind = " />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
            Kinds of synthetic local references.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ForLoopLimitValue">
      <MemberSignature Language="C#" Value="ForLoopLimitValue" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind ForLoopLimitValue = int32(2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind.ForLoopLimitValue" />
      <MemberSignature Language="VB.NET" Value="ForLoopLimitValue" />
      <MemberSignature Language="F#" Value="ForLoopLimitValue = 2" Usage="Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind.ForLoopLimitValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
            Created to capture the limit value of a VB for loop.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="ForLoopStepValue">
      <MemberSignature Language="C#" Value="ForLoopStepValue" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind ForLoopStepValue = int32(1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind.ForLoopStepValue" />
      <MemberSignature Language="VB.NET" Value="ForLoopStepValue" />
      <MemberSignature Language="F#" Value="ForLoopStepValue = 1" Usage="Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind.ForLoopStepValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
            Created to capture the step value of a VB for loop.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Semantics.SyntheticLocalKind</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
  </Members>
</Type>