<Type Name="TextChangeEventArgs" FullName="Microsoft.CodeAnalysis.Text.TextChangeEventArgs">
  <TypeSignature Language="C#" Value="public class TextChangeEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextChangeEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Text.TextChangeEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class TextChangeEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="F#" Value="type TextChangeEventArgs = class&#xA;    inherit EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextChangeEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents state for a TextChanged event.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextChangeEventArgs (Microsoft.CodeAnalysis.Text.SourceText oldText, Microsoft.CodeAnalysis.Text.SourceText newText, params Microsoft.CodeAnalysis.Text.TextChangeRange[] changes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.CodeAnalysis.Text.SourceText oldText, class Microsoft.CodeAnalysis.Text.SourceText newText, valuetype Microsoft.CodeAnalysis.Text.TextChangeRange[] changes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.#ctor(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.TextChangeRange[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (oldText As SourceText, newText As SourceText, ParamArray changes As TextChangeRange())" />
      <MemberSignature Language="F#" Value="new Microsoft.CodeAnalysis.Text.TextChangeEventArgs : Microsoft.CodeAnalysis.Text.SourceText * Microsoft.CodeAnalysis.Text.SourceText * Microsoft.CodeAnalysis.Text.TextChangeRange[] -&gt; Microsoft.CodeAnalysis.Text.TextChangeEventArgs" Usage="new Microsoft.CodeAnalysis.Text.TextChangeEventArgs (oldText, newText, changes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextChangeEventArgs(Microsoft::CodeAnalysis::Text::SourceText ^ oldText, Microsoft::CodeAnalysis::Text::SourceText ^ newText, ... cli::array &lt;Microsoft::CodeAnalysis::Text::TextChangeRange&gt; ^ changes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="oldText" Type="Microsoft.CodeAnalysis.Text.SourceText" />
        <Parameter Name="newText" Type="Microsoft.CodeAnalysis.Text.SourceText" />
        <Parameter Name="changes" Type="Microsoft.CodeAnalysis.Text.TextChangeRange[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="oldText">The text before the change.</param>
        <param name="newText">The text after the change.</param>
        <param name="changes">A set of ranges for the change.</param>
        <summary>
            Initializes an instance of <see cref="T:Microsoft.CodeAnalysis.Text.TextChangeEventArgs" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextChangeEventArgs (Microsoft.CodeAnalysis.Text.SourceText oldText, Microsoft.CodeAnalysis.Text.SourceText newText, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Text.TextChangeRange&gt; changes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.CodeAnalysis.Text.SourceText oldText, class Microsoft.CodeAnalysis.Text.SourceText newText, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.Text.TextChangeRange&gt; changes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.#ctor(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChangeRange})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (oldText As SourceText, newText As SourceText, changes As IEnumerable(Of TextChangeRange))" />
      <MemberSignature Language="F#" Value="new Microsoft.CodeAnalysis.Text.TextChangeEventArgs : Microsoft.CodeAnalysis.Text.SourceText * Microsoft.CodeAnalysis.Text.SourceText * seq&lt;Microsoft.CodeAnalysis.Text.TextChangeRange&gt; -&gt; Microsoft.CodeAnalysis.Text.TextChangeEventArgs" Usage="new Microsoft.CodeAnalysis.Text.TextChangeEventArgs (oldText, newText, changes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextChangeEventArgs(Microsoft::CodeAnalysis::Text::SourceText ^ oldText, Microsoft::CodeAnalysis::Text::SourceText ^ newText, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::Text::TextChangeRange&gt; ^ changes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="oldText" Type="Microsoft.CodeAnalysis.Text.SourceText" />
        <Parameter Name="newText" Type="Microsoft.CodeAnalysis.Text.SourceText" />
        <Parameter Name="changes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Text.TextChangeRange&gt;" />
      </Parameters>
      <Docs>
        <param name="oldText">The text before the change.</param>
        <param name="newText">The text after the change.</param>
        <param name="changes">A set of ranges for the change.</param>
        <summary>
            Initializes an instance of <see cref="T:Microsoft.CodeAnalysis.Text.TextChangeEventArgs" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Changes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.Text.TextChangeRange&gt; Changes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;valuetype Microsoft.CodeAnalysis.Text.TextChangeRange&gt; Changes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.Changes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Changes As IReadOnlyList(Of TextChangeRange)" />
      <MemberSignature Language="F#" Value="member this.Changes : System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.Text.TextChangeRange&gt;" Usage="Microsoft.CodeAnalysis.Text.TextChangeEventArgs.Changes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::Text::TextChangeRange&gt; ^ Changes { System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::Text::TextChangeRange&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.Text.TextChangeRange&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the set of ranges for the change.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewText">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Text.SourceText NewText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.Text.SourceText NewText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.NewText" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewText As SourceText" />
      <MemberSignature Language="F#" Value="member this.NewText : Microsoft.CodeAnalysis.Text.SourceText" Usage="Microsoft.CodeAnalysis.Text.TextChangeEventArgs.NewText" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::Text::SourceText ^ NewText { Microsoft::CodeAnalysis::Text::SourceText ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.SourceText</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the text after the change.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OldText">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Text.SourceText OldText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.Text.SourceText OldText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.OldText" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OldText As SourceText" />
      <MemberSignature Language="F#" Value="member this.OldText : Microsoft.CodeAnalysis.Text.SourceText" Usage="Microsoft.CodeAnalysis.Text.TextChangeEventArgs.OldText" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::Text::SourceText ^ OldText { Microsoft::CodeAnalysis::Text::SourceText ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.SourceText</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the text before the change.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>