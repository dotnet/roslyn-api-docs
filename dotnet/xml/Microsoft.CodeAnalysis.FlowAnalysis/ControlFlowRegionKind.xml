<Type Name="ControlFlowRegionKind" FullName="Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind">
  <TypeSignature Language="C#" Value="public enum ControlFlowRegionKind" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ControlFlowRegionKind extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind" />
  <TypeSignature Language="VB.NET" Value="Public Enum ControlFlowRegionKind" />
  <TypeSignature Language="F#" Value="type ControlFlowRegionKind = " />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
            Defines kinds of regions that can be present in a <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph" /></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="Catch" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind Catch = int32(4)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.Catch" />
      <MemberSignature Language="VB.NET" Value="Catch" />
      <MemberSignature Language="F#" Value="Catch = 4" Usage="Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.Catch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>
            Region representing <see cref="P:Microsoft.CodeAnalysis.Operations.ICatchClauseOperation.Handler" /></summary>
      </Docs>
    </Member>
    <Member MemberName="ErroneousBody">
      <MemberSignature Language="C#" Value="ErroneousBody" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind ErroneousBody = int32(10)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.ErroneousBody" />
      <MemberSignature Language="VB.NET" Value="ErroneousBody" />
      <MemberSignature Language="F#" Value="ErroneousBody = 10" Usage="Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.ErroneousBody" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind</ReturnType>
      </ReturnValue>
      <MemberValue>10</MemberValue>
      <Docs>
        <summary>
            Region representing erroneous block of code that is unreachable from the entry block.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="Filter" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind Filter = int32(3)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.Filter" />
      <MemberSignature Language="VB.NET" Value="Filter" />
      <MemberSignature Language="F#" Value="Filter = 3" Usage="Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.Filter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>
            Region representing <see cref="P:Microsoft.CodeAnalysis.Operations.ICatchClauseOperation.Filter" /></summary>
      </Docs>
    </Member>
    <Member MemberName="FilterAndHandler">
      <MemberSignature Language="C#" Value="FilterAndHandler" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind FilterAndHandler = int32(5)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.FilterAndHandler" />
      <MemberSignature Language="VB.NET" Value="FilterAndHandler" />
      <MemberSignature Language="F#" Value="FilterAndHandler = 5" Usage="Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.FilterAndHandler" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>
            Region representing a union of a <see cref="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.Filter" /> and the corresponding catch <see cref="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.Catch" /> regions. 
            Doesn't contain any <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock" />s directly.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Finally">
      <MemberSignature Language="C#" Value="Finally" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind Finally = int32(7)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.Finally" />
      <MemberSignature Language="VB.NET" Value="Finally" />
      <MemberSignature Language="F#" Value="Finally = 7" Usage="Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.Finally" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind</ReturnType>
      </ReturnValue>
      <MemberValue>7</MemberValue>
      <Docs>
        <summary>
            Region representing <see cref="P:Microsoft.CodeAnalysis.Operations.ITryOperation.Finally" /></summary>
      </Docs>
    </Member>
    <Member MemberName="LocalLifetime">
      <MemberSignature Language="C#" Value="LocalLifetime" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind LocalLifetime = int32(1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.LocalLifetime" />
      <MemberSignature Language="VB.NET" Value="LocalLifetime" />
      <MemberSignature Language="F#" Value="LocalLifetime = 1" Usage="Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.LocalLifetime" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
            Region with the only purpose to represent the life-time of locals, intermediate results, and nested methods (local functions, lambdas).
            The lifetime of a local variable is the portion of program execution during which storage is guaranteed to be reserved for it.
            The lifetime of a nested method is the portion of program execution within which the method can be referenced.
            The lifetime of an intermediate result (capture) is the portion of program execution within which the result can be referenced.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="Root" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind Root = int32(0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.Root" />
      <MemberSignature Language="VB.NET" Value="Root" />
      <MemberSignature Language="F#" Value="Root = 0" Usage="Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.Root" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
            A root region encapsulating all <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock" />s in a <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph" /></summary>
      </Docs>
    </Member>
    <Member MemberName="StaticLocalInitializer">
      <MemberSignature Language="C#" Value="StaticLocalInitializer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind StaticLocalInitializer = int32(9)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.StaticLocalInitializer" />
      <MemberSignature Language="VB.NET" Value="StaticLocalInitializer" />
      <MemberSignature Language="F#" Value="StaticLocalInitializer = 9" Usage="Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.StaticLocalInitializer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind</ReturnType>
      </ReturnValue>
      <MemberValue>9</MemberValue>
      <Docs>
        <summary>
            Region representing the initialization for a VB <code>Static</code> local variable. This region will only be executed
            the first time a function is called.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Try">
      <MemberSignature Language="C#" Value="Try" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind Try = int32(2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.Try" />
      <MemberSignature Language="VB.NET" Value="Try" />
      <MemberSignature Language="F#" Value="Try = 2" Usage="Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.Try" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
            Region representing a try region. For example, <see cref="P:Microsoft.CodeAnalysis.Operations.ITryOperation.Body" /></summary>
      </Docs>
    </Member>
    <Member MemberName="TryAndCatch">
      <MemberSignature Language="C#" Value="TryAndCatch" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind TryAndCatch = int32(6)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.TryAndCatch" />
      <MemberSignature Language="VB.NET" Value="TryAndCatch" />
      <MemberSignature Language="F#" Value="TryAndCatch = 6" Usage="Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.TryAndCatch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind</ReturnType>
      </ReturnValue>
      <MemberValue>6</MemberValue>
      <Docs>
        <summary>
            Region representing a union of a <see cref="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.Try" /> and all corresponding catch <see cref="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.Catch" />
            and <see cref="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.FilterAndHandler" /> regions. Doesn't contain any <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock" />s directly.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="TryAndFinally">
      <MemberSignature Language="C#" Value="TryAndFinally" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind TryAndFinally = int32(8)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.TryAndFinally" />
      <MemberSignature Language="VB.NET" Value="TryAndFinally" />
      <MemberSignature Language="F#" Value="TryAndFinally = 8" Usage="Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.TryAndFinally" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>
            Region representing a union of a <see cref="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.Try" /> and corresponding finally <see cref="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.Finally" />
            region. Doesn't contain any <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.BasicBlock" />s directly.
            
            An <see cref="T:Microsoft.CodeAnalysis.Operations.ITryOperation" /> that has a set of <see cref="P:Microsoft.CodeAnalysis.Operations.ITryOperation.Catches" /> and a <see cref="P:Microsoft.CodeAnalysis.Operations.ITryOperation.Finally" /> 
            at the same time is mapped to a <see cref="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.TryAndFinally" /> region with <see cref="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.TryAndCatch" /> region inside its <see cref="F:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowRegionKind.Try" /> region.
            </summary>
      </Docs>
    </Member>
  </Members>
</Type>