<Type Name="ForOrForEachBlockSyntax" FullName="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax">
  <TypeSignature Language="C#" Value="public abstract class ForOrForEachBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ForOrForEachBlockSyntax extends Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ForOrForEachBlockSyntax&#xA;Inherits ExecutableStatementSyntax" />
  <TypeSignature Language="F#" Value="type ForOrForEachBlockSyntax = class&#xA;    inherit ExecutableStatementSyntax" />
  <TypeSignature Language="C++ CLI" Value="public ref class ForOrForEachBlockSyntax abstract : Microsoft::CodeAnalysis::VisualBasic::Syntax::ExecutableStatementSyntax" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
 Represents a For or For Each block.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddNextStatementControlVariables">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax AddNextStatementControlVariables (params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax AddNextStatementControlVariables(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax.AddNextStatementControlVariables(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddNextStatementControlVariables (ParamArray items As ExpressionSyntax()) As ForOrForEachBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.AddNextStatementControlVariables : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax" Usage="forOrForEachBlockSyntax.AddNextStatementControlVariables items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ForOrForEachBlockSyntax ^ AddNextStatementControlVariables(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddStatements">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax AddStatements (params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax AddStatements(class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax.AddStatements(Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddStatements (ParamArray items As StatementSyntax()) As ForOrForEachBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.AddStatements : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax" Usage="forOrForEachBlockSyntax.AddStatements items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ForOrForEachBlockSyntax ^ AddStatements(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForOrForEachStatement">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachStatementSyntax ForOrForEachStatement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachStatementSyntax ForOrForEachStatement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax.ForOrForEachStatement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ForOrForEachStatement As ForOrForEachStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.ForOrForEachStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax.ForOrForEachStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Microsoft::CodeAnalysis::VisualBasic::Syntax::ForOrForEachStatementSyntax ^ ForOrForEachStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::ForOrForEachStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The For or For Each statement that begins the block.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax NextStatement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax NextStatement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax.NextStatement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextStatement As NextStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.NextStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax.NextStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax ^ NextStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The Next statement that ends the block. If two For or For Each statements are
 ended by a single Next statement, the inner For will not have a Next statement.
 </summary>
        <value>To be added.</value>
        <remarks>
 This child is optional. If it is not present, then Nothing is returned.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="Statements">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; Statements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; Statements" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax.Statements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Statements As SyntaxList(Of StatementSyntax)" />
      <MemberSignature Language="F#" Value="member this.Statements : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax.Statements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; Statements { Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The statements contained in the For or For Each loop. This might be an empty
 list.
 </summary>
        <value>To be added.</value>
        <remarks>
 If nothing is present, an empty list is returned.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithNextStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax WithNextStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax nextStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax WithNextStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax nextStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax.WithNextStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithNextStatement (nextStatement As NextStatementSyntax) As ForOrForEachBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.WithNextStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax" Usage="forOrForEachBlockSyntax.WithNextStatement nextStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ForOrForEachBlockSyntax ^ WithNextStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax ^ nextStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nextStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="nextStatement">To be added.</param>
        <summary>
 Returns a copy of this with the NextStatement property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithStatements">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax WithStatements (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax WithStatements(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax.WithStatements(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithStatements (statements As SyntaxList(Of StatementSyntax)) As ForOrForEachBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.WithStatements : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax" Usage="forOrForEachBlockSyntax.WithStatements statements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ForOrForEachBlockSyntax ^ WithStatements(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="statements">To be added.</param>
        <summary>
 Returns a copy of this with the Statements property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>