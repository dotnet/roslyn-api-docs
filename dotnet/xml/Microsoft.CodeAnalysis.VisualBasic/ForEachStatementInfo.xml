<Type Name="ForEachStatementInfo" FullName="Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo">
  <TypeSignature Language="C#" Value="public struct ForEachStatementInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed ForEachStatementInfo extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo" />
  <TypeSignature Language="VB.NET" Value="Public Structure ForEachStatementInfo" />
  <TypeSignature Language="F#" Value="type ForEachStatementInfo = struct" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
  Structure containing all semantic information about a for each statement.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CurrentConversion">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Conversion CurrentConversion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion CurrentConversion" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo.CurrentConversion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentConversion As Conversion" />
      <MemberSignature Language="F#" Value="member this.CurrentConversion : Microsoft.CodeAnalysis.VisualBasic.Conversion" Usage="Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo.CurrentConversion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Conversion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The conversion from the type of the <see cref="P:Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo.CurrentProperty" /> to the <see cref="P:Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo.ElementType" />.
 </summary>
        <value>To be added.</value>
        <remarks>
 Frequently the identity conversion.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentProperty">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IPropertySymbol CurrentProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IPropertySymbol CurrentProperty" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo.CurrentProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentProperty As IPropertySymbol" />
      <MemberSignature Language="F#" Value="member this.CurrentProperty : Microsoft.CodeAnalysis.IPropertySymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo.CurrentProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IPropertySymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Gets the "Current" property.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeMethod">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IMethodSymbol DisposeMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IMethodSymbol DisposeMethod" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo.DisposeMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisposeMethod As IMethodSymbol" />
      <MemberSignature Language="F#" Value="member this.DisposeMethod : Microsoft.CodeAnalysis.IMethodSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo.DisposeMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IMethodSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Gets the "Dispose" method.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementConversion">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Conversion ElementConversion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion ElementConversion" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo.ElementConversion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElementConversion As Conversion" />
      <MemberSignature Language="F#" Value="member this.ElementConversion : Microsoft.CodeAnalysis.VisualBasic.Conversion" Usage="Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo.ElementConversion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Conversion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The conversion from the <see cref="P:Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo.ElementType" /> to the iteration variable type.
 </summary>
        <value>To be added.</value>
        <remarks>
 May be user-defined.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementType">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.ITypeSymbol ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.ITypeSymbol ElementType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo.ElementType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElementType As ITypeSymbol" />
      <MemberSignature Language="F#" Value="member this.ElementType : Microsoft.CodeAnalysis.ITypeSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo.ElementType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ITypeSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The intermediate type to which the output of the <see cref="P:Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo.CurrentProperty" /> is converted
 before being converted to the iteration variable type.
 </summary>
        <value>To be added.</value>
        <remarks>
 As you might hope, for an array, it is the element type of the array.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumeratorMethod">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IMethodSymbol GetEnumeratorMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IMethodSymbol GetEnumeratorMethod" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo.GetEnumeratorMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GetEnumeratorMethod As IMethodSymbol" />
      <MemberSignature Language="F#" Value="member this.GetEnumeratorMethod : Microsoft.CodeAnalysis.IMethodSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo.GetEnumeratorMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IMethodSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Gets the "GetEnumerator" method.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNextMethod">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IMethodSymbol MoveNextMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IMethodSymbol MoveNextMethod" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo.MoveNextMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MoveNextMethod As IMethodSymbol" />
      <MemberSignature Language="F#" Value="member this.MoveNextMethod : Microsoft.CodeAnalysis.IMethodSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo.MoveNextMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IMethodSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Gets the "MoveNext" method.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>