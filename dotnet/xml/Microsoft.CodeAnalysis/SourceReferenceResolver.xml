<Type Name="SourceReferenceResolver" FullName="Microsoft.CodeAnalysis.SourceReferenceResolver">
  <TypeSignature Language="C#" Value="public abstract class SourceReferenceResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SourceReferenceResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.SourceReferenceResolver" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SourceReferenceResolver" />
  <TypeSignature Language="F#" Value="type SourceReferenceResolver = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class SourceReferenceResolver abstract" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Resolves references to source documents specified in the source.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SourceReferenceResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SourceReferenceResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SourceReferenceResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SourceReferenceResolver.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="sourceReferenceResolver.Equals other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Equals(System::Object ^ other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public abstract int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SourceReferenceResolver.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="sourceReferenceResolver.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalizePath">
      <MemberSignature Language="C#" Value="public abstract string NormalizePath (string path, string baseFilePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string NormalizePath(string path, string baseFilePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SourceReferenceResolver.NormalizePath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function NormalizePath (path As String, baseFilePath As String) As String" />
      <MemberSignature Language="F#" Value="abstract member NormalizePath : string * string -&gt; string" Usage="sourceReferenceResolver.NormalizePath (path, baseFilePath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ NormalizePath(System::String ^ path, System::String ^ baseFilePath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="baseFilePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The source path to normalize. May be absolute or relative.</param>
        <param name="baseFilePath">Path of the source file that contains the <paramref name="path" /> (may also be relative), or null if not available.</param>
        <summary>
            Normalizes specified source path with respect to base file path.
            </summary>
        <returns>Normalized path, or null if <paramref name="path" /> can't be normalized. The resulting path doesn't need to exist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public abstract System.IO.Stream OpenRead (string resolvedPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream OpenRead(string resolvedPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SourceReferenceResolver.OpenRead(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function OpenRead (resolvedPath As String) As Stream" />
      <MemberSignature Language="F#" Value="abstract member OpenRead : string -&gt; System.IO.Stream" Usage="sourceReferenceResolver.OpenRead resolvedPath" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::IO::Stream ^ OpenRead(System::String ^ resolvedPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolvedPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolvedPath">Path returned by <see cref="M:Microsoft.CodeAnalysis.SourceReferenceResolver.ResolveReference(System.String,System.String)" />.</param>
        <summary>
            Opens a <see cref="T:System.IO.Stream" /> that allows reading the content of the specified file.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resolvedPath" /> is null.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="resolvedPath" /> is not a valid absolute path.</exception>
        <exception cref="T:System.IO.IOException">Error reading file <paramref name="resolvedPath" />. See <see cref="P:System.Exception.InnerException" /> for details.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadText">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.Text.SourceText ReadText (string resolvedPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.Text.SourceText ReadText(string resolvedPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SourceReferenceResolver.ReadText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadText (resolvedPath As String) As SourceText" />
      <MemberSignature Language="F#" Value="abstract member ReadText : string -&gt; Microsoft.CodeAnalysis.Text.SourceText&#xA;override this.ReadText : string -&gt; Microsoft.CodeAnalysis.Text.SourceText" Usage="sourceReferenceResolver.ReadText resolvedPath" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::CodeAnalysis::Text::SourceText ^ ReadText(System::String ^ resolvedPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.SourceText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolvedPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolvedPath">Path returned by <see cref="M:Microsoft.CodeAnalysis.SourceReferenceResolver.ResolveReference(System.String,System.String)" />.</param>
        <summary>
            Reads the contents of <paramref name="resolvedPath" /> and returns a <see cref="T:Microsoft.CodeAnalysis.Text.SourceText" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveReference">
      <MemberSignature Language="C#" Value="public abstract string ResolveReference (string path, string baseFilePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ResolveReference(string path, string baseFilePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SourceReferenceResolver.ResolveReference(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ResolveReference (path As String, baseFilePath As String) As String" />
      <MemberSignature Language="F#" Value="abstract member ResolveReference : string * string -&gt; string" Usage="sourceReferenceResolver.ResolveReference (path, baseFilePath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ ResolveReference(System::String ^ path, System::String ^ baseFilePath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="baseFilePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path to resolve. May be absolute or relative.</param>
        <param name="baseFilePath">Path of the source file that contains the <paramref name="path" /> (may also be relative), or null if not available.</param>
        <summary>
            Resolves specified path with respect to base file path.
            </summary>
        <returns>Normalized path, or null if the file can't be resolved.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>