<Type Name="SyntaxList&lt;TNode&gt;" FullName="Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;">
  <TypeSignature Language="C#" Value="public struct SyntaxList&lt;TNode&gt; : IEquatable&lt;Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;&gt;, System.Collections.Generic.IEnumerable&lt;TNode&gt;, System.Collections.Generic.IReadOnlyCollection&lt;TNode&gt;, System.Collections.Generic.IReadOnlyList&lt;TNode&gt; where TNode : SyntaxNode" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SyntaxList`1&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt; extends System.ValueType implements class System.Collections.Generic.IEnumerable`1&lt;!TNode&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!TNode&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!TNode&gt;, class System.Collections.IEnumerable, class System.IEquatable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!TNode&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.SyntaxList`1" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TNode">
      <Constraints>
        <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TNode&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;TNode&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;TNode&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TNode">To be added.</typeparam>
    <summary>
            A list of <see cref="T:Microsoft.CodeAnalysis.SyntaxNode" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; Add (TNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!TNode&gt; Add(!TNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.Add(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="TNode" />
      </Parameters>
      <Docs>
        <param name="node">The node to add.</param>
        <summary>
            Creates a new list with the specified node added at the end.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; AddRange (System.Collections.Generic.IEnumerable&lt;TNode&gt; nodes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!TNode&gt; AddRange(class System.Collections.Generic.IEnumerable`1&lt;!TNode&gt; nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <param name="nodes">The nodes to add.</param>
        <summary>
            Creates a new list with the specified nodes added at the end.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Any">
      <MemberSignature Language="C#" Value="public bool Any ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Any() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.Any" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            True if the list has at least one node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.SyntaxList`1.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The number of nodes in the list.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!TNode&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.Equals(Microsoft.CodeAnalysis.SyntaxList{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="First">
      <MemberSignature Language="C#" Value="public TNode First ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TNode First() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.First" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            The first node in the list.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefault">
      <MemberSignature Language="C#" Value="public TNode FirstOrDefault ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TNode FirstOrDefault() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.FirstOrDefault" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            The first node in the list or default if the list is empty.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullSpan">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Text.TextSpan FullSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.Text.TextSpan FullSpan" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.SyntaxList`1.FullSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.TextSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxList`1/Enumerator&lt;!TNode&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Get's the enumerator for this list.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (Func&lt;TNode,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Func`2&lt;!TNode, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.IndexOf(System.Func{`0,System.Boolean})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TNode,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (TNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!TNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.IndexOf(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="TNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
            The index of the node in this list, or -1 if the node is not in the list.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; Insert (int index, TNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!TNode&gt; Insert(int32 index, !TNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.Insert(System.Int32,`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="node" Type="TNode" />
      </Parameters>
      <Docs>
        <param name="index">The index to insert at.</param>
        <param name="node">The node to insert.</param>
        <summary>
            Creates a new list with the specified node inserted at the index.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; InsertRange (int index, System.Collections.Generic.IEnumerable&lt;TNode&gt; nodes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!TNode&gt; InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!TNode&gt; nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <param name="index">The index to insert at.</param>
        <param name="nodes">The nodes to insert.</param>
        <summary>
            Creates a new list with the specified nodes inserted at the index.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TNode this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TNode Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.SyntaxList`1.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the node to get or set.</param>
        <summary>
            Gets the node at the specified index.
            </summary>
        <value>The node at the specified index.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Last">
      <MemberSignature Language="C#" Value="public TNode Last ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TNode Last() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.Last" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            The last node in the list.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (Func&lt;TNode,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(class System.Func`2&lt;!TNode, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.LastIndexOf(System.Func{`0,System.Boolean})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TNode,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (TNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!TNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.LastIndexOf(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="TNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefault">
      <MemberSignature Language="C#" Value="public TNode LastOrDefault ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TNode LastOrDefault() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.LastOrDefault" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            The last node in the list or default if the list is empty.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; left, Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!TNode&gt; left, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!TNode&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.op_Equality(Microsoft.CodeAnalysis.SyntaxList{`0},Microsoft.CodeAnalysis.SyntaxList{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; nodes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!TNode&gt; op_Implicit(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.op_Implicit(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.SyntaxNode})~Microsoft.CodeAnalysis.SyntaxList{`0}" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodes" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="nodes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; (Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; nodes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; op_Implicit(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!TNode&gt; nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.op_Implicit(Microsoft.CodeAnalysis.SyntaxList{`0})~Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.SyntaxNode}" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodes" Type="Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <param name="nodes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; left, Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!TNode&gt; left, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!TNode&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.op_Inequality(Microsoft.CodeAnalysis.SyntaxList{`0},Microsoft.CodeAnalysis.SyntaxList{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; Remove (TNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!TNode&gt; Remove(!TNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.Remove(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="TNode" />
      </Parameters>
      <Docs>
        <param name="node">The element to remove.</param>
        <summary>
            Creates a new list with the element removed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!TNode&gt; RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.RemoveAt(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of the element to remove.</param>
        <summary>
            Creates a new list with the element at specified index removed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; Replace (TNode nodeInList, TNode newNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!TNode&gt; Replace(!TNode nodeInList, !TNode newNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.Replace(`0,`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeInList" Type="TNode" />
        <Parameter Name="newNode" Type="TNode" />
      </Parameters>
      <Docs>
        <param name="nodeInList">The element to replace.</param>
        <param name="newNode">The new node.</param>
        <summary>
            Creates a new list with the specified element replaced with the new node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceRange">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; ReplaceRange (TNode nodeInList, System.Collections.Generic.IEnumerable&lt;TNode&gt; newNodes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!TNode&gt; ReplaceRange(!TNode nodeInList, class System.Collections.Generic.IEnumerable`1&lt;!TNode&gt; newNodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.ReplaceRange(`0,System.Collections.Generic.IEnumerable{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeInList" Type="TNode" />
        <Parameter Name="newNodes" Type="System.Collections.Generic.IEnumerable&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <param name="nodeInList">The element to replace.</param>
        <param name="newNodes">The new nodes.</param>
        <summary>
            Creates a new list with the specified element replaced with new nodes.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Span">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Text.TextSpan Span { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.Text.TextSpan Span" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.SyntaxList`1.Span" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.TextSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;TNode&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;TNode&gt; IEnumerable&lt;TNode&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TNode&gt; System.Collections.Generic.IEnumerable&lt;TNode&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.System#Collections#Generic#IEnumerable&lt;TNode&gt;#GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFullString">
      <MemberSignature Language="C#" Value="public string ToFullString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToFullString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.ToFullString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns the full string representation of the nodes in this list including 
            the first node's leading trivia and the last node's trailing trivia.
            </summary>
        <returns>
            The full string representation of the nodes in this list including 
            the first node's leading trivia and the last node's trailing trivia.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxList`1.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns the string representation of the nodes in this list, not including 
            the first node's leading trivia and the last node's trailing trivia.
            </summary>
        <returns>
            The string representation of the nodes in this list, not including 
            the first node's leading trivia and the last node's trailing trivia.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>