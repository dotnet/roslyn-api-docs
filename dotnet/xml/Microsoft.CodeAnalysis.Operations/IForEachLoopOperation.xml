<Type Name="IForEachLoopOperation" FullName="Microsoft.CodeAnalysis.Operations.IForEachLoopOperation">
  <TypeSignature Language="C#" Value="public interface IForEachLoopOperation : Microsoft.CodeAnalysis.Operations.ILoopOperation" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IForEachLoopOperation implements class Microsoft.CodeAnalysis.IOperation, class Microsoft.CodeAnalysis.Operations.ILoopOperation" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Operations.IForEachLoopOperation" />
  <TypeSignature Language="VB.NET" Value="Public Interface IForEachLoopOperation&#xA;Implements ILoopOperation" />
  <TypeSignature Language="F#" Value="type IForEachLoopOperation = interface&#xA;    interface ILoopOperation&#xA;    interface IOperation" />
  <TypeSignature Language="C++ CLI" Value="public interface class IForEachLoopOperation : Microsoft::CodeAnalysis::Operations::ILoopOperation" />
  <TypeSignature Language="C++ CX" Value="public interface class IForEachLoopOperation : Microsoft::CodeAnalysis::Operations::ILoopOperation" />
  <TypeSignature Language="C++ WINRT" Value="__interface IForEachLoopOperation : Microsoft::CodeAnalysis::Operations::ILoopOperation" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.CodeAnalysis.Operations.ILoopOperation</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents a for each loop.
            <para>
            Current usage:
             (1) C# 'foreach' loop statement
             (2) VB 'For Each' loop statement
            </para></summary>
    <remarks>
            This interface is reserved for implementation by its associated APIs. We reserve the right to
            change it in the future.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Collection">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IOperation Collection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IOperation Collection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IForEachLoopOperation.Collection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Collection As IOperation" />
      <MemberSignature Language="F#" Value="member this.Collection : Microsoft.CodeAnalysis.IOperation" Usage="Microsoft.CodeAnalysis.Operations.IForEachLoopOperation.Collection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ Collection { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ Collection { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Collection value over which the loop iterates.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoopControlVariable">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IOperation LoopControlVariable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IOperation LoopControlVariable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IForEachLoopOperation.LoopControlVariable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LoopControlVariable As IOperation" />
      <MemberSignature Language="F#" Value="member this.LoopControlVariable : Microsoft.CodeAnalysis.IOperation" Usage="Microsoft.CodeAnalysis.Operations.IForEachLoopOperation.LoopControlVariable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ LoopControlVariable { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ LoopControlVariable { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Refers to the operation for declaring a new local variable or reference an existing variable or an expression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextVariables">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt; NextVariables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.IOperation&gt; NextVariables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IForEachLoopOperation.NextVariables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextVariables As ImmutableArray(Of IOperation)" />
      <MemberSignature Language="F#" Value="member this.NextVariables : System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt;" Usage="Microsoft.CodeAnalysis.Operations.IForEachLoopOperation.NextVariables" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::IOperation ^&gt; NextVariables { System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::IOperation ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Optional list of comma separated next variables at loop bottom in VB.
            This list is always empty for C#.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>