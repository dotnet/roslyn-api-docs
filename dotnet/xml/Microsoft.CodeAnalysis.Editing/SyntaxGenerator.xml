<Type Name="SyntaxGenerator" FullName="Microsoft.CodeAnalysis.Editing.SyntaxGenerator">
  <TypeSignature Language="C#" Value="public abstract class SyntaxGenerator : Microsoft.CodeAnalysis.Host.ILanguageService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SyntaxGenerator extends System.Object implements class Microsoft.CodeAnalysis.Host.ILanguageService" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Editing.SyntaxGenerator" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SyntaxGenerator&#xA;Implements ILanguageService" />
  <TypeSignature Language="F#" Value="type SyntaxGenerator = class&#xA;    interface ILanguageService" />
  <TypeSignature Language="C++ CLI" Value="public ref class SyntaxGenerator abstract : Microsoft::CodeAnalysis::Host::ILanguageService" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.CodeAnalysis.Host.ILanguageService</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A language agnostic factory for creating syntax nodes.
            
            This API can be used to create language specific syntax nodes that are semantically 
            similar between languages.
            
            The trees generated by this API will try to respect user preferences when
            possible.  For example, generating <see cref="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MemberAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,System.String)" /> 
            will be done in a way such that "this." or "Me." will be simplified according to user
            preference if any <see cref="M:Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Options.OptionSet,System.Threading.CancellationToken)" /> 
            overload is called.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SyntaxGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SyntaxGenerator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessors">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode AddAccessors (Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; accessors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode AddAccessors(class Microsoft.CodeAnalysis.SyntaxNode declaration, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; accessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAccessors(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddAccessors (declaration As SyntaxNode, accessors As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.AddAccessors : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AddAccessors (declaration, accessors)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ AddAccessors(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ accessors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="accessors" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="accessors">To be added.</param>
        <summary>
            Creates a new instance of the declaration with the accessors added.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributeArguments">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode AddAttributeArguments (Microsoft.CodeAnalysis.SyntaxNode attributeDeclaration, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; attributeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode AddAttributeArguments(class Microsoft.CodeAnalysis.SyntaxNode attributeDeclaration, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; attributeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddAttributeArguments (attributeDeclaration As SyntaxNode, attributeArguments As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.AddAttributeArguments : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AddAttributeArguments (attributeDeclaration, attributeArguments)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ AddAttributeArguments(Microsoft::CodeAnalysis::SyntaxNode ^ attributeDeclaration, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ attributeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeDeclaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="attributeArguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="attributeDeclaration">To be added.</param>
        <param name="attributeArguments">To be added.</param>
        <summary>
            Creates a new instance of the attribute with the arguments added.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributes">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode AddAttributes (Microsoft.CodeAnalysis.SyntaxNode declaration, params Microsoft.CodeAnalysis.SyntaxNode[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode AddAttributes(class Microsoft.CodeAnalysis.SyntaxNode declaration, class Microsoft.CodeAnalysis.SyntaxNode[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributes(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddAttributes (declaration As SyntaxNode, ParamArray attributes As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.AddAttributes : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AddAttributes (declaration, attributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ AddAttributes(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>
            Creates a new instance of a declaration with the specified attributes added.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributes">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode AddAttributes (Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode AddAttributes(class Microsoft.CodeAnalysis.SyntaxNode declaration, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddAttributes (declaration As SyntaxNode, attributes As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.AddAttributes : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AddAttributes (declaration, attributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ AddAttributes(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="attributes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>
            Creates a new instance of a declaration with the specified attributes added.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddBaseType">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode AddBaseType (Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode baseType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode AddBaseType(class Microsoft.CodeAnalysis.SyntaxNode declaration, class Microsoft.CodeAnalysis.SyntaxNode baseType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddBaseType(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AddBaseType (declaration As SyntaxNode, baseType As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member AddBaseType : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AddBaseType (declaration, baseType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ AddBaseType(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, Microsoft::CodeAnalysis::SyntaxNode ^ baseType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="baseType" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="baseType">To be added.</param>
        <summary>
            Adds a base type to the declaration
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEventHandler">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode AddEventHandler (Microsoft.CodeAnalysis.SyntaxNode event, Microsoft.CodeAnalysis.SyntaxNode handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode AddEventHandler(class Microsoft.CodeAnalysis.SyntaxNode event, class Microsoft.CodeAnalysis.SyntaxNode handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddEventHandler(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AddEventHandler (event As SyntaxNode, handler As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member AddEventHandler : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AddEventHandler (event, handler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ AddEventHandler(Microsoft::CodeAnalysis::SyntaxNode ^ event, Microsoft::CodeAnalysis::SyntaxNode ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="event" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="handler" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="event">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>
            Creates a statement that adds the given handler to the given event.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode AddExpression (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode AddExpression(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AddExpression (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member AddExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AddExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ AddExpression(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes an addition operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInterfaceType">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode AddInterfaceType (Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode AddInterfaceType(class Microsoft.CodeAnalysis.SyntaxNode declaration, class Microsoft.CodeAnalysis.SyntaxNode interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddInterfaceType(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AddInterfaceType (declaration As SyntaxNode, interfaceType As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member AddInterfaceType : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AddInterfaceType (declaration, interfaceType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ AddInterfaceType(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, Microsoft::CodeAnalysis::SyntaxNode ^ interfaceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="interfaceType" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="interfaceType">To be added.</param>
        <summary>
            Adds an interface type to the declaration
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMembers">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode AddMembers (Microsoft.CodeAnalysis.SyntaxNode declaration, params Microsoft.CodeAnalysis.SyntaxNode[] members);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode AddMembers(class Microsoft.CodeAnalysis.SyntaxNode declaration, class Microsoft.CodeAnalysis.SyntaxNode[] members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddMembers(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMembers (declaration As SyntaxNode, ParamArray members As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.AddMembers : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AddMembers (declaration, members)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ AddMembers(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="members">To be added.</param>
        <summary>
            Creates a new instance of the declaration with the members added to the end.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMembers">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode AddMembers (Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode AddMembers(class Microsoft.CodeAnalysis.SyntaxNode declaration, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddMembers(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMembers (declaration As SyntaxNode, members As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.AddMembers : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AddMembers (declaration, members)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ AddMembers(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="members" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="members">To be added.</param>
        <summary>
            Creates a new instance of the declaration with the members added to the end.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddNamespaceImports">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode AddNamespaceImports (Microsoft.CodeAnalysis.SyntaxNode declaration, params Microsoft.CodeAnalysis.SyntaxNode[] imports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode AddNamespaceImports(class Microsoft.CodeAnalysis.SyntaxNode declaration, class Microsoft.CodeAnalysis.SyntaxNode[] imports) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddNamespaceImports (declaration As SyntaxNode, ParamArray imports As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.AddNamespaceImports : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AddNamespaceImports (declaration, imports)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ AddNamespaceImports(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ imports);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="imports" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="imports">To be added.</param>
        <summary>
            Creates a new instance of the declaration with the namespace imports added.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddNamespaceImports">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode AddNamespaceImports (Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; imports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode AddNamespaceImports(class Microsoft.CodeAnalysis.SyntaxNode declaration, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; imports) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddNamespaceImports (declaration As SyntaxNode, imports As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.AddNamespaceImports : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AddNamespaceImports (declaration, imports)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ AddNamespaceImports(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ imports);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="imports" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="imports">To be added.</param>
        <summary>
            Creates a new instance of the declaration with the namespace imports added.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddParameters">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode AddParameters (Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode AddParameters(class Microsoft.CodeAnalysis.SyntaxNode declaration, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddParameters(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddParameters (declaration As SyntaxNode, parameters As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.AddParameters : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AddParameters (declaration, parameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ AddParameters(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>
            Adds the parameters to the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddReturnAttributes">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode AddReturnAttributes (Microsoft.CodeAnalysis.SyntaxNode declaration, params Microsoft.CodeAnalysis.SyntaxNode[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode AddReturnAttributes(class Microsoft.CodeAnalysis.SyntaxNode declaration, class Microsoft.CodeAnalysis.SyntaxNode[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddReturnAttributes (declaration As SyntaxNode, ParamArray attributes As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.AddReturnAttributes : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AddReturnAttributes (declaration, attributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ AddReturnAttributes(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>
            Creates a new instance of a method declaration node with return attributes added.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddReturnAttributes">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode AddReturnAttributes (Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode AddReturnAttributes(class Microsoft.CodeAnalysis.SyntaxNode declaration, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddReturnAttributes (declaration As SyntaxNode, attributes As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.AddReturnAttributes : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AddReturnAttributes (declaration, attributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ AddReturnAttributes(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="attributes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>
            Creates a new instance of a method declaration with return attributes added.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSwitchSections">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode AddSwitchSections (Microsoft.CodeAnalysis.SyntaxNode switchStatement, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; switchSections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode AddSwitchSections(class Microsoft.CodeAnalysis.SyntaxNode switchStatement, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; switchSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AddSwitchSections(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSwitchSections (switchStatement As SyntaxNode, switchSections As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.AddSwitchSections : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AddSwitchSections (switchStatement, switchSections)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ AddSwitchSections(Microsoft::CodeAnalysis::SyntaxNode ^ switchStatement, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ switchSections);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchStatement" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="switchSections" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="switchStatement">To be added.</param>
        <param name="switchSections">To be added.</param>
        <summary>
            Adds the switch sections to the statement.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AliasImportDeclaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode AliasImportDeclaration (string aliasIdentifierName, Microsoft.CodeAnalysis.INamespaceOrTypeSymbol symbol);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode AliasImportDeclaration(string aliasIdentifierName, class Microsoft.CodeAnalysis.INamespaceOrTypeSymbol symbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AliasImportDeclaration(System.String,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol)" />
      <MemberSignature Language="VB.NET" Value="Public Function AliasImportDeclaration (aliasIdentifierName As String, symbol As INamespaceOrTypeSymbol) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.AliasImportDeclaration : string * Microsoft.CodeAnalysis.INamespaceOrTypeSymbol -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AliasImportDeclaration (aliasIdentifierName, symbol)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ AliasImportDeclaration(System::String ^ aliasIdentifierName, Microsoft::CodeAnalysis::INamespaceOrTypeSymbol ^ symbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aliasIdentifierName" Type="System.String" />
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.INamespaceOrTypeSymbol" />
      </Parameters>
      <Docs>
        <param name="aliasIdentifierName">The name of the alias.</param>
        <param name="symbol">The namespace or type to be aliased.</param>
        <summary>
            Creates an alias import declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AliasImportDeclaration">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode AliasImportDeclaration (string aliasIdentifierName, Microsoft.CodeAnalysis.SyntaxNode name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode AliasImportDeclaration(string aliasIdentifierName, class Microsoft.CodeAnalysis.SyntaxNode name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AliasImportDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AliasImportDeclaration (aliasIdentifierName As String, name As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member AliasImportDeclaration : string * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AliasImportDeclaration (aliasIdentifierName, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ AliasImportDeclaration(System::String ^ aliasIdentifierName, Microsoft::CodeAnalysis::SyntaxNode ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aliasIdentifierName" Type="System.String" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="aliasIdentifierName">The name of the alias.</param>
        <param name="name">The namespace or type to be aliased.</param>
        <summary>
            Creates an alias import declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Argument">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode Argument (Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode Argument(class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Argument (expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.Argument : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.Argument expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ Argument(Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
            Creates a node that is an argument to an invocation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Argument">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode Argument (Microsoft.CodeAnalysis.RefKind refKind, Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode Argument(valuetype Microsoft.CodeAnalysis.RefKind refKind, class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(Microsoft.CodeAnalysis.RefKind,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="F#" Value="member this.Argument : Microsoft.CodeAnalysis.RefKind * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.Argument (refKind, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ Argument(Microsoft::CodeAnalysis::RefKind refKind, Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refKind" Type="Microsoft.CodeAnalysis.RefKind" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="refKind">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>
            Creates a node that is an argument to an invocation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Argument">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode Argument (string name, Microsoft.CodeAnalysis.RefKind refKind, Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode Argument(string name, valuetype Microsoft.CodeAnalysis.RefKind refKind, class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Argument(System.String,Microsoft.CodeAnalysis.RefKind,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member Argument : string * Microsoft.CodeAnalysis.RefKind * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.Argument (name, refKind, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ Argument(System::String ^ name, Microsoft::CodeAnalysis::RefKind refKind, Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="refKind" Type="Microsoft.CodeAnalysis.RefKind" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="refKind">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>
            Creates a node that is an argument to an invocation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayCreationExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ArrayCreationExpression (Microsoft.CodeAnalysis.SyntaxNode elementType, Microsoft.CodeAnalysis.SyntaxNode size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ArrayCreationExpression(class Microsoft.CodeAnalysis.SyntaxNode elementType, class Microsoft.CodeAnalysis.SyntaxNode size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ArrayCreationExpression (elementType As SyntaxNode, size As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ArrayCreationExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ArrayCreationExpression (elementType, size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ ArrayCreationExpression(Microsoft::CodeAnalysis::SyntaxNode ^ elementType, Microsoft::CodeAnalysis::SyntaxNode ^ size);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="size" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="elementType">To be added.</param>
        <param name="size">To be added.</param>
        <summary>
            Creates an array creation expression for a single dimensional array of specified size.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayCreationExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ArrayCreationExpression (Microsoft.CodeAnalysis.SyntaxNode elementType, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; elements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ArrayCreationExpression(class Microsoft.CodeAnalysis.SyntaxNode elementType, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; elements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ArrayCreationExpression (elementType As SyntaxNode, elements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ArrayCreationExpression : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ArrayCreationExpression (elementType, elements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ ArrayCreationExpression(Microsoft::CodeAnalysis::SyntaxNode ^ elementType, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ elements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="elements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="elementType">To be added.</param>
        <param name="elements">To be added.</param>
        <summary>
            Creates an array creation expression for a single dimensional array with specified initial element values.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayTypeExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ArrayTypeExpression (Microsoft.CodeAnalysis.SyntaxNode type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ArrayTypeExpression(class Microsoft.CodeAnalysis.SyntaxNode type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ArrayTypeExpression(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ArrayTypeExpression (type As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ArrayTypeExpression : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ArrayTypeExpression type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ ArrayTypeExpression(Microsoft::CodeAnalysis::SyntaxNode ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
            Creates an expression that denotes an array type.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsPrivateInterfaceImplementation">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode AsPrivateInterfaceImplementation (Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode AsPrivateInterfaceImplementation(class Microsoft.CodeAnalysis.SyntaxNode declaration, class Microsoft.CodeAnalysis.SyntaxNode interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AsPrivateInterfaceImplementation(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function AsPrivateInterfaceImplementation (declaration As SyntaxNode, interfaceType As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.AsPrivateInterfaceImplementation : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AsPrivateInterfaceImplementation (declaration, interfaceType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ AsPrivateInterfaceImplementation(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, Microsoft::CodeAnalysis::SyntaxNode ^ interfaceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="interfaceType" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="interfaceType">To be added.</param>
        <summary>
            Converts method, property and indexer declarations into private interface implementations.
            This is equivalent to a C# explicit interface implementation (you can declare it for access via the interface, but cannot call it directly).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsPrivateInterfaceImplementation">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode AsPrivateInterfaceImplementation (Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode interfaceType, string interfaceMemberName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode AsPrivateInterfaceImplementation(class Microsoft.CodeAnalysis.SyntaxNode declaration, class Microsoft.CodeAnalysis.SyntaxNode interfaceType, string interfaceMemberName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AsPrivateInterfaceImplementation(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AsPrivateInterfaceImplementation (declaration As SyntaxNode, interfaceType As SyntaxNode, interfaceMemberName As String) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member AsPrivateInterfaceImplementation : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode * string -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AsPrivateInterfaceImplementation (declaration, interfaceType, interfaceMemberName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ AsPrivateInterfaceImplementation(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, Microsoft::CodeAnalysis::SyntaxNode ^ interfaceType, System::String ^ interfaceMemberName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="interfaceType" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="interfaceMemberName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="interfaceType">To be added.</param>
        <param name="interfaceMemberName">To be added.</param>
        <summary>
            Converts method, property and indexer declarations into private interface implementations.
            This is equivalent to a C# explicit interface implementation (you can declare it for access via the interface, but cannot call it directly).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsPublicInterfaceImplementation">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode AsPublicInterfaceImplementation (Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode AsPublicInterfaceImplementation(class Microsoft.CodeAnalysis.SyntaxNode declaration, class Microsoft.CodeAnalysis.SyntaxNode interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AsPublicInterfaceImplementation(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function AsPublicInterfaceImplementation (declaration As SyntaxNode, interfaceType As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.AsPublicInterfaceImplementation : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AsPublicInterfaceImplementation (declaration, interfaceType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ AsPublicInterfaceImplementation(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, Microsoft::CodeAnalysis::SyntaxNode ^ interfaceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="interfaceType" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="interfaceType">To be added.</param>
        <summary>
            Converts method, property and indexer declarations into public interface implementations.
            This is equivalent to an implicit C# interface implementation (you can access it via the interface or directly via the named member.)
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsPublicInterfaceImplementation">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode AsPublicInterfaceImplementation (Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode interfaceType, string interfaceMemberName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode AsPublicInterfaceImplementation(class Microsoft.CodeAnalysis.SyntaxNode declaration, class Microsoft.CodeAnalysis.SyntaxNode interfaceType, string interfaceMemberName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AsPublicInterfaceImplementation(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AsPublicInterfaceImplementation (declaration As SyntaxNode, interfaceType As SyntaxNode, interfaceMemberName As String) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member AsPublicInterfaceImplementation : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode * string -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AsPublicInterfaceImplementation (declaration, interfaceType, interfaceMemberName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ AsPublicInterfaceImplementation(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, Microsoft::CodeAnalysis::SyntaxNode ^ interfaceType, System::String ^ interfaceMemberName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="interfaceType" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="interfaceMemberName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="interfaceType">To be added.</param>
        <param name="interfaceMemberName">To be added.</param>
        <summary>
            Converts method, property and indexer declarations into public interface implementations.
            This is equivalent to an implicit C# interface implementation (you can access it via the interface or directly via the named member.)
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignmentStatement">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode AssignmentStatement (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode AssignmentStatement(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AssignmentStatement(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AssignmentStatement (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member AssignmentStatement : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AssignmentStatement (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ AssignmentStatement(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes an assignment from the right argument to left argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode Attribute (Microsoft.CodeAnalysis.AttributeData attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode Attribute(class Microsoft.CodeAnalysis.AttributeData attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(Microsoft.CodeAnalysis.AttributeData)" />
      <MemberSignature Language="VB.NET" Value="Public Function Attribute (attribute As AttributeData) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.Attribute : Microsoft.CodeAnalysis.AttributeData -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.Attribute attribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ Attribute(Microsoft::CodeAnalysis::AttributeData ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="Microsoft.CodeAnalysis.AttributeData" />
      </Parameters>
      <Docs>
        <param name="attribute">To be added.</param>
        <summary>
            Creates an attribute matching existing attribute data.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode Attribute (Microsoft.CodeAnalysis.SyntaxNode name, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; attributeArguments = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode Attribute(class Microsoft.CodeAnalysis.SyntaxNode name, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; attributeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Attribute (name As SyntaxNode, Optional attributeArguments As IEnumerable(Of SyntaxNode) = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member Attribute : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.Attribute (name, attributeArguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="attributeArguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="attributeArguments">To be added.</param>
        <summary>
            Creates an attribute.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode Attribute (string name, params Microsoft.CodeAnalysis.SyntaxNode[] attributeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode Attribute(string name, class Microsoft.CodeAnalysis.SyntaxNode[] attributeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(System.String,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Attribute (name As String, ParamArray attributeArguments As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.Attribute : string * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.Attribute (name, attributeArguments)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ Attribute(System::String ^ name, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ attributeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributeArguments" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="attributeArguments">To be added.</param>
        <summary>
            Creates an attribute.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode Attribute (string name, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; attributeArguments = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode Attribute(string name, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; attributeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Attribute(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function Attribute (name As String, Optional attributeArguments As IEnumerable(Of SyntaxNode) = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.Attribute : string * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.Attribute (name, attributeArguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributeArguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="attributeArguments">To be added.</param>
        <summary>
            Creates an attribute.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeArgument">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode AttributeArgument (Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode AttributeArgument(class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AttributeArgument(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function AttributeArgument (expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.AttributeArgument : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AttributeArgument expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ AttributeArgument(Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
            Creates an attribute argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeArgument">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode AttributeArgument (string name, Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode AttributeArgument(string name, class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AttributeArgument(System.String,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AttributeArgument (name As String, expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member AttributeArgument : string * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AttributeArgument (name, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ AttributeArgument(System::String ^ name, Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>
            Creates an attribute argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AwaitExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode AwaitExpression (Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode AwaitExpression(class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.AwaitExpression(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AwaitExpression (expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member AwaitExpression : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.AwaitExpression expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ AwaitExpression(Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
            Creates an await expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode BaseExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode BaseExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BaseExpression" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BaseExpression () As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member BaseExpression : unit -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.BaseExpression " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ BaseExpression();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates an expression that denotes the containing method's base-parameter.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitwiseAndExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode BitwiseAndExpression (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode BitwiseAndExpression(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseAndExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BitwiseAndExpression (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member BitwiseAndExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.BitwiseAndExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ BitwiseAndExpression(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes a bitwise-and operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitwiseNotExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode BitwiseNotExpression (Microsoft.CodeAnalysis.SyntaxNode operand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode BitwiseNotExpression(class Microsoft.CodeAnalysis.SyntaxNode operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseNotExpression(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BitwiseNotExpression (operand As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member BitwiseNotExpression : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.BitwiseNotExpression operand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ BitwiseNotExpression(Microsoft::CodeAnalysis::SyntaxNode ^ operand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="operand">To be added.</param>
        <summary>
            Creates an expression that denotes a bitwise-not operation
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitwiseOrExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode BitwiseOrExpression (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode BitwiseOrExpression(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.BitwiseOrExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BitwiseOrExpression (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member BitwiseOrExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.BitwiseOrExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ BitwiseOrExpression(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes a bitwise-or operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CastExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode CastExpression (Microsoft.CodeAnalysis.ITypeSymbol type, Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode CastExpression(class Microsoft.CodeAnalysis.ITypeSymbol type, class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CastExpression(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function CastExpression (type As ITypeSymbol, expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.CastExpression : Microsoft.CodeAnalysis.ITypeSymbol * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.CastExpression (type, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ CastExpression(Microsoft::CodeAnalysis::ITypeSymbol ^ type, Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>
            Creates an expression that denotes a type cast operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CastExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode CastExpression (Microsoft.CodeAnalysis.SyntaxNode type, Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode CastExpression(class Microsoft.CodeAnalysis.SyntaxNode type, class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CastExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CastExpression (type As SyntaxNode, expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member CastExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.CastExpression (type, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ CastExpression(Microsoft::CodeAnalysis::SyntaxNode ^ type, Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>
            Creates an expression that denotes a type cast operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchClause">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode CatchClause (Microsoft.CodeAnalysis.ITypeSymbol type, string identifier, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode CatchClause(class Microsoft.CodeAnalysis.ITypeSymbol type, string identifier, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CatchClause(Microsoft.CodeAnalysis.ITypeSymbol,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function CatchClause (type As ITypeSymbol, identifier As String, statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.CatchClause : Microsoft.CodeAnalysis.ITypeSymbol * string * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.CatchClause (type, identifier, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ CatchClause(Microsoft::CodeAnalysis::ITypeSymbol ^ type, System::String ^ identifier, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Creates a catch-clause.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchClause">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode CatchClause (Microsoft.CodeAnalysis.SyntaxNode type, string identifier, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode CatchClause(class Microsoft.CodeAnalysis.SyntaxNode type, string identifier, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CatchClause(Microsoft.CodeAnalysis.SyntaxNode,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CatchClause (type As SyntaxNode, identifier As String, statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member CatchClause : Microsoft.CodeAnalysis.SyntaxNode * string * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.CatchClause (type, identifier, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ CatchClause(Microsoft::CodeAnalysis::SyntaxNode ^ type, System::String ^ identifier, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Creates a catch-clause.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassDeclaration">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ClassDeclaration (string name, System.Collections.Generic.IEnumerable&lt;string&gt; typeParameters = null, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = null, Microsoft.CodeAnalysis.SyntaxNode baseType = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; interfaceTypes = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; members = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ClassDeclaration(string name, class System.Collections.Generic.IEnumerable`1&lt;string&gt; typeParameters, valuetype Microsoft.CodeAnalysis.Accessibility accessibility, valuetype Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers, class Microsoft.CodeAnalysis.SyntaxNode baseType, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; interfaceTypes, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ClassDeclaration(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="F#" Value="abstract member ClassDeclaration : string * seq&lt;string&gt; * Microsoft.CodeAnalysis.Accessibility * Microsoft.CodeAnalysis.Editing.DeclarationModifiers * Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ClassDeclaration (name, typeParameters, accessibility, modifiers, baseType, interfaceTypes, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="typeParameters" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="accessibility" Type="Microsoft.CodeAnalysis.Accessibility" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.Editing.DeclarationModifiers" />
        <Parameter Name="baseType" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="interfaceTypes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="members" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="typeParameters">To be added.</param>
        <param name="accessibility">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="baseType">To be added.</param>
        <param name="interfaceTypes">To be added.</param>
        <param name="members">To be added.</param>
        <summary>
            Creates a class declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearTrivia&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public abstract TNode ClearTrivia&lt;TNode&gt; (TNode node) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TNode ClearTrivia&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(!!TNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ClearTrivia``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ClearTrivia(Of TNode As SyntaxNode) (node As TNode) As TNode" />
      <MemberSignature Language="F#" Value="abstract member ClearTrivia : 'Node -&gt; 'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="syntaxGenerator.ClearTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNode&gt;&#xA; where TNode : Microsoft::CodeAnalysis::SyntaxNode abstract TNode ClearTrivia(TNode node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="TNode" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="node">To be added.</param>
        <summary>
            Creates a new instance of the node with the leading and trailing trivia removed and replaced with elastic markers.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoalesceExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode CoalesceExpression (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode CoalesceExpression(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CoalesceExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CoalesceExpression (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member CoalesceExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.CoalesceExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ CoalesceExpression(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes a coalesce operation. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompilationUnit">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode CompilationUnit (params Microsoft.CodeAnalysis.SyntaxNode[] declarations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode CompilationUnit(class Microsoft.CodeAnalysis.SyntaxNode[] declarations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CompilationUnit(Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CompilationUnit (ParamArray declarations As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.CompilationUnit : Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.CompilationUnit declarations" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ CompilationUnit(... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ declarations);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declarations" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="declarations">Zero or more namespace import, namespace or type declarations.</param>
        <summary>
            Creates a compilation unit declaration
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompilationUnit">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode CompilationUnit (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; declarations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode CompilationUnit(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; declarations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CompilationUnit(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CompilationUnit (declarations As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member CompilationUnit : seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.CompilationUnit declarations" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ CompilationUnit(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ declarations);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declarations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="declarations">Zero or more namespace import, namespace or type declarations.</param>
        <summary>
            Creates a compilation unit declaration
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionalExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ConditionalExpression (Microsoft.CodeAnalysis.SyntaxNode condition, Microsoft.CodeAnalysis.SyntaxNode whenTrue, Microsoft.CodeAnalysis.SyntaxNode whenFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ConditionalExpression(class Microsoft.CodeAnalysis.SyntaxNode condition, class Microsoft.CodeAnalysis.SyntaxNode whenTrue, class Microsoft.CodeAnalysis.SyntaxNode whenFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConditionalExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ConditionalExpression (condition As SyntaxNode, whenTrue As SyntaxNode, whenFalse As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ConditionalExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ConditionalExpression (condition, whenTrue, whenFalse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ ConditionalExpression(Microsoft::CodeAnalysis::SyntaxNode ^ condition, Microsoft::CodeAnalysis::SyntaxNode ^ whenTrue, Microsoft::CodeAnalysis::SyntaxNode ^ whenFalse);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="whenTrue" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="whenFalse" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="condition">To be added.</param>
        <param name="whenTrue">To be added.</param>
        <param name="whenFalse">To be added.</param>
        <summary>
            Creates an expression that denotes a conditional evaluation operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructorDeclaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode ConstructorDeclaration (Microsoft.CodeAnalysis.IMethodSymbol constructorMethod, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; baseConstructorArguments = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode ConstructorDeclaration(class Microsoft.CodeAnalysis.IMethodSymbol constructorMethod, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; baseConstructorArguments, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConstructorDeclaration(Microsoft.CodeAnalysis.IMethodSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConstructorDeclaration (constructorMethod As IMethodSymbol, Optional baseConstructorArguments As IEnumerable(Of SyntaxNode) = null, Optional statements As IEnumerable(Of SyntaxNode) = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.ConstructorDeclaration : Microsoft.CodeAnalysis.IMethodSymbol * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ConstructorDeclaration (constructorMethod, baseConstructorArguments, statements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructorMethod" Type="Microsoft.CodeAnalysis.IMethodSymbol" />
        <Parameter Name="baseConstructorArguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="constructorMethod">To be added.</param>
        <param name="baseConstructorArguments">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Create a constructor declaration using 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructorDeclaration">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ConstructorDeclaration (string containingTypeName = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; parameters = null, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; baseConstructorArguments = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ConstructorDeclaration(string containingTypeName, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; parameters, valuetype Microsoft.CodeAnalysis.Accessibility accessibility, valuetype Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; baseConstructorArguments, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConstructorDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="F#" Value="abstract member ConstructorDeclaration : string * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * Microsoft.CodeAnalysis.Accessibility * Microsoft.CodeAnalysis.Editing.DeclarationModifiers * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ConstructorDeclaration (containingTypeName, parameters, accessibility, modifiers, baseConstructorArguments, statements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingTypeName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="accessibility" Type="Microsoft.CodeAnalysis.Accessibility" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.Editing.DeclarationModifiers" />
        <Parameter Name="baseConstructorArguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="containingTypeName">To be added.</param>
        <param name="parameters">To be added.</param>
        <param name="accessibility">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="baseConstructorArguments">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Creates a constructor declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode ConvertExpression (Microsoft.CodeAnalysis.ITypeSymbol type, Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode ConvertExpression(class Microsoft.CodeAnalysis.ITypeSymbol type, class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConvertExpression(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertExpression (type As ITypeSymbol, expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.ConvertExpression : Microsoft.CodeAnalysis.ITypeSymbol * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ConvertExpression (type, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ ConvertExpression(Microsoft::CodeAnalysis::ITypeSymbol ^ type, Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>
            Creates an expression that denotes a type conversion operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ConvertExpression (Microsoft.CodeAnalysis.SyntaxNode type, Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ConvertExpression(class Microsoft.CodeAnalysis.SyntaxNode type, class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ConvertExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ConvertExpression (type As SyntaxNode, expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ConvertExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ConvertExpression (type, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ ConvertExpression(Microsoft::CodeAnalysis::SyntaxNode ^ type, Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>
            Creates an expression that denotes a type conversion operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomEventDeclaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode CustomEventDeclaration (Microsoft.CodeAnalysis.IEventSymbol symbol, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; addAccessorStatements = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; removeAccessorStatements = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode CustomEventDeclaration(class Microsoft.CodeAnalysis.IEventSymbol symbol, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; addAccessorStatements, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; removeAccessorStatements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CustomEventDeclaration(Microsoft.CodeAnalysis.IEventSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function CustomEventDeclaration (symbol As IEventSymbol, Optional addAccessorStatements As IEnumerable(Of SyntaxNode) = null, Optional removeAccessorStatements As IEnumerable(Of SyntaxNode) = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.CustomEventDeclaration : Microsoft.CodeAnalysis.IEventSymbol * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.CustomEventDeclaration (symbol, addAccessorStatements, removeAccessorStatements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.IEventSymbol" />
        <Parameter Name="addAccessorStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="removeAccessorStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="symbol">To be added.</param>
        <param name="addAccessorStatements">To be added.</param>
        <param name="removeAccessorStatements">To be added.</param>
        <summary>
            Creates a custom event declaration from an existing event symbol.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomEventDeclaration">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode CustomEventDeclaration (string name, Microsoft.CodeAnalysis.SyntaxNode type, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; parameters = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; addAccessorStatements = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; removeAccessorStatements = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode CustomEventDeclaration(string name, class Microsoft.CodeAnalysis.SyntaxNode type, valuetype Microsoft.CodeAnalysis.Accessibility accessibility, valuetype Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; parameters, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; addAccessorStatements, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; removeAccessorStatements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.CustomEventDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="F#" Value="abstract member CustomEventDeclaration : string * Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.Accessibility * Microsoft.CodeAnalysis.Editing.DeclarationModifiers * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.CustomEventDeclaration (name, type, accessibility, modifiers, parameters, addAccessorStatements, removeAccessorStatements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="accessibility" Type="Microsoft.CodeAnalysis.Accessibility" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.Editing.DeclarationModifiers" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="addAccessorStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="removeAccessorStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="type">To be added.</param>
        <param name="accessibility">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="parameters">To be added.</param>
        <param name="addAccessorStatements">To be added.</param>
        <param name="removeAccessorStatements">To be added.</param>
        <summary>
            Creates a custom event declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Declaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode Declaration (Microsoft.CodeAnalysis.ISymbol symbol);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode Declaration(class Microsoft.CodeAnalysis.ISymbol symbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.Declaration(Microsoft.CodeAnalysis.ISymbol)" />
      <MemberSignature Language="VB.NET" Value="Public Function Declaration (symbol As ISymbol) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.Declaration : Microsoft.CodeAnalysis.ISymbol -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.Declaration symbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ Declaration(Microsoft::CodeAnalysis::ISymbol ^ symbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.ISymbol" />
      </Parameters>
      <Docs>
        <param name="symbol">To be added.</param>
        <summary>
            Creates a declaration matching an existing symbol.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode DefaultExpression (Microsoft.CodeAnalysis.ITypeSymbol type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode DefaultExpression(class Microsoft.CodeAnalysis.ITypeSymbol type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultExpression(Microsoft.CodeAnalysis.ITypeSymbol)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function DefaultExpression (type As ITypeSymbol) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member DefaultExpression : Microsoft.CodeAnalysis.ITypeSymbol -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.DefaultExpression type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ DefaultExpression(Microsoft::CodeAnalysis::ITypeSymbol ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode DefaultExpression (Microsoft.CodeAnalysis.SyntaxNode type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode DefaultExpression(class Microsoft.CodeAnalysis.SyntaxNode type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultExpression(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function DefaultExpression (type As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member DefaultExpression : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.DefaultExpression type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ DefaultExpression(Microsoft::CodeAnalysis::SyntaxNode ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
            An expression that represents the default value of a type.
            This is typically a null value for reference types or a zero-filled value for value types.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRemoveOptions">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxRemoveOptions DefaultRemoveOptions;" />
      <MemberSignature Language="ILAsm" Value=".field public static valuetype Microsoft.CodeAnalysis.SyntaxRemoveOptions DefaultRemoveOptions" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultRemoveOptions" />
      <MemberSignature Language="VB.NET" Value="Public Shared DefaultRemoveOptions As SyntaxRemoveOptions " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultRemoveOptions : Microsoft.CodeAnalysis.SyntaxRemoveOptions" Usage="Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultRemoveOptions" />
      <MemberSignature Language="C++ CLI" Value="public: static Microsoft::CodeAnalysis::SyntaxRemoveOptions DefaultRemoveOptions;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxRemoveOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSwitchSection">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode DefaultSwitchSection (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode DefaultSwitchSection(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DefaultSwitchSection(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function DefaultSwitchSection (statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member DefaultSwitchSection : seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.DefaultSwitchSection statements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ DefaultSwitchSection(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="statements">To be added.</param>
        <summary>
            Creates a default section for a switch statement.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateDeclaration">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode DelegateDeclaration (string name, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; parameters = null, System.Collections.Generic.IEnumerable&lt;string&gt; typeParameters = null, Microsoft.CodeAnalysis.SyntaxNode returnType = null, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode DelegateDeclaration(string name, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; parameters, class System.Collections.Generic.IEnumerable`1&lt;string&gt; typeParameters, class Microsoft.CodeAnalysis.SyntaxNode returnType, valuetype Microsoft.CodeAnalysis.Accessibility accessibility, valuetype Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DelegateDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers)" />
      <MemberSignature Language="F#" Value="abstract member DelegateDeclaration : string * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;string&gt; * Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.Accessibility * Microsoft.CodeAnalysis.Editing.DeclarationModifiers -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.DelegateDeclaration (name, parameters, typeParameters, returnType, accessibility, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="typeParameters" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="accessibility" Type="Microsoft.CodeAnalysis.Accessibility" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.Editing.DeclarationModifiers" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="parameters">To be added.</param>
        <param name="typeParameters">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="accessibility">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>
            Creates a delegate declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode DivideExpression (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode DivideExpression(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DivideExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function DivideExpression (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member DivideExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.DivideExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ DivideExpression(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes a division operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DottedName">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode DottedName (string dottedName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode DottedName(string dottedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.DottedName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DottedName (dottedName As String) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.DottedName : string -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.DottedName dottedName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ DottedName(System::String ^ dottedName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dottedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dottedName">To be added.</param>
        <summary>
            Creates a name expression from a dotted name string.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementAccessExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode ElementAccessExpression (Microsoft.CodeAnalysis.SyntaxNode expression, params Microsoft.CodeAnalysis.SyntaxNode[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode ElementAccessExpression(class Microsoft.CodeAnalysis.SyntaxNode expression, class Microsoft.CodeAnalysis.SyntaxNode[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ElementAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ElementAccessExpression (expression As SyntaxNode, ParamArray arguments As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.ElementAccessExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ElementAccessExpression (expression, arguments)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ ElementAccessExpression(Microsoft::CodeAnalysis::SyntaxNode ^ expression, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="arguments">To be added.</param>
        <summary>
            Creates an expression that access an element of an array or indexer.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementAccessExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ElementAccessExpression (Microsoft.CodeAnalysis.SyntaxNode expression, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ElementAccessExpression(class Microsoft.CodeAnalysis.SyntaxNode expression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ElementAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ElementAccessExpression (expression As SyntaxNode, arguments As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ElementAccessExpression : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ElementAccessExpression (expression, arguments)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ ElementAccessExpression(Microsoft::CodeAnalysis::SyntaxNode ^ expression, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="arguments">To be added.</param>
        <summary>
            Creates an expression that access an element of an array or indexer.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumDeclaration">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode EnumDeclaration (string name, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; members = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode EnumDeclaration(string name, valuetype Microsoft.CodeAnalysis.Accessibility accessibility, valuetype Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EnumDeclaration(System.String,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="F#" Value="abstract member EnumDeclaration : string * Microsoft.CodeAnalysis.Accessibility * Microsoft.CodeAnalysis.Editing.DeclarationModifiers * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.EnumDeclaration (name, accessibility, modifiers, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="accessibility" Type="Microsoft.CodeAnalysis.Accessibility" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.Editing.DeclarationModifiers" />
        <Parameter Name="members" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="accessibility">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="members">To be added.</param>
        <summary>
            Creates an enum declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumMember">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode EnumMember (string name, Microsoft.CodeAnalysis.SyntaxNode expression = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode EnumMember(string name, class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EnumMember(System.String,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EnumMember (name As String, Optional expression As SyntaxNode = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member EnumMember : string * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.EnumMember (name, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>
            Creates an enum member
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventDeclaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode EventDeclaration (Microsoft.CodeAnalysis.IEventSymbol symbol);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode EventDeclaration(class Microsoft.CodeAnalysis.IEventSymbol symbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EventDeclaration(Microsoft.CodeAnalysis.IEventSymbol)" />
      <MemberSignature Language="VB.NET" Value="Public Function EventDeclaration (symbol As IEventSymbol) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.EventDeclaration : Microsoft.CodeAnalysis.IEventSymbol -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.EventDeclaration symbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ EventDeclaration(Microsoft::CodeAnalysis::IEventSymbol ^ symbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.IEventSymbol" />
      </Parameters>
      <Docs>
        <param name="symbol">To be added.</param>
        <summary>
            Creates an event declaration from an existing event symbol
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventDeclaration">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode EventDeclaration (string name, Microsoft.CodeAnalysis.SyntaxNode type, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode EventDeclaration(string name, class Microsoft.CodeAnalysis.SyntaxNode type, valuetype Microsoft.CodeAnalysis.Accessibility accessibility, valuetype Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.EventDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers)" />
      <MemberSignature Language="F#" Value="abstract member EventDeclaration : string * Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.Accessibility * Microsoft.CodeAnalysis.Editing.DeclarationModifiers -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.EventDeclaration (name, type, accessibility, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="accessibility" Type="Microsoft.CodeAnalysis.Accessibility" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.Editing.DeclarationModifiers" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="type">To be added.</param>
        <param name="accessibility">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>
            Creates an event declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitSwitchStatement">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ExitSwitchStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ExitSwitchStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ExitSwitchStatement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ExitSwitchStatement () As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ExitSwitchStatement : unit -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ExitSwitchStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ ExitSwitchStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Create a statement that exits a switch statement and continues after it.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpressionStatement">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ExpressionStatement (Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ExpressionStatement(class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ExpressionStatement(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ExpressionStatement (expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ExpressionStatement : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ExpressionStatement expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ ExpressionStatement(Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="expression">The expression that is to be executed. This is usually a method invocation expression.</param>
        <summary>
            Creates statement that allows an expression to execute in a statement context.
            This is typically an invocation or assignment expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FalseLiteralExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode FalseLiteralExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode FalseLiteralExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FalseLiteralExpression" />
      <MemberSignature Language="VB.NET" Value="Public Function FalseLiteralExpression () As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.FalseLiteralExpression : unit -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.FalseLiteralExpression " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ FalseLiteralExpression();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates an expression that denotes the boolean false literal.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldDeclaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode FieldDeclaration (Microsoft.CodeAnalysis.IFieldSymbol field);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode FieldDeclaration(class Microsoft.CodeAnalysis.IFieldSymbol field) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(Microsoft.CodeAnalysis.IFieldSymbol)" />
      <MemberSignature Language="VB.NET" Value="Public Function FieldDeclaration (field As IFieldSymbol) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.FieldDeclaration : Microsoft.CodeAnalysis.IFieldSymbol -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.FieldDeclaration field" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ FieldDeclaration(Microsoft::CodeAnalysis::IFieldSymbol ^ field);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="Microsoft.CodeAnalysis.IFieldSymbol" />
      </Parameters>
      <Docs>
        <param name="field">To be added.</param>
        <summary>
            Creates a field declaration matching an existing field symbol.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldDeclaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode FieldDeclaration (Microsoft.CodeAnalysis.IFieldSymbol field, Microsoft.CodeAnalysis.SyntaxNode initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode FieldDeclaration(class Microsoft.CodeAnalysis.IFieldSymbol field, class Microsoft.CodeAnalysis.SyntaxNode initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function FieldDeclaration (field As IFieldSymbol, initializer As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.FieldDeclaration : Microsoft.CodeAnalysis.IFieldSymbol * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.FieldDeclaration (field, initializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ FieldDeclaration(Microsoft::CodeAnalysis::IFieldSymbol ^ field, Microsoft::CodeAnalysis::SyntaxNode ^ initializer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="Microsoft.CodeAnalysis.IFieldSymbol" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="field">To be added.</param>
        <param name="initializer">To be added.</param>
        <summary>
            Creates a field declaration matching an existing field symbol.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldDeclaration">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode FieldDeclaration (string name, Microsoft.CodeAnalysis.SyntaxNode type, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = null, Microsoft.CodeAnalysis.SyntaxNode initializer = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode FieldDeclaration(string name, class Microsoft.CodeAnalysis.SyntaxNode type, valuetype Microsoft.CodeAnalysis.Accessibility accessibility, valuetype Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers, class Microsoft.CodeAnalysis.SyntaxNode initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.FieldDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member FieldDeclaration : string * Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.Accessibility * Microsoft.CodeAnalysis.Editing.DeclarationModifiers * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.FieldDeclaration (name, type, accessibility, modifiers, initializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="accessibility" Type="Microsoft.CodeAnalysis.Accessibility" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.Editing.DeclarationModifiers" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="type">To be added.</param>
        <param name="accessibility">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="initializer">To be added.</param>
        <summary>
            Creates a field declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericName">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode GenericName (string identifier, params Microsoft.CodeAnalysis.ITypeSymbol[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode GenericName(string identifier, class Microsoft.CodeAnalysis.ITypeSymbol[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,Microsoft.CodeAnalysis.ITypeSymbol[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GenericName (identifier As String, ParamArray typeArguments As ITypeSymbol()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.GenericName : string * Microsoft.CodeAnalysis.ITypeSymbol[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.GenericName (identifier, typeArguments)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ GenericName(System::String ^ identifier, ... cli::array &lt;Microsoft::CodeAnalysis::ITypeSymbol ^&gt; ^ typeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="typeArguments" Type="Microsoft.CodeAnalysis.ITypeSymbol[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="typeArguments">To be added.</param>
        <summary>
            Creates an expression that denotes a generic identifier name.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericName">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode GenericName (string identifier, params Microsoft.CodeAnalysis.SyntaxNode[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode GenericName(string identifier, class Microsoft.CodeAnalysis.SyntaxNode[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GenericName (identifier As String, ParamArray typeArguments As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.GenericName : string * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.GenericName (identifier, typeArguments)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ GenericName(System::String ^ identifier, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ typeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="typeArguments" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="typeArguments">To be added.</param>
        <summary>
            Creates an expression that denotes a generic identifier name.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericName">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode GenericName (string identifier, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.ITypeSymbol&gt; typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode GenericName(string identifier, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.ITypeSymbol&gt; typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ITypeSymbol})" />
      <MemberSignature Language="VB.NET" Value="Public Function GenericName (identifier As String, typeArguments As IEnumerable(Of ITypeSymbol)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.GenericName : string * seq&lt;Microsoft.CodeAnalysis.ITypeSymbol&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.GenericName (identifier, typeArguments)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ GenericName(System::String ^ identifier, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::ITypeSymbol ^&gt; ^ typeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.ITypeSymbol&gt;" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="typeArguments">To be added.</param>
        <summary>
            Creates an expression that denotes a generic identifier name.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericName">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode GenericName (string identifier, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode GenericName(string identifier, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GenericName(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GenericName (identifier As String, typeArguments As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member GenericName : string * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.GenericName (identifier, typeArguments)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ GenericName(System::String ^ identifier, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ typeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="typeArguments">To be added.</param>
        <summary>
            Creates an expression that denotes a generic identifier name.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessibility">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.Accessibility GetAccessibility (Microsoft.CodeAnalysis.SyntaxNode declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.CodeAnalysis.Accessibility GetAccessibility(class Microsoft.CodeAnalysis.SyntaxNode declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessibility(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAccessibility (declaration As SyntaxNode) As Accessibility" />
      <MemberSignature Language="F#" Value="abstract member GetAccessibility : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.Accessibility" Usage="syntaxGenerator.GetAccessibility declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::Accessibility GetAccessibility(Microsoft::CodeAnalysis::SyntaxNode ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Accessibility</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>
            Gets the accessibility of the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessor">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode GetAccessor (Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.Editing.DeclarationKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode GetAccessor(class Microsoft.CodeAnalysis.SyntaxNode declaration, valuetype Microsoft.CodeAnalysis.Editing.DeclarationKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessor(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.DeclarationKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessor (declaration As SyntaxNode, kind As DeclarationKind) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.GetAccessor : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.Editing.DeclarationKind -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.GetAccessor (declaration, kind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ GetAccessor(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, Microsoft::CodeAnalysis::Editing::DeclarationKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.Editing.DeclarationKind" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="kind">To be added.</param>
        <summary>
            Gets the accessor of the specified kind for the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessorDeclaration">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode GetAccessorDeclaration (Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode GetAccessorDeclaration(valuetype Microsoft.CodeAnalysis.Accessibility accessibility, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessorDeclaration(Microsoft.CodeAnalysis.Accessibility,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="F#" Value="abstract member GetAccessorDeclaration : Microsoft.CodeAnalysis.Accessibility * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.GetAccessorDeclaration (accessibility, statements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessibility" Type="Microsoft.CodeAnalysis.Accessibility" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="accessibility">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessors">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; GetAccessors (Microsoft.CodeAnalysis.SyntaxNode declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; GetAccessors(class Microsoft.CodeAnalysis.SyntaxNode declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessors(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAccessors (declaration As SyntaxNode) As IReadOnlyList(Of SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member GetAccessors : Microsoft.CodeAnalysis.SyntaxNode -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" Usage="syntaxGenerator.GetAccessors declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ GetAccessors(Microsoft::CodeAnalysis::SyntaxNode ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>
            Gets the accessors for the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributeArguments">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; GetAttributeArguments (Microsoft.CodeAnalysis.SyntaxNode attributeDeclaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; GetAttributeArguments(class Microsoft.CodeAnalysis.SyntaxNode attributeDeclaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAttributeArguments (attributeDeclaration As SyntaxNode) As IReadOnlyList(Of SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member GetAttributeArguments : Microsoft.CodeAnalysis.SyntaxNode -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" Usage="syntaxGenerator.GetAttributeArguments attributeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ GetAttributeArguments(Microsoft::CodeAnalysis::SyntaxNode ^ attributeDeclaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeDeclaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="attributeDeclaration">To be added.</param>
        <summary>
            Gets the attribute arguments for the attribute declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributes">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; GetAttributes (Microsoft.CodeAnalysis.SyntaxNode declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; GetAttributes(class Microsoft.CodeAnalysis.SyntaxNode declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAttributes(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAttributes (declaration As SyntaxNode) As IReadOnlyList(Of SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member GetAttributes : Microsoft.CodeAnalysis.SyntaxNode -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" Usage="syntaxGenerator.GetAttributes declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ GetAttributes(Microsoft::CodeAnalysis::SyntaxNode ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>
            Gets the attributes of a declaration, not including the return attributes.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBaseAndInterfaceTypes">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; GetBaseAndInterfaceTypes (Microsoft.CodeAnalysis.SyntaxNode declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; GetBaseAndInterfaceTypes(class Microsoft.CodeAnalysis.SyntaxNode declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetBaseAndInterfaceTypes(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetBaseAndInterfaceTypes (declaration As SyntaxNode) As IReadOnlyList(Of SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member GetBaseAndInterfaceTypes : Microsoft.CodeAnalysis.SyntaxNode -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" Usage="syntaxGenerator.GetBaseAndInterfaceTypes declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ GetBaseAndInterfaceTypes(Microsoft::CodeAnalysis::SyntaxNode ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>
            Gets a list of the base and interface types for the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode GetDeclaration (Microsoft.CodeAnalysis.SyntaxNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode GetDeclaration(class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclaration(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeclaration (node As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.GetDeclaration : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.GetDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ GetDeclaration(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
            Returns the node if it is a declaration, the immediate enclosing declaration if one exists, or null.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode GetDeclaration (Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.Editing.DeclarationKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode GetDeclaration(class Microsoft.CodeAnalysis.SyntaxNode node, valuetype Microsoft.CodeAnalysis.Editing.DeclarationKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclaration(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.DeclarationKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeclaration (node As SyntaxNode, kind As DeclarationKind) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.GetDeclaration : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.Editing.DeclarationKind -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.GetDeclaration (node, kind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ GetDeclaration(Microsoft::CodeAnalysis::SyntaxNode ^ node, Microsoft::CodeAnalysis::Editing::DeclarationKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.Editing.DeclarationKind" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <param name="kind">To be added.</param>
        <summary>
            Returns the enclosing declaration of the specified kind or null.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclarationKind">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.Editing.DeclarationKind GetDeclarationKind (Microsoft.CodeAnalysis.SyntaxNode declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.CodeAnalysis.Editing.DeclarationKind GetDeclarationKind(class Microsoft.CodeAnalysis.SyntaxNode declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetDeclarationKind(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetDeclarationKind (declaration As SyntaxNode) As DeclarationKind" />
      <MemberSignature Language="F#" Value="abstract member GetDeclarationKind : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.Editing.DeclarationKind" Usage="syntaxGenerator.GetDeclarationKind declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::Editing::DeclarationKind GetDeclarationKind(Microsoft::CodeAnalysis::SyntaxNode ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Editing.DeclarationKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.Editing.DeclarationKind" /> for the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode GetExpression (Microsoft.CodeAnalysis.SyntaxNode declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode GetExpression(class Microsoft.CodeAnalysis.SyntaxNode declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetExpression(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetExpression (declaration As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member GetExpression : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.GetExpression declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ GetExpression(Microsoft::CodeAnalysis::SyntaxNode ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>
            Gets the expression associated with the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGenerator">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Editing.SyntaxGenerator GetGenerator (Microsoft.CodeAnalysis.Document document);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Editing.SyntaxGenerator GetGenerator(class Microsoft.CodeAnalysis.Document document) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator(Microsoft.CodeAnalysis.Document)" />
      <MemberSignature Language="F#" Value="static member GetGenerator : Microsoft.CodeAnalysis.Document -&gt; Microsoft.CodeAnalysis.Editing.SyntaxGenerator" Usage="Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator document" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::Editing::SyntaxGenerator ^ GetGenerator(Microsoft::CodeAnalysis::Document ^ document);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Editing.SyntaxGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="Microsoft.CodeAnalysis.Document" />
      </Parameters>
      <Docs>
        <param name="document">To be added.</param>
        <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.Editing.SyntaxGenerator" /> for the language corresponding to the document.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGenerator">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Editing.SyntaxGenerator GetGenerator (Microsoft.CodeAnalysis.Project project);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Editing.SyntaxGenerator GetGenerator(class Microsoft.CodeAnalysis.Project project) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator(Microsoft.CodeAnalysis.Project)" />
      <MemberSignature Language="F#" Value="static member GetGenerator : Microsoft.CodeAnalysis.Project -&gt; Microsoft.CodeAnalysis.Editing.SyntaxGenerator" Usage="Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator project" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::Editing::SyntaxGenerator ^ GetGenerator(Microsoft::CodeAnalysis::Project ^ project);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Editing.SyntaxGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="project" Type="Microsoft.CodeAnalysis.Project" />
      </Parameters>
      <Docs>
        <param name="project">To be added.</param>
        <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.Editing.SyntaxGenerator" /> for the language corresponding to the project.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGenerator">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Editing.SyntaxGenerator GetGenerator (Microsoft.CodeAnalysis.Workspace workspace, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Editing.SyntaxGenerator GetGenerator(class Microsoft.CodeAnalysis.Workspace workspace, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator(Microsoft.CodeAnalysis.Workspace,System.String)" />
      <MemberSignature Language="F#" Value="static member GetGenerator : Microsoft.CodeAnalysis.Workspace * string -&gt; Microsoft.CodeAnalysis.Editing.SyntaxGenerator" Usage="Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGenerator (workspace, language)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::Editing::SyntaxGenerator ^ GetGenerator(Microsoft::CodeAnalysis::Workspace ^ workspace, System::String ^ language);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Editing.SyntaxGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workspace" Type="Microsoft.CodeAnalysis.Workspace" />
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="workspace">To be added.</param>
        <param name="language">To be added.</param>
        <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.Editing.SyntaxGenerator" /> for the specified language.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGetAccessorStatements">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; GetGetAccessorStatements (Microsoft.CodeAnalysis.SyntaxNode declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; GetGetAccessorStatements(class Microsoft.CodeAnalysis.SyntaxNode declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetGetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetGetAccessorStatements (declaration As SyntaxNode) As IReadOnlyList(Of SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member GetGetAccessorStatements : Microsoft.CodeAnalysis.SyntaxNode -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" Usage="syntaxGenerator.GetGetAccessorStatements declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ GetGetAccessorStatements(Microsoft::CodeAnalysis::SyntaxNode ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>
            Gets the statements for the body of the get-accessor of the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; GetMembers (Microsoft.CodeAnalysis.SyntaxNode declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; GetMembers(class Microsoft.CodeAnalysis.SyntaxNode declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetMembers(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMembers (declaration As SyntaxNode) As IReadOnlyList(Of SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : Microsoft.CodeAnalysis.SyntaxNode -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" Usage="syntaxGenerator.GetMembers declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ GetMembers(Microsoft::CodeAnalysis::SyntaxNode ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>
            Gets the current members of the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModifiers">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.Editing.DeclarationModifiers GetModifiers (Microsoft.CodeAnalysis.SyntaxNode declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.CodeAnalysis.Editing.DeclarationModifiers GetModifiers(class Microsoft.CodeAnalysis.SyntaxNode declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetModifiers(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetModifiers (declaration As SyntaxNode) As DeclarationModifiers" />
      <MemberSignature Language="F#" Value="abstract member GetModifiers : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.Editing.DeclarationModifiers" Usage="syntaxGenerator.GetModifiers declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::Editing::DeclarationModifiers GetModifiers(Microsoft::CodeAnalysis::SyntaxNode ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Editing.DeclarationModifiers</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.Editing.DeclarationModifiers" /> for the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public abstract string GetName (Microsoft.CodeAnalysis.SyntaxNode declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetName(class Microsoft.CodeAnalysis.SyntaxNode declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetName(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetName (declaration As SyntaxNode) As String" />
      <MemberSignature Language="F#" Value="abstract member GetName : Microsoft.CodeAnalysis.SyntaxNode -&gt; string" Usage="syntaxGenerator.GetName declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetName(Microsoft::CodeAnalysis::SyntaxNode ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>
            Gets the name of the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNamespaceImports">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; GetNamespaceImports (Microsoft.CodeAnalysis.SyntaxNode declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; GetNamespaceImports(class Microsoft.CodeAnalysis.SyntaxNode declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNamespaceImports (declaration As SyntaxNode) As IReadOnlyList(Of SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member GetNamespaceImports : Microsoft.CodeAnalysis.SyntaxNode -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" Usage="syntaxGenerator.GetNamespaceImports declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ GetNamespaceImports(Microsoft::CodeAnalysis::SyntaxNode ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>
            Gets the namespace imports that are part of the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; GetParameters (Microsoft.CodeAnalysis.SyntaxNode declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; GetParameters(class Microsoft.CodeAnalysis.SyntaxNode declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetParameters(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetParameters (declaration As SyntaxNode) As IReadOnlyList(Of SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member GetParameters : Microsoft.CodeAnalysis.SyntaxNode -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" Usage="syntaxGenerator.GetParameters declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ GetParameters(Microsoft::CodeAnalysis::SyntaxNode ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>
            Gets the list of parameters for the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReturnAttributes">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; GetReturnAttributes (Microsoft.CodeAnalysis.SyntaxNode declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; GetReturnAttributes(class Microsoft.CodeAnalysis.SyntaxNode declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetReturnAttributes (declaration As SyntaxNode) As IReadOnlyList(Of SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member GetReturnAttributes : Microsoft.CodeAnalysis.SyntaxNode -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" Usage="syntaxGenerator.GetReturnAttributes declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ GetReturnAttributes(Microsoft::CodeAnalysis::SyntaxNode ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>
            Gets the return attributes from the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSetAccessorStatements">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; GetSetAccessorStatements (Microsoft.CodeAnalysis.SyntaxNode declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; GetSetAccessorStatements(class Microsoft.CodeAnalysis.SyntaxNode declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetSetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetSetAccessorStatements (declaration As SyntaxNode) As IReadOnlyList(Of SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member GetSetAccessorStatements : Microsoft.CodeAnalysis.SyntaxNode -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" Usage="syntaxGenerator.GetSetAccessorStatements declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ GetSetAccessorStatements(Microsoft::CodeAnalysis::SyntaxNode ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>
            Gets the statements for the body of the set-accessor of the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatements">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; GetStatements (Microsoft.CodeAnalysis.SyntaxNode declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; GetStatements(class Microsoft.CodeAnalysis.SyntaxNode declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetStatements(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetStatements (declaration As SyntaxNode) As IReadOnlyList(Of SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member GetStatements : Microsoft.CodeAnalysis.SyntaxNode -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" Usage="syntaxGenerator.GetStatements declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ GetStatements(Microsoft::CodeAnalysis::SyntaxNode ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>
            Gets the statements for the body of the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSwitchSections">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; GetSwitchSections (Microsoft.CodeAnalysis.SyntaxNode switchStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; GetSwitchSections(class Microsoft.CodeAnalysis.SyntaxNode switchStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetSwitchSections(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetSwitchSections (switchStatement As SyntaxNode) As IReadOnlyList(Of SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member GetSwitchSections : Microsoft.CodeAnalysis.SyntaxNode -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" Usage="syntaxGenerator.GetSwitchSections switchStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ GetSwitchSections(Microsoft::CodeAnalysis::SyntaxNode ^ switchStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchStatement" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="switchStatement">To be added.</param>
        <summary>
            Gets the list of switch sections for the statement.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode GetType (Microsoft.CodeAnalysis.SyntaxNode declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode GetType(class Microsoft.CodeAnalysis.SyntaxNode declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetType(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetType (declaration As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="override this.GetType : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.GetType declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ GetType(Microsoft::CodeAnalysis::SyntaxNode ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>
            Gets the type of the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode GreaterThanExpression (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode GreaterThanExpression(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GreaterThanExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GreaterThanExpression (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member GreaterThanExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.GreaterThanExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ GreaterThanExpression(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes a greater-than test operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqualExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode GreaterThanOrEqualExpression (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode GreaterThanOrEqualExpression(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GreaterThanOrEqualExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GreaterThanOrEqualExpression (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member GreaterThanOrEqualExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.GreaterThanOrEqualExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ GreaterThanOrEqualExpression(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes a greater-than-or-equal test operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IdentifierName">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode IdentifierName (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode IdentifierName(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IdentifierName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IdentifierName (identifier As String) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member IdentifierName : string -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.IdentifierName identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ IdentifierName(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier"></param>
        <summary>
            Creates an expression that denotes a simple identifier name.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IfStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode IfStatement (Microsoft.CodeAnalysis.SyntaxNode condition, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; trueStatements, Microsoft.CodeAnalysis.SyntaxNode falseStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode IfStatement(class Microsoft.CodeAnalysis.SyntaxNode condition, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; trueStatements, class Microsoft.CodeAnalysis.SyntaxNode falseStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IfStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfStatement (condition As SyntaxNode, trueStatements As IEnumerable(Of SyntaxNode), falseStatement As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.IfStatement : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.IfStatement (condition, trueStatements, falseStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ IfStatement(Microsoft::CodeAnalysis::SyntaxNode ^ condition, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ trueStatements, Microsoft::CodeAnalysis::SyntaxNode ^ falseStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="trueStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="falseStatement" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="condition">A condition expression.</param>
        <param name="trueStatements">The statements that are executed if the condition is true.</param>
        <param name="falseStatement">A single statement that is executed if the condition is false.</param>
        <summary>
            Creates an if statement
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IfStatement">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode IfStatement (Microsoft.CodeAnalysis.SyntaxNode condition, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; trueStatements, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; falseStatements = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode IfStatement(class Microsoft.CodeAnalysis.SyntaxNode condition, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; trueStatements, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; falseStatements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IfStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IfStatement (condition As SyntaxNode, trueStatements As IEnumerable(Of SyntaxNode), Optional falseStatements As IEnumerable(Of SyntaxNode) = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member IfStatement : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.IfStatement (condition, trueStatements, falseStatements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="trueStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="falseStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="condition">A condition expression.</param>
        <param name="trueStatements">The statements that are executed if the condition is true.</param>
        <param name="falseStatements">The statements that are executed if the condition is false.</param>
        <summary>
            Creates an if-statement
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexerDeclaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode IndexerDeclaration (Microsoft.CodeAnalysis.IPropertySymbol indexer, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; getAccessorStatements = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; setAccessorStatements = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode IndexerDeclaration(class Microsoft.CodeAnalysis.IPropertySymbol indexer, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; getAccessorStatements, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; setAccessorStatements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexerDeclaration(Microsoft.CodeAnalysis.IPropertySymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexerDeclaration (indexer As IPropertySymbol, Optional getAccessorStatements As IEnumerable(Of SyntaxNode) = null, Optional setAccessorStatements As IEnumerable(Of SyntaxNode) = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.IndexerDeclaration : Microsoft.CodeAnalysis.IPropertySymbol * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.IndexerDeclaration (indexer, getAccessorStatements, setAccessorStatements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexer" Type="Microsoft.CodeAnalysis.IPropertySymbol" />
        <Parameter Name="getAccessorStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="setAccessorStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="indexer">To be added.</param>
        <param name="getAccessorStatements">To be added.</param>
        <param name="setAccessorStatements">To be added.</param>
        <summary>
            Creates an indexer declaration matching an existing indexer symbol.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexerDeclaration">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode IndexerDeclaration (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; parameters, Microsoft.CodeAnalysis.SyntaxNode type, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; getAccessorStatements = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; setAccessorStatements = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode IndexerDeclaration(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; parameters, class Microsoft.CodeAnalysis.SyntaxNode type, valuetype Microsoft.CodeAnalysis.Accessibility accessibility, valuetype Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; getAccessorStatements, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; setAccessorStatements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexerDeclaration(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="F#" Value="abstract member IndexerDeclaration : seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.Accessibility * Microsoft.CodeAnalysis.Editing.DeclarationModifiers * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.IndexerDeclaration (parameters, type, accessibility, modifiers, getAccessorStatements, setAccessorStatements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="accessibility" Type="Microsoft.CodeAnalysis.Accessibility" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.Editing.DeclarationModifiers" />
        <Parameter Name="getAccessorStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="setAccessorStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="parameters">To be added.</param>
        <param name="type">To be added.</param>
        <param name="accessibility">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="getAccessorStatements">To be added.</param>
        <param name="setAccessorStatements">To be added.</param>
        <summary>
            Creates an indexer declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="protected int IndexOf&lt;T&gt; (System.Collections.Generic.IReadOnlyList&lt;T&gt; list, T element);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance int32 IndexOf&lt;T&gt;(class System.Collections.Generic.IReadOnlyList`1&lt;!!T&gt; list, !!T element) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IndexOf``1(System.Collections.Generic.IReadOnlyList{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IndexOf(Of T) (list As IReadOnlyList(Of T), element As T) As Integer" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.Collections.Generic.IReadOnlyList&lt;'T&gt; * 'T -&gt; int" Usage="syntaxGenerator.IndexOf (list, element)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA;generic &lt;typename T&gt;&#xA; int IndexOf(System::Collections::Generic::IReadOnlyList&lt;T&gt; ^ list, T element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.IReadOnlyList&lt;T&gt;" />
        <Parameter Name="element" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="list">To be added.</param>
        <param name="element">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAccessors">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode InsertAccessors (Microsoft.CodeAnalysis.SyntaxNode declaration, int index, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; accessors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode InsertAccessors(class Microsoft.CodeAnalysis.SyntaxNode declaration, int32 index, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; accessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAccessors(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function InsertAccessors (declaration As SyntaxNode, index As Integer, accessors As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member InsertAccessors : Microsoft.CodeAnalysis.SyntaxNode * int * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.InsertAccessors (declaration, index, accessors)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ InsertAccessors(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, int index, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ accessors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="accessors" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="index">To be added.</param>
        <param name="accessors">To be added.</param>
        <summary>
            Creates a new instance of the declaration with the accessors inserted.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAttributeArguments">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode InsertAttributeArguments (Microsoft.CodeAnalysis.SyntaxNode attributeDeclaration, int index, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; attributeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode InsertAttributeArguments(class Microsoft.CodeAnalysis.SyntaxNode attributeDeclaration, int32 index, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; attributeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributeArguments(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function InsertAttributeArguments (attributeDeclaration As SyntaxNode, index As Integer, attributeArguments As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member InsertAttributeArguments : Microsoft.CodeAnalysis.SyntaxNode * int * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.InsertAttributeArguments (attributeDeclaration, index, attributeArguments)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ InsertAttributeArguments(Microsoft::CodeAnalysis::SyntaxNode ^ attributeDeclaration, int index, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ attributeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeDeclaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="attributeArguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="attributeDeclaration">To be added.</param>
        <param name="index">To be added.</param>
        <param name="attributeArguments">To be added.</param>
        <summary>
            Creates a new instance of the attribute with the arguments inserted.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAttributes">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode InsertAttributes (Microsoft.CodeAnalysis.SyntaxNode declaration, int index, params Microsoft.CodeAnalysis.SyntaxNode[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode InsertAttributes(class Microsoft.CodeAnalysis.SyntaxNode declaration, int32 index, class Microsoft.CodeAnalysis.SyntaxNode[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertAttributes (declaration As SyntaxNode, index As Integer, ParamArray attributes As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.InsertAttributes : Microsoft.CodeAnalysis.SyntaxNode * int * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.InsertAttributes (declaration, index, attributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ InsertAttributes(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, int index, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="index">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>
            Creates a new instance of the declaration with the attributes inserted.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAttributes">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode InsertAttributes (Microsoft.CodeAnalysis.SyntaxNode declaration, int index, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode InsertAttributes(class Microsoft.CodeAnalysis.SyntaxNode declaration, int32 index, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function InsertAttributes (declaration As SyntaxNode, index As Integer, attributes As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member InsertAttributes : Microsoft.CodeAnalysis.SyntaxNode * int * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.InsertAttributes (declaration, index, attributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ InsertAttributes(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, int index, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="index">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>
            Creates a new instance of the declaration with the attributes inserted.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertMembers">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode InsertMembers (Microsoft.CodeAnalysis.SyntaxNode declaration, int index, params Microsoft.CodeAnalysis.SyntaxNode[] members);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode InsertMembers(class Microsoft.CodeAnalysis.SyntaxNode declaration, int32 index, class Microsoft.CodeAnalysis.SyntaxNode[] members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertMembers(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertMembers (declaration As SyntaxNode, index As Integer, ParamArray members As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.InsertMembers : Microsoft.CodeAnalysis.SyntaxNode * int * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.InsertMembers (declaration, index, members)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ InsertMembers(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, int index, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="index">To be added.</param>
        <param name="members">To be added.</param>
        <summary>
            Creates a new instance of the declaration with the members inserted.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertMembers">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode InsertMembers (Microsoft.CodeAnalysis.SyntaxNode declaration, int index, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode InsertMembers(class Microsoft.CodeAnalysis.SyntaxNode declaration, int32 index, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertMembers(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function InsertMembers (declaration As SyntaxNode, index As Integer, members As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member InsertMembers : Microsoft.CodeAnalysis.SyntaxNode * int * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.InsertMembers (declaration, index, members)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ InsertMembers(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, int index, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="members" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="index">To be added.</param>
        <param name="members">To be added.</param>
        <summary>
            Creates a new instance of the declaration with the members inserted.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertNamespaceImports">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode InsertNamespaceImports (Microsoft.CodeAnalysis.SyntaxNode declaration, int index, params Microsoft.CodeAnalysis.SyntaxNode[] imports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode InsertNamespaceImports(class Microsoft.CodeAnalysis.SyntaxNode declaration, int32 index, class Microsoft.CodeAnalysis.SyntaxNode[] imports) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertNamespaceImports (declaration As SyntaxNode, index As Integer, ParamArray imports As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.InsertNamespaceImports : Microsoft.CodeAnalysis.SyntaxNode * int * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.InsertNamespaceImports (declaration, index, imports)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ InsertNamespaceImports(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, int index, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ imports);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="imports" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="index">To be added.</param>
        <param name="imports">To be added.</param>
        <summary>
            Creates a new instance of the declaration with the namespace imports inserted.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertNamespaceImports">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode InsertNamespaceImports (Microsoft.CodeAnalysis.SyntaxNode declaration, int index, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; imports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode InsertNamespaceImports(class Microsoft.CodeAnalysis.SyntaxNode declaration, int32 index, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; imports) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNamespaceImports(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function InsertNamespaceImports (declaration As SyntaxNode, index As Integer, imports As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member InsertNamespaceImports : Microsoft.CodeAnalysis.SyntaxNode * int * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.InsertNamespaceImports (declaration, index, imports)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ InsertNamespaceImports(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, int index, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ imports);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="imports" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="index">To be added.</param>
        <param name="imports">To be added.</param>
        <summary>
            Creates a new instance of the declaration with the namespace imports inserted.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertNodesAfter">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.SyntaxNode InsertNodesAfter (Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.SyntaxNode node, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; newDeclarations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode InsertNodesAfter(class Microsoft.CodeAnalysis.SyntaxNode root, class Microsoft.CodeAnalysis.SyntaxNode node, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; newDeclarations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNodesAfter(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function InsertNodesAfter (root As SyntaxNode, node As SyntaxNode, newDeclarations As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member InsertNodesAfter : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode&#xA;override this.InsertNodesAfter : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.InsertNodesAfter (root, node, newDeclarations)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::CodeAnalysis::SyntaxNode ^ InsertNodesAfter(Microsoft::CodeAnalysis::SyntaxNode ^ root, Microsoft::CodeAnalysis::SyntaxNode ^ node, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ newDeclarations);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="newDeclarations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="root">To be added.</param>
        <param name="node">To be added.</param>
        <param name="newDeclarations">To be added.</param>
        <summary>
            Inserts the new node before the specified declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertNodesBefore">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.SyntaxNode InsertNodesBefore (Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.SyntaxNode node, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; newDeclarations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode InsertNodesBefore(class Microsoft.CodeAnalysis.SyntaxNode root, class Microsoft.CodeAnalysis.SyntaxNode node, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; newDeclarations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertNodesBefore(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function InsertNodesBefore (root As SyntaxNode, node As SyntaxNode, newDeclarations As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member InsertNodesBefore : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode&#xA;override this.InsertNodesBefore : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.InsertNodesBefore (root, node, newDeclarations)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::CodeAnalysis::SyntaxNode ^ InsertNodesBefore(Microsoft::CodeAnalysis::SyntaxNode ^ root, Microsoft::CodeAnalysis::SyntaxNode ^ node, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ newDeclarations);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="newDeclarations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="root">To be added.</param>
        <param name="node">To be added.</param>
        <param name="newDeclarations">To be added.</param>
        <summary>
            Inserts the new node before the specified declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode InsertParameters (Microsoft.CodeAnalysis.SyntaxNode declaration, int index, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode InsertParameters(class Microsoft.CodeAnalysis.SyntaxNode declaration, int32 index, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertParameters(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function InsertParameters (declaration As SyntaxNode, index As Integer, parameters As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member InsertParameters : Microsoft.CodeAnalysis.SyntaxNode * int * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.InsertParameters (declaration, index, parameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ InsertParameters(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, int index, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="index">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>
            Inserts the parameters at the specified index into the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertReturnAttributes">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode InsertReturnAttributes (Microsoft.CodeAnalysis.SyntaxNode declaration, int index, params Microsoft.CodeAnalysis.SyntaxNode[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode InsertReturnAttributes(class Microsoft.CodeAnalysis.SyntaxNode declaration, int32 index, class Microsoft.CodeAnalysis.SyntaxNode[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertReturnAttributes (declaration As SyntaxNode, index As Integer, ParamArray attributes As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.InsertReturnAttributes : Microsoft.CodeAnalysis.SyntaxNode * int * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.InsertReturnAttributes (declaration, index, attributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ InsertReturnAttributes(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, int index, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="index">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>
            Creates a new instance of a method declaration with return attributes inserted.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertReturnAttributes">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode InsertReturnAttributes (Microsoft.CodeAnalysis.SyntaxNode declaration, int index, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode InsertReturnAttributes(class Microsoft.CodeAnalysis.SyntaxNode declaration, int32 index, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertReturnAttributes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function InsertReturnAttributes (declaration As SyntaxNode, index As Integer, attributes As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member InsertReturnAttributes : Microsoft.CodeAnalysis.SyntaxNode * int * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.InsertReturnAttributes (declaration, index, attributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ InsertReturnAttributes(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, int index, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="index">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>
            Creates a new instance of a method declaration with return attributes inserted.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertSwitchSections">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode InsertSwitchSections (Microsoft.CodeAnalysis.SyntaxNode switchStatement, int index, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; switchSections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode InsertSwitchSections(class Microsoft.CodeAnalysis.SyntaxNode switchStatement, int32 index, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; switchSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InsertSwitchSections(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function InsertSwitchSections (switchStatement As SyntaxNode, index As Integer, switchSections As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member InsertSwitchSections : Microsoft.CodeAnalysis.SyntaxNode * int * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.InsertSwitchSections (switchStatement, index, switchSections)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ InsertSwitchSections(Microsoft::CodeAnalysis::SyntaxNode ^ switchStatement, int index, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ switchSections);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchStatement" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="switchSections" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="switchStatement">To be added.</param>
        <param name="index">To be added.</param>
        <param name="switchSections">To be added.</param>
        <summary>
            Inserts the switch sections at the specified index into the statement.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterfaceDeclaration">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode InterfaceDeclaration (string name, System.Collections.Generic.IEnumerable&lt;string&gt; typeParameters = null, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; interfaceTypes = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; members = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode InterfaceDeclaration(string name, class System.Collections.Generic.IEnumerable`1&lt;string&gt; typeParameters, valuetype Microsoft.CodeAnalysis.Accessibility accessibility, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; interfaceTypes, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InterfaceDeclaration(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.Accessibility,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="F#" Value="abstract member InterfaceDeclaration : string * seq&lt;string&gt; * Microsoft.CodeAnalysis.Accessibility * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.InterfaceDeclaration (name, typeParameters, accessibility, interfaceTypes, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="typeParameters" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="accessibility" Type="Microsoft.CodeAnalysis.Accessibility" />
        <Parameter Name="interfaceTypes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="members" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="typeParameters">To be added.</param>
        <param name="accessibility">To be added.</param>
        <param name="interfaceTypes">To be added.</param>
        <param name="members">To be added.</param>
        <summary>
            Creates a interface declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvocationExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode InvocationExpression (Microsoft.CodeAnalysis.SyntaxNode expression, params Microsoft.CodeAnalysis.SyntaxNode[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode InvocationExpression(class Microsoft.CodeAnalysis.SyntaxNode expression, class Microsoft.CodeAnalysis.SyntaxNode[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InvocationExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvocationExpression (expression As SyntaxNode, ParamArray arguments As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.InvocationExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.InvocationExpression (expression, arguments)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ InvocationExpression(Microsoft::CodeAnalysis::SyntaxNode ^ expression, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="arguments">To be added.</param>
        <summary>
            Creates a invocation expression
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvocationExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode InvocationExpression (Microsoft.CodeAnalysis.SyntaxNode expression, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode InvocationExpression(class Microsoft.CodeAnalysis.SyntaxNode expression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.InvocationExpression(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function InvocationExpression (expression As SyntaxNode, arguments As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member InvocationExpression : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.InvocationExpression (expression, arguments)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ InvocationExpression(Microsoft::CodeAnalysis::SyntaxNode ^ expression, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="arguments">To be added.</param>
        <summary>
            Creates a invocation expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode IsTypeExpression (Microsoft.CodeAnalysis.SyntaxNode expression, Microsoft.CodeAnalysis.ITypeSymbol type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode IsTypeExpression(class Microsoft.CodeAnalysis.SyntaxNode expression, class Microsoft.CodeAnalysis.ITypeSymbol type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IsTypeExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ITypeSymbol)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsTypeExpression (expression As SyntaxNode, type As ITypeSymbol) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.IsTypeExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.ITypeSymbol -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.IsTypeExpression (expression, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ IsTypeExpression(Microsoft::CodeAnalysis::SyntaxNode ^ expression, Microsoft::CodeAnalysis::ITypeSymbol ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="type">To be added.</param>
        <summary>
            Creates an expression that denotes an is-type-check operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode IsTypeExpression (Microsoft.CodeAnalysis.SyntaxNode expression, Microsoft.CodeAnalysis.SyntaxNode type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode IsTypeExpression(class Microsoft.CodeAnalysis.SyntaxNode expression, class Microsoft.CodeAnalysis.SyntaxNode type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.IsTypeExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsTypeExpression (expression As SyntaxNode, type As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member IsTypeExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.IsTypeExpression (expression, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ IsTypeExpression(Microsoft::CodeAnalysis::SyntaxNode ^ expression, Microsoft::CodeAnalysis::SyntaxNode ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="type">To be added.</param>
        <summary>
            Creates an expression that denotes an is-type-check operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LambdaParameter">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode LambdaParameter (string identifier, Microsoft.CodeAnalysis.ITypeSymbol type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode LambdaParameter(string identifier, class Microsoft.CodeAnalysis.ITypeSymbol type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LambdaParameter(System.String,Microsoft.CodeAnalysis.ITypeSymbol)" />
      <MemberSignature Language="VB.NET" Value="Public Function LambdaParameter (identifier As String, type As ITypeSymbol) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.LambdaParameter : string * Microsoft.CodeAnalysis.ITypeSymbol -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.LambdaParameter (identifier, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ LambdaParameter(System::String ^ identifier, Microsoft::CodeAnalysis::ITypeSymbol ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="type">To be added.</param>
        <summary>
            Creates a lambda parameter.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LambdaParameter">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode LambdaParameter (string identifier, Microsoft.CodeAnalysis.SyntaxNode type = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode LambdaParameter(string identifier, class Microsoft.CodeAnalysis.SyntaxNode type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LambdaParameter(System.String,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function LambdaParameter (identifier As String, Optional type As SyntaxNode = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member LambdaParameter : string * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.LambdaParameter (identifier, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="type">To be added.</param>
        <summary>
            Creates a lambda parameter.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode LessThanExpression (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode LessThanExpression(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LessThanExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function LessThanExpression (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member LessThanExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.LessThanExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ LessThanExpression(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes a less-than test operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqualExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode LessThanOrEqualExpression (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode LessThanOrEqualExpression(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LessThanOrEqualExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function LessThanOrEqualExpression (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member LessThanOrEqualExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.LessThanOrEqualExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ LessThanOrEqualExpression(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes a less-than-or-equal test operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LiteralExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode LiteralExpression (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode LiteralExpression(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LiteralExpression(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function LiteralExpression (value As Object) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member LiteralExpression : obj -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.LiteralExpression value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ LiteralExpression(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
            Creates a literal expression. This is typically numeric primitives, strings or chars.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDeclarationStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode LocalDeclarationStatement (string name, Microsoft.CodeAnalysis.SyntaxNode initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode LocalDeclarationStatement(string name, class Microsoft.CodeAnalysis.SyntaxNode initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(System.String,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function LocalDeclarationStatement (name As String, initializer As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.LocalDeclarationStatement : string * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.LocalDeclarationStatement (name, initializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ LocalDeclarationStatement(System::String ^ name, Microsoft::CodeAnalysis::SyntaxNode ^ initializer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="initializer">To be added.</param>
        <summary>
            Creates a statement that declares a single local variable.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDeclarationStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode LocalDeclarationStatement (Microsoft.CodeAnalysis.ITypeSymbol type, string name, Microsoft.CodeAnalysis.SyntaxNode initializer = null, bool isConst = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode LocalDeclarationStatement(class Microsoft.CodeAnalysis.ITypeSymbol type, string name, class Microsoft.CodeAnalysis.SyntaxNode initializer, bool isConst) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(Microsoft.CodeAnalysis.ITypeSymbol,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LocalDeclarationStatement (type As ITypeSymbol, name As String, Optional initializer As SyntaxNode = null, Optional isConst As Boolean = false) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.LocalDeclarationStatement : Microsoft.CodeAnalysis.ITypeSymbol * string * Microsoft.CodeAnalysis.SyntaxNode * bool -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.LocalDeclarationStatement (type, name, initializer, isConst)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="isConst" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="name">To be added.</param>
        <param name="initializer">To be added.</param>
        <param name="isConst">To be added.</param>
        <summary>
            Creates a statement that declares a single local variable.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDeclarationStatement">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode LocalDeclarationStatement (Microsoft.CodeAnalysis.SyntaxNode type, string identifier, Microsoft.CodeAnalysis.SyntaxNode initializer = null, bool isConst = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode LocalDeclarationStatement(class Microsoft.CodeAnalysis.SyntaxNode type, string identifier, class Microsoft.CodeAnalysis.SyntaxNode initializer, bool isConst) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function LocalDeclarationStatement (type As SyntaxNode, identifier As String, Optional initializer As SyntaxNode = null, Optional isConst As Boolean = false) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member LocalDeclarationStatement : Microsoft.CodeAnalysis.SyntaxNode * string * Microsoft.CodeAnalysis.SyntaxNode * bool -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.LocalDeclarationStatement (type, identifier, initializer, isConst)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="isConst" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="initializer">To be added.</param>
        <param name="isConst">To be added.</param>
        <summary>
            Creates a statement that declares a single local variable.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LockStatement">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode LockStatement (Microsoft.CodeAnalysis.SyntaxNode expression, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode LockStatement(class Microsoft.CodeAnalysis.SyntaxNode expression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LockStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function LockStatement (expression As SyntaxNode, statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member LockStatement : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.LockStatement (expression, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ LockStatement(Microsoft::CodeAnalysis::SyntaxNode ^ expression, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Creates a statement that represents a lock-block pattern.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalAndExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode LogicalAndExpression (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode LogicalAndExpression(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalAndExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function LogicalAndExpression (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member LogicalAndExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.LogicalAndExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ LogicalAndExpression(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes a logical-and operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalNotExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode LogicalNotExpression (Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode LogicalNotExpression(class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalNotExpression(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function LogicalNotExpression (expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member LogicalNotExpression : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.LogicalNotExpression expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ LogicalNotExpression(Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
            Creates an expression that denotes a logical not operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalOrExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode LogicalOrExpression (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode LogicalOrExpression(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.LogicalOrExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function LogicalOrExpression (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member LogicalOrExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.LogicalOrExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ LogicalOrExpression(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes a logical-or operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberAccessExpression">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.SyntaxNode MemberAccessExpression (Microsoft.CodeAnalysis.SyntaxNode expression, Microsoft.CodeAnalysis.SyntaxNode memberName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode MemberAccessExpression(class Microsoft.CodeAnalysis.SyntaxNode expression, class Microsoft.CodeAnalysis.SyntaxNode memberName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MemberAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MemberAccessExpression (expression As SyntaxNode, memberName As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member MemberAccessExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode&#xA;override this.MemberAccessExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.MemberAccessExpression (expression, memberName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::CodeAnalysis::SyntaxNode ^ MemberAccessExpression(Microsoft::CodeAnalysis::SyntaxNode ^ expression, Microsoft::CodeAnalysis::SyntaxNode ^ memberName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="memberName" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="memberName">To be added.</param>
        <summary>
            Creates a member access expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberAccessExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode MemberAccessExpression (Microsoft.CodeAnalysis.SyntaxNode expression, string memberName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode MemberAccessExpression(class Microsoft.CodeAnalysis.SyntaxNode expression, string memberName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MemberAccessExpression(Microsoft.CodeAnalysis.SyntaxNode,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MemberAccessExpression (expression As SyntaxNode, memberName As String) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.MemberAccessExpression : Microsoft.CodeAnalysis.SyntaxNode * string -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.MemberAccessExpression (expression, memberName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ MemberAccessExpression(Microsoft::CodeAnalysis::SyntaxNode ^ expression, System::String ^ memberName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="memberName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="memberName">To be added.</param>
        <summary>
            Creates a member access expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodDeclaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode MethodDeclaration (Microsoft.CodeAnalysis.IMethodSymbol method, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode MethodDeclaration(class Microsoft.CodeAnalysis.IMethodSymbol method, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MethodDeclaration(Microsoft.CodeAnalysis.IMethodSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function MethodDeclaration (method As IMethodSymbol, Optional statements As IEnumerable(Of SyntaxNode) = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.MethodDeclaration : Microsoft.CodeAnalysis.IMethodSymbol * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.MethodDeclaration (method, statements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="Microsoft.CodeAnalysis.IMethodSymbol" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Creates a method declaration matching an existing method symbol.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodDeclaration">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode MethodDeclaration (string name, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; parameters = null, System.Collections.Generic.IEnumerable&lt;string&gt; typeParameters = null, Microsoft.CodeAnalysis.SyntaxNode returnType = null, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode MethodDeclaration(string name, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; parameters, class System.Collections.Generic.IEnumerable`1&lt;string&gt; typeParameters, class Microsoft.CodeAnalysis.SyntaxNode returnType, valuetype Microsoft.CodeAnalysis.Accessibility accessibility, valuetype Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MethodDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="F#" Value="abstract member MethodDeclaration : string * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;string&gt; * Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.Accessibility * Microsoft.CodeAnalysis.Editing.DeclarationModifiers * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.MethodDeclaration (name, parameters, typeParameters, returnType, accessibility, modifiers, statements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="typeParameters" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="accessibility" Type="Microsoft.CodeAnalysis.Accessibility" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.Editing.DeclarationModifiers" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="parameters">To be added.</param>
        <param name="typeParameters">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="accessibility">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Creates a method declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ModuloExpression (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ModuloExpression(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ModuloExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ModuloExpression (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ModuloExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ModuloExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ ModuloExpression(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes a modulo operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode MultiplyExpression (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode MultiplyExpression(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.MultiplyExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function MultiplyExpression (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member MultiplyExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.MultiplyExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ MultiplyExpression(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes a multiplication operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode NameExpression (Microsoft.CodeAnalysis.INamespaceOrTypeSymbol namespaceOrTypeSymbol);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode NameExpression(class Microsoft.CodeAnalysis.INamespaceOrTypeSymbol namespaceOrTypeSymbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NameExpression(Microsoft.CodeAnalysis.INamespaceOrTypeSymbol)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function NameExpression (namespaceOrTypeSymbol As INamespaceOrTypeSymbol) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member NameExpression : Microsoft.CodeAnalysis.INamespaceOrTypeSymbol -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.NameExpression namespaceOrTypeSymbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ NameExpression(Microsoft::CodeAnalysis::INamespaceOrTypeSymbol ^ namespaceOrTypeSymbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceOrTypeSymbol" Type="Microsoft.CodeAnalysis.INamespaceOrTypeSymbol" />
      </Parameters>
      <Docs>
        <param name="namespaceOrTypeSymbol">The symbol to create a name for.</param>
        <summary>
            Creates a name that denotes a type or namespace.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameOfExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode NameOfExpression (Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode NameOfExpression(class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NameOfExpression(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function NameOfExpression (expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member NameOfExpression : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.NameOfExpression expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ NameOfExpression(Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
            Creates an nameof expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceDeclaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode NamespaceDeclaration (Microsoft.CodeAnalysis.SyntaxNode name, params Microsoft.CodeAnalysis.SyntaxNode[] declarations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode NamespaceDeclaration(class Microsoft.CodeAnalysis.SyntaxNode name, class Microsoft.CodeAnalysis.SyntaxNode[] declarations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function NamespaceDeclaration (name As SyntaxNode, ParamArray declarations As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.NamespaceDeclaration : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.NamespaceDeclaration (name, declarations)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ NamespaceDeclaration(Microsoft::CodeAnalysis::SyntaxNode ^ name, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ declarations);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="declarations" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">The name of the namespace.</param>
        <param name="declarations">Zero or more namespace or type declarations.</param>
        <summary>
            Creates a namespace declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceDeclaration">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode NamespaceDeclaration (Microsoft.CodeAnalysis.SyntaxNode name, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; declarations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode NamespaceDeclaration(class Microsoft.CodeAnalysis.SyntaxNode name, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; declarations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function NamespaceDeclaration (name As SyntaxNode, declarations As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member NamespaceDeclaration : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.NamespaceDeclaration (name, declarations)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ NamespaceDeclaration(Microsoft::CodeAnalysis::SyntaxNode ^ name, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ declarations);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="declarations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="name">The name of the namespace.</param>
        <param name="declarations">Zero or more namespace or type declarations.</param>
        <summary>
            Creates a namespace declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceDeclaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode NamespaceDeclaration (string name, params Microsoft.CodeAnalysis.SyntaxNode[] declarations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode NamespaceDeclaration(string name, class Microsoft.CodeAnalysis.SyntaxNode[] declarations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function NamespaceDeclaration (name As String, ParamArray declarations As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.NamespaceDeclaration : string * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.NamespaceDeclaration (name, declarations)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ NamespaceDeclaration(System::String ^ name, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ declarations);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="declarations" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">The name of the namespace.</param>
        <param name="declarations">Zero or more namespace or type declarations.</param>
        <summary>
            Creates a namespace declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceDeclaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode NamespaceDeclaration (string name, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; declarations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode NamespaceDeclaration(string name, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; declarations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceDeclaration(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function NamespaceDeclaration (name As String, declarations As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.NamespaceDeclaration : string * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.NamespaceDeclaration (name, declarations)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ NamespaceDeclaration(System::String ^ name, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ declarations);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="declarations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="name">The name of the namespace.</param>
        <param name="declarations">Zero or more namespace or type declarations.</param>
        <summary>
            Creates a namespace declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceImportDeclaration">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode NamespaceImportDeclaration (Microsoft.CodeAnalysis.SyntaxNode name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode NamespaceImportDeclaration(class Microsoft.CodeAnalysis.SyntaxNode name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceImportDeclaration(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function NamespaceImportDeclaration (name As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member NamespaceImportDeclaration : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.NamespaceImportDeclaration name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ NamespaceImportDeclaration(Microsoft::CodeAnalysis::SyntaxNode ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="name">The name of the namespace being imported.</param>
        <summary>
            Creates a namespace import declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceImportDeclaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode NamespaceImportDeclaration (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode NamespaceImportDeclaration(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NamespaceImportDeclaration(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function NamespaceImportDeclaration (name As String) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.NamespaceImportDeclaration : string -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.NamespaceImportDeclaration name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ NamespaceImportDeclaration(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the namespace being imported.</param>
        <summary>
            Creates a namespace import declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NegateExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode NegateExpression (Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode NegateExpression(class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NegateExpression(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function NegateExpression (expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member NegateExpression : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.NegateExpression expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ NegateExpression(Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
            Creates an expression that denotes a unary negation operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NullableTypeExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode NullableTypeExpression (Microsoft.CodeAnalysis.SyntaxNode type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode NullableTypeExpression(class Microsoft.CodeAnalysis.SyntaxNode type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NullableTypeExpression(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function NullableTypeExpression (type As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member NullableTypeExpression : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.NullableTypeExpression type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ NullableTypeExpression(Microsoft::CodeAnalysis::SyntaxNode ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
            Creates an expression that denotes a nullable type.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NullLiteralExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode NullLiteralExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode NullLiteralExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.NullLiteralExpression" />
      <MemberSignature Language="VB.NET" Value="Public Function NullLiteralExpression () As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.NullLiteralExpression : unit -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.NullLiteralExpression " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ NullLiteralExpression();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates an expression that denotes the null literal.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectCreationExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode ObjectCreationExpression (Microsoft.CodeAnalysis.ITypeSymbol type, params Microsoft.CodeAnalysis.SyntaxNode[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode ObjectCreationExpression(class Microsoft.CodeAnalysis.ITypeSymbol type, class Microsoft.CodeAnalysis.SyntaxNode[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ObjectCreationExpression (type As ITypeSymbol, ParamArray arguments As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.ObjectCreationExpression : Microsoft.CodeAnalysis.ITypeSymbol * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ObjectCreationExpression (type, arguments)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ ObjectCreationExpression(Microsoft::CodeAnalysis::ITypeSymbol ^ type, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="arguments">To be added.</param>
        <summary>
            Creates an object creation expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectCreationExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode ObjectCreationExpression (Microsoft.CodeAnalysis.ITypeSymbol type, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode ObjectCreationExpression(class Microsoft.CodeAnalysis.ITypeSymbol type, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.ITypeSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function ObjectCreationExpression (type As ITypeSymbol, arguments As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.ObjectCreationExpression : Microsoft.CodeAnalysis.ITypeSymbol * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ObjectCreationExpression (type, arguments)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ ObjectCreationExpression(Microsoft::CodeAnalysis::ITypeSymbol ^ type, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="arguments">To be added.</param>
        <summary>
            Creates an object creation expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectCreationExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode ObjectCreationExpression (Microsoft.CodeAnalysis.SyntaxNode type, params Microsoft.CodeAnalysis.SyntaxNode[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode ObjectCreationExpression(class Microsoft.CodeAnalysis.SyntaxNode type, class Microsoft.CodeAnalysis.SyntaxNode[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ObjectCreationExpression (type As SyntaxNode, ParamArray arguments As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.ObjectCreationExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ObjectCreationExpression (type, arguments)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ ObjectCreationExpression(Microsoft::CodeAnalysis::SyntaxNode ^ type, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="arguments">To be added.</param>
        <summary>
            Creates an object creation expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectCreationExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ObjectCreationExpression (Microsoft.CodeAnalysis.SyntaxNode namedType, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ObjectCreationExpression(class Microsoft.CodeAnalysis.SyntaxNode namedType, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ObjectCreationExpression (namedType As SyntaxNode, arguments As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ObjectCreationExpression : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ObjectCreationExpression (namedType, arguments)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ ObjectCreationExpression(Microsoft::CodeAnalysis::SyntaxNode ^ namedType, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namedType" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="namedType">To be added.</param>
        <param name="arguments">To be added.</param>
        <summary>
            Creates an object creation expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperatorDeclaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode OperatorDeclaration (Microsoft.CodeAnalysis.IMethodSymbol method, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode OperatorDeclaration(class Microsoft.CodeAnalysis.IMethodSymbol method, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.OperatorDeclaration(Microsoft.CodeAnalysis.IMethodSymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function OperatorDeclaration (method As IMethodSymbol, Optional statements As IEnumerable(Of SyntaxNode) = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.OperatorDeclaration : Microsoft.CodeAnalysis.IMethodSymbol * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.OperatorDeclaration (method, statements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="Microsoft.CodeAnalysis.IMethodSymbol" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Creates a method declaration matching an existing method symbol.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperatorDeclaration">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.SyntaxNode OperatorDeclaration (Microsoft.CodeAnalysis.Editing.OperatorKind kind, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; parameters = null, Microsoft.CodeAnalysis.SyntaxNode returnType = null, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode OperatorDeclaration(valuetype Microsoft.CodeAnalysis.Editing.OperatorKind kind, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; parameters, class Microsoft.CodeAnalysis.SyntaxNode returnType, valuetype Microsoft.CodeAnalysis.Accessibility accessibility, valuetype Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.OperatorDeclaration(Microsoft.CodeAnalysis.Editing.OperatorKind,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="F#" Value="abstract member OperatorDeclaration : Microsoft.CodeAnalysis.Editing.OperatorKind * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.Accessibility * Microsoft.CodeAnalysis.Editing.DeclarationModifiers * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode&#xA;override this.OperatorDeclaration : Microsoft.CodeAnalysis.Editing.OperatorKind * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.Accessibility * Microsoft.CodeAnalysis.Editing.DeclarationModifiers * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.OperatorDeclaration (kind, parameters, returnType, accessibility, modifiers, statements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.Editing.OperatorKind" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="accessibility" Type="Microsoft.CodeAnalysis.Accessibility" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.Editing.DeclarationModifiers" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="parameters">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="accessibility">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Creates a method declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterDeclaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode ParameterDeclaration (Microsoft.CodeAnalysis.IParameterSymbol symbol, Microsoft.CodeAnalysis.SyntaxNode initializer = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode ParameterDeclaration(class Microsoft.CodeAnalysis.IParameterSymbol symbol, class Microsoft.CodeAnalysis.SyntaxNode initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ParameterDeclaration(Microsoft.CodeAnalysis.IParameterSymbol,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ParameterDeclaration (symbol As IParameterSymbol, Optional initializer As SyntaxNode = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.ParameterDeclaration : Microsoft.CodeAnalysis.IParameterSymbol * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ParameterDeclaration (symbol, initializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.IParameterSymbol" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="symbol">To be added.</param>
        <param name="initializer">To be added.</param>
        <summary>
            Creates a parameter declaration matching an existing parameter symbol.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterDeclaration">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ParameterDeclaration (string name, Microsoft.CodeAnalysis.SyntaxNode type = null, Microsoft.CodeAnalysis.SyntaxNode initializer = null, Microsoft.CodeAnalysis.RefKind refKind = Microsoft.CodeAnalysis.RefKind.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ParameterDeclaration(string name, class Microsoft.CodeAnalysis.SyntaxNode type, class Microsoft.CodeAnalysis.SyntaxNode initializer, valuetype Microsoft.CodeAnalysis.RefKind refKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ParameterDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.RefKind)" />
      <MemberSignature Language="F#" Value="abstract member ParameterDeclaration : string * Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.RefKind -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ParameterDeclaration (name, type, initializer, refKind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="refKind" Type="Microsoft.CodeAnalysis.RefKind" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="type">To be added.</param>
        <param name="initializer">To be added.</param>
        <param name="refKind">To be added.</param>
        <summary>
            Creates a parameter declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreserveTrivia&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="protected static Microsoft.CodeAnalysis.SyntaxNode PreserveTrivia&lt;TNode&gt; (TNode node, Func&lt;TNode,Microsoft.CodeAnalysis.SyntaxNode&gt; nodeChanger) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class Microsoft.CodeAnalysis.SyntaxNode PreserveTrivia&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(!!TNode node, class System.Func`2&lt;!!TNode, class Microsoft.CodeAnalysis.SyntaxNode&gt; nodeChanger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PreserveTrivia``1(``0,System.Func{``0,Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function PreserveTrivia(Of TNode As SyntaxNode) (node As TNode, nodeChanger As Func(Of TNode, SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="static member PreserveTrivia : 'Node * Func&lt;'Node, Microsoft.CodeAnalysis.SyntaxNode (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PreserveTrivia (node, nodeChanger)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA;generic &lt;typename TNode&gt;&#xA; where TNode : Microsoft::CodeAnalysis::SyntaxNode static Microsoft::CodeAnalysis::SyntaxNode ^ PreserveTrivia(TNode node, Func&lt;TNode, Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ nodeChanger);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="TNode" />
        <Parameter Name="nodeChanger" Type="System.Func&lt;TNode,Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="node">To be added.</param>
        <param name="nodeChanger">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyDeclaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode PropertyDeclaration (Microsoft.CodeAnalysis.IPropertySymbol property, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; getAccessorStatements = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; setAccessorStatements = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode PropertyDeclaration(class Microsoft.CodeAnalysis.IPropertySymbol property, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; getAccessorStatements, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; setAccessorStatements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PropertyDeclaration(Microsoft.CodeAnalysis.IPropertySymbol,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function PropertyDeclaration (property As IPropertySymbol, Optional getAccessorStatements As IEnumerable(Of SyntaxNode) = null, Optional setAccessorStatements As IEnumerable(Of SyntaxNode) = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.PropertyDeclaration : Microsoft.CodeAnalysis.IPropertySymbol * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.PropertyDeclaration (property, getAccessorStatements, setAccessorStatements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="Microsoft.CodeAnalysis.IPropertySymbol" />
        <Parameter Name="getAccessorStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="setAccessorStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <param name="getAccessorStatements">To be added.</param>
        <param name="setAccessorStatements">To be added.</param>
        <summary>
            Creates a property declaration using an existing property symbol as a signature.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyDeclaration">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode PropertyDeclaration (string name, Microsoft.CodeAnalysis.SyntaxNode type, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; getAccessorStatements = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; setAccessorStatements = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode PropertyDeclaration(string name, class Microsoft.CodeAnalysis.SyntaxNode type, valuetype Microsoft.CodeAnalysis.Accessibility accessibility, valuetype Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; getAccessorStatements, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; setAccessorStatements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.PropertyDeclaration(System.String,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="F#" Value="abstract member PropertyDeclaration : string * Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.Accessibility * Microsoft.CodeAnalysis.Editing.DeclarationModifiers * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.PropertyDeclaration (name, type, accessibility, modifiers, getAccessorStatements, setAccessorStatements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="accessibility" Type="Microsoft.CodeAnalysis.Accessibility" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.Editing.DeclarationModifiers" />
        <Parameter Name="getAccessorStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="setAccessorStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="type">To be added.</param>
        <param name="accessibility">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="getAccessorStatements">To be added.</param>
        <param name="setAccessorStatements">To be added.</param>
        <summary>
            Creates a property declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QualifiedName">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode QualifiedName (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode QualifiedName(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.QualifiedName(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function QualifiedName (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member QualifiedName : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.QualifiedName (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ QualifiedName(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates a name expression that denotes a qualified name. 
            The left operand can be any name expression.
            The right operand can be either and identifier or generic name.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceEqualsExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ReferenceEqualsExpression (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ReferenceEqualsExpression(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReferenceEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReferenceEqualsExpression (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ReferenceEqualsExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ReferenceEqualsExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ ReferenceEqualsExpression(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes a reference-type equality test operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceNotEqualsExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ReferenceNotEqualsExpression (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ReferenceNotEqualsExpression(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReferenceNotEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReferenceNotEqualsExpression (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ReferenceNotEqualsExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ReferenceNotEqualsExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ ReferenceNotEqualsExpression(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes a reference-type inequality test operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllAttributes">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode RemoveAllAttributes (Microsoft.CodeAnalysis.SyntaxNode declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode RemoveAllAttributes(class Microsoft.CodeAnalysis.SyntaxNode declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveAllAttributes(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAllAttributes (declaration As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.RemoveAllAttributes : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.RemoveAllAttributes declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ RemoveAllAttributes(Microsoft::CodeAnalysis::SyntaxNode ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>
            Removes all attributes from the declaration, including return attributes.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventHandler">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode RemoveEventHandler (Microsoft.CodeAnalysis.SyntaxNode event, Microsoft.CodeAnalysis.SyntaxNode handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode RemoveEventHandler(class Microsoft.CodeAnalysis.SyntaxNode event, class Microsoft.CodeAnalysis.SyntaxNode handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveEventHandler(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function RemoveEventHandler (event As SyntaxNode, handler As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member RemoveEventHandler : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.RemoveEventHandler (event, handler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ RemoveEventHandler(Microsoft::CodeAnalysis::SyntaxNode ^ event, Microsoft::CodeAnalysis::SyntaxNode ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="event" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="handler" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="event">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>
            Creates a statement that removes the given handler from the given event.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveNode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.SyntaxNode RemoveNode (Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.SyntaxNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode RemoveNode(class Microsoft.CodeAnalysis.SyntaxNode root, class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveNode (root As SyntaxNode, node As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member RemoveNode : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode&#xA;override this.RemoveNode : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.RemoveNode (root, node)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::CodeAnalysis::SyntaxNode ^ RemoveNode(Microsoft::CodeAnalysis::SyntaxNode ^ root, Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="root">To be added.</param>
        <param name="node">To be added.</param>
        <summary>
            Removes the node from the sub tree starting at the root.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveNode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.SyntaxNode RemoveNode (Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.SyntaxRemoveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode RemoveNode(class Microsoft.CodeAnalysis.SyntaxNode root, class Microsoft.CodeAnalysis.SyntaxNode node, valuetype Microsoft.CodeAnalysis.SyntaxRemoveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxRemoveOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveNode (root As SyntaxNode, node As SyntaxNode, options As SyntaxRemoveOptions) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member RemoveNode : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxRemoveOptions -&gt; Microsoft.CodeAnalysis.SyntaxNode&#xA;override this.RemoveNode : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxRemoveOptions -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.RemoveNode (root, node, options)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::CodeAnalysis::SyntaxNode ^ RemoveNode(Microsoft::CodeAnalysis::SyntaxNode ^ root, Microsoft::CodeAnalysis::SyntaxNode ^ node, Microsoft::CodeAnalysis::SyntaxRemoveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.SyntaxRemoveOptions" />
      </Parameters>
      <Docs>
        <param name="root">To be added.</param>
        <param name="node">To be added.</param>
        <param name="options">To be added.</param>
        <summary>
            Removes the node from the sub tree starting at the root.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveNodes">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode RemoveNodes (Microsoft.CodeAnalysis.SyntaxNode root, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; declarations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode RemoveNodes(class Microsoft.CodeAnalysis.SyntaxNode root, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; declarations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveNodes(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveNodes (root As SyntaxNode, declarations As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.RemoveNodes : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.RemoveNodes (root, declarations)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ RemoveNodes(Microsoft::CodeAnalysis::SyntaxNode ^ root, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ declarations);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="declarations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="root">To be added.</param>
        <param name="declarations">To be added.</param>
        <summary>
            Removes all the declarations from the sub tree starting at the root.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="protected static Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; RemoveRange&lt;TNode&gt; (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; list, int offset, int count) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; RemoveRange&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; list, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveRange``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function RemoveRange(Of TNode As SyntaxNode) (list As SeparatedSyntaxList(Of TNode), offset As Integer, count As Integer) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member RemoveRange : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * int * int -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveRange (list, offset, count)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA;generic &lt;typename TNode&gt;&#xA; where TNode : Microsoft::CodeAnalysis::SyntaxNode static Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; RemoveRange(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; list, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="list">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="protected static Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; RemoveRange&lt;TNode&gt; (Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; list, int offset, int count) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!!TNode&gt; RemoveRange&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!!TNode&gt; list, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveRange``1(Microsoft.CodeAnalysis.SyntaxList{``0},System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function RemoveRange(Of TNode As SyntaxNode) (list As SyntaxList(Of TNode), offset As Integer, count As Integer) As SyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member RemoveRange : Microsoft.CodeAnalysis.SyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * int * int -&gt; Microsoft.CodeAnalysis.SyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.Editing.SyntaxGenerator.RemoveRange (list, offset, count)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA;generic &lt;typename TNode&gt;&#xA; where TNode : Microsoft::CodeAnalysis::SyntaxNode static Microsoft::CodeAnalysis::SyntaxList&lt;TNode&gt; RemoveRange(Microsoft::CodeAnalysis::SyntaxList&lt;TNode&gt; list, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="list">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceNode">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.SyntaxNode ReplaceNode (Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.SyntaxNode newDeclaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ReplaceNode(class Microsoft.CodeAnalysis.SyntaxNode root, class Microsoft.CodeAnalysis.SyntaxNode node, class Microsoft.CodeAnalysis.SyntaxNode newDeclaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceNode (root As SyntaxNode, node As SyntaxNode, newDeclaration As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ReplaceNode : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode&#xA;override this.ReplaceNode : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ReplaceNode (root, node, newDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::CodeAnalysis::SyntaxNode ^ ReplaceNode(Microsoft::CodeAnalysis::SyntaxNode ^ root, Microsoft::CodeAnalysis::SyntaxNode ^ node, Microsoft::CodeAnalysis::SyntaxNode ^ newDeclaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="newDeclaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="root">To be added.</param>
        <param name="node">To be added.</param>
        <param name="newDeclaration">To be added.</param>
        <summary>
            Replaces the node in the root's tree with the new node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceRange">
      <MemberSignature Language="C#" Value="protected static Microsoft.CodeAnalysis.SyntaxNode ReplaceRange (Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.SyntaxNode node, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; replacements);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class Microsoft.CodeAnalysis.SyntaxNode ReplaceRange(class Microsoft.CodeAnalysis.SyntaxNode root, class Microsoft.CodeAnalysis.SyntaxNode node, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; replacements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceRange(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function ReplaceRange (root As SyntaxNode, node As SyntaxNode, replacements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="static member ReplaceRange : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceRange (root, node, replacements)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static Microsoft::CodeAnalysis::SyntaxNode ^ ReplaceRange(Microsoft::CodeAnalysis::SyntaxNode ^ root, Microsoft::CodeAnalysis::SyntaxNode ^ node, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ replacements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="replacements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="root">To be added.</param>
        <param name="node">To be added.</param>
        <param name="replacements">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceWithTrivia">
      <MemberSignature Language="C#" Value="protected static Microsoft.CodeAnalysis.SyntaxNode ReplaceWithTrivia (Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.SyntaxNode original, Microsoft.CodeAnalysis.SyntaxNode replacement);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class Microsoft.CodeAnalysis.SyntaxNode ReplaceWithTrivia(class Microsoft.CodeAnalysis.SyntaxNode root, class Microsoft.CodeAnalysis.SyntaxNode original, class Microsoft.CodeAnalysis.SyntaxNode replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function ReplaceWithTrivia (root As SyntaxNode, original As SyntaxNode, replacement As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="static member ReplaceWithTrivia : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia (root, original, replacement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static Microsoft::CodeAnalysis::SyntaxNode ^ ReplaceWithTrivia(Microsoft::CodeAnalysis::SyntaxNode ^ root, Microsoft::CodeAnalysis::SyntaxNode ^ original, Microsoft::CodeAnalysis::SyntaxNode ^ replacement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="original" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="replacement" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="root">To be added.</param>
        <param name="original">To be added.</param>
        <param name="replacement">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceWithTrivia">
      <MemberSignature Language="C#" Value="protected static Microsoft.CodeAnalysis.SyntaxNode ReplaceWithTrivia (Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.SyntaxToken original, Microsoft.CodeAnalysis.SyntaxToken replacement);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class Microsoft.CodeAnalysis.SyntaxNode ReplaceWithTrivia(class Microsoft.CodeAnalysis.SyntaxNode root, valuetype Microsoft.CodeAnalysis.SyntaxToken original, valuetype Microsoft.CodeAnalysis.SyntaxToken replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function ReplaceWithTrivia (root As SyntaxNode, original As SyntaxToken, replacement As SyntaxToken) As SyntaxNode" />
      <MemberSignature Language="F#" Value="static member ReplaceWithTrivia : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia (root, original, replacement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static Microsoft::CodeAnalysis::SyntaxNode ^ ReplaceWithTrivia(Microsoft::CodeAnalysis::SyntaxNode ^ root, Microsoft::CodeAnalysis::SyntaxToken original, Microsoft::CodeAnalysis::SyntaxToken replacement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="original" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="replacement" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="root">To be added.</param>
        <param name="original">To be added.</param>
        <param name="replacement">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceWithTrivia&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="protected static Microsoft.CodeAnalysis.SyntaxNode ReplaceWithTrivia&lt;TNode&gt; (Microsoft.CodeAnalysis.SyntaxNode root, TNode original, Func&lt;TNode,Microsoft.CodeAnalysis.SyntaxNode&gt; replacer) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class Microsoft.CodeAnalysis.SyntaxNode ReplaceWithTrivia&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(class Microsoft.CodeAnalysis.SyntaxNode root, !!TNode original, class System.Func`2&lt;!!TNode, class Microsoft.CodeAnalysis.SyntaxNode&gt; replacer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia``1(Microsoft.CodeAnalysis.SyntaxNode,``0,System.Func{``0,Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function ReplaceWithTrivia(Of TNode As SyntaxNode) (root As SyntaxNode, original As TNode, replacer As Func(Of TNode, SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="static member ReplaceWithTrivia : Microsoft.CodeAnalysis.SyntaxNode * 'Node * Func&lt;'Node, Microsoft.CodeAnalysis.SyntaxNode (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReplaceWithTrivia (root, original, replacer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA;generic &lt;typename TNode&gt;&#xA; where TNode : Microsoft::CodeAnalysis::SyntaxNode static Microsoft::CodeAnalysis::SyntaxNode ^ ReplaceWithTrivia(Microsoft::CodeAnalysis::SyntaxNode ^ root, TNode original, Func&lt;TNode, Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ replacer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="original" Type="TNode" />
        <Parameter Name="replacer" Type="System.Func&lt;TNode,Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="root">To be added.</param>
        <param name="original">To be added.</param>
        <param name="replacer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnStatement">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ReturnStatement (Microsoft.CodeAnalysis.SyntaxNode expression = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ReturnStatement(class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ReturnStatement(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReturnStatement (Optional expression As SyntaxNode = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ReturnStatement : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ReturnStatement expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="expression">An optional expression that can be returned.</param>
        <summary>
            Creates a statement that can be used to return a value from a method body.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessorDeclaration">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode SetAccessorDeclaration (Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode SetAccessorDeclaration(valuetype Microsoft.CodeAnalysis.Accessibility accessibility, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SetAccessorDeclaration(Microsoft.CodeAnalysis.Accessibility,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="F#" Value="abstract member SetAccessorDeclaration : Microsoft.CodeAnalysis.Accessibility * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.SetAccessorDeclaration (accessibility, statements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessibility" Type="Microsoft.CodeAnalysis.Accessibility" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="accessibility">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StructDeclaration">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode StructDeclaration (string name, System.Collections.Generic.IEnumerable&lt;string&gt; typeParameters = null, Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; interfaceTypes = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; members = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode StructDeclaration(string name, class System.Collections.Generic.IEnumerable`1&lt;string&gt; typeParameters, valuetype Microsoft.CodeAnalysis.Accessibility accessibility, valuetype Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; interfaceTypes, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.StructDeclaration(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.CodeAnalysis.Accessibility,Microsoft.CodeAnalysis.Editing.DeclarationModifiers,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="F#" Value="abstract member StructDeclaration : string * seq&lt;string&gt; * Microsoft.CodeAnalysis.Accessibility * Microsoft.CodeAnalysis.Editing.DeclarationModifiers * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.StructDeclaration (name, typeParameters, accessibility, modifiers, interfaceTypes, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="typeParameters" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="accessibility" Type="Microsoft.CodeAnalysis.Accessibility" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.Editing.DeclarationModifiers" />
        <Parameter Name="interfaceTypes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="members" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="typeParameters">To be added.</param>
        <param name="accessibility">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="interfaceTypes">To be added.</param>
        <param name="members">To be added.</param>
        <summary>
            Creates a struct declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode SubtractExpression (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode SubtractExpression(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SubtractExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SubtractExpression (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member SubtractExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.SubtractExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ SubtractExpression(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes an subtraction operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchSection">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode SwitchSection (Microsoft.CodeAnalysis.SyntaxNode caseExpression, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode SwitchSection(class Microsoft.CodeAnalysis.SyntaxNode caseExpression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchSection(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function SwitchSection (caseExpression As SyntaxNode, statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.SwitchSection : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.SwitchSection (caseExpression, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ SwitchSection(Microsoft::CodeAnalysis::SyntaxNode ^ caseExpression, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caseExpression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="caseExpression">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Creates a single-case section a switch statement.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchSection">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode SwitchSection (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; caseExpressions, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode SwitchSection(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; caseExpressions, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchSection(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SwitchSection (caseExpressions As IEnumerable(Of SyntaxNode), statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member SwitchSection : seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.SwitchSection (caseExpressions, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ SwitchSection(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ caseExpressions, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caseExpressions" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="caseExpressions">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Creates a section for a switch statement.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode SwitchStatement (Microsoft.CodeAnalysis.SyntaxNode expression, params Microsoft.CodeAnalysis.SyntaxNode[] sections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode SwitchStatement(class Microsoft.CodeAnalysis.SyntaxNode expression, class Microsoft.CodeAnalysis.SyntaxNode[] sections) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchStatement(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SwitchStatement (expression As SyntaxNode, ParamArray sections As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.SwitchStatement : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.SwitchStatement (expression, sections)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ SwitchStatement(Microsoft::CodeAnalysis::SyntaxNode ^ expression, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ sections);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="sections" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="sections">To be added.</param>
        <summary>
            Creates a switch statement that branches to individual sections based on the value of the specified expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchStatement">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode SwitchStatement (Microsoft.CodeAnalysis.SyntaxNode expression, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; sections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode SwitchStatement(class Microsoft.CodeAnalysis.SyntaxNode expression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; sections) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SwitchStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SwitchStatement (expression As SyntaxNode, sections As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member SwitchStatement : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.SwitchStatement (expression, sections)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ SwitchStatement(Microsoft::CodeAnalysis::SyntaxNode ^ expression, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ sections);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="sections" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="sections">To be added.</param>
        <summary>
            Creates a switch statement that branches to individual sections based on the value of the specified expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThisExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ThisExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ThisExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ThisExpression" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ThisExpression () As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ThisExpression : unit -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ThisExpression " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ ThisExpression();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates an expression that denotes the containing method's this-parameter.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ThrowExpression (Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ThrowExpression(class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ThrowExpression(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ThrowExpression (expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ThrowExpression : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ThrowExpression expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ ThrowExpression(Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
            Creates an expression that can be used to throw an exception.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowStatement">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ThrowStatement (Microsoft.CodeAnalysis.SyntaxNode expression = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ThrowStatement(class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ThrowStatement(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ThrowStatement (Optional expression As SyntaxNode = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ThrowStatement : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ThrowStatement expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="expression">An optional expression that can be thrown.</param>
        <summary>
            Creates a statement that can be used to throw an exception.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrueLiteralExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode TrueLiteralExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode TrueLiteralExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TrueLiteralExpression" />
      <MemberSignature Language="VB.NET" Value="Public Function TrueLiteralExpression () As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.TrueLiteralExpression : unit -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.TrueLiteralExpression " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ TrueLiteralExpression();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates an expression that denotes the boolean true literal.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCastExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode TryCastExpression (Microsoft.CodeAnalysis.SyntaxNode expression, Microsoft.CodeAnalysis.ITypeSymbol type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode TryCastExpression(class Microsoft.CodeAnalysis.SyntaxNode expression, class Microsoft.CodeAnalysis.ITypeSymbol type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCastExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ITypeSymbol)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCastExpression (expression As SyntaxNode, type As ITypeSymbol) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.TryCastExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.ITypeSymbol -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.TryCastExpression (expression, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ TryCastExpression(Microsoft::CodeAnalysis::SyntaxNode ^ expression, Microsoft::CodeAnalysis::ITypeSymbol ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="type">To be added.</param>
        <summary>
            Creates an expression that denotes an try-cast operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCastExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode TryCastExpression (Microsoft.CodeAnalysis.SyntaxNode expression, Microsoft.CodeAnalysis.SyntaxNode type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode TryCastExpression(class Microsoft.CodeAnalysis.SyntaxNode expression, class Microsoft.CodeAnalysis.SyntaxNode type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCastExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TryCastExpression (expression As SyntaxNode, type As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member TryCastExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.TryCastExpression (expression, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ TryCastExpression(Microsoft::CodeAnalysis::SyntaxNode ^ expression, Microsoft::CodeAnalysis::SyntaxNode ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="type">To be added.</param>
        <summary>
            Creates an expression that denotes an try-cast operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatchStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode TryCatchStatement (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; tryStatements, params Microsoft.CodeAnalysis.SyntaxNode[] catchClauses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode TryCatchStatement(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; tryStatements, class Microsoft.CodeAnalysis.SyntaxNode[] catchClauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCatchStatement(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCatchStatement (tryStatements As IEnumerable(Of SyntaxNode), ParamArray catchClauses As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.TryCatchStatement : seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.TryCatchStatement (tryStatements, catchClauses)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ TryCatchStatement(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ tryStatements, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ catchClauses);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tryStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="catchClauses" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tryStatements">To be added.</param>
        <param name="catchClauses">To be added.</param>
        <summary>
            Creates a try-catch or try-catch-finally statement.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatchStatement">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode TryCatchStatement (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; tryStatements, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; catchClauses, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; finallyStatements = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode TryCatchStatement(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; tryStatements, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; catchClauses, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; finallyStatements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryCatchStatement(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TryCatchStatement (tryStatements As IEnumerable(Of SyntaxNode), catchClauses As IEnumerable(Of SyntaxNode), Optional finallyStatements As IEnumerable(Of SyntaxNode) = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member TryCatchStatement : seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.TryCatchStatement (tryStatements, catchClauses, finallyStatements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tryStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="catchClauses" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="finallyStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="tryStatements">To be added.</param>
        <param name="catchClauses">To be added.</param>
        <param name="finallyStatements">To be added.</param>
        <summary>
            Creates a try-catch or try-catch-finally statement.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFinallyStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode TryFinallyStatement (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; tryStatements, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; finallyStatements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode TryFinallyStatement(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; tryStatements, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; finallyStatements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TryFinallyStatement(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFinallyStatement (tryStatements As IEnumerable(Of SyntaxNode), finallyStatements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.TryFinallyStatement : seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.TryFinallyStatement (tryStatements, finallyStatements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ TryFinallyStatement(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ tryStatements, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ finallyStatements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tryStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="finallyStatements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="tryStatements">To be added.</param>
        <param name="finallyStatements">To be added.</param>
        <summary>
            Creates a try-finally statement.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TupleElementExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode TupleElementExpression (Microsoft.CodeAnalysis.ITypeSymbol type, string name = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode TupleElementExpression(class Microsoft.CodeAnalysis.ITypeSymbol type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TupleElementExpression(Microsoft.CodeAnalysis.ITypeSymbol,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TupleElementExpression (type As ITypeSymbol, Optional name As String = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.TupleElementExpression : Microsoft.CodeAnalysis.ITypeSymbol * string -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.TupleElementExpression (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="name">To be added.</param>
        <summary>
            Creates an expression that denotes a tuple element.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TupleElementExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode TupleElementExpression (Microsoft.CodeAnalysis.SyntaxNode type, string name = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode TupleElementExpression(class Microsoft.CodeAnalysis.SyntaxNode type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TupleElementExpression(Microsoft.CodeAnalysis.SyntaxNode,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TupleElementExpression (type As SyntaxNode, Optional name As String = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member TupleElementExpression : Microsoft.CodeAnalysis.SyntaxNode * string -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.TupleElementExpression (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="name">To be added.</param>
        <summary>
            Creates an expression that denotes a tuple element.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TupleExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode TupleExpression (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode TupleExpression(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TupleExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TupleExpression (arguments As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member TupleExpression : seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.TupleExpression arguments" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ TupleExpression(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="arguments">To be added.</param>
        <summary>
            Creates an tuple expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TupleTypeExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode TupleTypeExpression (params Microsoft.CodeAnalysis.SyntaxNode[] elements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode TupleTypeExpression(class Microsoft.CodeAnalysis.SyntaxNode[] elements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TupleTypeExpression(Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function TupleTypeExpression (ParamArray elements As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.TupleTypeExpression : Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.TupleTypeExpression elements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ TupleTypeExpression(... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ elements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elements" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="elements">To be added.</param>
        <summary>
            Creates an expression that denotes a tuple type.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TupleTypeExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode TupleTypeExpression (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; elements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode TupleTypeExpression(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; elements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TupleTypeExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function TupleTypeExpression (elements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.TupleTypeExpression : seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.TupleTypeExpression elements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ TupleTypeExpression(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ elements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="elements">To be added.</param>
        <summary>
            Creates an expression that denotes a tuple type.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TupleTypeExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode TupleTypeExpression (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.ITypeSymbol&gt; elementTypes, System.Collections.Generic.IEnumerable&lt;string&gt; elementNames = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode TupleTypeExpression(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.ITypeSymbol&gt; elementTypes, class System.Collections.Generic.IEnumerable`1&lt;string&gt; elementNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TupleTypeExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ITypeSymbol},System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function TupleTypeExpression (elementTypes As IEnumerable(Of ITypeSymbol), Optional elementNames As IEnumerable(Of String) = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.TupleTypeExpression : seq&lt;Microsoft.CodeAnalysis.ITypeSymbol&gt; * seq&lt;string&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.TupleTypeExpression (elementTypes, elementNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementTypes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.ITypeSymbol&gt;" />
        <Parameter Name="elementNames" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="elementTypes">To be added.</param>
        <param name="elementNames">To be added.</param>
        <summary>
            Creates an expression that denotes a tuple type.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypedConstantExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode TypedConstantExpression (Microsoft.CodeAnalysis.TypedConstant value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode TypedConstantExpression(valuetype Microsoft.CodeAnalysis.TypedConstant value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypedConstantExpression(Microsoft.CodeAnalysis.TypedConstant)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TypedConstantExpression (value As TypedConstant) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member TypedConstantExpression : Microsoft.CodeAnalysis.TypedConstant -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.TypedConstantExpression value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ TypedConstantExpression(Microsoft::CodeAnalysis::TypedConstant value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.TypedConstant" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
            Creates an expression for a typed constant.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode TypeExpression (Microsoft.CodeAnalysis.ITypeSymbol typeSymbol);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode TypeExpression(class Microsoft.CodeAnalysis.ITypeSymbol typeSymbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeExpression(Microsoft.CodeAnalysis.ITypeSymbol)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TypeExpression (typeSymbol As ITypeSymbol) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member TypeExpression : Microsoft.CodeAnalysis.ITypeSymbol -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.TypeExpression typeSymbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ TypeExpression(Microsoft::CodeAnalysis::ITypeSymbol ^ typeSymbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeSymbol" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
      </Parameters>
      <Docs>
        <param name="typeSymbol">To be added.</param>
        <summary>
            Creates an expression that denotes a type.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode TypeExpression (Microsoft.CodeAnalysis.SpecialType specialType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode TypeExpression(valuetype Microsoft.CodeAnalysis.SpecialType specialType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeExpression(Microsoft.CodeAnalysis.SpecialType)" />
      <MemberSignature Language="F#" Value="abstract member TypeExpression : Microsoft.CodeAnalysis.SpecialType -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.TypeExpression specialType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ TypeExpression(Microsoft::CodeAnalysis::SpecialType specialType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="specialType" Type="Microsoft.CodeAnalysis.SpecialType" />
      </Parameters>
      <Docs>
        <param name="specialType">To be added.</param>
        <summary>
            Creates an expression that denotes a special type name.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode TypeExpression (Microsoft.CodeAnalysis.ITypeSymbol typeSymbol, bool addImport);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode TypeExpression(class Microsoft.CodeAnalysis.ITypeSymbol typeSymbol, bool addImport) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeExpression(Microsoft.CodeAnalysis.ITypeSymbol,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeExpression (typeSymbol As ITypeSymbol, addImport As Boolean) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.TypeExpression : Microsoft.CodeAnalysis.ITypeSymbol * bool -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.TypeExpression (typeSymbol, addImport)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ TypeExpression(Microsoft::CodeAnalysis::ITypeSymbol ^ typeSymbol, bool addImport);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeSymbol" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
        <Parameter Name="addImport" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeSymbol">To be added.</param>
        <param name="addImport">To be added.</param>
        <summary>
            Creates an expression that denotes a type. If addImport is false,
            adds a <see cref="T:Microsoft.CodeAnalysis.Simplification.DoNotAddImportsAnnotation" /> which will prevent any
            imports or usings from being added for the type.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeOfExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode TypeOfExpression (Microsoft.CodeAnalysis.SyntaxNode type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode TypeOfExpression(class Microsoft.CodeAnalysis.SyntaxNode type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TypeOfExpression(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TypeOfExpression (type As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member TypeOfExpression : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.TypeOfExpression type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ TypeOfExpression(Microsoft::CodeAnalysis::SyntaxNode ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>
            Creates an expression that evaluates to the type at runtime.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingStatement">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode UsingStatement (Microsoft.CodeAnalysis.SyntaxNode expression, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode UsingStatement(class Microsoft.CodeAnalysis.SyntaxNode expression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function UsingStatement (expression As SyntaxNode, statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member UsingStatement : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.UsingStatement (expression, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ UsingStatement(Microsoft::CodeAnalysis::SyntaxNode ^ expression, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Creates a statement that represents a using-block pattern.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode UsingStatement (string name, Microsoft.CodeAnalysis.SyntaxNode expression, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode UsingStatement(string name, class Microsoft.CodeAnalysis.SyntaxNode expression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function UsingStatement (name As String, expression As SyntaxNode, statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.UsingStatement : string * Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.UsingStatement (name, expression, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ UsingStatement(System::String ^ name, Microsoft::CodeAnalysis::SyntaxNode ^ expression, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Creates a statement that represents a using-block pattern.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingStatement">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode UsingStatement (Microsoft.CodeAnalysis.SyntaxNode type, string name, Microsoft.CodeAnalysis.SyntaxNode expression, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode UsingStatement(class Microsoft.CodeAnalysis.SyntaxNode type, string name, class Microsoft.CodeAnalysis.SyntaxNode expression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.UsingStatement(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function UsingStatement (type As SyntaxNode, name As String, expression As SyntaxNode, statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member UsingStatement : Microsoft.CodeAnalysis.SyntaxNode * string * Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.UsingStatement (type, name, expression, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ UsingStatement(Microsoft::CodeAnalysis::SyntaxNode ^ type, System::String ^ name, Microsoft::CodeAnalysis::SyntaxNode ^ expression, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="name">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Creates a statement that represents a using-block pattern.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueEqualsExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ValueEqualsExpression (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ValueEqualsExpression(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ValueEqualsExpression (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ValueEqualsExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ValueEqualsExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ ValueEqualsExpression(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes a value-type equality test operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueNotEqualsExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ValueNotEqualsExpression (Microsoft.CodeAnalysis.SyntaxNode left, Microsoft.CodeAnalysis.SyntaxNode right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ValueNotEqualsExpression(class Microsoft.CodeAnalysis.SyntaxNode left, class Microsoft.CodeAnalysis.SyntaxNode right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueNotEqualsExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ValueNotEqualsExpression (left As SyntaxNode, right As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ValueNotEqualsExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ValueNotEqualsExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ ValueNotEqualsExpression(Microsoft::CodeAnalysis::SyntaxNode ^ left, Microsoft::CodeAnalysis::SyntaxNode ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>
            Creates an expression that denotes a value-type inequality test operation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueReturningLambdaExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode ValueReturningLambdaExpression (Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode ValueReturningLambdaExpression(class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueReturningLambdaExpression (expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.ValueReturningLambdaExpression : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ValueReturningLambdaExpression expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ ValueReturningLambdaExpression(Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
            Creates an expression that declares a zero parameter value returning lambda expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueReturningLambdaExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode ValueReturningLambdaExpression (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode ValueReturningLambdaExpression(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueReturningLambdaExpression (statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.ValueReturningLambdaExpression : seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ValueReturningLambdaExpression statements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ ValueReturningLambdaExpression(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="statements">To be added.</param>
        <summary>
            Creates an expression that declares a zero parameter value returning lambda expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueReturningLambdaExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ValueReturningLambdaExpression (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; lambdaParameters, Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ValueReturningLambdaExpression(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; lambdaParameters, class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ValueReturningLambdaExpression (lambdaParameters As IEnumerable(Of SyntaxNode), expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ValueReturningLambdaExpression : seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ValueReturningLambdaExpression (lambdaParameters, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ ValueReturningLambdaExpression(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ lambdaParameters, Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lambdaParameters" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="lambdaParameters">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>
            Creates an expression that declares a value returning lambda expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueReturningLambdaExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode ValueReturningLambdaExpression (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; lambdaParameters, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode ValueReturningLambdaExpression(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; lambdaParameters, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ValueReturningLambdaExpression (lambdaParameters As IEnumerable(Of SyntaxNode), statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member ValueReturningLambdaExpression : seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ValueReturningLambdaExpression (lambdaParameters, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ ValueReturningLambdaExpression(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ lambdaParameters, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lambdaParameters" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="lambdaParameters">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Creates an expression that declares a value returning lambda expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueReturningLambdaExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode ValueReturningLambdaExpression (string parameterName, Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode ValueReturningLambdaExpression(string parameterName, class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.String,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueReturningLambdaExpression (parameterName As String, expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.ValueReturningLambdaExpression : string * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ValueReturningLambdaExpression (parameterName, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ ValueReturningLambdaExpression(System::String ^ parameterName, Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="parameterName">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>
            Creates an expression that declares a single parameter value returning lambda expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueReturningLambdaExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode ValueReturningLambdaExpression (string parameterName, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode ValueReturningLambdaExpression(string parameterName, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.ValueReturningLambdaExpression(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueReturningLambdaExpression (parameterName As String, statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.ValueReturningLambdaExpression : string * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.ValueReturningLambdaExpression (parameterName, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ ValueReturningLambdaExpression(System::String ^ parameterName, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="parameterName">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Creates an expression that declares a single parameter value returning lambda expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VoidReturningLambdaExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode VoidReturningLambdaExpression (Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode VoidReturningLambdaExpression(class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function VoidReturningLambdaExpression (expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.VoidReturningLambdaExpression : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.VoidReturningLambdaExpression expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ VoidReturningLambdaExpression(Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
            Creates an expression that declares a zero parameter void returning lambda expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VoidReturningLambdaExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode VoidReturningLambdaExpression (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode VoidReturningLambdaExpression(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function VoidReturningLambdaExpression (statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.VoidReturningLambdaExpression : seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.VoidReturningLambdaExpression statements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ VoidReturningLambdaExpression(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="statements">To be added.</param>
        <summary>
            Creates an expression that declares a zero parameter void returning lambda expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VoidReturningLambdaExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode VoidReturningLambdaExpression (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; lambdaParameters, Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode VoidReturningLambdaExpression(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; lambdaParameters, class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function VoidReturningLambdaExpression (lambdaParameters As IEnumerable(Of SyntaxNode), expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member VoidReturningLambdaExpression : seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.VoidReturningLambdaExpression (lambdaParameters, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ VoidReturningLambdaExpression(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ lambdaParameters, Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lambdaParameters" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="lambdaParameters">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>
            Creates an expression that declares a void returning lambda expression
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VoidReturningLambdaExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode VoidReturningLambdaExpression (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; lambdaParameters, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode VoidReturningLambdaExpression(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; lambdaParameters, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function VoidReturningLambdaExpression (lambdaParameters As IEnumerable(Of SyntaxNode), statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member VoidReturningLambdaExpression : seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.VoidReturningLambdaExpression (lambdaParameters, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ VoidReturningLambdaExpression(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ lambdaParameters, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lambdaParameters" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="lambdaParameters">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Creates an expression that declares a void returning lambda expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VoidReturningLambdaExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode VoidReturningLambdaExpression (string parameterName, Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode VoidReturningLambdaExpression(string parameterName, class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.String,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function VoidReturningLambdaExpression (parameterName As String, expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.VoidReturningLambdaExpression : string * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.VoidReturningLambdaExpression (parameterName, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ VoidReturningLambdaExpression(System::String ^ parameterName, Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="parameterName">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>
            Creates an expression that declares a single parameter void returning lambda expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VoidReturningLambdaExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode VoidReturningLambdaExpression (string parameterName, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode VoidReturningLambdaExpression(string parameterName, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.VoidReturningLambdaExpression(System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Function VoidReturningLambdaExpression (parameterName As String, statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.VoidReturningLambdaExpression : string * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.VoidReturningLambdaExpression (parameterName, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ VoidReturningLambdaExpression(System::String ^ parameterName, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="parameterName">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Creates an expression that declares a single parameter void returning lambda expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhileStatement">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode WhileStatement (Microsoft.CodeAnalysis.SyntaxNode condition, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode WhileStatement(class Microsoft.CodeAnalysis.SyntaxNode condition, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WhileStatement(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WhileStatement (condition As SyntaxNode, statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member WhileStatement : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.WhileStatement (condition, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ WhileStatement(Microsoft::CodeAnalysis::SyntaxNode ^ condition, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="condition">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Creates a while-loop statement
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAccessibility">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode WithAccessibility (Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.Accessibility accessibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode WithAccessibility(class Microsoft.CodeAnalysis.SyntaxNode declaration, valuetype Microsoft.CodeAnalysis.Accessibility accessibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithAccessibility(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Accessibility)" />
      <MemberSignature Language="F#" Value="abstract member WithAccessibility : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.Accessibility -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.WithAccessibility (declaration, accessibility)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ WithAccessibility(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, Microsoft::CodeAnalysis::Accessibility accessibility);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="accessibility" Type="Microsoft.CodeAnalysis.Accessibility" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="accessibility">To be added.</param>
        <summary>
            Changes the accessibility of the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAccessorDeclarations">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode WithAccessorDeclarations (Microsoft.CodeAnalysis.SyntaxNode declaration, params Microsoft.CodeAnalysis.SyntaxNode[] accessorDeclarations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode WithAccessorDeclarations(class Microsoft.CodeAnalysis.SyntaxNode declaration, class Microsoft.CodeAnalysis.SyntaxNode[] accessorDeclarations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithAccessorDeclarations(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WithAccessorDeclarations (declaration As SyntaxNode, ParamArray accessorDeclarations As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.WithAccessorDeclarations : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.WithAccessorDeclarations (declaration, accessorDeclarations)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ WithAccessorDeclarations(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ accessorDeclarations);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="accessorDeclarations" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="accessorDeclarations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAccessorDeclarations">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode WithAccessorDeclarations (Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; accessorDeclarations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode WithAccessorDeclarations(class Microsoft.CodeAnalysis.SyntaxNode declaration, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; accessorDeclarations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithAccessorDeclarations(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WithAccessorDeclarations (declaration As SyntaxNode, accessorDeclarations As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member WithAccessorDeclarations : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.WithAccessorDeclarations (declaration, accessorDeclarations)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ WithAccessorDeclarations(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ accessorDeclarations);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="accessorDeclarations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="accessorDeclarations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithExpression">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode WithExpression (Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode WithExpression(class Microsoft.CodeAnalysis.SyntaxNode declaration, class Microsoft.CodeAnalysis.SyntaxNode expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithExpression(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WithExpression (declaration As SyntaxNode, expression As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member WithExpression : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.WithExpression (declaration, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ WithExpression(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, Microsoft::CodeAnalysis::SyntaxNode ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>
            Changes the expression associated with the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithGetAccessorStatements">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode WithGetAccessorStatements (Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode WithGetAccessorStatements(class Microsoft.CodeAnalysis.SyntaxNode declaration, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithGetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WithGetAccessorStatements (declaration As SyntaxNode, statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member WithGetAccessorStatements : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.WithGetAccessorStatements (declaration, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ WithGetAccessorStatements(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Changes the statements for the body of the get-accessor of the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithModifiers">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode WithModifiers (Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode WithModifiers(class Microsoft.CodeAnalysis.SyntaxNode declaration, valuetype Microsoft.CodeAnalysis.Editing.DeclarationModifiers modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithModifiers(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.DeclarationModifiers)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WithModifiers (declaration As SyntaxNode, modifiers As DeclarationModifiers) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member WithModifiers : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.Editing.DeclarationModifiers -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.WithModifiers (declaration, modifiers)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ WithModifiers(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, Microsoft::CodeAnalysis::Editing::DeclarationModifiers modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.Editing.DeclarationModifiers" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>
            Changes the <see cref="T:Microsoft.CodeAnalysis.Editing.DeclarationModifiers" /> for the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithName">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode WithName (Microsoft.CodeAnalysis.SyntaxNode declaration, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode WithName(class Microsoft.CodeAnalysis.SyntaxNode declaration, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithName(Microsoft.CodeAnalysis.SyntaxNode,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WithName (declaration As SyntaxNode, name As String) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member WithName : Microsoft.CodeAnalysis.SyntaxNode * string -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.WithName (declaration, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ WithName(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="name">To be added.</param>
        <summary>
            Changes the name of the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithSetAccessorStatements">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode WithSetAccessorStatements (Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode WithSetAccessorStatements(class Microsoft.CodeAnalysis.SyntaxNode declaration, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithSetAccessorStatements(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WithSetAccessorStatements (declaration As SyntaxNode, statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member WithSetAccessorStatements : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.WithSetAccessorStatements (declaration, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ WithSetAccessorStatements(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Changes the statements for the body of the set-accessor of the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithStatements">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode WithStatements (Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode WithStatements(class Microsoft.CodeAnalysis.SyntaxNode declaration, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithStatements(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WithStatements (declaration As SyntaxNode, statements As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member WithStatements : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.WithStatements (declaration, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ WithStatements(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>
            Changes the statements for the body of the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithType">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode WithType (Microsoft.CodeAnalysis.SyntaxNode declaration, Microsoft.CodeAnalysis.SyntaxNode type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode WithType(class Microsoft.CodeAnalysis.SyntaxNode declaration, class Microsoft.CodeAnalysis.SyntaxNode type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithType(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WithType (declaration As SyntaxNode, type As SyntaxNode) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member WithType : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.WithType (declaration, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ WithType(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, Microsoft::CodeAnalysis::SyntaxNode ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="type">To be added.</param>
        <summary>
            Changes the type of the declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTypeArguments">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode WithTypeArguments (Microsoft.CodeAnalysis.SyntaxNode expression, params Microsoft.CodeAnalysis.SyntaxNode[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode WithTypeArguments(class Microsoft.CodeAnalysis.SyntaxNode expression, class Microsoft.CodeAnalysis.SyntaxNode[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeArguments(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WithTypeArguments (expression As SyntaxNode, ParamArray typeArguments As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.WithTypeArguments : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.WithTypeArguments (expression, typeArguments)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ WithTypeArguments(Microsoft::CodeAnalysis::SyntaxNode ^ expression, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ typeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="typeArguments" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="typeArguments">To be added.</param>
        <summary>
            Converts an expression that ends in a name into an expression that ends in a generic name.
            If the expression already ends in a generic name, the new type arguments are used instead.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTypeArguments">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode WithTypeArguments (Microsoft.CodeAnalysis.SyntaxNode expression, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode WithTypeArguments(class Microsoft.CodeAnalysis.SyntaxNode expression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeArguments(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WithTypeArguments (expression As SyntaxNode, typeArguments As IEnumerable(Of SyntaxNode)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member WithTypeArguments : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.WithTypeArguments (expression, typeArguments)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ WithTypeArguments(Microsoft::CodeAnalysis::SyntaxNode ^ expression, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ typeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="typeArguments" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="typeArguments">To be added.</param>
        <summary>
            Converts an expression that ends in a name into an expression that ends in a generic name.
            If the expression already ends in a generic name, the new type arguments are used instead.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTypeConstraint">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode WithTypeConstraint (Microsoft.CodeAnalysis.SyntaxNode declaration, string typeParameterName, params Microsoft.CodeAnalysis.SyntaxNode[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode WithTypeConstraint(class Microsoft.CodeAnalysis.SyntaxNode declaration, string typeParameterName, class Microsoft.CodeAnalysis.SyntaxNode[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WithTypeConstraint (declaration As SyntaxNode, typeParameterName As String, ParamArray types As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.WithTypeConstraint : Microsoft.CodeAnalysis.SyntaxNode * string * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.WithTypeConstraint (declaration, typeParameterName, types)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ WithTypeConstraint(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, System::String ^ typeParameterName, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ types);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="typeParameterName" Type="System.String" />
        <Parameter Name="types" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="typeParameterName">To be added.</param>
        <param name="types">To be added.</param>
        <summary>
            Adds a type constraint to a type parameter of a declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTypeConstraint">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode WithTypeConstraint (Microsoft.CodeAnalysis.SyntaxNode declaration, string typeParameterName, Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind kinds, params Microsoft.CodeAnalysis.SyntaxNode[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode WithTypeConstraint(class Microsoft.CodeAnalysis.SyntaxNode declaration, string typeParameterName, valuetype Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind kinds, class Microsoft.CodeAnalysis.SyntaxNode[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind,Microsoft.CodeAnalysis.SyntaxNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WithTypeConstraint (declaration As SyntaxNode, typeParameterName As String, kinds As SpecialTypeConstraintKind, ParamArray types As SyntaxNode()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.WithTypeConstraint : Microsoft.CodeAnalysis.SyntaxNode * string * Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind * Microsoft.CodeAnalysis.SyntaxNode[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.WithTypeConstraint (declaration, typeParameterName, kinds, types)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ WithTypeConstraint(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, System::String ^ typeParameterName, Microsoft::CodeAnalysis::Editing::SpecialTypeConstraintKind kinds, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ types);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="typeParameterName" Type="System.String" />
        <Parameter Name="kinds" Type="Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind" />
        <Parameter Name="types" Type="Microsoft.CodeAnalysis.SyntaxNode[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="typeParameterName">To be added.</param>
        <param name="kinds">To be added.</param>
        <param name="types">To be added.</param>
        <summary>
            Adds a type constraint to a type parameter of a declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTypeConstraint">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode WithTypeConstraint (Microsoft.CodeAnalysis.SyntaxNode declaration, string typeParameterName, Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind kinds, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; types = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode WithTypeConstraint(class Microsoft.CodeAnalysis.SyntaxNode declaration, string typeParameterName, valuetype Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind kinds, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeConstraint(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WithTypeConstraint (declaration As SyntaxNode, typeParameterName As String, kinds As SpecialTypeConstraintKind, Optional types As IEnumerable(Of SyntaxNode) = null) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member WithTypeConstraint : Microsoft.CodeAnalysis.SyntaxNode * string * Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.WithTypeConstraint (declaration, typeParameterName, kinds, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="typeParameterName" Type="System.String" />
        <Parameter Name="kinds" Type="Microsoft.CodeAnalysis.Editing.SpecialTypeConstraintKind" />
        <Parameter Name="types" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="typeParameterName">To be added.</param>
        <param name="kinds">To be added.</param>
        <param name="types">To be added.</param>
        <summary>
            Adds a type constraint to a type parameter of a declaration.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTypeParameters">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxNode WithTypeParameters (Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable&lt;string&gt; typeParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.SyntaxNode WithTypeParameters(class Microsoft.CodeAnalysis.SyntaxNode declaration, class System.Collections.Generic.IEnumerable`1&lt;string&gt; typeParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeParameters(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WithTypeParameters (declaration As SyntaxNode, typeParameters As IEnumerable(Of String)) As SyntaxNode" />
      <MemberSignature Language="F#" Value="abstract member WithTypeParameters : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;string&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.WithTypeParameters (declaration, typeParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::SyntaxNode ^ WithTypeParameters(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ typeParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="typeParameters" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="typeParameters">To be added.</param>
        <summary>
            Converts a declaration (method, class, etc) into a declaration with type parameters.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTypeParameters">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode WithTypeParameters (Microsoft.CodeAnalysis.SyntaxNode declaration, params string[] typeParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode WithTypeParameters(class Microsoft.CodeAnalysis.SyntaxNode declaration, string[] typeParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithTypeParameters(Microsoft.CodeAnalysis.SyntaxNode,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WithTypeParameters (declaration As SyntaxNode, ParamArray typeParameters As String()) As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.WithTypeParameters : Microsoft.CodeAnalysis.SyntaxNode * string[] -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxGenerator.WithTypeParameters (declaration, typeParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ WithTypeParameters(Microsoft::CodeAnalysis::SyntaxNode ^ declaration, ... cli::array &lt;System::String ^&gt; ^ typeParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="typeParameters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="typeParameters">To be added.</param>
        <summary>
            Converts a declaration (method, class, etc) into a declaration with type parameters.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>