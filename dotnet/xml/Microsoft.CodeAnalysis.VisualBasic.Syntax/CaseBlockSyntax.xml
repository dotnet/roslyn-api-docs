<Type Name="CaseBlockSyntax" FullName="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax">
  <TypeSignature Language="C#" Value="public sealed class CaseBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CaseBlockSyntax extends Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CaseBlockSyntax&#xA;Inherits VisualBasicSyntaxNode" />
  <TypeSignature Language="F#" Value="type CaseBlockSyntax = class&#xA;    inherit VisualBasicSyntaxNode" />
  <TypeSignature Language="C++ CLI" Value="public ref class CaseBlockSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxNode" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
 Represents a case statement and its subsequent block.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public override void Accept (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Accept(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax.Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Accept (visitor As VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor -&gt; unit" Usage="caseBlockSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor ^ visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public override TResult Accept&lt;TResult&gt; (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt; visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!TResult Accept&lt;TResult&gt;(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor`1&lt;!!TResult&gt; visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax.Accept``1(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Accept(Of TResult) (visitor As VisualBasicSyntaxVisitor(Of TResult)) As TResult" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;'Result&gt; -&gt; 'Result" Usage="caseBlockSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor&lt;TResult&gt; ^ visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddBeginCases">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax AddBeginCases (params Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax AddBeginCases(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax.AddBeginCases(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddBeginCases (ParamArray items As CaseClauseSyntax()) As CaseBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.AddBeginCases : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax" Usage="caseBlockSyntax.AddBeginCases items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseBlockSyntax ^ AddBeginCases(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseClauseSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This member is obsolete. Use AddCaseStatementCases instead.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCaseStatementCases">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax AddCaseStatementCases (params Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax AddCaseStatementCases(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax.AddCaseStatementCases(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddCaseStatementCases (ParamArray items As CaseClauseSyntax()) As CaseBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.AddCaseStatementCases : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax" Usage="caseBlockSyntax.AddCaseStatementCases items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseBlockSyntax ^ AddCaseStatementCases(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseClauseSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddStatements">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax AddStatements (params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax AddStatements(class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax.AddStatements(Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddStatements (ParamArray items As StatementSyntax()) As CaseBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.AddStatements : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax" Usage="caseBlockSyntax.AddStatements items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseBlockSyntax ^ AddStatements(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax Begin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax Begin" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax.Begin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Begin As CaseStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.Begin : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax.Begin" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ Begin { Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This member is obsolete. Use CaseStatement instead.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax.CaseStatement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CaseStatement As CaseStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.CaseStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax.CaseStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ CaseStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The statement that begins the case block.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Statements">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; Statements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; Statements" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax.Statements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Statements As SyntaxList(Of StatementSyntax)" />
      <MemberSignature Language="F#" Value="member this.Statements : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax.Statements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; Statements { Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The statements contained in the case block. This might be an empty list.
 </summary>
        <value>To be added.</value>
        <remarks>
 If nothing is present, an empty list is returned.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax Update (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax Update(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax.Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (kind As SyntaxKind, caseStatement As CaseStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As CaseBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.Update : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax" Usage="caseBlockSyntax.Update (kind, caseStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseBlockSyntax ^ Update(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ caseStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="caseStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="kind">
 The new kind.
 </param>
        <param name="caseStatement">
 The value for the CaseStatement property.
 </param>
        <param name="statements">
 The value for the Statements property.
 </param>
        <summary>
 Returns a copy of this with the specified changes. Returns this instance if
 there are no actual changes.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithBegin">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax WithBegin (Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax begin);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax WithBegin(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax begin) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax.WithBegin(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithBegin (begin As CaseStatementSyntax) As CaseBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.WithBegin : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax" Usage="caseBlockSyntax.WithBegin begin" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseBlockSyntax ^ WithBegin(Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ begin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This member is obsolete. Use WithCaseStatement instead.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="begin" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="begin">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithCaseStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax WithCaseStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax WithCaseStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax.WithCaseStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithCaseStatement (caseStatement As CaseStatementSyntax) As CaseBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.WithCaseStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax" Usage="caseBlockSyntax.WithCaseStatement caseStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseBlockSyntax ^ WithCaseStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ caseStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caseStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="caseStatement">To be added.</param>
        <summary>
 Returns a copy of this with the CaseStatement property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithStatements">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax WithStatements (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax WithStatements(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax.WithStatements(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithStatements (statements As SyntaxList(Of StatementSyntax)) As CaseBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.WithStatements : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax" Usage="caseBlockSyntax.WithStatements statements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseBlockSyntax ^ WithStatements(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="statements">To be added.</param>
        <summary>
 Returns a copy of this with the Statements property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>