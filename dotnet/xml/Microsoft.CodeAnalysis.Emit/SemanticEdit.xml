<Type Name="SemanticEdit" FullName="Microsoft.CodeAnalysis.Emit.SemanticEdit">
  <TypeSignature Language="C++ CLI" Value="public value class SemanticEdit : IEquatable&lt;Microsoft::CodeAnalysis::Emit::SemanticEdit&gt;" />
  <TypeSignature Language="C#" Value="public struct SemanticEdit : IEquatable&lt;Microsoft.CodeAnalysis.Emit.SemanticEdit&gt;" FrameworkAlternate="roslyn-dotnet-3.0;roslyn-dotnet-3.1;roslyn-dotnet-3.10.0;roslyn-dotnet-3.11.0;roslyn-dotnet-3.2;roslyn-dotnet-3.2.1;roslyn-dotnet-3.3.1;roslyn-dotnet-3.4.0;roslyn-dotnet-3.5.0;roslyn-dotnet-3.6.0;roslyn-dotnet-3.7.0;roslyn-dotnet-3.8.0;roslyn-dotnet-3.9.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SemanticEdit extends System.ValueType implements class System.IEquatable`1&lt;valuetype Microsoft.CodeAnalysis.Emit.SemanticEdit&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Emit.SemanticEdit" />
  <TypeSignature Language="VB.NET" Value="Public Structure SemanticEdit&#xA;Implements IEquatable(Of SemanticEdit)" />
  <TypeSignature Language="F#" Value="type SemanticEdit = struct" />
  <TypeSignature Language="C#" Value="public readonly struct SemanticEdit : IEquatable&lt;Microsoft.CodeAnalysis.Emit.SemanticEdit&gt;" FrameworkAlternate="roslyn-dotnet-4.0.1;roslyn-dotnet-4.1.0;roslyn-dotnet-4.2.0;roslyn-dotnet-4.3.0;roslyn-dotnet-4.4.0;roslyn-dotnet-4.5.0;roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0;roslyn-dotnet-4.9.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>3.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.3.0.0</AssemblyVersion>
    <AssemblyVersion>3.4.0.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>3.6.0.0</AssemblyVersion>
    <AssemblyVersion>3.7.0.0</AssemblyVersion>
    <AssemblyVersion>3.8.0.0</AssemblyVersion>
    <AssemblyVersion>3.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.10.0.0</AssemblyVersion>
    <AssemblyVersion>3.11.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.0.0</AssemblyVersion>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
    <AssemblyVersion>4.8.0.0</AssemblyVersion>
    <AssemblyVersion>4.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Microsoft.CodeAnalysis.Emit.SemanticEdit&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Describes a symbol edit between two compilations. 
            For example, an addition of a method, an update of a method, removal of a type, etc.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticEdit (Microsoft.CodeAnalysis.Emit.SemanticEditKind kind, Microsoft.CodeAnalysis.ISymbol oldSymbol, Microsoft.CodeAnalysis.ISymbol newSymbol, Func&lt;Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode&gt; syntaxMap = default, bool preserveLocalVariables = false);" FrameworkAlternate="roslyn-dotnet-3.0;roslyn-dotnet-3.1;roslyn-dotnet-3.2;roslyn-dotnet-3.2.1;roslyn-dotnet-3.3.1;roslyn-dotnet-3.4.0;roslyn-dotnet-3.5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Microsoft.CodeAnalysis.Emit.SemanticEditKind kind, class Microsoft.CodeAnalysis.ISymbol oldSymbol, class Microsoft.CodeAnalysis.ISymbol newSymbol, class System.Func`2&lt;class Microsoft.CodeAnalysis.SyntaxNode, class Microsoft.CodeAnalysis.SyntaxNode&gt; syntaxMap, bool preserveLocalVariables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Emit.SemanticEdit.#ctor(Microsoft.CodeAnalysis.Emit.SemanticEditKind,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (kind As SemanticEditKind, oldSymbol As ISymbol, newSymbol As ISymbol, Optional syntaxMap As Func(Of SyntaxNode, SyntaxNode) = Nothing, Optional preserveLocalVariables As Boolean = false)" FrameworkAlternate="roslyn-dotnet-3.0;roslyn-dotnet-3.1;roslyn-dotnet-3.10.0;roslyn-dotnet-3.11.0;roslyn-dotnet-3.2;roslyn-dotnet-3.2.1;roslyn-dotnet-3.3.1;roslyn-dotnet-3.4.0;roslyn-dotnet-3.5.0;roslyn-dotnet-3.6.0;roslyn-dotnet-3.7.0;roslyn-dotnet-3.8.0;roslyn-dotnet-3.9.0;roslyn-dotnet-4.0.1;roslyn-dotnet-4.1.0;roslyn-dotnet-4.2.0;roslyn-dotnet-4.3.0;roslyn-dotnet-4.4.0;roslyn-dotnet-4.5.0" />
      <MemberSignature Language="F#" Value="new Microsoft.CodeAnalysis.Emit.SemanticEdit : Microsoft.CodeAnalysis.Emit.SemanticEditKind * Microsoft.CodeAnalysis.ISymbol * Microsoft.CodeAnalysis.ISymbol * Func&lt;Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode&gt; * bool -&gt; Microsoft.CodeAnalysis.Emit.SemanticEdit" Usage="new Microsoft.CodeAnalysis.Emit.SemanticEdit (kind, oldSymbol, newSymbol, syntaxMap, preserveLocalVariables)" />
      <MemberSignature Language="C#" Value="public SemanticEdit (Microsoft.CodeAnalysis.Emit.SemanticEditKind kind, Microsoft.CodeAnalysis.ISymbol? oldSymbol, Microsoft.CodeAnalysis.ISymbol? newSymbol, Func&lt;Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode?&gt;? syntaxMap = default, bool preserveLocalVariables = false);" FrameworkAlternate="roslyn-dotnet-3.10.0;roslyn-dotnet-3.11.0;roslyn-dotnet-3.6.0;roslyn-dotnet-3.7.0;roslyn-dotnet-3.8.0;roslyn-dotnet-3.9.0;roslyn-dotnet-4.0.1;roslyn-dotnet-4.1.0;roslyn-dotnet-4.2.0;roslyn-dotnet-4.3.0;roslyn-dotnet-4.4.0;roslyn-dotnet-4.5.0" />
      <MemberSignature Language="C#" Value="public SemanticEdit (Microsoft.CodeAnalysis.Emit.SemanticEditKind kind, Microsoft.CodeAnalysis.ISymbol? oldSymbol, Microsoft.CodeAnalysis.ISymbol? newSymbol, Func&lt;Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode?&gt;? syntaxMap, bool preserveLocalVariables);" FrameworkAlternate="roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0;roslyn-dotnet-4.9.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (kind As SemanticEditKind, oldSymbol As ISymbol, newSymbol As ISymbol, syntaxMap As Func(Of SyntaxNode, SyntaxNode), preserveLocalVariables As Boolean)" FrameworkAlternate="roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0;roslyn-dotnet-4.9.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.3.0.0</AssemblyVersion>
        <AssemblyVersion>3.4.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.10.0.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0;roslyn-dotnet-4.9.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="roslyn-dotnet-4.9.0">
          <AttributeName Language="C#">[System.Obsolete("Use other overload")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use other overload")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.Emit.SemanticEditKind" />
        <Parameter Name="oldSymbol" Type="Microsoft.CodeAnalysis.ISymbol" />
        <Parameter Name="newSymbol" Type="Microsoft.CodeAnalysis.ISymbol" />
        <Parameter Name="syntaxMap" Type="System.Func&lt;Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode&gt;" />
        <Parameter Name="preserveLocalVariables" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="kind">The type of edit.</param>
        <param name="oldSymbol">
            The symbol from the earlier compilation, or null if the edit represents an addition.
            </param>
        <param name="newSymbol">
            The symbol from the later compilation, or null if the edit represents a deletion.
            </param>
        <param name="syntaxMap">
            A map from syntax node in the later compilation to syntax node in the previous compilation, 
            or null if <paramref name="preserveLocalVariables" /> is false and the map is not needed or 
            the source of the current method is the same as the source of the previous method.
            </param>
        <param name="preserveLocalVariables">
            True if the edit is an update of an active method and local values should be preserved; false otherwise.
            </param>
        <summary>
            Initializes an instance of <see cref="T:Microsoft.CodeAnalysis.Emit.SemanticEdit" />.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="oldSymbol" /> or <paramref name="newSymbol" /> is null and the edit isn't a <see cref="F:Microsoft.CodeAnalysis.Emit.SemanticEditKind.Insert" /> or <see cref="F:Microsoft.CodeAnalysis.Emit.SemanticEditKind.Delete" />, respectively.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="kind" /> is not a valid kind.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticEdit (Microsoft.CodeAnalysis.Emit.SemanticEditKind kind, Microsoft.CodeAnalysis.ISymbol? oldSymbol, Microsoft.CodeAnalysis.ISymbol? newSymbol, Func&lt;Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode?&gt;? syntaxMap = default, bool preserveLocalVariables = false, Microsoft.CodeAnalysis.Emit.MethodInstrumentation instrumentation = default);" FrameworkAlternate="roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Microsoft.CodeAnalysis.Emit.SemanticEditKind kind, class Microsoft.CodeAnalysis.ISymbol oldSymbol, class Microsoft.CodeAnalysis.ISymbol newSymbol, class System.Func`2&lt;class Microsoft.CodeAnalysis.SyntaxNode, class Microsoft.CodeAnalysis.SyntaxNode&gt; syntaxMap, bool preserveLocalVariables, valuetype Microsoft.CodeAnalysis.Emit.MethodInstrumentation instrumentation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Emit.SemanticEdit.#ctor(Microsoft.CodeAnalysis.Emit.SemanticEditKind,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Boolean,Microsoft.CodeAnalysis.Emit.MethodInstrumentation)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (kind As SemanticEditKind, oldSymbol As ISymbol, newSymbol As ISymbol, Optional syntaxMap As Func(Of SyntaxNode, SyntaxNode) = Nothing, Optional preserveLocalVariables As Boolean = false, Optional instrumentation As MethodInstrumentation = Nothing)" FrameworkAlternate="roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0" />
      <MemberSignature Language="F#" Value="new Microsoft.CodeAnalysis.Emit.SemanticEdit : Microsoft.CodeAnalysis.Emit.SemanticEditKind * Microsoft.CodeAnalysis.ISymbol * Microsoft.CodeAnalysis.ISymbol * Func&lt;Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode&gt; * bool * Microsoft.CodeAnalysis.Emit.MethodInstrumentation -&gt; Microsoft.CodeAnalysis.Emit.SemanticEdit" Usage="new Microsoft.CodeAnalysis.Emit.SemanticEdit (kind, oldSymbol, newSymbol, syntaxMap, preserveLocalVariables, instrumentation)" />
      <MemberSignature Language="C#" Value="public SemanticEdit (Microsoft.CodeAnalysis.Emit.SemanticEditKind kind, Microsoft.CodeAnalysis.ISymbol? oldSymbol, Microsoft.CodeAnalysis.ISymbol? newSymbol, Func&lt;Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode?&gt;? syntaxMap, bool preserveLocalVariables, Microsoft.CodeAnalysis.Emit.MethodInstrumentation instrumentation);" FrameworkAlternate="roslyn-dotnet-4.9.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (kind As SemanticEditKind, oldSymbol As ISymbol, newSymbol As ISymbol, syntaxMap As Func(Of SyntaxNode, SyntaxNode), preserveLocalVariables As Boolean, instrumentation As MethodInstrumentation)" FrameworkAlternate="roslyn-dotnet-4.9.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="roslyn-dotnet-4.9.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="roslyn-dotnet-4.9.0">
          <AttributeName Language="C#">[System.Obsolete("Use other overload")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use other overload")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.Emit.SemanticEditKind" Index="0" FrameworkAlternate="roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0;roslyn-dotnet-4.9.0" />
        <Parameter Name="oldSymbol" Type="Microsoft.CodeAnalysis.ISymbol" Index="1" FrameworkAlternate="roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0;roslyn-dotnet-4.9.0" />
        <Parameter Name="newSymbol" Type="Microsoft.CodeAnalysis.ISymbol" Index="2" FrameworkAlternate="roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0;roslyn-dotnet-4.9.0" />
        <Parameter Name="syntaxMap" Type="System.Func&lt;Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode&gt;" Index="3" FrameworkAlternate="roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0;roslyn-dotnet-4.9.0" />
        <Parameter Name="preserveLocalVariables" Type="System.Boolean" Index="4" FrameworkAlternate="roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0;roslyn-dotnet-4.9.0" />
        <Parameter Name="instrumentation" Type="Microsoft.CodeAnalysis.Emit.MethodInstrumentation" Index="5" FrameworkAlternate="roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0;roslyn-dotnet-4.9.0" />
      </Parameters>
      <Docs>
        <param name="kind">The type of edit.</param>
        <param name="oldSymbol">
            The symbol from the earlier compilation, or null if the edit represents an addition.
            </param>
        <param name="newSymbol">
            The symbol from the later compilation, or null if the edit represents a deletion.
            </param>
        <param name="syntaxMap">
            A map from syntax node in the later compilation to syntax node in the previous compilation, 
            or null if <paramref name="preserveLocalVariables" /> is false and the map is not needed or 
            the source of the current method is the same as the source of the previous method.
            </param>
        <param name="preserveLocalVariables">
            True if the edit is an update of an active method and local values should be preserved; false otherwise.
            </param>
        <param name="instrumentation">
            Instrumentation update to be applied to a method.
            </param>
        <summary>
            Initializes an instance of <see cref="T:Microsoft.CodeAnalysis.Emit.SemanticEdit" />.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="oldSymbol" /> or <paramref name="newSymbol" /> is null and the edit isn't a <see cref="F:Microsoft.CodeAnalysis.Emit.SemanticEditKind.Insert" /> or <see cref="F:Microsoft.CodeAnalysis.Emit.SemanticEditKind.Delete" />, respectively.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="kind" /> is not a valid kind.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticEdit (Microsoft.CodeAnalysis.Emit.SemanticEditKind kind, Microsoft.CodeAnalysis.ISymbol? oldSymbol, Microsoft.CodeAnalysis.ISymbol? newSymbol, Func&lt;Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode?&gt;? syntaxMap = default, Func&lt;Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Emit.RuntimeRudeEdit?&gt;? runtimeRudeEdit = default, Microsoft.CodeAnalysis.Emit.MethodInstrumentation instrumentation = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Microsoft.CodeAnalysis.Emit.SemanticEditKind kind, class Microsoft.CodeAnalysis.ISymbol oldSymbol, class Microsoft.CodeAnalysis.ISymbol newSymbol, class System.Func`2&lt;class Microsoft.CodeAnalysis.SyntaxNode, class Microsoft.CodeAnalysis.SyntaxNode&gt; syntaxMap, class System.Func`2&lt;class Microsoft.CodeAnalysis.SyntaxNode, valuetype System.Nullable`1&lt;valuetype Microsoft.CodeAnalysis.Emit.RuntimeRudeEdit&gt;&gt; runtimeRudeEdit, valuetype Microsoft.CodeAnalysis.Emit.MethodInstrumentation instrumentation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Emit.SemanticEdit.#ctor(Microsoft.CodeAnalysis.Emit.SemanticEditKind,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Nullable{Microsoft.CodeAnalysis.Emit.RuntimeRudeEdit}},Microsoft.CodeAnalysis.Emit.MethodInstrumentation)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (kind As SemanticEditKind, oldSymbol As ISymbol, newSymbol As ISymbol, Optional syntaxMap As Func(Of SyntaxNode, SyntaxNode) = Nothing, Optional runtimeRudeEdit As Func(Of SyntaxNode, Nullable(Of RuntimeRudeEdit)) = Nothing, Optional instrumentation As MethodInstrumentation = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.CodeAnalysis.Emit.SemanticEdit : Microsoft.CodeAnalysis.Emit.SemanticEditKind * Microsoft.CodeAnalysis.ISymbol * Microsoft.CodeAnalysis.ISymbol * Func&lt;Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode&gt; * Func&lt;Microsoft.CodeAnalysis.SyntaxNode, Nullable&lt;Microsoft.CodeAnalysis.Emit.RuntimeRudeEdit&gt;&gt; * Microsoft.CodeAnalysis.Emit.MethodInstrumentation -&gt; Microsoft.CodeAnalysis.Emit.SemanticEdit" Usage="new Microsoft.CodeAnalysis.Emit.SemanticEdit (kind, oldSymbol, newSymbol, syntaxMap, runtimeRudeEdit, instrumentation)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.Emit.SemanticEditKind" Index="0" FrameworkAlternate="roslyn-dotnet-4.9.0" />
        <Parameter Name="oldSymbol" Type="Microsoft.CodeAnalysis.ISymbol" Index="1" FrameworkAlternate="roslyn-dotnet-4.9.0" />
        <Parameter Name="newSymbol" Type="Microsoft.CodeAnalysis.ISymbol" Index="2" FrameworkAlternate="roslyn-dotnet-4.9.0" />
        <Parameter Name="syntaxMap" Type="System.Func&lt;Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode&gt;" Index="3" FrameworkAlternate="roslyn-dotnet-4.9.0" />
        <Parameter Name="runtimeRudeEdit" Type="System.Func&lt;Microsoft.CodeAnalysis.SyntaxNode,System.Nullable&lt;Microsoft.CodeAnalysis.Emit.RuntimeRudeEdit&gt;&gt;" Index="4" FrameworkAlternate="roslyn-dotnet-4.9.0" />
        <Parameter Name="instrumentation" Type="Microsoft.CodeAnalysis.Emit.MethodInstrumentation" Index="5" FrameworkAlternate="roslyn-dotnet-4.9.0" />
      </Parameters>
      <Docs>
        <param name="runtimeRudeEdit">To be added.</param>
        <param name="kind">The type of edit.</param>
        <param name="oldSymbol">
            The symbol from the earlier compilation, or null if the edit represents an addition.
            </param>
        <param name="newSymbol">
            The symbol from the later compilation, or the symbol of the containing type
            from the later compilation if <paramref name="kind" /> is <see cref="F:Microsoft.CodeAnalysis.Emit.SemanticEditKind.Delete" />.
            </param>
        <param name="syntaxMap">
            A map from syntax node in the later compilation to syntax node in the previous compilation,
            or null if the method state (locals, closures, etc.) doesn't need to be preserved.
            </param>
        <param name="instrumentation">
            Instrumentation update to be applied to a method.
            </param>
        <summary>
            Initializes an instance of <see cref="T:Microsoft.CodeAnalysis.Emit.SemanticEdit" />.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="oldSymbol" /> or <paramref name="newSymbol" /> is null and the edit isn't a <see cref="F:Microsoft.CodeAnalysis.Emit.SemanticEditKind.Insert" /> or <see cref="F:Microsoft.CodeAnalysis.Emit.SemanticEditKind.Delete" />, respectively.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="kind" /> is not a valid kind.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Microsoft::CodeAnalysis::Emit::SemanticEdit other);" />
      <MemberSignature Language="C#" Value="public bool Equals (Microsoft.CodeAnalysis.Emit.SemanticEdit other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype Microsoft.CodeAnalysis.Emit.SemanticEdit other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Emit.SemanticEdit.Equals(Microsoft.CodeAnalysis.Emit.SemanticEdit)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As SemanticEdit) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : Microsoft.CodeAnalysis.Emit.SemanticEdit -&gt; bool" Usage="semanticEdit.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.3.0.0</AssemblyVersion>
        <AssemblyVersion>3.4.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.10.0.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.CodeAnalysis.Emit.SemanticEdit" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>
          <see cref="T:Microsoft.CodeAnalysis.Emit.SemanticEdit" />s are considered equal if they are of the same <see cref="P:Microsoft.CodeAnalysis.Emit.SemanticEdit.Kind" /> and
            the corresponding <see cref="P:Microsoft.CodeAnalysis.Emit.SemanticEdit.OldSymbol" /> and <see cref="P:Microsoft.CodeAnalysis.Emit.SemanticEdit.NewSymbol" /> symbols are the same.
            The effects of edits that compare equal on the emitted metadata/IL are not necessarily the same.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" FrameworkAlternate="roslyn-dotnet-3.0;roslyn-dotnet-3.1;roslyn-dotnet-3.2;roslyn-dotnet-3.2.1;roslyn-dotnet-3.3.1;roslyn-dotnet-3.4.0;roslyn-dotnet-3.5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Emit.SemanticEdit.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="semanticEdit.Equals obj" />
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" FrameworkAlternate="roslyn-dotnet-3.10.0;roslyn-dotnet-3.11.0;roslyn-dotnet-3.6.0;roslyn-dotnet-3.7.0;roslyn-dotnet-3.8.0;roslyn-dotnet-3.9.0;roslyn-dotnet-4.0.1;roslyn-dotnet-4.1.0;roslyn-dotnet-4.2.0;roslyn-dotnet-4.3.0;roslyn-dotnet-4.4.0;roslyn-dotnet-4.5.0;roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0;roslyn-dotnet-4.9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.3.0.0</AssemblyVersion>
        <AssemblyVersion>3.4.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.10.0.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Emit.SemanticEdit.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="semanticEdit.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.3.0.0</AssemblyVersion>
        <AssemblyVersion>3.4.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.10.0.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Instrumentation">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Emit.MethodInstrumentation Instrumentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.Emit.MethodInstrumentation Instrumentation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Emit.SemanticEdit.Instrumentation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Instrumentation As MethodInstrumentation" />
      <MemberSignature Language="F#" Value="member this.Instrumentation : Microsoft.CodeAnalysis.Emit.MethodInstrumentation" Usage="Microsoft.CodeAnalysis.Emit.SemanticEdit.Instrumentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Emit.MethodInstrumentation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Instrumentation update to be applied to a method.
            If not empty, <see cref="P:Microsoft.CodeAnalysis.Emit.SemanticEdit.OldSymbol" /> and <see cref="P:Microsoft.CodeAnalysis.Emit.SemanticEdit.NewSymbol" /> must be non-null <see cref="T:Microsoft.CodeAnalysis.IMethodSymbol" />s, and
            <see cref="P:Microsoft.CodeAnalysis.Emit.SemanticEdit.Kind" /> must be <see cref="F:Microsoft.CodeAnalysis.Emit.SemanticEditKind.Update" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::Emit::SemanticEditKind Kind { Microsoft::CodeAnalysis::Emit::SemanticEditKind get(); };" />
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Emit.SemanticEditKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.Emit.SemanticEditKind Kind" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Emit.SemanticEdit.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As SemanticEditKind" />
      <MemberSignature Language="F#" Value="member this.Kind : Microsoft.CodeAnalysis.Emit.SemanticEditKind" Usage="Microsoft.CodeAnalysis.Emit.SemanticEdit.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.3.0.0</AssemblyVersion>
        <AssemblyVersion>3.4.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.10.0.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Emit.SemanticEditKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The type of edit.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewSymbol">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::ISymbol ^ NewSymbol { Microsoft::CodeAnalysis::ISymbol ^ get(); };" />
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.ISymbol NewSymbol { get; }" FrameworkAlternate="roslyn-dotnet-3.0;roslyn-dotnet-3.1;roslyn-dotnet-3.2;roslyn-dotnet-3.2.1;roslyn-dotnet-3.3.1;roslyn-dotnet-3.4.0;roslyn-dotnet-3.5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.ISymbol NewSymbol" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Emit.SemanticEdit.NewSymbol" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewSymbol As ISymbol" />
      <MemberSignature Language="F#" Value="member this.NewSymbol : Microsoft.CodeAnalysis.ISymbol" Usage="Microsoft.CodeAnalysis.Emit.SemanticEdit.NewSymbol" />
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.ISymbol? NewSymbol { get; }" FrameworkAlternate="roslyn-dotnet-3.10.0;roslyn-dotnet-3.11.0;roslyn-dotnet-3.6.0;roslyn-dotnet-3.7.0;roslyn-dotnet-3.8.0;roslyn-dotnet-3.9.0;roslyn-dotnet-4.0.1;roslyn-dotnet-4.1.0;roslyn-dotnet-4.2.0;roslyn-dotnet-4.3.0;roslyn-dotnet-4.4.0;roslyn-dotnet-4.5.0;roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0;roslyn-dotnet-4.9.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.3.0.0</AssemblyVersion>
        <AssemblyVersion>3.4.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.10.0.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ISymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The symbol from the later compilation, or the symbol of the containing type
            from the later compilation if the edit represents a deletion.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OldSymbol">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::ISymbol ^ OldSymbol { Microsoft::CodeAnalysis::ISymbol ^ get(); };" />
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.ISymbol OldSymbol { get; }" FrameworkAlternate="roslyn-dotnet-3.0;roslyn-dotnet-3.1;roslyn-dotnet-3.2;roslyn-dotnet-3.2.1;roslyn-dotnet-3.3.1;roslyn-dotnet-3.4.0;roslyn-dotnet-3.5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.ISymbol OldSymbol" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Emit.SemanticEdit.OldSymbol" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OldSymbol As ISymbol" />
      <MemberSignature Language="F#" Value="member this.OldSymbol : Microsoft.CodeAnalysis.ISymbol" Usage="Microsoft.CodeAnalysis.Emit.SemanticEdit.OldSymbol" />
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.ISymbol? OldSymbol { get; }" FrameworkAlternate="roslyn-dotnet-3.10.0;roslyn-dotnet-3.11.0;roslyn-dotnet-3.6.0;roslyn-dotnet-3.7.0;roslyn-dotnet-3.8.0;roslyn-dotnet-3.9.0;roslyn-dotnet-4.0.1;roslyn-dotnet-4.1.0;roslyn-dotnet-4.2.0;roslyn-dotnet-4.3.0;roslyn-dotnet-4.4.0;roslyn-dotnet-4.5.0;roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0;roslyn-dotnet-4.9.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.3.0.0</AssemblyVersion>
        <AssemblyVersion>3.4.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.10.0.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ISymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The symbol from the earlier compilation,
            or null if the edit represents an addition.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Microsoft.CodeAnalysis.Emit.SemanticEdit left, Microsoft.CodeAnalysis.Emit.SemanticEdit right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype Microsoft.CodeAnalysis.Emit.SemanticEdit left, valuetype Microsoft.CodeAnalysis.Emit.SemanticEdit right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Emit.SemanticEdit.op_Equality(Microsoft.CodeAnalysis.Emit.SemanticEdit,Microsoft.CodeAnalysis.Emit.SemanticEdit)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As SemanticEdit, right As SemanticEdit) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( = ) : Microsoft.CodeAnalysis.Emit.SemanticEdit * Microsoft.CodeAnalysis.Emit.SemanticEdit -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.Emit.SemanticEdit" Index="0" FrameworkAlternate="roslyn-dotnet-4.0.1;roslyn-dotnet-4.1.0;roslyn-dotnet-4.2.0;roslyn-dotnet-4.3.0;roslyn-dotnet-4.4.0;roslyn-dotnet-4.5.0;roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0;roslyn-dotnet-4.9.0" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.Emit.SemanticEdit" Index="1" FrameworkAlternate="roslyn-dotnet-4.0.1;roslyn-dotnet-4.1.0;roslyn-dotnet-4.2.0;roslyn-dotnet-4.3.0;roslyn-dotnet-4.4.0;roslyn-dotnet-4.5.0;roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0;roslyn-dotnet-4.9.0" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Microsoft.CodeAnalysis.Emit.SemanticEdit left, Microsoft.CodeAnalysis.Emit.SemanticEdit right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype Microsoft.CodeAnalysis.Emit.SemanticEdit left, valuetype Microsoft.CodeAnalysis.Emit.SemanticEdit right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Emit.SemanticEdit.op_Inequality(Microsoft.CodeAnalysis.Emit.SemanticEdit,Microsoft.CodeAnalysis.Emit.SemanticEdit)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As SemanticEdit, right As SemanticEdit) As Boolean" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Microsoft.CodeAnalysis.Emit.SemanticEdit * Microsoft.CodeAnalysis.Emit.SemanticEdit -&gt; bool" Usage="Microsoft.CodeAnalysis.Emit.SemanticEdit.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.Emit.SemanticEdit" Index="0" FrameworkAlternate="roslyn-dotnet-4.0.1;roslyn-dotnet-4.1.0;roslyn-dotnet-4.2.0;roslyn-dotnet-4.3.0;roslyn-dotnet-4.4.0;roslyn-dotnet-4.5.0;roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0;roslyn-dotnet-4.9.0" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.Emit.SemanticEdit" Index="1" FrameworkAlternate="roslyn-dotnet-4.0.1;roslyn-dotnet-4.1.0;roslyn-dotnet-4.2.0;roslyn-dotnet-4.3.0;roslyn-dotnet-4.4.0;roslyn-dotnet-4.5.0;roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0;roslyn-dotnet-4.9.0" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreserveLocalVariables">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PreserveLocalVariables { bool get(); };" />
      <MemberSignature Language="C#" Value="public bool PreserveLocalVariables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PreserveLocalVariables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Emit.SemanticEdit.PreserveLocalVariables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreserveLocalVariables As Boolean" />
      <MemberSignature Language="F#" Value="member this.PreserveLocalVariables : bool" Usage="Microsoft.CodeAnalysis.Emit.SemanticEdit.PreserveLocalVariables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.3.0.0</AssemblyVersion>
        <AssemblyVersion>3.4.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.10.0.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            True if <see cref="P:Microsoft.CodeAnalysis.Emit.SemanticEdit.SyntaxMap" /> is not null.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuntimeRudeEdit">
      <MemberSignature Language="C#" Value="public Func&lt;Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Emit.RuntimeRudeEdit?&gt;? RuntimeRudeEdit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;class Microsoft.CodeAnalysis.SyntaxNode, valuetype System.Nullable`1&lt;valuetype Microsoft.CodeAnalysis.Emit.RuntimeRudeEdit&gt;&gt; RuntimeRudeEdit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Emit.SemanticEdit.RuntimeRudeEdit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RuntimeRudeEdit As Func(Of SyntaxNode, Nullable(Of RuntimeRudeEdit))" />
      <MemberSignature Language="F#" Value="member this.RuntimeRudeEdit : Func&lt;Microsoft.CodeAnalysis.SyntaxNode, Nullable&lt;Microsoft.CodeAnalysis.Emit.RuntimeRudeEdit&gt;&gt;" Usage="Microsoft.CodeAnalysis.Emit.SemanticEdit.RuntimeRudeEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.CodeAnalysis.SyntaxNode,System.Nullable&lt;Microsoft.CodeAnalysis.Emit.RuntimeRudeEdit&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Associates a syntax node in the later compilation to an error that should be
            reported at runtime by the IL generated for the node, if any.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyntaxMap">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Func&lt;Microsoft::CodeAnalysis::SyntaxNode ^, Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ SyntaxMap { Func&lt;Microsoft::CodeAnalysis::SyntaxNode ^, Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ get(); };" />
      <MemberSignature Language="C#" Value="public Func&lt;Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode&gt; SyntaxMap { get; }" FrameworkAlternate="roslyn-dotnet-3.0;roslyn-dotnet-3.1;roslyn-dotnet-3.2;roslyn-dotnet-3.2.1;roslyn-dotnet-3.3.1;roslyn-dotnet-3.4.0;roslyn-dotnet-3.5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;class Microsoft.CodeAnalysis.SyntaxNode, class Microsoft.CodeAnalysis.SyntaxNode&gt; SyntaxMap" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Emit.SemanticEdit.SyntaxMap" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyntaxMap As Func(Of SyntaxNode, SyntaxNode)" />
      <MemberSignature Language="F#" Value="member this.SyntaxMap : Func&lt;Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode&gt;" Usage="Microsoft.CodeAnalysis.Emit.SemanticEdit.SyntaxMap" />
      <MemberSignature Language="C#" Value="public Func&lt;Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode?&gt;? SyntaxMap { get; }" FrameworkAlternate="roslyn-dotnet-3.10.0;roslyn-dotnet-3.11.0;roslyn-dotnet-3.6.0;roslyn-dotnet-3.7.0;roslyn-dotnet-3.8.0;roslyn-dotnet-3.9.0;roslyn-dotnet-4.0.1;roslyn-dotnet-4.1.0;roslyn-dotnet-4.2.0;roslyn-dotnet-4.3.0;roslyn-dotnet-4.4.0;roslyn-dotnet-4.5.0;roslyn-dotnet-4.6.0;roslyn-dotnet-4.7.0;roslyn-dotnet-4.8.0;roslyn-dotnet-4.9.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.3.0.0</AssemblyVersion>
        <AssemblyVersion>3.4.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.10.0.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A map from syntax node in the later compilation to syntax node in the previous compilation, 
            or null if <see cref="P:Microsoft.CodeAnalysis.Emit.SemanticEdit.PreserveLocalVariables" /> is false and the map is not needed or 
            the source of the current method is the same as the source of the previous method.
            </summary>
        <value>To be added.</value>
        <remarks>
            The map does not need to map all syntax nodes in the active method, only those syntax nodes
            that declare a local or generate a long lived local.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
