<Type Name="SyntaxFactory" FullName="Microsoft.CodeAnalysis.CSharp.SyntaxFactory">
  <TypeSignature Language="C#" Value="public static class SyntaxFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit SyntaxFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CSharp.SyntaxFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class SyntaxFactory" />
  <TypeSignature Language="F#" Value="type SyntaxFactory = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A class containing factory methods for constructing syntax nodes, tokens and trivia.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AccessorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax AccessorDeclaration (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax AccessorDeclaration(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AccessorDeclaration (kind As SyntaxKind) As AccessorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member AccessorDeclaration : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration kind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>Creates a new AccessorDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax AccessorDeclaration (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax AccessorDeclaration(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AccessorDeclaration (kind As SyntaxKind, body As BlockSyntax) As AccessorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member AccessorDeclaration : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration (kind, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="body">To be added.</param>
        <summary>Creates a new AccessorDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax AccessorDeclaration (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax AccessorDeclaration(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AccessorDeclaration (kind As SyntaxKind, attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, expressionBody As ArrowExpressionClauseSyntax) As AccessorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member AccessorDeclaration : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration (kind, attributeLists, modifiers, expressionBody)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax AccessorDeclaration (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax AccessorDeclaration(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AccessorDeclaration (kind As SyntaxKind, attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, body As BlockSyntax) As AccessorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member AccessorDeclaration : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration (kind, attributeLists, modifiers, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="body">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax AccessorDeclaration (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax AccessorDeclaration(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AccessorDeclaration (kind As SyntaxKind, attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, body As BlockSyntax, expressionBody As ArrowExpressionClauseSyntax) As AccessorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member AccessorDeclaration : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration (kind, attributeLists, modifiers, body, expressionBody)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="body">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <summary>Creates a new AccessorDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax AccessorDeclaration (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax AccessorDeclaration(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AccessorDeclaration (kind As SyntaxKind, attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, expressionBody As ArrowExpressionClauseSyntax, semicolonToken As SyntaxToken) As AccessorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member AccessorDeclaration : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration (kind, attributeLists, modifiers, keyword, expressionBody, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="keyword">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax AccessorDeclaration (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax AccessorDeclaration(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AccessorDeclaration (kind As SyntaxKind, attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, body As BlockSyntax, semicolonToken As SyntaxToken) As AccessorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member AccessorDeclaration : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration (kind, attributeLists, modifiers, keyword, body, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="keyword">To be added.</param>
        <param name="body">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax AccessorDeclaration (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax AccessorDeclaration(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AccessorDeclaration (kind As SyntaxKind, attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, body As BlockSyntax, expressionBody As ArrowExpressionClauseSyntax, semicolonToken As SyntaxToken) As AccessorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member AccessorDeclaration : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration (kind, attributeLists, modifiers, keyword, body, expressionBody, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="keyword">To be added.</param>
        <param name="body">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new AccessorDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessorList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax AccessorList (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax&gt; accessors = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax AccessorList(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax&gt; accessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorList(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AccessorList (Optional accessors As SyntaxList(Of AccessorDeclarationSyntax) = null) As AccessorListSyntax" />
      <MemberSignature Language="F#" Value="static member AccessorList : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorList accessors" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessors" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="accessors">To be added.</param>
        <summary>Creates a new AccessorListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessorList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax AccessorList (Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax&gt; accessors, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax AccessorList(valuetype Microsoft.CodeAnalysis.SyntaxToken openBraceToken, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax&gt; accessors, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AccessorList (openBraceToken As SyntaxToken, accessors As SyntaxList(Of AccessorDeclarationSyntax), closeBraceToken As SyntaxToken) As AccessorListSyntax" />
      <MemberSignature Language="F#" Value="static member AccessorList : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorList (openBraceToken, accessors, closeBraceToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="accessors" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax&gt;" />
        <Parameter Name="closeBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openBraceToken">To be added.</param>
        <param name="accessors">To be added.</param>
        <param name="closeBraceToken">To be added.</param>
        <summary>Creates a new AccessorListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AliasQualifiedName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax AliasQualifiedName (Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax alias, Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax AliasQualifiedName(class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax alias, class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AliasQualifiedName (alias As IdentifierNameSyntax, name As SimpleNameSyntax) As AliasQualifiedNameSyntax" />
      <MemberSignature Language="F#" Value="static member AliasQualifiedName : Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName (alias, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alias" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="alias">To be added.</param>
        <param name="name">To be added.</param>
        <summary>Creates a new AliasQualifiedNameSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AliasQualifiedName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax AliasQualifiedName (string alias, Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax AliasQualifiedName(string alias, class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AliasQualifiedName (alias As String, name As SimpleNameSyntax) As AliasQualifiedNameSyntax" />
      <MemberSignature Language="F#" Value="static member AliasQualifiedName : string * Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName (alias, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alias" Type="System.String" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="alias">To be added.</param>
        <param name="name">To be added.</param>
        <summary>Creates a new AliasQualifiedNameSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AliasQualifiedName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax AliasQualifiedName (Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax alias, Microsoft.CodeAnalysis.SyntaxToken colonColonToken, Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax AliasQualifiedName(class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax alias, valuetype Microsoft.CodeAnalysis.SyntaxToken colonColonToken, class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AliasQualifiedName (alias As IdentifierNameSyntax, colonColonToken As SyntaxToken, name As SimpleNameSyntax) As AliasQualifiedNameSyntax" />
      <MemberSignature Language="F#" Value="static member AliasQualifiedName : Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName (alias, colonColonToken, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alias" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" />
        <Parameter Name="colonColonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="alias">To be added.</param>
        <param name="colonColonToken">To be added.</param>
        <param name="name">To be added.</param>
        <summary>Creates a new AliasQualifiedNameSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousMethodExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax AnonymousMethodExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax AnonymousMethodExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AnonymousMethodExpression () As AnonymousMethodExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AnonymousMethodExpression : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new AnonymousMethodExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousMethodExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax AnonymousMethodExpression (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax AnonymousMethodExpression(class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AnonymousMethodExpression (body As CSharpSyntaxNode) As AnonymousMethodExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AnonymousMethodExpression : Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression body" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode" />
      </Parameters>
      <Docs>
        <param name="body">To be added.</param>
        <summary>Creates a new AnonymousMethodExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousMethodExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax AnonymousMethodExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax AnonymousMethodExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AnonymousMethodExpression (parameterList As ParameterListSyntax, body As CSharpSyntaxNode) As AnonymousMethodExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AnonymousMethodExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression (parameterList, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode" />
      </Parameters>
      <Docs>
        <param name="parameterList">To be added.</param>
        <param name="body">To be added.</param>
        <summary>Creates a new AnonymousMethodExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousMethodExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax AnonymousMethodExpression (Microsoft.CodeAnalysis.SyntaxToken asyncKeyword, Microsoft.CodeAnalysis.SyntaxToken delegateKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax AnonymousMethodExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken asyncKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken delegateKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AnonymousMethodExpression (asyncKeyword As SyntaxToken, delegateKeyword As SyntaxToken, parameterList As ParameterListSyntax, body As CSharpSyntaxNode) As AnonymousMethodExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AnonymousMethodExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression (asyncKeyword, delegateKeyword, parameterList, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="delegateKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode" />
      </Parameters>
      <Docs>
        <param name="asyncKeyword">To be added.</param>
        <param name="delegateKeyword">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="body">To be added.</param>
        <summary>Creates a new AnonymousMethodExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousObjectCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax AnonymousObjectCreationExpression (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax&gt; initializers = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax AnonymousObjectCreationExpression(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectCreationExpression(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AnonymousObjectCreationExpression (Optional initializers As SeparatedSyntaxList(Of AnonymousObjectMemberDeclaratorSyntax) = null) As AnonymousObjectCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AnonymousObjectCreationExpression : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectCreationExpression initializers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializers" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="initializers">To be added.</param>
        <summary>Creates a new AnonymousObjectCreationExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousObjectCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax AnonymousObjectCreationExpression (Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax&gt; initializers, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax AnonymousObjectCreationExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken newKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openBraceToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax&gt; initializers, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AnonymousObjectCreationExpression (newKeyword As SyntaxToken, openBraceToken As SyntaxToken, initializers As SeparatedSyntaxList(Of AnonymousObjectMemberDeclaratorSyntax), closeBraceToken As SyntaxToken) As AnonymousObjectCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AnonymousObjectCreationExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectCreationExpression (newKeyword, openBraceToken, initializers, closeBraceToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="initializers" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax&gt;" />
        <Parameter Name="closeBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="newKeyword">To be added.</param>
        <param name="openBraceToken">To be added.</param>
        <param name="initializers">To be added.</param>
        <param name="closeBraceToken">To be added.</param>
        <summary>Creates a new AnonymousObjectCreationExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousObjectMemberDeclarator">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax AnonymousObjectMemberDeclarator (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax AnonymousObjectMemberDeclarator(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AnonymousObjectMemberDeclarator (expression As ExpressionSyntax) As AnonymousObjectMemberDeclaratorSyntax" />
      <MemberSignature Language="F#" Value="static member AnonymousObjectMemberDeclarator : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectMemberDeclarator expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new AnonymousObjectMemberDeclaratorSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousObjectMemberDeclarator">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax AnonymousObjectMemberDeclarator (Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax nameEquals, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax AnonymousObjectMemberDeclarator(class Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax nameEquals, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AnonymousObjectMemberDeclarator (nameEquals As NameEqualsSyntax, expression As ExpressionSyntax) As AnonymousObjectMemberDeclaratorSyntax" />
      <MemberSignature Language="F#" Value="static member AnonymousObjectMemberDeclarator : Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectMemberDeclarator (nameEquals, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nameEquals" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="nameEquals">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new AnonymousObjectMemberDeclaratorSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEquivalent">
      <MemberSignature Language="C#" Value="public static bool AreEquivalent (Microsoft.CodeAnalysis.SyntaxToken oldToken, Microsoft.CodeAnalysis.SyntaxToken newToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreEquivalent(valuetype Microsoft.CodeAnalysis.SyntaxToken oldToken, valuetype Microsoft.CodeAnalysis.SyntaxToken newToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreEquivalent (oldToken As SyntaxToken, newToken As SyntaxToken) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEquivalent : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent (oldToken, newToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="newToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="oldToken">The old token.</param>
        <param name="newToken">The new token.</param>
        <summary>
            Determines if two syntax tokens are the same, disregarding trivia differences.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEquivalent">
      <MemberSignature Language="C#" Value="public static bool AreEquivalent (Microsoft.CodeAnalysis.SyntaxTokenList oldList, Microsoft.CodeAnalysis.SyntaxTokenList newList);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreEquivalent(valuetype Microsoft.CodeAnalysis.SyntaxTokenList oldList, valuetype Microsoft.CodeAnalysis.SyntaxTokenList newList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreEquivalent (oldList As SyntaxTokenList, newList As SyntaxTokenList) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEquivalent : Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxTokenList -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent (oldList, newList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldList" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="newList" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
      </Parameters>
      <Docs>
        <param name="oldList">The old token list.</param>
        <param name="newList">The new token list.</param>
        <summary>
            Determines if two lists of tokens are the same, disregarding trivia differences.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEquivalent">
      <MemberSignature Language="C#" Value="public static bool AreEquivalent (Microsoft.CodeAnalysis.SyntaxNode oldNode, Microsoft.CodeAnalysis.SyntaxNode newNode, bool topLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreEquivalent(class Microsoft.CodeAnalysis.SyntaxNode oldNode, class Microsoft.CodeAnalysis.SyntaxNode newNode, bool topLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreEquivalent (oldNode As SyntaxNode, newNode As SyntaxNode, topLevel As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEquivalent : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode * bool -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent (oldNode, newNode, topLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldNode" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="newNode" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="topLevel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="oldNode">The old node.</param>
        <param name="newNode">The new node.</param>
        <param name="topLevel"> 
            If true then the nodes are equivalent if the contained nodes and tokens declaring
            metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies
            or initializer expressions, otherwise all nodes and tokens must be equivalent. 
            </param>
        <summary>
            Determines if two syntax nodes are the same, disregarding trivia differences.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEquivalent">
      <MemberSignature Language="C#" Value="public static bool AreEquivalent (Microsoft.CodeAnalysis.SyntaxNode oldNode, Microsoft.CodeAnalysis.SyntaxNode newNode, Func&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind,bool&gt; ignoreChildNode = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreEquivalent(class Microsoft.CodeAnalysis.SyntaxNode oldNode, class Microsoft.CodeAnalysis.SyntaxNode newNode, class System.Func`2&lt;valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind, bool&gt; ignoreChildNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreEquivalent (oldNode As SyntaxNode, newNode As SyntaxNode, Optional ignoreChildNode As Func(Of SyntaxKind, Boolean) = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEquivalent : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode * Func&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind, bool&gt; -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent (oldNode, newNode, ignoreChildNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldNode" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="newNode" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="ignoreChildNode" Type="System.Func&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="oldNode">The old node.</param>
        <param name="newNode">The new node.</param>
        <param name="ignoreChildNode">
            If specified called for every child syntax node (not token) that is visited during the comparison. 
            If it returns true the child is recursively visited, otherwise the child and its subtree is disregarded.
            </param>
        <summary>
            Determines if two syntax nodes are the same, disregarding trivia differences.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEquivalent">
      <MemberSignature Language="C#" Value="public static bool AreEquivalent (Microsoft.CodeAnalysis.SyntaxTree oldTree, Microsoft.CodeAnalysis.SyntaxTree newTree, bool topLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreEquivalent(class Microsoft.CodeAnalysis.SyntaxTree oldTree, class Microsoft.CodeAnalysis.SyntaxTree newTree, bool topLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreEquivalent (oldTree As SyntaxTree, newTree As SyntaxTree, topLevel As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEquivalent : Microsoft.CodeAnalysis.SyntaxTree * Microsoft.CodeAnalysis.SyntaxTree * bool -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent (oldTree, newTree, topLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldTree" Type="Microsoft.CodeAnalysis.SyntaxTree" />
        <Parameter Name="newTree" Type="Microsoft.CodeAnalysis.SyntaxTree" />
        <Parameter Name="topLevel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="oldTree">The original tree.</param>
        <param name="newTree">The new tree.</param>
        <param name="topLevel"> 
            If true then the trees are equivalent if the contained nodes and tokens declaring
            metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies
            or initializer expressions, otherwise all nodes and tokens must be equivalent. 
            </param>
        <summary>
            Determines if two trees are the same, disregarding trivia differences.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEquivalent&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static bool AreEquivalent&lt;TNode&gt; (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; oldList, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; newList, bool topLevel) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreEquivalent&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; oldList, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; newList, bool topLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreEquivalent(Of TNode As SyntaxNode) (oldList As SeparatedSyntaxList(Of TNode), newList As SeparatedSyntaxList(Of TNode), topLevel As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEquivalent : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * bool -&gt; bool (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent (oldList, newList, topLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="oldList" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;" />
        <Parameter Name="newList" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;" />
        <Parameter Name="topLevel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="oldList">The old list.</param>
        <param name="newList">The new list.</param>
        <param name="topLevel"> 
            If true then the nodes are equivalent if the contained nodes and tokens declaring
            metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies
            or initializer expressions, otherwise all nodes and tokens must be equivalent. 
            </param>
        <summary>
            Determines if two lists of syntax nodes are the same, disregarding trivia differences.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEquivalent&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static bool AreEquivalent&lt;TNode&gt; (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; oldList, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; newList, Func&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind,bool&gt; ignoreChildNode = null) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreEquivalent&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; oldList, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; newList, class System.Func`2&lt;valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind, bool&gt; ignoreChildNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreEquivalent(Of TNode As SyntaxNode) (oldList As SeparatedSyntaxList(Of TNode), newList As SeparatedSyntaxList(Of TNode), Optional ignoreChildNode As Func(Of SyntaxKind, Boolean) = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEquivalent : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * Func&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind, bool&gt; -&gt; bool (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent (oldList, newList, ignoreChildNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="oldList" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;" />
        <Parameter Name="newList" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;" />
        <Parameter Name="ignoreChildNode" Type="System.Func&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="oldList">The old list.</param>
        <param name="newList">The new list.</param>
        <param name="ignoreChildNode">
            If specified called for every child syntax node (not token) that is visited during the comparison. 
            If it returns true the child is recursively visited, otherwise the child and its subtree is disregarded.
            </param>
        <summary>
            Determines if two lists of syntax nodes are the same, disregarding trivia differences.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEquivalent&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static bool AreEquivalent&lt;TNode&gt; (Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; oldList, Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; newList, bool topLevel) where TNode : Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreEquivalent&lt;(class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode) TNode&gt;(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!!TNode&gt; oldList, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!!TNode&gt; newList, bool topLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.SyntaxList{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreEquivalent(Of TNode As CSharpSyntaxNode) (oldList As SyntaxList(Of TNode), newList As SyntaxList(Of TNode), topLevel As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEquivalent : Microsoft.CodeAnalysis.SyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)&gt; * bool -&gt; bool (requires 'Node :&gt; Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent (oldList, newList, topLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="oldList" Type="Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;" />
        <Parameter Name="newList" Type="Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;" />
        <Parameter Name="topLevel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="oldList">The old list.</param>
        <param name="newList">The new list.</param>
        <param name="topLevel"> 
            If true then the nodes are equivalent if the contained nodes and tokens declaring
            metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies
            or initializer expressions, otherwise all nodes and tokens must be equivalent. 
            </param>
        <summary>
            Determines if two lists of syntax nodes are the same, disregarding trivia differences.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEquivalent&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static bool AreEquivalent&lt;TNode&gt; (Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; oldList, Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; newList, Func&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind,bool&gt; ignoreChildNode = null) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreEquivalent&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!!TNode&gt; oldList, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!!TNode&gt; newList, class System.Func`2&lt;valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind, bool&gt; ignoreChildNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.SyntaxList{``0},System.Func{Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreEquivalent(Of TNode As SyntaxNode) (oldList As SyntaxList(Of TNode), newList As SyntaxList(Of TNode), Optional ignoreChildNode As Func(Of SyntaxKind, Boolean) = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEquivalent : Microsoft.CodeAnalysis.SyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * Func&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind, bool&gt; -&gt; bool (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AreEquivalent (oldList, newList, ignoreChildNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="oldList" Type="Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;" />
        <Parameter Name="newList" Type="Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;" />
        <Parameter Name="ignoreChildNode" Type="System.Func&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="oldList">The old list.</param>
        <param name="newList">The new list.</param>
        <param name="ignoreChildNode">
            If specified called for every child syntax node (not token) that is visited during the comparison. 
            If it returns true the child is recursively visited, otherwise the child and its subtree is disregarded.
            </param>
        <summary>
            Determines if two lists of syntax nodes are the same, disregarding trivia differences.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Argument">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax Argument (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax Argument(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Argument(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Argument (expression As ExpressionSyntax) As ArgumentSyntax" />
      <MemberSignature Language="F#" Value="static member Argument : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Argument expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new ArgumentSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Argument">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax Argument (Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax nameColon, Microsoft.CodeAnalysis.SyntaxToken refOrOutKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax Argument(class Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax nameColon, valuetype Microsoft.CodeAnalysis.SyntaxToken refOrOutKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Argument(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Argument (nameColon As NameColonSyntax, refOrOutKeyword As SyntaxToken, expression As ExpressionSyntax) As ArgumentSyntax" />
      <MemberSignature Language="F#" Value="static member Argument : Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Argument (nameColon, refOrOutKeyword, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nameColon" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax" />
        <Parameter Name="refOrOutKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="nameColon">To be added.</param>
        <param name="refOrOutKeyword">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new ArgumentSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArgumentList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax ArgumentList (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; arguments = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax ArgumentList(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArgumentList (Optional arguments As SeparatedSyntaxList(Of ArgumentSyntax) = null) As ArgumentListSyntax" />
      <MemberSignature Language="F#" Value="static member ArgumentList : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArgumentList arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="arguments">To be added.</param>
        <summary>Creates a new ArgumentListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArgumentList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax ArgumentList (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; arguments, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax ArgumentList(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; arguments, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArgumentList (openParenToken As SyntaxToken, arguments As SeparatedSyntaxList(Of ArgumentSyntax), closeParenToken As SyntaxToken) As ArgumentListSyntax" />
      <MemberSignature Language="F#" Value="static member ArgumentList : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArgumentList (openParenToken, arguments, closeParenToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt;" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openParenToken">To be added.</param>
        <param name="arguments">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>Creates a new ArgumentListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax ArrayCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax ArrayCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayCreationExpression (type As ArrayTypeSyntax) As ArrayCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Creates a new ArrayCreationExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax ArrayCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax ArrayCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayCreationExpression (type As ArrayTypeSyntax, initializer As InitializerExpressionSyntax) As ArrayCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression (type, initializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="initializer">To be added.</param>
        <summary>Creates a new ArrayCreationExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax ArrayCreationExpression (Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax ArrayCreationExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken newKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayCreationExpression (newKeyword As SyntaxToken, type As ArrayTypeSyntax, initializer As InitializerExpressionSyntax) As ArrayCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ArrayCreationExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression (newKeyword, type, initializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="newKeyword">To be added.</param>
        <param name="type">To be added.</param>
        <param name="initializer">To be added.</param>
        <summary>Creates a new ArrayCreationExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayRankSpecifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax ArrayRankSpecifier (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; sizes = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax ArrayRankSpecifier(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; sizes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayRankSpecifier(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayRankSpecifier (Optional sizes As SeparatedSyntaxList(Of ExpressionSyntax) = null) As ArrayRankSpecifierSyntax" />
      <MemberSignature Language="F#" Value="static member ArrayRankSpecifier : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayRankSpecifier sizes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizes" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="sizes">To be added.</param>
        <summary>Creates a new ArrayRankSpecifierSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayRankSpecifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax ArrayRankSpecifier (Microsoft.CodeAnalysis.SyntaxToken openBracketToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; sizes, Microsoft.CodeAnalysis.SyntaxToken closeBracketToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax ArrayRankSpecifier(valuetype Microsoft.CodeAnalysis.SyntaxToken openBracketToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; sizes, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBracketToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayRankSpecifier(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayRankSpecifier (openBracketToken As SyntaxToken, sizes As SeparatedSyntaxList(Of ExpressionSyntax), closeBracketToken As SyntaxToken) As ArrayRankSpecifierSyntax" />
      <MemberSignature Language="F#" Value="static member ArrayRankSpecifier : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayRankSpecifier (openBracketToken, sizes, closeBracketToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openBracketToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="sizes" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt;" />
        <Parameter Name="closeBracketToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openBracketToken">To be added.</param>
        <param name="sizes">To be added.</param>
        <param name="closeBracketToken">To be added.</param>
        <summary>Creates a new ArrayRankSpecifierSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax ArrayType (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax elementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax ArrayType(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax elementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayType (elementType As TypeSyntax) As ArrayTypeSyntax" />
      <MemberSignature Language="F#" Value="static member ArrayType : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayType elementType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="elementType">To be added.</param>
        <summary>Creates a new ArrayTypeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax ArrayType (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax elementType, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax&gt; rankSpecifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax ArrayType(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax elementType, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax&gt; rankSpecifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayType (elementType As TypeSyntax, rankSpecifiers As SyntaxList(Of ArrayRankSpecifierSyntax)) As ArrayTypeSyntax" />
      <MemberSignature Language="F#" Value="static member ArrayType : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayType (elementType, rankSpecifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="rankSpecifiers" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="elementType">To be added.</param>
        <param name="rankSpecifiers">To be added.</param>
        <summary>Creates a new ArrayTypeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrowExpressionClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax ArrowExpressionClause (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax ArrowExpressionClause(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrowExpressionClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrowExpressionClause (expression As ExpressionSyntax) As ArrowExpressionClauseSyntax" />
      <MemberSignature Language="F#" Value="static member ArrowExpressionClause : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrowExpressionClause expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new ArrowExpressionClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrowExpressionClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax ArrowExpressionClause (Microsoft.CodeAnalysis.SyntaxToken arrowToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax ArrowExpressionClause(valuetype Microsoft.CodeAnalysis.SyntaxToken arrowToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrowExpressionClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrowExpressionClause (arrowToken As SyntaxToken, expression As ExpressionSyntax) As ArrowExpressionClauseSyntax" />
      <MemberSignature Language="F#" Value="static member ArrowExpressionClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrowExpressionClause (arrowToken, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrowToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="arrowToken">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new ArrowExpressionClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignmentExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax AssignmentExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax AssignmentExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AssignmentExpression (kind As SyntaxKind, left As ExpressionSyntax, right As ExpressionSyntax) As AssignmentExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AssignmentExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AssignmentExpression (kind, left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Creates a new AssignmentExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignmentExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax AssignmentExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax AssignmentExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AssignmentExpression (kind As SyntaxKind, left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AssignmentExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AssignmentExpression (kind, left, operatorToken, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="left">To be added.</param>
        <param name="operatorToken">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Creates a new AssignmentExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax Attribute (Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax Attribute(class Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Attribute (name As NameSyntax) As AttributeSyntax" />
      <MemberSignature Language="F#" Value="static member Attribute : Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Attribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Creates a new AttributeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax Attribute (Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax argumentList);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax Attribute(class Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name, class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax argumentList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Attribute (name As NameSyntax, argumentList As AttributeArgumentListSyntax) As AttributeSyntax" />
      <MemberSignature Language="F#" Value="static member Attribute : Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Attribute (name, argumentList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" />
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="argumentList">To be added.</param>
        <summary>Creates a new AttributeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeArgument">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax AttributeArgument (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax AttributeArgument(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AttributeArgument (expression As ExpressionSyntax) As AttributeArgumentSyntax" />
      <MemberSignature Language="F#" Value="static member AttributeArgument : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgument expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new AttributeArgumentSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeArgument">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax AttributeArgument (Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax nameEquals, Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax nameColon, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax AttributeArgument(class Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax nameEquals, class Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax nameColon, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AttributeArgument (nameEquals As NameEqualsSyntax, nameColon As NameColonSyntax, expression As ExpressionSyntax) As AttributeArgumentSyntax" />
      <MemberSignature Language="F#" Value="static member AttributeArgument : Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgument (nameEquals, nameColon, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nameEquals" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax" />
        <Parameter Name="nameColon" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="nameEquals">To be added.</param>
        <param name="nameColon">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new AttributeArgumentSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeArgumentList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax AttributeArgumentList (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax&gt; arguments = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax AttributeArgumentList(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AttributeArgumentList (Optional arguments As SeparatedSyntaxList(Of AttributeArgumentSyntax) = null) As AttributeArgumentListSyntax" />
      <MemberSignature Language="F#" Value="static member AttributeArgumentList : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgumentList arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="arguments">To be added.</param>
        <summary>Creates a new AttributeArgumentListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeArgumentList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax AttributeArgumentList (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax&gt; arguments, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax AttributeArgumentList(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax&gt; arguments, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AttributeArgumentList (openParenToken As SyntaxToken, arguments As SeparatedSyntaxList(Of AttributeArgumentSyntax), closeParenToken As SyntaxToken) As AttributeArgumentListSyntax" />
      <MemberSignature Language="F#" Value="static member AttributeArgumentList : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgumentList (openParenToken, arguments, closeParenToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax&gt;" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openParenToken">To be added.</param>
        <param name="arguments">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>Creates a new AttributeArgumentListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax AttributeList (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax&gt; attributes = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax AttributeList(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax&gt; attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AttributeList (Optional attributes As SeparatedSyntaxList(Of AttributeSyntax) = null) As AttributeListSyntax" />
      <MemberSignature Language="F#" Value="static member AttributeList : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="attributes">To be added.</param>
        <summary>Creates a new AttributeListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax AttributeList (Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax target, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax&gt; attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax AttributeList(class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax target, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax&gt; attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AttributeList (target As AttributeTargetSpecifierSyntax, attributes As SeparatedSyntaxList(Of AttributeSyntax)) As AttributeListSyntax" />
      <MemberSignature Language="F#" Value="static member AttributeList : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList (target, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>Creates a new AttributeListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax AttributeList (Microsoft.CodeAnalysis.SyntaxToken openBracketToken, Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax target, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax&gt; attributes, Microsoft.CodeAnalysis.SyntaxToken closeBracketToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax AttributeList(valuetype Microsoft.CodeAnalysis.SyntaxToken openBracketToken, class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax target, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax&gt; attributes, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBracketToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AttributeList (openBracketToken As SyntaxToken, target As AttributeTargetSpecifierSyntax, attributes As SeparatedSyntaxList(Of AttributeSyntax), closeBracketToken As SyntaxToken) As AttributeListSyntax" />
      <MemberSignature Language="F#" Value="static member AttributeList : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeList (openBracketToken, target, attributes, closeBracketToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openBracketToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="target" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax&gt;" />
        <Parameter Name="closeBracketToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openBracketToken">To be added.</param>
        <param name="target">To be added.</param>
        <param name="attributes">To be added.</param>
        <param name="closeBracketToken">To be added.</param>
        <summary>Creates a new AttributeListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeTargetSpecifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax AttributeTargetSpecifier (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax AttributeTargetSpecifier(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeTargetSpecifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AttributeTargetSpecifier (identifier As SyntaxToken) As AttributeTargetSpecifierSyntax" />
      <MemberSignature Language="F#" Value="static member AttributeTargetSpecifier : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeTargetSpecifier identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new AttributeTargetSpecifierSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeTargetSpecifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax AttributeTargetSpecifier (Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken colonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax AttributeTargetSpecifier(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeTargetSpecifier(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AttributeTargetSpecifier (identifier As SyntaxToken, colonToken As SyntaxToken) As AttributeTargetSpecifierSyntax" />
      <MemberSignature Language="F#" Value="static member AttributeTargetSpecifier : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeTargetSpecifier (identifier, colonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="colonToken">To be added.</param>
        <summary>Creates a new AttributeTargetSpecifierSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AwaitExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax AwaitExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax AwaitExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AwaitExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AwaitExpression (expression As ExpressionSyntax) As AwaitExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AwaitExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AwaitExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new AwaitExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AwaitExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax AwaitExpression (Microsoft.CodeAnalysis.SyntaxToken awaitKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax AwaitExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken awaitKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AwaitExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AwaitExpression (awaitKeyword As SyntaxToken, expression As ExpressionSyntax) As AwaitExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AwaitExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AwaitExpression (awaitKeyword, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="awaitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="awaitKeyword">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new AwaitExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BadDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax BadDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken identifier, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax BadDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BadDirectiveTrivia (identifier As SyntaxToken, isActive As Boolean) As BadDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member BadDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadDirectiveTrivia (identifier, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new BadDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BadDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax BadDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax BadDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BadDirectiveTrivia (hashToken As SyntaxToken, identifier As SyntaxToken, endOfDirectiveToken As SyntaxToken, isActive As Boolean) As BadDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member BadDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadDirectiveTrivia (hashToken, identifier, endOfDirectiveToken, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endOfDirectiveToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hashToken">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="endOfDirectiveToken">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new BadDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BadToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken BadToken (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken BadToken(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BadToken (leading As SyntaxTriviaList, text As String, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member BadToken : Microsoft.CodeAnalysis.SyntaxTriviaList * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadToken (leading, text, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the bad token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a token with kind BadToken.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax BaseExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax BaseExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpression" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BaseExpression () As BaseExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member BaseExpression : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpression " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new BaseExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax BaseExpression (Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax BaseExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpression(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BaseExpression (token As SyntaxToken) As BaseExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member BaseExpression : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpression token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>Creates a new BaseExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax BaseList (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax&gt; types = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax BaseList(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax&gt; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BaseList (Optional types As SeparatedSyntaxList(Of BaseTypeSyntax) = null) As BaseListSyntax" />
      <MemberSignature Language="F#" Value="static member BaseList : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseList types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="types">To be added.</param>
        <summary>Creates a new BaseListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax BaseList (Microsoft.CodeAnalysis.SyntaxToken colonToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax&gt; types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax BaseList(valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax&gt; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BaseList (colonToken As SyntaxToken, types As SeparatedSyntaxList(Of BaseTypeSyntax)) As BaseListSyntax" />
      <MemberSignature Language="F#" Value="static member BaseList : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseList (colonToken, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="types" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="colonToken">To be added.</param>
        <param name="types">To be added.</param>
        <summary>Creates a new BaseListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BinaryExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax BinaryExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax BinaryExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BinaryExpression (kind As SyntaxKind, left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member BinaryExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BinaryExpression (kind, left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Creates a new BinaryExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BinaryExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax BinaryExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax BinaryExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BinaryExpression (kind As SyntaxKind, left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member BinaryExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BinaryExpression (kind, left, operatorToken, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="left">To be added.</param>
        <param name="operatorToken">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Creates a new BinaryExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax Block (params Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[] statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax Block(class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[] statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (ParamArray statements As StatementSyntax()) As BlockSyntax" />
      <MemberSignature Language="F#" Value="static member Block : Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block statements" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="statements">To be added.</param>
        <summary>Creates a new BlockSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax Block (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt; statements = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax Block(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (Optional statements As SyntaxList(Of StatementSyntax) = null) As BlockSyntax" />
      <MemberSignature Language="F#" Value="static member Block : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block statements" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="statements">To be added.</param>
        <summary>Creates a new BlockSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax Block (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax Block(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (statements As IEnumerable(Of StatementSyntax)) As BlockSyntax" />
      <MemberSignature Language="F#" Value="static member Block : seq&lt;Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block statements" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statements" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="statements">To be added.</param>
        <summary>Creates a new BlockSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax Block (Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax Block(valuetype Microsoft.CodeAnalysis.SyntaxToken openBraceToken, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt; statements, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (openBraceToken As SyntaxToken, statements As SyntaxList(Of StatementSyntax), closeBraceToken As SyntaxToken) As BlockSyntax" />
      <MemberSignature Language="F#" Value="static member Block : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block (openBraceToken, statements, closeBraceToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt;" />
        <Parameter Name="closeBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openBraceToken">To be added.</param>
        <param name="statements">To be added.</param>
        <param name="closeBraceToken">To be added.</param>
        <summary>Creates a new BlockSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BracketedArgumentList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax BracketedArgumentList (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; arguments = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax BracketedArgumentList(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BracketedArgumentList (Optional arguments As SeparatedSyntaxList(Of ArgumentSyntax) = null) As BracketedArgumentListSyntax" />
      <MemberSignature Language="F#" Value="static member BracketedArgumentList : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedArgumentList arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="arguments">To be added.</param>
        <summary>Creates a new BracketedArgumentListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BracketedArgumentList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax BracketedArgumentList (Microsoft.CodeAnalysis.SyntaxToken openBracketToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; arguments, Microsoft.CodeAnalysis.SyntaxToken closeBracketToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax BracketedArgumentList(valuetype Microsoft.CodeAnalysis.SyntaxToken openBracketToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; arguments, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBracketToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BracketedArgumentList (openBracketToken As SyntaxToken, arguments As SeparatedSyntaxList(Of ArgumentSyntax), closeBracketToken As SyntaxToken) As BracketedArgumentListSyntax" />
      <MemberSignature Language="F#" Value="static member BracketedArgumentList : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedArgumentList (openBracketToken, arguments, closeBracketToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openBracketToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt;" />
        <Parameter Name="closeBracketToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openBracketToken">To be added.</param>
        <param name="arguments">To be added.</param>
        <param name="closeBracketToken">To be added.</param>
        <summary>Creates a new BracketedArgumentListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BracketedParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax BracketedParameterList (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&gt; parameters = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax BracketedParameterList(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BracketedParameterList (Optional parameters As SeparatedSyntaxList(Of ParameterSyntax) = null) As BracketedParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member BracketedParameterList : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedParameterList parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="parameters">To be added.</param>
        <summary>Creates a new BracketedParameterListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BracketedParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax BracketedParameterList (Microsoft.CodeAnalysis.SyntaxToken openBracketToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&gt; parameters, Microsoft.CodeAnalysis.SyntaxToken closeBracketToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax BracketedParameterList(valuetype Microsoft.CodeAnalysis.SyntaxToken openBracketToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&gt; parameters, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBracketToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BracketedParameterList (openBracketToken As SyntaxToken, parameters As SeparatedSyntaxList(Of ParameterSyntax), closeBracketToken As SyntaxToken) As BracketedParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member BracketedParameterList : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BracketedParameterList (openBracketToken, parameters, closeBracketToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openBracketToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&gt;" />
        <Parameter Name="closeBracketToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openBracketToken">To be added.</param>
        <param name="parameters">To be added.</param>
        <param name="closeBracketToken">To be added.</param>
        <summary>Creates a new BracketedParameterListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BreakStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax BreakStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax BreakStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BreakStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BreakStatement () As BreakStatementSyntax" />
      <MemberSignature Language="F#" Value="static member BreakStatement : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BreakStatement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new BreakStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BreakStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax BreakStatement (Microsoft.CodeAnalysis.SyntaxToken breakKeyword, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax BreakStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken breakKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BreakStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BreakStatement (breakKeyword As SyntaxToken, semicolonToken As SyntaxToken) As BreakStatementSyntax" />
      <MemberSignature Language="F#" Value="static member BreakStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BreakStatement (breakKeyword, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="breakKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="breakKeyword">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new BreakStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CarriageReturn">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia CarriageReturn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia CarriageReturn" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CarriageReturn As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.CarriageReturn : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A trivia with kind EndOfLineTrivia containing a single carriage return character.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CarriageReturnLineFeed">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia CarriageReturnLineFeed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia CarriageReturnLineFeed" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturnLineFeed" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CarriageReturnLineFeed As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.CarriageReturnLineFeed : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CarriageReturnLineFeed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A trivia with kind EndOfLineTrivia containing both the carriage return and line feed characters.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CasePatternSwitchLabel">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax CasePatternSwitchLabel (Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax pattern, Microsoft.CodeAnalysis.SyntaxToken colonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax CasePatternSwitchLabel(class Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax pattern, valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CasePatternSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CasePatternSwitchLabel (pattern As PatternSyntax, colonToken As SyntaxToken) As CasePatternSwitchLabelSyntax" />
      <MemberSignature Language="F#" Value="static member CasePatternSwitchLabel : Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CasePatternSwitchLabel (pattern, colonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax" />
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="pattern">To be added.</param>
        <param name="colonToken">To be added.</param>
        <summary>Creates a new CasePatternSwitchLabelSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CasePatternSwitchLabel">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax CasePatternSwitchLabel (Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax pattern, Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax whenClause, Microsoft.CodeAnalysis.SyntaxToken colonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax CasePatternSwitchLabel(class Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax pattern, class Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax whenClause, valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CasePatternSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CasePatternSwitchLabel (pattern As PatternSyntax, whenClause As WhenClauseSyntax, colonToken As SyntaxToken) As CasePatternSwitchLabelSyntax" />
      <MemberSignature Language="F#" Value="static member CasePatternSwitchLabel : Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CasePatternSwitchLabel (pattern, whenClause, colonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax" />
        <Parameter Name="whenClause" Type="Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax" />
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="pattern">To be added.</param>
        <param name="whenClause">To be added.</param>
        <param name="colonToken">To be added.</param>
        <summary>Creates a new CasePatternSwitchLabelSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CasePatternSwitchLabel">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax CasePatternSwitchLabel (Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax pattern, Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax whenClause, Microsoft.CodeAnalysis.SyntaxToken colonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax CasePatternSwitchLabel(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, class Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax pattern, class Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax whenClause, valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CasePatternSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CasePatternSwitchLabel (keyword As SyntaxToken, pattern As PatternSyntax, whenClause As WhenClauseSyntax, colonToken As SyntaxToken) As CasePatternSwitchLabelSyntax" />
      <MemberSignature Language="F#" Value="static member CasePatternSwitchLabel : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CasePatternSwitchLabel (keyword, pattern, whenClause, colonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="pattern" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax" />
        <Parameter Name="whenClause" Type="Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax" />
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">To be added.</param>
        <param name="pattern">To be added.</param>
        <param name="whenClause">To be added.</param>
        <param name="colonToken">To be added.</param>
        <summary>Creates a new CasePatternSwitchLabelSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseSwitchLabel">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax CaseSwitchLabel (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax CaseSwitchLabel(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseSwitchLabel (value As ExpressionSyntax) As CaseSwitchLabelSyntax" />
      <MemberSignature Language="F#" Value="static member CaseSwitchLabel : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Creates a new CaseSwitchLabelSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseSwitchLabel">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax CaseSwitchLabel (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax value, Microsoft.CodeAnalysis.SyntaxToken colonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax CaseSwitchLabel(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax value, valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseSwitchLabel (value As ExpressionSyntax, colonToken As SyntaxToken) As CaseSwitchLabelSyntax" />
      <MemberSignature Language="F#" Value="static member CaseSwitchLabel : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel (value, colonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="colonToken">To be added.</param>
        <summary>Creates a new CaseSwitchLabelSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseSwitchLabel">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax CaseSwitchLabel (Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax value, Microsoft.CodeAnalysis.SyntaxToken colonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax CaseSwitchLabel(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax value, valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseSwitchLabel (keyword As SyntaxToken, value As ExpressionSyntax, colonToken As SyntaxToken) As CaseSwitchLabelSyntax" />
      <MemberSignature Language="F#" Value="static member CaseSwitchLabel : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel (keyword, value, colonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">To be added.</param>
        <param name="value">To be added.</param>
        <param name="colonToken">To be added.</param>
        <summary>Creates a new CaseSwitchLabelSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CastExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax CastExpression (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax CastExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CastExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CastExpression (type As TypeSyntax, expression As ExpressionSyntax) As CastExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member CastExpression : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CastExpression (type, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new CastExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CastExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax CastExpression (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax CastExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CastExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CastExpression (openParenToken As SyntaxToken, type As TypeSyntax, closeParenToken As SyntaxToken, expression As ExpressionSyntax) As CastExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member CastExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CastExpression (openParenToken, type, closeParenToken, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="openParenToken">To be added.</param>
        <param name="type">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new CastExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax CatchClause ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax CatchClause() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CatchClause () As CatchClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CatchClause : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new CatchClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax CatchClause (Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax declaration, Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax filter, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax CatchClause(class Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax declaration, class Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax filter, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CatchClause (declaration As CatchDeclarationSyntax, filter As CatchFilterClauseSyntax, block As BlockSyntax) As CatchClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CatchClause : Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause (declaration, filter, block)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax" />
        <Parameter Name="filter" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax" />
        <Parameter Name="block" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="filter">To be added.</param>
        <param name="block">To be added.</param>
        <summary>Creates a new CatchClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax CatchClause (Microsoft.CodeAnalysis.SyntaxToken catchKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax declaration, Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax filter, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax CatchClause(valuetype Microsoft.CodeAnalysis.SyntaxToken catchKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax declaration, class Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax filter, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CatchClause (catchKeyword As SyntaxToken, declaration As CatchDeclarationSyntax, filter As CatchFilterClauseSyntax, block As BlockSyntax) As CatchClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CatchClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause (catchKeyword, declaration, filter, block)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catchKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax" />
        <Parameter Name="filter" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax" />
        <Parameter Name="block" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
      </Parameters>
      <Docs>
        <param name="catchKeyword">To be added.</param>
        <param name="declaration">To be added.</param>
        <param name="filter">To be added.</param>
        <param name="block">To be added.</param>
        <summary>Creates a new CatchClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax CatchDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax CatchDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CatchDeclaration (type As TypeSyntax) As CatchDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member CatchDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Creates a new CatchDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax CatchDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax CatchDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CatchDeclaration (type As TypeSyntax, identifier As SyntaxToken) As CatchDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member CatchDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration (type, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>Creates a new CatchDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax CatchDeclaration (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax CatchDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CatchDeclaration (openParenToken As SyntaxToken, type As TypeSyntax, identifier As SyntaxToken, closeParenToken As SyntaxToken) As CatchDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member CatchDeclaration : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration (openParenToken, type, identifier, closeParenToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openParenToken">To be added.</param>
        <param name="type">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>Creates a new CatchDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchFilterClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax CatchFilterClause (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax filterExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax CatchFilterClause(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax filterExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchFilterClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CatchFilterClause (filterExpression As ExpressionSyntax) As CatchFilterClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CatchFilterClause : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchFilterClause filterExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="filterExpression">To be added.</param>
        <summary>Creates a new CatchFilterClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchFilterClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax CatchFilterClause (Microsoft.CodeAnalysis.SyntaxToken whenKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax filterExpression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax CatchFilterClause(valuetype Microsoft.CodeAnalysis.SyntaxToken whenKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax filterExpression, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchFilterClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CatchFilterClause (whenKeyword As SyntaxToken, openParenToken As SyntaxToken, filterExpression As ExpressionSyntax, closeParenToken As SyntaxToken) As CatchFilterClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CatchFilterClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchFilterClause (whenKeyword, openParenToken, filterExpression, closeParenToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whenKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="filterExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="whenKeyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="filterExpression">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>Creates a new CatchFilterClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckedExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax CheckedExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax CheckedExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CheckedExpression (kind As SyntaxKind, expression As ExpressionSyntax) As CheckedExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member CheckedExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedExpression (kind, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new CheckedExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckedExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax CheckedExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax CheckedExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CheckedExpression (kind As SyntaxKind, keyword As SyntaxToken, openParenToken As SyntaxToken, expression As ExpressionSyntax, closeParenToken As SyntaxToken) As CheckedExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member CheckedExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedExpression (kind, keyword, openParenToken, expression, closeParenToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="keyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>Creates a new CheckedExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckedStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax CheckedStatement (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax CheckedStatement(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CheckedStatement (kind As SyntaxKind, Optional block As BlockSyntax = null) As CheckedStatementSyntax" />
      <MemberSignature Language="F#" Value="static member CheckedStatement : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedStatement (kind, block)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="block" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="block">To be added.</param>
        <summary>Creates a new CheckedStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckedStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax CheckedStatement (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax CheckedStatement(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CheckedStatement (kind As SyntaxKind, keyword As SyntaxToken, block As BlockSyntax) As CheckedStatementSyntax" />
      <MemberSignature Language="F#" Value="static member CheckedStatement : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedStatement (kind, keyword, block)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="block" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="keyword">To be added.</param>
        <param name="block">To be added.</param>
        <summary>Creates a new CheckedStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax ClassDeclaration (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax ClassDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClassDeclaration (identifier As SyntaxToken) As ClassDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member ClassDeclaration : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new ClassDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax ClassDeclaration (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax ClassDeclaration(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClassDeclaration (identifier As String) As ClassDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member ClassDeclaration : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new ClassDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax ClassDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax ClassDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClassDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, baseList As BaseListSyntax, constraintClauses As SyntaxList(Of TypeParameterConstraintClauseSyntax), members As SyntaxList(Of MemberDeclarationSyntax)) As ClassDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member ClassDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration (attributeLists, modifiers, identifier, typeParameterList, baseList, constraintClauses, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" />
        <Parameter Name="baseList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" />
        <Parameter Name="constraintClauses" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="typeParameterList">To be added.</param>
        <param name="baseList">To be added.</param>
        <param name="constraintClauses">To be added.</param>
        <param name="members">To be added.</param>
        <summary>Creates a new ClassDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax ClassDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax ClassDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, valuetype Microsoft.CodeAnalysis.SyntaxToken openBraceToken, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClassDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, baseList As BaseListSyntax, constraintClauses As SyntaxList(Of TypeParameterConstraintClauseSyntax), openBraceToken As SyntaxToken, members As SyntaxList(Of MemberDeclarationSyntax), closeBraceToken As SyntaxToken, semicolonToken As SyntaxToken) As ClassDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member ClassDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration (attributeLists, modifiers, keyword, identifier, typeParameterList, baseList, constraintClauses, openBraceToken, members, closeBraceToken, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" />
        <Parameter Name="baseList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" />
        <Parameter Name="constraintClauses" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt;" />
        <Parameter Name="openBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt;" />
        <Parameter Name="closeBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="keyword">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="typeParameterList">To be added.</param>
        <param name="baseList">To be added.</param>
        <param name="constraintClauses">To be added.</param>
        <param name="openBraceToken">To be added.</param>
        <param name="members">To be added.</param>
        <param name="closeBraceToken">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new ClassDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassOrStructConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax ClassOrStructConstraint (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax ClassOrStructConstraint(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClassOrStructConstraint (kind As SyntaxKind) As ClassOrStructConstraintSyntax" />
      <MemberSignature Language="F#" Value="static member ClassOrStructConstraint : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint kind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>Creates a new ClassOrStructConstraintSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassOrStructConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax ClassOrStructConstraint (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken classOrStructKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax ClassOrStructConstraint(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken classOrStructKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClassOrStructConstraint (kind As SyntaxKind, classOrStructKeyword As SyntaxToken) As ClassOrStructConstraintSyntax" />
      <MemberSignature Language="F#" Value="static member ClassOrStructConstraint : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint (kind, classOrStructKeyword)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="classOrStructKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="classOrStructKeyword">To be added.</param>
        <summary>Creates a new ClassOrStructConstraintSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Comment">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia Comment (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTrivia Comment(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Comment(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Comment (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member Comment : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Comment text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The entire text of the comment including the leading '//' token for single line comments
            or stop or start tokens for multiline comments.</param>
        <summary>
            Creates a trivia with kind either SingleLineCommentTrivia or MultiLineCommentTrivia containing the specified
            text.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompilationUnit">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax CompilationUnit ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax CompilationUnit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompilationUnit () As CompilationUnitSyntax" />
      <MemberSignature Language="F#" Value="static member CompilationUnit : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new CompilationUnitSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompilationUnit">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax CompilationUnit (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax&gt; externs, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax&gt; usings, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax CompilationUnit(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax&gt; externs, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax&gt; usings, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompilationUnit (externs As SyntaxList(Of ExternAliasDirectiveSyntax), usings As SyntaxList(Of UsingDirectiveSyntax), attributeLists As SyntaxList(Of AttributeListSyntax), members As SyntaxList(Of MemberDeclarationSyntax)) As CompilationUnitSyntax" />
      <MemberSignature Language="F#" Value="static member CompilationUnit : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit (externs, usings, attributeLists, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="externs" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax&gt;" />
        <Parameter Name="usings" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax&gt;" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="externs">To be added.</param>
        <param name="usings">To be added.</param>
        <param name="attributeLists">To be added.</param>
        <param name="members">To be added.</param>
        <summary>Creates a new CompilationUnitSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompilationUnit">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax CompilationUnit (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax&gt; externs, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax&gt; usings, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members, Microsoft.CodeAnalysis.SyntaxToken endOfFileToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax CompilationUnit(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax&gt; externs, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax&gt; usings, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfFileToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompilationUnit (externs As SyntaxList(Of ExternAliasDirectiveSyntax), usings As SyntaxList(Of UsingDirectiveSyntax), attributeLists As SyntaxList(Of AttributeListSyntax), members As SyntaxList(Of MemberDeclarationSyntax), endOfFileToken As SyntaxToken) As CompilationUnitSyntax" />
      <MemberSignature Language="F#" Value="static member CompilationUnit : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CompilationUnit (externs, usings, attributeLists, members, endOfFileToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="externs" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax&gt;" />
        <Parameter Name="usings" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax&gt;" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt;" />
        <Parameter Name="endOfFileToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="externs">To be added.</param>
        <param name="usings">To be added.</param>
        <param name="attributeLists">To be added.</param>
        <param name="members">To be added.</param>
        <param name="endOfFileToken">To be added.</param>
        <summary>Creates a new CompilationUnitSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionalAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax ConditionalAccessExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax whenNotNull);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax ConditionalAccessExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax whenNotNull) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConditionalAccessExpression (expression As ExpressionSyntax, whenNotNull As ExpressionSyntax) As ConditionalAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ConditionalAccessExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalAccessExpression (expression, whenNotNull)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="whenNotNull" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="whenNotNull">To be added.</param>
        <summary>Creates a new ConditionalAccessExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionalAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax ConditionalAccessExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax whenNotNull);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax ConditionalAccessExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax whenNotNull) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConditionalAccessExpression (expression As ExpressionSyntax, operatorToken As SyntaxToken, whenNotNull As ExpressionSyntax) As ConditionalAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ConditionalAccessExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalAccessExpression (expression, operatorToken, whenNotNull)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="whenNotNull" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="operatorToken">To be added.</param>
        <param name="whenNotNull">To be added.</param>
        <summary>Creates a new ConditionalAccessExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionalExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax ConditionalExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax whenTrue, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax whenFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax ConditionalExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax whenTrue, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax whenFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConditionalExpression (condition As ExpressionSyntax, whenTrue As ExpressionSyntax, whenFalse As ExpressionSyntax) As ConditionalExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ConditionalExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalExpression (condition, whenTrue, whenFalse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="whenTrue" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="whenFalse" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="condition">To be added.</param>
        <param name="whenTrue">To be added.</param>
        <param name="whenFalse">To be added.</param>
        <summary>Creates a new ConditionalExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionalExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax ConditionalExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken questionToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax whenTrue, Microsoft.CodeAnalysis.SyntaxToken colonToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax whenFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax ConditionalExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, valuetype Microsoft.CodeAnalysis.SyntaxToken questionToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax whenTrue, valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax whenFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConditionalExpression (condition As ExpressionSyntax, questionToken As SyntaxToken, whenTrue As ExpressionSyntax, colonToken As SyntaxToken, whenFalse As ExpressionSyntax) As ConditionalExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ConditionalExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalExpression (condition, questionToken, whenTrue, colonToken, whenFalse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="questionToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="whenTrue" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="whenFalse" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="condition">To be added.</param>
        <param name="questionToken">To be added.</param>
        <param name="whenTrue">To be added.</param>
        <param name="colonToken">To be added.</param>
        <param name="whenFalse">To be added.</param>
        <summary>Creates a new ConditionalExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstantPattern">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax ConstantPattern (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax ConstantPattern(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstantPattern(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstantPattern (expression As ExpressionSyntax) As ConstantPatternSyntax" />
      <MemberSignature Language="F#" Value="static member ConstantPattern : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstantPattern expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new ConstantPatternSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructorConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax ConstructorConstraint ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax ConstructorConstraint() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorConstraint" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstructorConstraint () As ConstructorConstraintSyntax" />
      <MemberSignature Language="F#" Value="static member ConstructorConstraint : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorConstraint " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new ConstructorConstraintSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructorConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax ConstructorConstraint (Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax ConstructorConstraint(valuetype Microsoft.CodeAnalysis.SyntaxToken newKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorConstraint(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstructorConstraint (newKeyword As SyntaxToken, openParenToken As SyntaxToken, closeParenToken As SyntaxToken) As ConstructorConstraintSyntax" />
      <MemberSignature Language="F#" Value="static member ConstructorConstraint : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorConstraint (newKeyword, openParenToken, closeParenToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="newKeyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>Creates a new ConstructorConstraintSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax ConstructorDeclaration (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax ConstructorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstructorDeclaration (identifier As SyntaxToken) As ConstructorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member ConstructorDeclaration : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new ConstructorDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax ConstructorDeclaration (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax ConstructorDeclaration(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstructorDeclaration (identifier As String) As ConstructorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member ConstructorDeclaration : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new ConstructorDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax ConstructorDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax initializer, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax ConstructorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax initializer, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstructorDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, parameterList As ParameterListSyntax, initializer As ConstructorInitializerSyntax, expressionBody As ArrowExpressionClauseSyntax) As ConstructorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member ConstructorDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration (attributeLists, modifiers, identifier, parameterList, initializer, expressionBody)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="initializer">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax ConstructorDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax initializer, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax ConstructorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax initializer, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstructorDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, parameterList As ParameterListSyntax, initializer As ConstructorInitializerSyntax, body As BlockSyntax) As ConstructorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member ConstructorDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration (attributeLists, modifiers, identifier, parameterList, initializer, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="initializer">To be added.</param>
        <param name="body">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax ConstructorDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax initializer, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax ConstructorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax initializer, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstructorDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, parameterList As ParameterListSyntax, initializer As ConstructorInitializerSyntax, expressionBody As ArrowExpressionClauseSyntax, semicolonToken As SyntaxToken) As ConstructorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member ConstructorDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration (attributeLists, modifiers, identifier, parameterList, initializer, expressionBody, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="initializer">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax ConstructorDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax initializer, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax ConstructorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax initializer, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstructorDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, parameterList As ParameterListSyntax, initializer As ConstructorInitializerSyntax, body As BlockSyntax, expressionBody As ArrowExpressionClauseSyntax) As ConstructorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member ConstructorDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration (attributeLists, modifiers, identifier, parameterList, initializer, body, expressionBody)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="initializer">To be added.</param>
        <param name="body">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <summary>Creates a new ConstructorDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax ConstructorDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax initializer, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax ConstructorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax initializer, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstructorDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, parameterList As ParameterListSyntax, initializer As ConstructorInitializerSyntax, body As BlockSyntax, semicolonToken As SyntaxToken) As ConstructorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member ConstructorDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration (attributeLists, modifiers, identifier, parameterList, initializer, body, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="initializer">To be added.</param>
        <param name="body">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax ConstructorDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax initializer, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax ConstructorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax initializer, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstructorDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, parameterList As ParameterListSyntax, initializer As ConstructorInitializerSyntax, body As BlockSyntax, expressionBody As ArrowExpressionClauseSyntax, semicolonToken As SyntaxToken) As ConstructorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member ConstructorDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration (attributeLists, modifiers, identifier, parameterList, initializer, body, expressionBody, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="initializer">To be added.</param>
        <param name="body">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new ConstructorDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructorInitializer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax ConstructorInitializer (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax argumentList = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax ConstructorInitializer(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax argumentList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorInitializer(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstructorInitializer (kind As SyntaxKind, Optional argumentList As ArgumentListSyntax = null) As ConstructorInitializerSyntax" />
      <MemberSignature Language="F#" Value="static member ConstructorInitializer : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorInitializer (kind, argumentList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="argumentList">To be added.</param>
        <summary>Creates a new ConstructorInitializerSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructorInitializer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax ConstructorInitializer (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken colonToken, Microsoft.CodeAnalysis.SyntaxToken thisOrBaseKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax argumentList);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax ConstructorInitializer(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken, valuetype Microsoft.CodeAnalysis.SyntaxToken thisOrBaseKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax argumentList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorInitializer(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstructorInitializer (kind As SyntaxKind, colonToken As SyntaxToken, thisOrBaseKeyword As SyntaxToken, argumentList As ArgumentListSyntax) As ConstructorInitializerSyntax" />
      <MemberSignature Language="F#" Value="static member ConstructorInitializer : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorInitializer (kind, colonToken, thisOrBaseKeyword, argumentList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="thisOrBaseKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="colonToken">To be added.</param>
        <param name="thisOrBaseKeyword">To be added.</param>
        <param name="argumentList">To be added.</param>
        <summary>Creates a new ConstructorInitializerSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax ContinueStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax ContinueStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ContinueStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ContinueStatement () As ContinueStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ContinueStatement : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ContinueStatement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new ContinueStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax ContinueStatement (Microsoft.CodeAnalysis.SyntaxToken continueKeyword, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax ContinueStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken continueKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ContinueStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ContinueStatement (continueKeyword As SyntaxToken, semicolonToken As SyntaxToken) As ContinueStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ContinueStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ContinueStatement (continueKeyword, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continueKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="continueKeyword">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new ContinueStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConversionOperatorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax ConversionOperatorDeclaration (Microsoft.CodeAnalysis.SyntaxToken implicitOrExplicitKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax ConversionOperatorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxToken implicitOrExplicitKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConversionOperatorDeclaration (implicitOrExplicitKeyword As SyntaxToken, type As TypeSyntax) As ConversionOperatorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member ConversionOperatorDeclaration : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration (implicitOrExplicitKeyword, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implicitOrExplicitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="implicitOrExplicitKeyword">To be added.</param>
        <param name="type">To be added.</param>
        <summary>Creates a new ConversionOperatorDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConversionOperatorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax ConversionOperatorDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken implicitOrExplicitKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax ConversionOperatorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken implicitOrExplicitKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConversionOperatorDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, implicitOrExplicitKeyword As SyntaxToken, type As TypeSyntax, parameterList As ParameterListSyntax, body As BlockSyntax, expressionBody As ArrowExpressionClauseSyntax) As ConversionOperatorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member ConversionOperatorDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration (attributeLists, modifiers, implicitOrExplicitKeyword, type, parameterList, body, expressionBody)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="implicitOrExplicitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="implicitOrExplicitKeyword">To be added.</param>
        <param name="type">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="body">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <summary>Creates a new ConversionOperatorDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConversionOperatorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax ConversionOperatorDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken implicitOrExplicitKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax ConversionOperatorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken implicitOrExplicitKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConversionOperatorDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, implicitOrExplicitKeyword As SyntaxToken, operatorKeyword As SyntaxToken, type As TypeSyntax, parameterList As ParameterListSyntax, body As BlockSyntax, semicolonToken As SyntaxToken) As ConversionOperatorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member ConversionOperatorDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration (attributeLists, modifiers, implicitOrExplicitKeyword, operatorKeyword, type, parameterList, body, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="implicitOrExplicitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operatorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="implicitOrExplicitKeyword">To be added.</param>
        <param name="operatorKeyword">To be added.</param>
        <param name="type">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="body">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConversionOperatorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax ConversionOperatorDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken implicitOrExplicitKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax ConversionOperatorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken implicitOrExplicitKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConversionOperatorDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, implicitOrExplicitKeyword As SyntaxToken, operatorKeyword As SyntaxToken, type As TypeSyntax, parameterList As ParameterListSyntax, body As BlockSyntax, expressionBody As ArrowExpressionClauseSyntax, semicolonToken As SyntaxToken) As ConversionOperatorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member ConversionOperatorDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration (attributeLists, modifiers, implicitOrExplicitKeyword, operatorKeyword, type, parameterList, body, expressionBody, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="implicitOrExplicitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operatorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="implicitOrExplicitKeyword">To be added.</param>
        <param name="operatorKeyword">To be added.</param>
        <param name="type">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="body">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new ConversionOperatorDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConversionOperatorMemberCref">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax ConversionOperatorMemberCref (Microsoft.CodeAnalysis.SyntaxToken implicitOrExplicitKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax ConversionOperatorMemberCref(valuetype Microsoft.CodeAnalysis.SyntaxToken implicitOrExplicitKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConversionOperatorMemberCref (implicitOrExplicitKeyword As SyntaxToken, type As TypeSyntax) As ConversionOperatorMemberCrefSyntax" />
      <MemberSignature Language="F#" Value="static member ConversionOperatorMemberCref : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref (implicitOrExplicitKeyword, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implicitOrExplicitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="implicitOrExplicitKeyword">To be added.</param>
        <param name="type">To be added.</param>
        <summary>Creates a new ConversionOperatorMemberCrefSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConversionOperatorMemberCref">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax ConversionOperatorMemberCref (Microsoft.CodeAnalysis.SyntaxToken implicitOrExplicitKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax ConversionOperatorMemberCref(valuetype Microsoft.CodeAnalysis.SyntaxToken implicitOrExplicitKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConversionOperatorMemberCref (implicitOrExplicitKeyword As SyntaxToken, type As TypeSyntax, parameters As CrefParameterListSyntax) As ConversionOperatorMemberCrefSyntax" />
      <MemberSignature Language="F#" Value="static member ConversionOperatorMemberCref : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref (implicitOrExplicitKeyword, type, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implicitOrExplicitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="implicitOrExplicitKeyword">To be added.</param>
        <param name="type">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>Creates a new ConversionOperatorMemberCrefSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConversionOperatorMemberCref">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax ConversionOperatorMemberCref (Microsoft.CodeAnalysis.SyntaxToken implicitOrExplicitKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax ConversionOperatorMemberCref(valuetype Microsoft.CodeAnalysis.SyntaxToken implicitOrExplicitKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConversionOperatorMemberCref (implicitOrExplicitKeyword As SyntaxToken, operatorKeyword As SyntaxToken, type As TypeSyntax, parameters As CrefParameterListSyntax) As ConversionOperatorMemberCrefSyntax" />
      <MemberSignature Language="F#" Value="static member ConversionOperatorMemberCref : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref (implicitOrExplicitKeyword, operatorKeyword, type, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implicitOrExplicitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operatorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="implicitOrExplicitKeyword">To be added.</param>
        <param name="operatorKeyword">To be added.</param>
        <param name="type">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>Creates a new ConversionOperatorMemberCrefSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrefBracketedParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax CrefBracketedParameterList (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax&gt; parameters = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax CrefBracketedParameterList(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefBracketedParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrefBracketedParameterList (Optional parameters As SeparatedSyntaxList(Of CrefParameterSyntax) = null) As CrefBracketedParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member CrefBracketedParameterList : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefBracketedParameterList parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="parameters">To be added.</param>
        <summary>Creates a new CrefBracketedParameterListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrefBracketedParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax CrefBracketedParameterList (Microsoft.CodeAnalysis.SyntaxToken openBracketToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax&gt; parameters, Microsoft.CodeAnalysis.SyntaxToken closeBracketToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax CrefBracketedParameterList(valuetype Microsoft.CodeAnalysis.SyntaxToken openBracketToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax&gt; parameters, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBracketToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefBracketedParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrefBracketedParameterList (openBracketToken As SyntaxToken, parameters As SeparatedSyntaxList(Of CrefParameterSyntax), closeBracketToken As SyntaxToken) As CrefBracketedParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member CrefBracketedParameterList : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefBracketedParameterList (openBracketToken, parameters, closeBracketToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openBracketToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax&gt;" />
        <Parameter Name="closeBracketToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openBracketToken">To be added.</param>
        <param name="parameters">To be added.</param>
        <param name="closeBracketToken">To be added.</param>
        <summary>Creates a new CrefBracketedParameterListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrefParameter">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax CrefParameter (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax CrefParameter(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameter(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrefParameter (type As TypeSyntax) As CrefParameterSyntax" />
      <MemberSignature Language="F#" Value="static member CrefParameter : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameter type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Creates a new CrefParameterSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrefParameter">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax CrefParameter (Microsoft.CodeAnalysis.SyntaxToken refOrOutKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax CrefParameter(valuetype Microsoft.CodeAnalysis.SyntaxToken refOrOutKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameter(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrefParameter (refOrOutKeyword As SyntaxToken, type As TypeSyntax) As CrefParameterSyntax" />
      <MemberSignature Language="F#" Value="static member CrefParameter : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameter (refOrOutKeyword, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refOrOutKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="refOrOutKeyword">To be added.</param>
        <param name="type">To be added.</param>
        <summary>Creates a new CrefParameterSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrefParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax CrefParameterList (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax&gt; parameters = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax CrefParameterList(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrefParameterList (Optional parameters As SeparatedSyntaxList(Of CrefParameterSyntax) = null) As CrefParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member CrefParameterList : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameterList parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="parameters">To be added.</param>
        <summary>Creates a new CrefParameterListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrefParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax CrefParameterList (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax&gt; parameters, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax CrefParameterList(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax&gt; parameters, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrefParameterList (openParenToken As SyntaxToken, parameters As SeparatedSyntaxList(Of CrefParameterSyntax), closeParenToken As SyntaxToken) As CrefParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member CrefParameterList : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameterList (openParenToken, parameters, closeParenToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax&gt;" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openParenToken">To be added.</param>
        <param name="parameters">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>Creates a new CrefParameterListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclarationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax DeclarationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax designation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax DeclarationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax designation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DeclarationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeclarationExpression (type As TypeSyntax, designation As VariableDesignationSyntax) As DeclarationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member DeclarationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DeclarationExpression (type, designation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="designation" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="designation">To be added.</param>
        <summary>Creates a new DeclarationExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclarationPattern">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax DeclarationPattern (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax designation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax DeclarationPattern(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax designation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DeclarationPattern(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeclarationPattern (type As TypeSyntax, designation As VariableDesignationSyntax) As DeclarationPatternSyntax" />
      <MemberSignature Language="F#" Value="static member DeclarationPattern : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DeclarationPattern (type, designation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="designation" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="designation">To be added.</param>
        <summary>Creates a new DeclarationPatternSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax DefaultExpression (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax DefaultExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DefaultExpression (type As TypeSyntax) As DefaultExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member DefaultExpression : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultExpression type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Creates a new DefaultExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax DefaultExpression (Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax DefaultExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DefaultExpression (keyword As SyntaxToken, openParenToken As SyntaxToken, type As TypeSyntax, closeParenToken As SyntaxToken) As DefaultExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member DefaultExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultExpression (keyword, openParenToken, type, closeParenToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="type">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>Creates a new DefaultExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSwitchLabel">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax DefaultSwitchLabel ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax DefaultSwitchLabel() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DefaultSwitchLabel () As DefaultSwitchLabelSyntax" />
      <MemberSignature Language="F#" Value="static member DefaultSwitchLabel : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new DefaultSwitchLabelSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSwitchLabel">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax DefaultSwitchLabel (Microsoft.CodeAnalysis.SyntaxToken colonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax DefaultSwitchLabel(valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DefaultSwitchLabel (colonToken As SyntaxToken) As DefaultSwitchLabelSyntax" />
      <MemberSignature Language="F#" Value="static member DefaultSwitchLabel : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel colonToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="colonToken">To be added.</param>
        <summary>Creates a new DefaultSwitchLabelSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSwitchLabel">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax DefaultSwitchLabel (Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken colonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax DefaultSwitchLabel(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DefaultSwitchLabel (keyword As SyntaxToken, colonToken As SyntaxToken) As DefaultSwitchLabelSyntax" />
      <MemberSignature Language="F#" Value="static member DefaultSwitchLabel : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel (keyword, colonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">To be added.</param>
        <param name="colonToken">To be added.</param>
        <summary>Creates a new DefaultSwitchLabelSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax DefineDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken name, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax DefineDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken name, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DefineDirectiveTrivia (name As SyntaxToken, isActive As Boolean) As DefineDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member DefineDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia (name, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new DefineDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax DefineDirectiveTrivia (string name, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax DefineDirectiveTrivia(string name, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DefineDirectiveTrivia (name As String, isActive As Boolean) As DefineDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member DefineDirectiveTrivia : string * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia (name, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new DefineDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax DefineDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken defineKeyword, Microsoft.CodeAnalysis.SyntaxToken name, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax DefineDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken defineKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken name, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DefineDirectiveTrivia (hashToken As SyntaxToken, defineKeyword As SyntaxToken, name As SyntaxToken, endOfDirectiveToken As SyntaxToken, isActive As Boolean) As DefineDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member DefineDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia (hashToken, defineKeyword, name, endOfDirectiveToken, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="defineKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endOfDirectiveToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hashToken">To be added.</param>
        <param name="defineKeyword">To be added.</param>
        <param name="name">To be added.</param>
        <param name="endOfDirectiveToken">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new DefineDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax DelegateDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax DelegateDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DelegateDeclaration (returnType As TypeSyntax, identifier As SyntaxToken) As DelegateDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member DelegateDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration (returnType, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="returnType">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>Creates a new DelegateDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax DelegateDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax DelegateDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DelegateDeclaration (returnType As TypeSyntax, identifier As String) As DelegateDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member DelegateDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration (returnType, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="returnType">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>Creates a new DelegateDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax DelegateDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax DelegateDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DelegateDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, returnType As TypeSyntax, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, constraintClauses As SyntaxList(Of TypeParameterConstraintClauseSyntax)) As DelegateDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member DelegateDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration (attributeLists, modifiers, returnType, identifier, typeParameterList, parameterList, constraintClauses)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="constraintClauses" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="typeParameterList">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="constraintClauses">To be added.</param>
        <summary>Creates a new DelegateDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax DelegateDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken delegateKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax DelegateDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken delegateKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DelegateDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, delegateKeyword As SyntaxToken, returnType As TypeSyntax, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, constraintClauses As SyntaxList(Of TypeParameterConstraintClauseSyntax), semicolonToken As SyntaxToken) As DelegateDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member DelegateDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration (attributeLists, modifiers, delegateKeyword, returnType, identifier, typeParameterList, parameterList, constraintClauses, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="delegateKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="constraintClauses" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt;" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="delegateKeyword">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="typeParameterList">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="constraintClauses">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new DelegateDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DestructorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax DestructorDeclaration (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax DestructorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DestructorDeclaration (identifier As SyntaxToken) As DestructorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member DestructorDeclaration : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new DestructorDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DestructorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax DestructorDeclaration (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax DestructorDeclaration(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DestructorDeclaration (identifier As String) As DestructorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member DestructorDeclaration : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new DestructorDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DestructorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax DestructorDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax DestructorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DestructorDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, parameterList As ParameterListSyntax, expressionBody As ArrowExpressionClauseSyntax) As DestructorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member DestructorDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration (attributeLists, modifiers, identifier, parameterList, expressionBody)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DestructorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax DestructorDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax DestructorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DestructorDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, parameterList As ParameterListSyntax, body As BlockSyntax) As DestructorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member DestructorDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration (attributeLists, modifiers, identifier, parameterList, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="body">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DestructorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax DestructorDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax DestructorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DestructorDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, parameterList As ParameterListSyntax, body As BlockSyntax, expressionBody As ArrowExpressionClauseSyntax) As DestructorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member DestructorDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration (attributeLists, modifiers, identifier, parameterList, body, expressionBody)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="body">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <summary>Creates a new DestructorDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DestructorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax DestructorDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken tildeToken, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax DestructorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken tildeToken, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DestructorDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, tildeToken As SyntaxToken, identifier As SyntaxToken, parameterList As ParameterListSyntax, expressionBody As ArrowExpressionClauseSyntax, semicolonToken As SyntaxToken) As DestructorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member DestructorDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration (attributeLists, modifiers, tildeToken, identifier, parameterList, expressionBody, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="tildeToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="tildeToken">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DestructorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax DestructorDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken tildeToken, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax DestructorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken tildeToken, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DestructorDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, tildeToken As SyntaxToken, identifier As SyntaxToken, parameterList As ParameterListSyntax, body As BlockSyntax, semicolonToken As SyntaxToken) As DestructorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member DestructorDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration (attributeLists, modifiers, tildeToken, identifier, parameterList, body, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="tildeToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="tildeToken">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="body">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DestructorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax DestructorDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken tildeToken, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax DestructorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken tildeToken, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DestructorDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, tildeToken As SyntaxToken, identifier As SyntaxToken, parameterList As ParameterListSyntax, body As BlockSyntax, expressionBody As ArrowExpressionClauseSyntax, semicolonToken As SyntaxToken) As DestructorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member DestructorDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration (attributeLists, modifiers, tildeToken, identifier, parameterList, body, expressionBody, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="tildeToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="tildeToken">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="body">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new DestructorDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisabledText">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia DisabledText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTrivia DisabledText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DisabledText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DisabledText (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member DisabledText : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DisabledText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <summary>
            Creates a trivia with kind DisabledTextTrivia. Disabled text corresponds to any text between directives that
            is not considered active.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DiscardDesignation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax DiscardDesignation ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax DiscardDesignation() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DiscardDesignation" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DiscardDesignation () As DiscardDesignationSyntax" />
      <MemberSignature Language="F#" Value="static member DiscardDesignation : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DiscardDesignation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new DiscardDesignationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DiscardDesignation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax DiscardDesignation (Microsoft.CodeAnalysis.SyntaxToken underscoreToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax DiscardDesignation(valuetype Microsoft.CodeAnalysis.SyntaxToken underscoreToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DiscardDesignation(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DiscardDesignation (underscoreToken As SyntaxToken) As DiscardDesignationSyntax" />
      <MemberSignature Language="F#" Value="static member DiscardDesignation : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DiscardDesignation underscoreToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="underscoreToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="underscoreToken">To be added.</param>
        <summary>Creates a new DiscardDesignationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentationComment">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax DocumentationComment (params Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax DocumentationComment(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationComment(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DocumentationComment (ParamArray content As XmlNodeSyntax()) As DocumentationCommentTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member DocumentationComment : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationComment content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
            A list of xml node syntax that will be the content within the xml documentation comment
            (e.g. a summary element, a returns element, exception element and so on).
            </param>
        <summary>
            Creates an xml documentation comment that abstracts xml syntax creation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentationCommentExterior">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia DocumentationCommentExterior (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTrivia DocumentationCommentExterior(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentExterior(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DocumentationCommentExterior (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member DocumentationCommentExterior : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentExterior text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal.</param>
        <summary>
            Creates a trivia with kind DocumentationCommentExteriorTrivia.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentationCommentTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax DocumentationCommentTrivia (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax DocumentationCommentTrivia(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DocumentationCommentTrivia (kind As SyntaxKind, Optional content As SyntaxList(Of XmlNodeSyntax) = null) As DocumentationCommentTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member DocumentationCommentTrivia : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentTrivia (kind, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="content">To be added.</param>
        <summary>Creates a new DocumentationCommentTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentationCommentTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax DocumentationCommentTrivia (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content, Microsoft.CodeAnalysis.SyntaxToken endOfComment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax DocumentationCommentTrivia(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfComment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DocumentationCommentTrivia (kind As SyntaxKind, content As SyntaxList(Of XmlNodeSyntax), endOfComment As SyntaxToken) As DocumentationCommentTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member DocumentationCommentTrivia : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationCommentTrivia (kind, content, endOfComment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt;" />
        <Parameter Name="endOfComment" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="content">To be added.</param>
        <param name="endOfComment">To be added.</param>
        <summary>Creates a new DocumentationCommentTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax DoStatement (Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax DoStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoStatement (statement As StatementSyntax, condition As ExpressionSyntax) As DoStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DoStatement : Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DoStatement (statement, condition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="statement">To be added.</param>
        <param name="condition">To be added.</param>
        <summary>Creates a new DoStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax DoStatement (Microsoft.CodeAnalysis.SyntaxToken doKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement, Microsoft.CodeAnalysis.SyntaxToken whileKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax DoStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken doKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement, valuetype Microsoft.CodeAnalysis.SyntaxToken whileKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoStatement (doKeyword As SyntaxToken, statement As StatementSyntax, whileKeyword As SyntaxToken, openParenToken As SyntaxToken, condition As ExpressionSyntax, closeParenToken As SyntaxToken, semicolonToken As SyntaxToken) As DoStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DoStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DoStatement (doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="doKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
        <Parameter Name="whileKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="doKeyword">To be added.</param>
        <param name="statement">To be added.</param>
        <param name="whileKeyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="condition">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new DoStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElasticCarriageReturn">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticCarriageReturn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia ElasticCarriageReturn" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ElasticCarriageReturn As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.ElasticCarriageReturn : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            An elastic trivia with kind EndOfLineTrivia containing a single carriage return character. Elastic trivia
            are used to denote trivia that was not produced by parsing source text, and are usually not preserved during
            formatting.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElasticCarriageReturnLineFeed">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticCarriageReturnLineFeed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia ElasticCarriageReturnLineFeed" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturnLineFeed" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ElasticCarriageReturnLineFeed As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.ElasticCarriageReturnLineFeed : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticCarriageReturnLineFeed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            An elastic trivia with kind EndOfLineTrivia containing both the carriage return and line feed characters.
            Elastic trivia are used to denote trivia that was not produced by parsing source text, and are usually not
            preserved during formatting.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElasticEndOfLine">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticEndOfLine (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTrivia ElasticEndOfLine(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticEndOfLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElasticEndOfLine (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member ElasticEndOfLine : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticEndOfLine text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text of the end of line. Any text can be specified here, however only carriage return and
            line feed characters are recognized by the parser as end of line.</param>
        <summary>
            Creates a trivia with kind EndOfLineTrivia containing the specified text. Elastic trivia are used to
            denote trivia that was not produced by parsing source text, and are usually not preserved during formatting.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElasticLineFeed">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticLineFeed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia ElasticLineFeed" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticLineFeed" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ElasticLineFeed As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.ElasticLineFeed : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticLineFeed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            An elastic trivia with kind EndOfLineTrivia containing a single line feed character. Elastic trivia are used
            to denote trivia that was not produced by parsing source text, and are usually not preserved during
            formatting.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElasticMarker">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticMarker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia ElasticMarker" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticMarker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ElasticMarker As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.ElasticMarker : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticMarker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            An elastic trivia with kind WhitespaceTrivia containing no characters. Elastic marker trivia are included
            automatically by factory methods when trivia is not specified. Syntax formatting will replace elastic
            markers with appropriate trivia.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElasticSpace">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia ElasticSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticSpace" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ElasticSpace As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.ElasticSpace : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            An elastic trivia with kind WhitespaceTrivia containing a single space character. Elastic trivia are used to
            denote trivia that was not produced by parsing source text, and are usually not preserved during formatting.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElasticTab">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticTab { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia ElasticTab" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticTab" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ElasticTab As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.ElasticTab : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticTab" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            An elastic trivia with kind WhitespaceTrivia containing a single tab character. Elastic trivia are used to
            denote trivia that was not produced by parsing source text, and are usually not preserved during formatting.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElasticWhitespace">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticWhitespace (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTrivia ElasticWhitespace(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticWhitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElasticWhitespace (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member ElasticWhitespace : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElasticWhitespace text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text of the whitespace. Any text can be specified here, however only specific
            whitespace characters are recognized by the parser.</param>
        <summary>
            Creates a trivia with kind WhitespaceTrivia containing the specified text. Elastic trivia are used to
            denote trivia that was not produced by parsing source text, and are usually not preserved during formatting.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax ElementAccessExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax ElementAccessExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElementAccessExpression (expression As ExpressionSyntax) As ElementAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ElementAccessExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementAccessExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new ElementAccessExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax ElementAccessExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax argumentList);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax ElementAccessExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax argumentList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElementAccessExpression (expression As ExpressionSyntax, argumentList As BracketedArgumentListSyntax) As ElementAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ElementAccessExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementAccessExpression (expression, argumentList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="argumentList">To be added.</param>
        <summary>Creates a new ElementAccessExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementBindingExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax ElementBindingExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax ElementBindingExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementBindingExpression" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElementBindingExpression () As ElementBindingExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ElementBindingExpression : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementBindingExpression " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new ElementBindingExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementBindingExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax ElementBindingExpression (Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax argumentList);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax ElementBindingExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax argumentList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElementBindingExpression (argumentList As BracketedArgumentListSyntax) As ElementBindingExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ElementBindingExpression : Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementBindingExpression argumentList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="argumentList">To be added.</param>
        <summary>Creates a new ElementBindingExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElifDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax ElifDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, bool isActive, bool branchTaken, bool conditionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax ElifDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, bool isActive, bool branchTaken, bool conditionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElifDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElifDirectiveTrivia (condition As ExpressionSyntax, isActive As Boolean, branchTaken As Boolean, conditionValue As Boolean) As ElifDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ElifDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * bool * bool * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElifDirectiveTrivia (condition, isActive, branchTaken, conditionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="isActive" Type="System.Boolean" />
        <Parameter Name="branchTaken" Type="System.Boolean" />
        <Parameter Name="conditionValue" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">To be added.</param>
        <param name="isActive">To be added.</param>
        <param name="branchTaken">To be added.</param>
        <param name="conditionValue">To be added.</param>
        <summary>Creates a new ElifDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElifDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax ElifDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken elifKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive, bool branchTaken, bool conditionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax ElifDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken elifKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive, bool branchTaken, bool conditionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElifDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElifDirectiveTrivia (hashToken As SyntaxToken, elifKeyword As SyntaxToken, condition As ExpressionSyntax, endOfDirectiveToken As SyntaxToken, isActive As Boolean, branchTaken As Boolean, conditionValue As Boolean) As ElifDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ElifDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * bool * bool * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElifDirectiveTrivia (hashToken, elifKeyword, condition, endOfDirectiveToken, isActive, branchTaken, conditionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="elifKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="endOfDirectiveToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
        <Parameter Name="branchTaken" Type="System.Boolean" />
        <Parameter Name="conditionValue" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hashToken">To be added.</param>
        <param name="elifKeyword">To be added.</param>
        <param name="condition">To be added.</param>
        <param name="endOfDirectiveToken">To be added.</param>
        <param name="isActive">To be added.</param>
        <param name="branchTaken">To be added.</param>
        <param name="conditionValue">To be added.</param>
        <summary>Creates a new ElifDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax ElseClause (Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax ElseClause(class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseClause(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseClause (statement As StatementSyntax) As ElseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member ElseClause : Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseClause statement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="statement">To be added.</param>
        <summary>Creates a new ElseClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax ElseClause (Microsoft.CodeAnalysis.SyntaxToken elseKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax ElseClause(valuetype Microsoft.CodeAnalysis.SyntaxToken elseKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseClause (elseKeyword As SyntaxToken, statement As StatementSyntax) As ElseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member ElseClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseClause (elseKeyword, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elseKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="elseKeyword">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new ElseClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax ElseDirectiveTrivia (bool isActive, bool branchTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax ElseDirectiveTrivia(bool isActive, bool branchTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseDirectiveTrivia(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseDirectiveTrivia (isActive As Boolean, branchTaken As Boolean) As ElseDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ElseDirectiveTrivia : bool * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseDirectiveTrivia (isActive, branchTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isActive" Type="System.Boolean" />
        <Parameter Name="branchTaken" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isActive">To be added.</param>
        <param name="branchTaken">To be added.</param>
        <summary>Creates a new ElseDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax ElseDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken elseKeyword, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive, bool branchTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax ElseDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken elseKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive, bool branchTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseDirectiveTrivia (hashToken As SyntaxToken, elseKeyword As SyntaxToken, endOfDirectiveToken As SyntaxToken, isActive As Boolean, branchTaken As Boolean) As ElseDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ElseDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * bool * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseDirectiveTrivia (hashToken, elseKeyword, endOfDirectiveToken, isActive, branchTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="elseKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endOfDirectiveToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
        <Parameter Name="branchTaken" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hashToken">To be added.</param>
        <param name="elseKeyword">To be added.</param>
        <param name="endOfDirectiveToken">To be added.</param>
        <param name="isActive">To be added.</param>
        <param name="branchTaken">To be added.</param>
        <summary>Creates a new ElseDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax EmptyStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax EmptyStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EmptyStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EmptyStatement () As EmptyStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EmptyStatement : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EmptyStatement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new EmptyStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax EmptyStatement (Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax EmptyStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EmptyStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EmptyStatement (semicolonToken As SyntaxToken) As EmptyStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EmptyStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EmptyStatement semicolonToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new EmptyStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndIfDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax EndIfDirectiveTrivia (bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax EndIfDirectiveTrivia(bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndIfDirectiveTrivia(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndIfDirectiveTrivia (isActive As Boolean) As EndIfDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member EndIfDirectiveTrivia : bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndIfDirectiveTrivia isActive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isActive">To be added.</param>
        <summary>Creates a new EndIfDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndIfDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax EndIfDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken endIfKeyword, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax EndIfDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken endIfKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndIfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndIfDirectiveTrivia (hashToken As SyntaxToken, endIfKeyword As SyntaxToken, endOfDirectiveToken As SyntaxToken, isActive As Boolean) As EndIfDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member EndIfDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndIfDirectiveTrivia (hashToken, endIfKeyword, endOfDirectiveToken, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endIfKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endOfDirectiveToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hashToken">To be added.</param>
        <param name="endIfKeyword">To be added.</param>
        <param name="endOfDirectiveToken">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new EndIfDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOfLine">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia EndOfLine (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTrivia EndOfLine(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndOfLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndOfLine (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member EndOfLine : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndOfLine text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text of the end of line. Any text can be specified here, however only carriage return and
            line feed characters are recognized by the parser as end of line.</param>
        <summary>
            Creates a trivia with kind EndOfLineTrivia containing the specified text. 
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOfLine">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia EndOfLine (string text, bool elastic);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTrivia EndOfLine(string text, bool elastic) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndOfLine(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndOfLine (text As String, elastic As Boolean) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member EndOfLine : string * bool -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndOfLine (text, elastic)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use SyntaxFactory.EndOfLine or SyntaxFactory.ElasticEndOfLine")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="elastic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="elastic">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndRegionDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax EndRegionDirectiveTrivia (bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax EndRegionDirectiveTrivia(bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndRegionDirectiveTrivia(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndRegionDirectiveTrivia (isActive As Boolean) As EndRegionDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member EndRegionDirectiveTrivia : bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndRegionDirectiveTrivia isActive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isActive">To be added.</param>
        <summary>Creates a new EndRegionDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndRegionDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax EndRegionDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken endRegionKeyword, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax EndRegionDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken endRegionKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndRegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndRegionDirectiveTrivia (hashToken As SyntaxToken, endRegionKeyword As SyntaxToken, endOfDirectiveToken As SyntaxToken, isActive As Boolean) As EndRegionDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member EndRegionDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndRegionDirectiveTrivia (hashToken, endRegionKeyword, endOfDirectiveToken, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endRegionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endOfDirectiveToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hashToken">To be added.</param>
        <param name="endRegionKeyword">To be added.</param>
        <param name="endOfDirectiveToken">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new EndRegionDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax EnumDeclaration (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax EnumDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumDeclaration (identifier As SyntaxToken) As EnumDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member EnumDeclaration : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new EnumDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax EnumDeclaration (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax EnumDeclaration(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumDeclaration (identifier As String) As EnumDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member EnumDeclaration : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new EnumDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax EnumDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax EnumDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, baseList As BaseListSyntax, members As SeparatedSyntaxList(Of EnumMemberDeclarationSyntax)) As EnumDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member EnumDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration (attributeLists, modifiers, identifier, baseList, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="baseList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="baseList">To be added.</param>
        <param name="members">To be added.</param>
        <summary>Creates a new EnumDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax EnumDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken enumKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt; members, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax EnumDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken enumKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, valuetype Microsoft.CodeAnalysis.SyntaxToken openBraceToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt; members, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, enumKeyword As SyntaxToken, identifier As SyntaxToken, baseList As BaseListSyntax, openBraceToken As SyntaxToken, members As SeparatedSyntaxList(Of EnumMemberDeclarationSyntax), closeBraceToken As SyntaxToken, semicolonToken As SyntaxToken) As EnumDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member EnumDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration (attributeLists, modifiers, enumKeyword, identifier, baseList, openBraceToken, members, closeBraceToken, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="enumKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="baseList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" />
        <Parameter Name="openBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt;" />
        <Parameter Name="closeBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="enumKeyword">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="baseList">To be added.</param>
        <param name="openBraceToken">To be added.</param>
        <param name="members">To be added.</param>
        <param name="closeBraceToken">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new EnumDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumMemberDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax EnumMemberDeclaration (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax EnumMemberDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumMemberDeclaration (identifier As SyntaxToken) As EnumMemberDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member EnumMemberDeclaration : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new EnumMemberDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumMemberDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax EnumMemberDeclaration (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax EnumMemberDeclaration(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumMemberDeclaration (identifier As String) As EnumMemberDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member EnumMemberDeclaration : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new EnumMemberDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumMemberDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax EnumMemberDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax equalsValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax EnumMemberDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax equalsValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumMemberDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), identifier As SyntaxToken, equalsValue As EqualsValueClauseSyntax) As EnumMemberDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member EnumMemberDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration (attributeLists, identifier, equalsValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="equalsValue" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="equalsValue">To be added.</param>
        <summary>Creates a new EnumMemberDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualsValueClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax EqualsValueClause (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax EqualsValueClause(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EqualsValueClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EqualsValueClause (value As ExpressionSyntax) As EqualsValueClauseSyntax" />
      <MemberSignature Language="F#" Value="static member EqualsValueClause : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EqualsValueClause value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Creates a new EqualsValueClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualsValueClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax EqualsValueClause (Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax EqualsValueClause(valuetype Microsoft.CodeAnalysis.SyntaxToken equalsToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EqualsValueClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EqualsValueClause (equalsToken As SyntaxToken, value As ExpressionSyntax) As EqualsValueClauseSyntax" />
      <MemberSignature Language="F#" Value="static member EqualsValueClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EqualsValueClause (equalsToken, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="equalsToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="equalsToken">To be added.</param>
        <param name="value">To be added.</param>
        <summary>Creates a new EqualsValueClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax ErrorDirectiveTrivia (bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax ErrorDirectiveTrivia(bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ErrorDirectiveTrivia(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ErrorDirectiveTrivia (isActive As Boolean) As ErrorDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ErrorDirectiveTrivia : bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ErrorDirectiveTrivia isActive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isActive">To be added.</param>
        <summary>Creates a new ErrorDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax ErrorDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken errorKeyword, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax ErrorDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken errorKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ErrorDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ErrorDirectiveTrivia (hashToken As SyntaxToken, errorKeyword As SyntaxToken, endOfDirectiveToken As SyntaxToken, isActive As Boolean) As ErrorDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ErrorDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ErrorDirectiveTrivia (hashToken, errorKeyword, endOfDirectiveToken, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="errorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endOfDirectiveToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hashToken">To be added.</param>
        <param name="errorKeyword">To be added.</param>
        <param name="endOfDirectiveToken">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new ErrorDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax EventDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax EventDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EventDeclaration (type As TypeSyntax, identifier As SyntaxToken) As EventDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member EventDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration (type, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>Creates a new EventDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax EventDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax EventDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EventDeclaration (type As TypeSyntax, identifier As String) As EventDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member EventDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration (type, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>Creates a new EventDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax EventDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax accessorList);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax EventDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax accessorList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EventDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, type As TypeSyntax, explicitInterfaceSpecifier As ExplicitInterfaceSpecifierSyntax, identifier As SyntaxToken, accessorList As AccessorListSyntax) As EventDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member EventDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration (attributeLists, modifiers, type, explicitInterfaceSpecifier, identifier, accessorList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="explicitInterfaceSpecifier" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="accessorList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="type">To be added.</param>
        <param name="explicitInterfaceSpecifier">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="accessorList">To be added.</param>
        <summary>Creates a new EventDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax EventDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken eventKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax accessorList);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax EventDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken eventKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax accessorList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EventDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, eventKeyword As SyntaxToken, type As TypeSyntax, explicitInterfaceSpecifier As ExplicitInterfaceSpecifierSyntax, identifier As SyntaxToken, accessorList As AccessorListSyntax) As EventDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member EventDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration (attributeLists, modifiers, eventKeyword, type, explicitInterfaceSpecifier, identifier, accessorList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="eventKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="explicitInterfaceSpecifier" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="accessorList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="eventKeyword">To be added.</param>
        <param name="type">To be added.</param>
        <param name="explicitInterfaceSpecifier">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="accessorList">To be added.</param>
        <summary>Creates a new EventDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventFieldDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax EventFieldDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax EventFieldDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EventFieldDeclaration (declaration As VariableDeclarationSyntax) As EventFieldDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member EventFieldDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration declaration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>Creates a new EventFieldDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventFieldDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax EventFieldDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax EventFieldDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EventFieldDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, declaration As VariableDeclarationSyntax) As EventFieldDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member EventFieldDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration (attributeLists, modifiers, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="declaration">To be added.</param>
        <summary>Creates a new EventFieldDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventFieldDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax EventFieldDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken eventKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax EventFieldDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken eventKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EventFieldDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, eventKeyword As SyntaxToken, declaration As VariableDeclarationSyntax, semicolonToken As SyntaxToken) As EventFieldDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member EventFieldDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration (attributeLists, modifiers, eventKeyword, declaration, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="eventKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="eventKeyword">To be added.</param>
        <param name="declaration">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new EventFieldDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExplicitInterfaceSpecifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax ExplicitInterfaceSpecifier (Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax ExplicitInterfaceSpecifier(class Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExplicitInterfaceSpecifier (name As NameSyntax) As ExplicitInterfaceSpecifierSyntax" />
      <MemberSignature Language="F#" Value="static member ExplicitInterfaceSpecifier : Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExplicitInterfaceSpecifier name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Creates a new ExplicitInterfaceSpecifierSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExplicitInterfaceSpecifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax ExplicitInterfaceSpecifier (Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name, Microsoft.CodeAnalysis.SyntaxToken dotToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax ExplicitInterfaceSpecifier(class Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken dotToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExplicitInterfaceSpecifier (name As NameSyntax, dotToken As SyntaxToken) As ExplicitInterfaceSpecifierSyntax" />
      <MemberSignature Language="F#" Value="static member ExplicitInterfaceSpecifier : Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExplicitInterfaceSpecifier (name, dotToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" />
        <Parameter Name="dotToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="dotToken">To be added.</param>
        <summary>Creates a new ExplicitInterfaceSpecifierSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpressionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax ExpressionStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax ExpressionStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExpressionStatement (expression As ExpressionSyntax) As ExpressionStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExpressionStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExpressionStatement expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new ExpressionStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpressionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax ExpressionStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax ExpressionStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExpressionStatement (expression As ExpressionSyntax, semicolonToken As SyntaxToken) As ExpressionStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExpressionStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExpressionStatement (expression, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new ExpressionStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExternAliasDirective">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax ExternAliasDirective (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax ExternAliasDirective(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExternAliasDirective (identifier As SyntaxToken) As ExternAliasDirectiveSyntax" />
      <MemberSignature Language="F#" Value="static member ExternAliasDirective : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new ExternAliasDirectiveSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExternAliasDirective">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax ExternAliasDirective (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax ExternAliasDirective(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExternAliasDirective (identifier As String) As ExternAliasDirectiveSyntax" />
      <MemberSignature Language="F#" Value="static member ExternAliasDirective : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new ExternAliasDirectiveSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExternAliasDirective">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax ExternAliasDirective (Microsoft.CodeAnalysis.SyntaxToken externKeyword, Microsoft.CodeAnalysis.SyntaxToken aliasKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax ExternAliasDirective(valuetype Microsoft.CodeAnalysis.SyntaxToken externKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken aliasKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExternAliasDirective (externKeyword As SyntaxToken, aliasKeyword As SyntaxToken, identifier As SyntaxToken, semicolonToken As SyntaxToken) As ExternAliasDirectiveSyntax" />
      <MemberSignature Language="F#" Value="static member ExternAliasDirective : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective (externKeyword, aliasKeyword, identifier, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="externKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="aliasKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="externKeyword">To be added.</param>
        <param name="aliasKeyword">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new ExternAliasDirectiveSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax FieldDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax FieldDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FieldDeclaration (declaration As VariableDeclarationSyntax) As FieldDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member FieldDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration declaration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>Creates a new FieldDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax FieldDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax FieldDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FieldDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, declaration As VariableDeclarationSyntax) As FieldDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member FieldDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration (attributeLists, modifiers, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="declaration">To be added.</param>
        <summary>Creates a new FieldDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax FieldDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax FieldDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FieldDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, declaration As VariableDeclarationSyntax, semicolonToken As SyntaxToken) As FieldDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member FieldDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration (attributeLists, modifiers, declaration, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="declaration">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new FieldDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinallyClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax FinallyClause (Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax FinallyClause(class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FinallyClause(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FinallyClause (Optional block As BlockSyntax = null) As FinallyClauseSyntax" />
      <MemberSignature Language="F#" Value="static member FinallyClause : Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FinallyClause block" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="block" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
      </Parameters>
      <Docs>
        <param name="block">To be added.</param>
        <summary>Creates a new FinallyClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinallyClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax FinallyClause (Microsoft.CodeAnalysis.SyntaxToken finallyKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax FinallyClause(valuetype Microsoft.CodeAnalysis.SyntaxToken finallyKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FinallyClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FinallyClause (finallyKeyword As SyntaxToken, block As BlockSyntax) As FinallyClauseSyntax" />
      <MemberSignature Language="F#" Value="static member FinallyClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FinallyClause (finallyKeyword, block)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finallyKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="block" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
      </Parameters>
      <Docs>
        <param name="finallyKeyword">To be added.</param>
        <param name="block">To be added.</param>
        <summary>Creates a new FinallyClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FixedStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax FixedStatement (Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax FixedStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FixedStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FixedStatement (declaration As VariableDeclarationSyntax, statement As StatementSyntax) As FixedStatementSyntax" />
      <MemberSignature Language="F#" Value="static member FixedStatement : Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FixedStatement (declaration, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new FixedStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FixedStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax FixedStatement (Microsoft.CodeAnalysis.SyntaxToken fixedKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax FixedStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken fixedKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FixedStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FixedStatement (fixedKeyword As SyntaxToken, openParenToken As SyntaxToken, declaration As VariableDeclarationSyntax, closeParenToken As SyntaxToken, statement As StatementSyntax) As FixedStatementSyntax" />
      <MemberSignature Language="F#" Value="static member FixedStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FixedStatement (fixedKeyword, openParenToken, declaration, closeParenToken, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="fixedKeyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="declaration">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new FixedStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEachStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax ForEachStatement (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax ForEachStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEachStatement (type As TypeSyntax, identifier As SyntaxToken, expression As ExpressionSyntax, statement As StatementSyntax) As ForEachStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ForEachStatement : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement (type, identifier, expression, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new ForEachStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEachStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax ForEachStatement (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, string identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax ForEachStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, string identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEachStatement (type As TypeSyntax, identifier As String, expression As ExpressionSyntax, statement As StatementSyntax) As ForEachStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ForEachStatement : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * string * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement (type, identifier, expression, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new ForEachStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEachStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax ForEachStatement (Microsoft.CodeAnalysis.SyntaxToken forEachKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken inKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax ForEachStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken forEachKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, valuetype Microsoft.CodeAnalysis.SyntaxToken inKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEachStatement (forEachKeyword As SyntaxToken, openParenToken As SyntaxToken, type As TypeSyntax, identifier As SyntaxToken, inKeyword As SyntaxToken, expression As ExpressionSyntax, closeParenToken As SyntaxToken, statement As StatementSyntax) As ForEachStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ForEachStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement (forEachKeyword, openParenToken, type, identifier, inKeyword, expression, closeParenToken, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forEachKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="inKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="forEachKeyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="type">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="inKeyword">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new ForEachStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEachVariableStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax ForEachVariableStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax variable, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax ForEachVariableStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax variable, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachVariableStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEachVariableStatement (variable As ExpressionSyntax, expression As ExpressionSyntax, statement As StatementSyntax) As ForEachVariableStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ForEachVariableStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachVariableStatement (variable, expression, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="variable">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new ForEachVariableStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEachVariableStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax ForEachVariableStatement (Microsoft.CodeAnalysis.SyntaxToken forEachKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax variable, Microsoft.CodeAnalysis.SyntaxToken inKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax ForEachVariableStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken forEachKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax variable, valuetype Microsoft.CodeAnalysis.SyntaxToken inKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachVariableStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEachVariableStatement (forEachKeyword As SyntaxToken, openParenToken As SyntaxToken, variable As ExpressionSyntax, inKeyword As SyntaxToken, expression As ExpressionSyntax, closeParenToken As SyntaxToken, statement As StatementSyntax) As ForEachVariableStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ForEachVariableStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachVariableStatement (forEachKeyword, openParenToken, variable, inKeyword, expression, closeParenToken, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forEachKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="variable" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="inKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="forEachKeyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="variable">To be added.</param>
        <param name="inKeyword">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new ForEachVariableStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax ForStatement (Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax ForStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForStatement (statement As StatementSyntax) As ForStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ForStatement : Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement statement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="statement">To be added.</param>
        <summary>Creates a new ForStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax ForStatement (Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; initializers, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; incrementors, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax ForStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; initializers, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; incrementors, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForStatement (declaration As VariableDeclarationSyntax, initializers As SeparatedSyntaxList(Of ExpressionSyntax), condition As ExpressionSyntax, incrementors As SeparatedSyntaxList(Of ExpressionSyntax), statement As StatementSyntax) As ForStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ForStatement : Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement (declaration, initializers, condition, incrementors, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" />
        <Parameter Name="initializers" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt;" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="incrementors" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt;" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="initializers">To be added.</param>
        <param name="condition">To be added.</param>
        <param name="incrementors">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new ForStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax ForStatement (Microsoft.CodeAnalysis.SyntaxToken forKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; initializers, Microsoft.CodeAnalysis.SyntaxToken firstSemicolonToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken secondSemicolonToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; incrementors, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax ForStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken forKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; initializers, valuetype Microsoft.CodeAnalysis.SyntaxToken firstSemicolonToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, valuetype Microsoft.CodeAnalysis.SyntaxToken secondSemicolonToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; incrementors, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForStatement (forKeyword As SyntaxToken, openParenToken As SyntaxToken, declaration As VariableDeclarationSyntax, initializers As SeparatedSyntaxList(Of ExpressionSyntax), firstSemicolonToken As SyntaxToken, condition As ExpressionSyntax, secondSemicolonToken As SyntaxToken, incrementors As SeparatedSyntaxList(Of ExpressionSyntax), closeParenToken As SyntaxToken, statement As StatementSyntax) As ForStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ForStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement (forKeyword, openParenToken, declaration, initializers, firstSemicolonToken, condition, secondSemicolonToken, incrementors, closeParenToken, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" />
        <Parameter Name="initializers" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt;" />
        <Parameter Name="firstSemicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="secondSemicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="incrementors" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt;" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="forKeyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="declaration">To be added.</param>
        <param name="initializers">To be added.</param>
        <param name="firstSemicolonToken">To be added.</param>
        <param name="condition">To be added.</param>
        <param name="secondSemicolonToken">To be added.</param>
        <param name="incrementors">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new ForStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax FromClause (Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax FromClause(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromClause (identifier As SyntaxToken, expression As ExpressionSyntax) As FromClauseSyntax" />
      <MemberSignature Language="F#" Value="static member FromClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause (identifier, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new FromClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax FromClause (string identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax FromClause(string identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromClause (identifier As String, expression As ExpressionSyntax) As FromClauseSyntax" />
      <MemberSignature Language="F#" Value="static member FromClause : string * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause (identifier, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new FromClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax FromClause (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax FromClause(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromClause (type As TypeSyntax, identifier As SyntaxToken, expression As ExpressionSyntax) As FromClauseSyntax" />
      <MemberSignature Language="F#" Value="static member FromClause : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause (type, identifier, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new FromClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax FromClause (Microsoft.CodeAnalysis.SyntaxToken fromKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken inKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax FromClause(valuetype Microsoft.CodeAnalysis.SyntaxToken fromKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, valuetype Microsoft.CodeAnalysis.SyntaxToken inKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromClause (fromKeyword As SyntaxToken, type As TypeSyntax, identifier As SyntaxToken, inKeyword As SyntaxToken, expression As ExpressionSyntax) As FromClauseSyntax" />
      <MemberSignature Language="F#" Value="static member FromClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause (fromKeyword, type, identifier, inKeyword, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="inKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="fromKeyword">To be added.</param>
        <param name="type">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="inKeyword">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new FromClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax GenericName (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax GenericName(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericName (identifier As SyntaxToken) As GenericNameSyntax" />
      <MemberSignature Language="F#" Value="static member GenericName : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new GenericNameSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax GenericName (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax GenericName(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericName (identifier As String) As GenericNameSyntax" />
      <MemberSignature Language="F#" Value="static member GenericName : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new GenericNameSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax GenericName (Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax typeArgumentList);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax GenericName(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax typeArgumentList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericName (identifier As SyntaxToken, typeArgumentList As TypeArgumentListSyntax) As GenericNameSyntax" />
      <MemberSignature Language="F#" Value="static member GenericName : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName (identifier, typeArgumentList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeArgumentList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="typeArgumentList">To be added.</param>
        <summary>Creates a new GenericNameSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNonGenericExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax GetNonGenericExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax GetNonGenericExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetNonGenericExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNonGenericExpression (expression As ExpressionSyntax) As ExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member GetNonGenericExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetNonGenericExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression"></param>
        <summary>
            Converts a generic name expression into one without the generic arguments.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStandaloneExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax GetStandaloneExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax GetStandaloneExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetStandaloneExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetStandaloneExpression (expression As ExpressionSyntax) As ExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member GetStandaloneExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetStandaloneExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
            Gets the containing expression that is actually a language expression and not just typed
            as an ExpressionSyntax for convenience. For example, NameSyntax nodes on the right side
            of qualified names and member access expressions are not language expressions, yet the
            containing qualified names or member access expressions are indeed expressions.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax GlobalStatement (Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax GlobalStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GlobalStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GlobalStatement (statement As StatementSyntax) As GlobalStatementSyntax" />
      <MemberSignature Language="F#" Value="static member GlobalStatement : Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GlobalStatement statement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="statement">To be added.</param>
        <summary>Creates a new GlobalStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GotoStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax GotoStatement (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax GotoStatement(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GotoStatement (kind As SyntaxKind, Optional expression As ExpressionSyntax = null) As GotoStatementSyntax" />
      <MemberSignature Language="F#" Value="static member GotoStatement : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement (kind, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new GotoStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GotoStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax GotoStatement (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken caseOrDefaultKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax GotoStatement(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken caseOrDefaultKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GotoStatement (kind As SyntaxKind, caseOrDefaultKeyword As SyntaxToken, expression As ExpressionSyntax) As GotoStatementSyntax" />
      <MemberSignature Language="F#" Value="static member GotoStatement : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement (kind, caseOrDefaultKeyword, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="caseOrDefaultKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="caseOrDefaultKeyword">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new GotoStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GotoStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax GotoStatement (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken gotoKeyword, Microsoft.CodeAnalysis.SyntaxToken caseOrDefaultKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax GotoStatement(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken gotoKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken caseOrDefaultKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GotoStatement (kind As SyntaxKind, gotoKeyword As SyntaxToken, caseOrDefaultKeyword As SyntaxToken, expression As ExpressionSyntax, semicolonToken As SyntaxToken) As GotoStatementSyntax" />
      <MemberSignature Language="F#" Value="static member GotoStatement : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement (kind, gotoKeyword, caseOrDefaultKeyword, expression, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="gotoKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="caseOrDefaultKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="gotoKeyword">To be added.</param>
        <param name="caseOrDefaultKeyword">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new GotoStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax GroupClause (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax groupExpression, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax byExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax GroupClause(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax groupExpression, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax byExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GroupClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GroupClause (groupExpression As ExpressionSyntax, byExpression As ExpressionSyntax) As GroupClauseSyntax" />
      <MemberSignature Language="F#" Value="static member GroupClause : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GroupClause (groupExpression, byExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="byExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="groupExpression">To be added.</param>
        <param name="byExpression">To be added.</param>
        <summary>Creates a new GroupClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax GroupClause (Microsoft.CodeAnalysis.SyntaxToken groupKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax groupExpression, Microsoft.CodeAnalysis.SyntaxToken byKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax byExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax GroupClause(valuetype Microsoft.CodeAnalysis.SyntaxToken groupKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax groupExpression, valuetype Microsoft.CodeAnalysis.SyntaxToken byKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax byExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GroupClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GroupClause (groupKeyword As SyntaxToken, groupExpression As ExpressionSyntax, byKeyword As SyntaxToken, byExpression As ExpressionSyntax) As GroupClauseSyntax" />
      <MemberSignature Language="F#" Value="static member GroupClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GroupClause (groupKeyword, groupExpression, byKeyword, byExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="groupExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="byKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="byExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="groupKeyword">To be added.</param>
        <param name="groupExpression">To be added.</param>
        <param name="byKeyword">To be added.</param>
        <param name="byExpression">To be added.</param>
        <summary>Creates a new GroupClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Identifier (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Identifier(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Identifier (text As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Identifier : string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <summary>
            Creates a token with kind IdentifierToken containing the specified text.
            <param name="text">The raw text of the identifier name, including any escapes or leading '@'
            character.</param></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Identifier (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Identifier(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Identifier (leading As SyntaxTriviaList, text As String, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Identifier : Microsoft.CodeAnalysis.SyntaxTriviaList * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier (leading, text, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the identifier name, including any escapes or leading '@'
            character.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a token with kind IdentifierToken containing the specified text.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Identifier (Microsoft.CodeAnalysis.SyntaxTriviaList leading, Microsoft.CodeAnalysis.CSharp.SyntaxKind contextualKind, string text, string valueText, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Identifier(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind contextualKind, string text, string valueText, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Identifier (leading As SyntaxTriviaList, contextualKind As SyntaxKind, text As String, valueText As String, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Identifier : Microsoft.CodeAnalysis.SyntaxTriviaList * Microsoft.CodeAnalysis.CSharp.SyntaxKind * string * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier (leading, contextualKind, text, valueText, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="contextualKind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="valueText" Type="System.String" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="contextualKind">An alternative SyntaxKind that can be inferred for this token in special
            contexts. These are usually keywords.</param>
        <param name="text">The raw text of the identifier name, including any escapes or leading '@'
            character.</param>
        <param name="valueText">The text of the identifier name without escapes or leading '@' character.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a token with kind IdentifierToken containing the specified text.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IdentifierName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax IdentifierName (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax IdentifierName(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IdentifierName (identifier As SyntaxToken) As IdentifierNameSyntax" />
      <MemberSignature Language="F#" Value="static member IdentifierName : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new IdentifierNameSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IdentifierName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax IdentifierName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax IdentifierName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IdentifierName (name As String) As IdentifierNameSyntax" />
      <MemberSignature Language="F#" Value="static member IdentifierName : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The identifier name.</param>
        <summary>
            Creates an IdentifierNameSyntax node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IfDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax IfDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, bool isActive, bool branchTaken, bool conditionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax IfDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, bool isActive, bool branchTaken, bool conditionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfDirectiveTrivia (condition As ExpressionSyntax, isActive As Boolean, branchTaken As Boolean, conditionValue As Boolean) As IfDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member IfDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * bool * bool * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfDirectiveTrivia (condition, isActive, branchTaken, conditionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="isActive" Type="System.Boolean" />
        <Parameter Name="branchTaken" Type="System.Boolean" />
        <Parameter Name="conditionValue" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">To be added.</param>
        <param name="isActive">To be added.</param>
        <param name="branchTaken">To be added.</param>
        <param name="conditionValue">To be added.</param>
        <summary>Creates a new IfDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IfDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax IfDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken ifKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive, bool branchTaken, bool conditionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax IfDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken ifKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive, bool branchTaken, bool conditionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfDirectiveTrivia (hashToken As SyntaxToken, ifKeyword As SyntaxToken, condition As ExpressionSyntax, endOfDirectiveToken As SyntaxToken, isActive As Boolean, branchTaken As Boolean, conditionValue As Boolean) As IfDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member IfDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * bool * bool * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfDirectiveTrivia (hashToken, ifKeyword, condition, endOfDirectiveToken, isActive, branchTaken, conditionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="ifKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="endOfDirectiveToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
        <Parameter Name="branchTaken" Type="System.Boolean" />
        <Parameter Name="conditionValue" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hashToken">To be added.</param>
        <param name="ifKeyword">To be added.</param>
        <param name="condition">To be added.</param>
        <param name="endOfDirectiveToken">To be added.</param>
        <param name="isActive">To be added.</param>
        <param name="branchTaken">To be added.</param>
        <param name="conditionValue">To be added.</param>
        <summary>Creates a new IfDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IfStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax IfStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax IfStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfStatement (condition As ExpressionSyntax, statement As StatementSyntax) As IfStatementSyntax" />
      <MemberSignature Language="F#" Value="static member IfStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement (condition, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="condition">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new IfStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IfStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax IfStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement, Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax else);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax IfStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement, class Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax else) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfStatement (condition As ExpressionSyntax, statement As StatementSyntax, else As ElseClauseSyntax) As IfStatementSyntax" />
      <MemberSignature Language="F#" Value="static member IfStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement (condition, statement, else)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
        <Parameter Name="else" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="condition">To be added.</param>
        <param name="statement">To be added.</param>
        <param name="else">To be added.</param>
        <summary>Creates a new IfStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IfStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax IfStatement (Microsoft.CodeAnalysis.SyntaxToken ifKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement, Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax else);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax IfStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken ifKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement, class Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax else) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfStatement (ifKeyword As SyntaxToken, openParenToken As SyntaxToken, condition As ExpressionSyntax, closeParenToken As SyntaxToken, statement As StatementSyntax, else As ElseClauseSyntax) As IfStatementSyntax" />
      <MemberSignature Language="F#" Value="static member IfStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement (ifKeyword, openParenToken, condition, closeParenToken, statement, else)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
        <Parameter Name="else" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="ifKeyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="condition">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <param name="statement">To be added.</param>
        <param name="else">To be added.</param>
        <summary>Creates a new IfStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImplicitArrayCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax ImplicitArrayCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax ImplicitArrayCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImplicitArrayCreationExpression (initializer As InitializerExpressionSyntax) As ImplicitArrayCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ImplicitArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression initializer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="initializer">To be added.</param>
        <summary>Creates a new ImplicitArrayCreationExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImplicitArrayCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax ImplicitArrayCreationExpression (Microsoft.CodeAnalysis.SyntaxTokenList commas, Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax ImplicitArrayCreationExpression(valuetype Microsoft.CodeAnalysis.SyntaxTokenList commas, class Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImplicitArrayCreationExpression (commas As SyntaxTokenList, initializer As InitializerExpressionSyntax) As ImplicitArrayCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ImplicitArrayCreationExpression : Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression (commas, initializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commas" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="commas">To be added.</param>
        <param name="initializer">To be added.</param>
        <summary>Creates a new ImplicitArrayCreationExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImplicitArrayCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax ImplicitArrayCreationExpression (Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.SyntaxToken openBracketToken, Microsoft.CodeAnalysis.SyntaxTokenList commas, Microsoft.CodeAnalysis.SyntaxToken closeBracketToken, Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax ImplicitArrayCreationExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken newKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openBracketToken, valuetype Microsoft.CodeAnalysis.SyntaxTokenList commas, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBracketToken, class Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImplicitArrayCreationExpression (newKeyword As SyntaxToken, openBracketToken As SyntaxToken, commas As SyntaxTokenList, closeBracketToken As SyntaxToken, initializer As InitializerExpressionSyntax) As ImplicitArrayCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ImplicitArrayCreationExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression (newKeyword, openBracketToken, commas, closeBracketToken, initializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openBracketToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="commas" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="closeBracketToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="newKeyword">To be added.</param>
        <param name="openBracketToken">To be added.</param>
        <param name="commas">To be added.</param>
        <param name="closeBracketToken">To be added.</param>
        <param name="initializer">To be added.</param>
        <summary>Creates a new ImplicitArrayCreationExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImplicitElementAccess">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax ImplicitElementAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax ImplicitElementAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitElementAccess" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImplicitElementAccess () As ImplicitElementAccessSyntax" />
      <MemberSignature Language="F#" Value="static member ImplicitElementAccess : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitElementAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new ImplicitElementAccessSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImplicitElementAccess">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax ImplicitElementAccess (Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax argumentList);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax ImplicitElementAccess(class Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax argumentList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitElementAccess(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImplicitElementAccess (argumentList As BracketedArgumentListSyntax) As ImplicitElementAccessSyntax" />
      <MemberSignature Language="F#" Value="static member ImplicitElementAccess : Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitElementAccess argumentList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="argumentList">To be added.</param>
        <summary>Creates a new ImplicitElementAccessSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncompleteMember">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax IncompleteMember (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax IncompleteMember(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IncompleteMember(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IncompleteMember (Optional type As TypeSyntax = null) As IncompleteMemberSyntax" />
      <MemberSignature Language="F#" Value="static member IncompleteMember : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IncompleteMember type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Creates a new IncompleteMemberSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncompleteMember">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax IncompleteMember (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax IncompleteMember(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IncompleteMember(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IncompleteMember (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, type As TypeSyntax) As IncompleteMemberSyntax" />
      <MemberSignature Language="F#" Value="static member IncompleteMember : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IncompleteMember (attributeLists, modifiers, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="type">To be added.</param>
        <summary>Creates a new IncompleteMemberSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexerDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax IndexerDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax IndexerDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IndexerDeclaration (type As TypeSyntax) As IndexerDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member IndexerDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Creates a new IndexerDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexerDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax IndexerDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax accessorList);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax IndexerDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, class Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax accessorList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IndexerDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, type As TypeSyntax, explicitInterfaceSpecifier As ExplicitInterfaceSpecifierSyntax, parameterList As BracketedParameterListSyntax, accessorList As AccessorListSyntax) As IndexerDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member IndexerDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration (attributeLists, modifiers, type, explicitInterfaceSpecifier, parameterList, accessorList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="explicitInterfaceSpecifier" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax" />
        <Parameter Name="accessorList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="type">To be added.</param>
        <param name="explicitInterfaceSpecifier">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="accessorList">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexerDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax IndexerDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax accessorList, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax IndexerDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, class Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax accessorList, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IndexerDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, type As TypeSyntax, explicitInterfaceSpecifier As ExplicitInterfaceSpecifierSyntax, parameterList As BracketedParameterListSyntax, accessorList As AccessorListSyntax, expressionBody As ArrowExpressionClauseSyntax) As IndexerDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member IndexerDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration (attributeLists, modifiers, type, explicitInterfaceSpecifier, parameterList, accessorList, expressionBody)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="explicitInterfaceSpecifier" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax" />
        <Parameter Name="accessorList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="type">To be added.</param>
        <param name="explicitInterfaceSpecifier">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="accessorList">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <summary>Creates a new IndexerDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexerDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax IndexerDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, Microsoft.CodeAnalysis.SyntaxToken thisKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax accessorList, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax IndexerDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, valuetype Microsoft.CodeAnalysis.SyntaxToken thisKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax accessorList, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IndexerDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, type As TypeSyntax, explicitInterfaceSpecifier As ExplicitInterfaceSpecifierSyntax, thisKeyword As SyntaxToken, parameterList As BracketedParameterListSyntax, accessorList As AccessorListSyntax, expressionBody As ArrowExpressionClauseSyntax, semicolonToken As SyntaxToken) As IndexerDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member IndexerDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration (attributeLists, modifiers, type, explicitInterfaceSpecifier, thisKeyword, parameterList, accessorList, expressionBody, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="explicitInterfaceSpecifier" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax" />
        <Parameter Name="thisKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax" />
        <Parameter Name="accessorList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="type">To be added.</param>
        <param name="explicitInterfaceSpecifier">To be added.</param>
        <param name="thisKeyword">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="accessorList">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new IndexerDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexerMemberCref">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax IndexerMemberCref (Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax parameters = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax IndexerMemberCref(class Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IndexerMemberCref (Optional parameters As CrefBracketedParameterListSyntax = null) As IndexerMemberCrefSyntax" />
      <MemberSignature Language="F#" Value="static member IndexerMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerMemberCref parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="parameters">To be added.</param>
        <summary>Creates a new IndexerMemberCrefSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexerMemberCref">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax IndexerMemberCref (Microsoft.CodeAnalysis.SyntaxToken thisKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax IndexerMemberCref(valuetype Microsoft.CodeAnalysis.SyntaxToken thisKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IndexerMemberCref (thisKeyword As SyntaxToken, parameters As CrefBracketedParameterListSyntax) As IndexerMemberCrefSyntax" />
      <MemberSignature Language="F#" Value="static member IndexerMemberCref : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerMemberCref (thisKeyword, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thisKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="thisKeyword">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>Creates a new IndexerMemberCrefSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializerExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax InitializerExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; expressions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax InitializerExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InitializerExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InitializerExpression (kind As SyntaxKind, Optional expressions As SeparatedSyntaxList(Of ExpressionSyntax) = null) As InitializerExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member InitializerExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InitializerExpression (kind, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="expressions" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="expressions">To be added.</param>
        <summary>Creates a new InitializerExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializerExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax InitializerExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; expressions, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax InitializerExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken openBraceToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; expressions, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InitializerExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InitializerExpression (kind As SyntaxKind, openBraceToken As SyntaxToken, expressions As SeparatedSyntaxList(Of ExpressionSyntax), closeBraceToken As SyntaxToken) As InitializerExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member InitializerExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InitializerExpression (kind, openBraceToken, expressions, closeBraceToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="openBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expressions" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt;" />
        <Parameter Name="closeBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="openBraceToken">To be added.</param>
        <param name="expressions">To be added.</param>
        <param name="closeBraceToken">To be added.</param>
        <summary>Creates a new InitializerExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterfaceDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax InterfaceDeclaration (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax InterfaceDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterfaceDeclaration (identifier As SyntaxToken) As InterfaceDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member InterfaceDeclaration : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new InterfaceDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterfaceDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax InterfaceDeclaration (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax InterfaceDeclaration(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterfaceDeclaration (identifier As String) As InterfaceDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member InterfaceDeclaration : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new InterfaceDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterfaceDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax InterfaceDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax InterfaceDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterfaceDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, baseList As BaseListSyntax, constraintClauses As SyntaxList(Of TypeParameterConstraintClauseSyntax), members As SyntaxList(Of MemberDeclarationSyntax)) As InterfaceDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member InterfaceDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration (attributeLists, modifiers, identifier, typeParameterList, baseList, constraintClauses, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" />
        <Parameter Name="baseList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" />
        <Parameter Name="constraintClauses" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="typeParameterList">To be added.</param>
        <param name="baseList">To be added.</param>
        <param name="constraintClauses">To be added.</param>
        <param name="members">To be added.</param>
        <summary>Creates a new InterfaceDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterfaceDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax InterfaceDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax InterfaceDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, valuetype Microsoft.CodeAnalysis.SyntaxToken openBraceToken, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterfaceDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, baseList As BaseListSyntax, constraintClauses As SyntaxList(Of TypeParameterConstraintClauseSyntax), openBraceToken As SyntaxToken, members As SyntaxList(Of MemberDeclarationSyntax), closeBraceToken As SyntaxToken, semicolonToken As SyntaxToken) As InterfaceDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member InterfaceDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration (attributeLists, modifiers, keyword, identifier, typeParameterList, baseList, constraintClauses, openBraceToken, members, closeBraceToken, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" />
        <Parameter Name="baseList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" />
        <Parameter Name="constraintClauses" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt;" />
        <Parameter Name="openBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt;" />
        <Parameter Name="closeBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="keyword">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="typeParameterList">To be added.</param>
        <param name="baseList">To be added.</param>
        <param name="constraintClauses">To be added.</param>
        <param name="openBraceToken">To be added.</param>
        <param name="members">To be added.</param>
        <param name="closeBraceToken">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new InterfaceDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolatedStringExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax InterpolatedStringExpression (Microsoft.CodeAnalysis.SyntaxToken stringStartToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax InterpolatedStringExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken stringStartToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolatedStringExpression (stringStartToken As SyntaxToken) As InterpolatedStringExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member InterpolatedStringExpression : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression stringStartToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringStartToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="stringStartToken">To be added.</param>
        <summary>Creates a new InterpolatedStringExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolatedStringExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax InterpolatedStringExpression (Microsoft.CodeAnalysis.SyntaxToken stringStartToken, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax&gt; contents);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax InterpolatedStringExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken stringStartToken, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax&gt; contents) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolatedStringExpression (stringStartToken As SyntaxToken, contents As SyntaxList(Of InterpolatedStringContentSyntax)) As InterpolatedStringExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member InterpolatedStringExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression (stringStartToken, contents)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringStartToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="contents" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="stringStartToken">To be added.</param>
        <param name="contents">To be added.</param>
        <summary>Creates a new InterpolatedStringExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolatedStringExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax InterpolatedStringExpression (Microsoft.CodeAnalysis.SyntaxToken stringStartToken, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax&gt; contents, Microsoft.CodeAnalysis.SyntaxToken stringEndToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax InterpolatedStringExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken stringStartToken, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax&gt; contents, valuetype Microsoft.CodeAnalysis.SyntaxToken stringEndToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolatedStringExpression (stringStartToken As SyntaxToken, contents As SyntaxList(Of InterpolatedStringContentSyntax), stringEndToken As SyntaxToken) As InterpolatedStringExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member InterpolatedStringExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression (stringStartToken, contents, stringEndToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringStartToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="contents" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax&gt;" />
        <Parameter Name="stringEndToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="stringStartToken">To be added.</param>
        <param name="contents">To be added.</param>
        <param name="stringEndToken">To be added.</param>
        <summary>Creates a new InterpolatedStringExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolatedStringText">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax InterpolatedStringText ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax InterpolatedStringText() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringText" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolatedStringText () As InterpolatedStringTextSyntax" />
      <MemberSignature Language="F#" Value="static member InterpolatedStringText : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringText " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new InterpolatedStringTextSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolatedStringText">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax InterpolatedStringText (Microsoft.CodeAnalysis.SyntaxToken textToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax InterpolatedStringText(valuetype Microsoft.CodeAnalysis.SyntaxToken textToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringText(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolatedStringText (textToken As SyntaxToken) As InterpolatedStringTextSyntax" />
      <MemberSignature Language="F#" Value="static member InterpolatedStringText : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringText textToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="textToken">To be added.</param>
        <summary>Creates a new InterpolatedStringTextSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Interpolation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax Interpolation (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax Interpolation(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Interpolation (expression As ExpressionSyntax) As InterpolationSyntax" />
      <MemberSignature Language="F#" Value="static member Interpolation : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new InterpolationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Interpolation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax Interpolation (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax alignmentClause, Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax formatClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax Interpolation(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax alignmentClause, class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax formatClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Interpolation (expression As ExpressionSyntax, alignmentClause As InterpolationAlignmentClauseSyntax, formatClause As InterpolationFormatClauseSyntax) As InterpolationSyntax" />
      <MemberSignature Language="F#" Value="static member Interpolation : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation (expression, alignmentClause, formatClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="alignmentClause" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax" />
        <Parameter Name="formatClause" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="alignmentClause">To be added.</param>
        <param name="formatClause">To be added.</param>
        <summary>Creates a new InterpolationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Interpolation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax Interpolation (Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax alignmentClause, Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax formatClause, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax Interpolation(valuetype Microsoft.CodeAnalysis.SyntaxToken openBraceToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax alignmentClause, class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax formatClause, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Interpolation (openBraceToken As SyntaxToken, expression As ExpressionSyntax, alignmentClause As InterpolationAlignmentClauseSyntax, formatClause As InterpolationFormatClauseSyntax, closeBraceToken As SyntaxToken) As InterpolationSyntax" />
      <MemberSignature Language="F#" Value="static member Interpolation : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation (openBraceToken, expression, alignmentClause, formatClause, closeBraceToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="alignmentClause" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax" />
        <Parameter Name="formatClause" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax" />
        <Parameter Name="closeBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openBraceToken">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="alignmentClause">To be added.</param>
        <param name="formatClause">To be added.</param>
        <param name="closeBraceToken">To be added.</param>
        <summary>Creates a new InterpolationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationAlignmentClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax InterpolationAlignmentClause (Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax InterpolationAlignmentClause(valuetype Microsoft.CodeAnalysis.SyntaxToken commaToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationAlignmentClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolationAlignmentClause (commaToken As SyntaxToken, value As ExpressionSyntax) As InterpolationAlignmentClauseSyntax" />
      <MemberSignature Language="F#" Value="static member InterpolationAlignmentClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationAlignmentClause (commaToken, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commaToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="commaToken">To be added.</param>
        <param name="value">To be added.</param>
        <summary>Creates a new InterpolationAlignmentClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationFormatClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax InterpolationFormatClause (Microsoft.CodeAnalysis.SyntaxToken colonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax InterpolationFormatClause(valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationFormatClause(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolationFormatClause (colonToken As SyntaxToken) As InterpolationFormatClauseSyntax" />
      <MemberSignature Language="F#" Value="static member InterpolationFormatClause : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationFormatClause colonToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="colonToken">To be added.</param>
        <summary>Creates a new InterpolationFormatClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationFormatClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax InterpolationFormatClause (Microsoft.CodeAnalysis.SyntaxToken colonToken, Microsoft.CodeAnalysis.SyntaxToken formatStringToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax InterpolationFormatClause(valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken, valuetype Microsoft.CodeAnalysis.SyntaxToken formatStringToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationFormatClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolationFormatClause (colonToken As SyntaxToken, formatStringToken As SyntaxToken) As InterpolationFormatClauseSyntax" />
      <MemberSignature Language="F#" Value="static member InterpolationFormatClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationFormatClause (colonToken, formatStringToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="formatStringToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="colonToken">To be added.</param>
        <param name="formatStringToken">To be added.</param>
        <summary>Creates a new InterpolationFormatClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvocationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax InvocationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax InvocationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InvocationExpression (expression As ExpressionSyntax) As InvocationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member InvocationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InvocationExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new InvocationExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvocationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax InvocationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax argumentList);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax InvocationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax argumentList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InvocationExpression (expression As ExpressionSyntax, argumentList As ArgumentListSyntax) As InvocationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member InvocationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InvocationExpression (expression, argumentList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="argumentList">To be added.</param>
        <summary>Creates a new InvocationExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleteSubmission">
      <MemberSignature Language="C#" Value="public static bool IsCompleteSubmission (Microsoft.CodeAnalysis.SyntaxTree tree);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsCompleteSubmission(class Microsoft.CodeAnalysis.SyntaxTree tree) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsCompleteSubmission(Microsoft.CodeAnalysis.SyntaxTree)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsCompleteSubmission (tree As SyntaxTree) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsCompleteSubmission : Microsoft.CodeAnalysis.SyntaxTree -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsCompleteSubmission tree" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tree" Type="Microsoft.CodeAnalysis.SyntaxTree" />
      </Parameters>
      <Docs>
        <param name="tree">To be added.</param>
        <summary>
            Determines whether the given text is considered a syntactically complete submission.
            Throws <see cref="T:System.ArgumentException" /> if the tree was not compiled as an interactive submission.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPatternExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax IsPatternExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax IsPatternExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsPatternExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPatternExpression (expression As ExpressionSyntax, pattern As PatternSyntax) As IsPatternExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member IsPatternExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsPatternExpression (expression, pattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="pattern" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="pattern">To be added.</param>
        <summary>Creates a new IsPatternExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPatternExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax IsPatternExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken isKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax IsPatternExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken isKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsPatternExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPatternExpression (expression As ExpressionSyntax, isKeyword As SyntaxToken, pattern As PatternSyntax) As IsPatternExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member IsPatternExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsPatternExpression (expression, isKeyword, pattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="isKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="pattern" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="isKeyword">To be added.</param>
        <param name="pattern">To be added.</param>
        <summary>Creates a new IsPatternExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JoinClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax JoinClause (Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax inExpression, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax leftExpression, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax rightExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax JoinClause(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax inExpression, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax leftExpression, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax rightExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function JoinClause (identifier As SyntaxToken, inExpression As ExpressionSyntax, leftExpression As ExpressionSyntax, rightExpression As ExpressionSyntax) As JoinClauseSyntax" />
      <MemberSignature Language="F#" Value="static member JoinClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause (identifier, inExpression, leftExpression, rightExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="inExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="leftExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="rightExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="inExpression">To be added.</param>
        <param name="leftExpression">To be added.</param>
        <param name="rightExpression">To be added.</param>
        <summary>Creates a new JoinClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JoinClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax JoinClause (string identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax inExpression, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax leftExpression, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax rightExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax JoinClause(string identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax inExpression, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax leftExpression, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax rightExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function JoinClause (identifier As String, inExpression As ExpressionSyntax, leftExpression As ExpressionSyntax, rightExpression As ExpressionSyntax) As JoinClauseSyntax" />
      <MemberSignature Language="F#" Value="static member JoinClause : string * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause (identifier, inExpression, leftExpression, rightExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="inExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="leftExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="rightExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="inExpression">To be added.</param>
        <param name="leftExpression">To be added.</param>
        <param name="rightExpression">To be added.</param>
        <summary>Creates a new JoinClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JoinClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax JoinClause (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax inExpression, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax leftExpression, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax rightExpression, Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax into);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax JoinClause(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax inExpression, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax leftExpression, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax rightExpression, class Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax into) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function JoinClause (type As TypeSyntax, identifier As SyntaxToken, inExpression As ExpressionSyntax, leftExpression As ExpressionSyntax, rightExpression As ExpressionSyntax, into As JoinIntoClauseSyntax) As JoinClauseSyntax" />
      <MemberSignature Language="F#" Value="static member JoinClause : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause (type, identifier, inExpression, leftExpression, rightExpression, into)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="inExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="leftExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="rightExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="into" Type="Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="inExpression">To be added.</param>
        <param name="leftExpression">To be added.</param>
        <param name="rightExpression">To be added.</param>
        <param name="into">To be added.</param>
        <summary>Creates a new JoinClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JoinClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax JoinClause (Microsoft.CodeAnalysis.SyntaxToken joinKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken inKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax inExpression, Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax leftExpression, Microsoft.CodeAnalysis.SyntaxToken equalsKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax rightExpression, Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax into);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax JoinClause(valuetype Microsoft.CodeAnalysis.SyntaxToken joinKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, valuetype Microsoft.CodeAnalysis.SyntaxToken inKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax inExpression, valuetype Microsoft.CodeAnalysis.SyntaxToken onKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax leftExpression, valuetype Microsoft.CodeAnalysis.SyntaxToken equalsKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax rightExpression, class Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax into) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function JoinClause (joinKeyword As SyntaxToken, type As TypeSyntax, identifier As SyntaxToken, inKeyword As SyntaxToken, inExpression As ExpressionSyntax, onKeyword As SyntaxToken, leftExpression As ExpressionSyntax, equalsKeyword As SyntaxToken, rightExpression As ExpressionSyntax, into As JoinIntoClauseSyntax) As JoinClauseSyntax" />
      <MemberSignature Language="F#" Value="static member JoinClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause (joinKeyword, type, identifier, inKeyword, inExpression, onKeyword, leftExpression, equalsKeyword, rightExpression, into)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="inKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="inExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="onKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="leftExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="equalsKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="rightExpression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="into" Type="Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="joinKeyword">To be added.</param>
        <param name="type">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="inKeyword">To be added.</param>
        <param name="inExpression">To be added.</param>
        <param name="onKeyword">To be added.</param>
        <param name="leftExpression">To be added.</param>
        <param name="equalsKeyword">To be added.</param>
        <param name="rightExpression">To be added.</param>
        <param name="into">To be added.</param>
        <summary>Creates a new JoinClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JoinIntoClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax JoinIntoClause (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax JoinIntoClause(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function JoinIntoClause (identifier As SyntaxToken) As JoinIntoClauseSyntax" />
      <MemberSignature Language="F#" Value="static member JoinIntoClause : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new JoinIntoClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JoinIntoClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax JoinIntoClause (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax JoinIntoClause(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function JoinIntoClause (identifier As String) As JoinIntoClauseSyntax" />
      <MemberSignature Language="F#" Value="static member JoinIntoClause : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new JoinIntoClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JoinIntoClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax JoinIntoClause (Microsoft.CodeAnalysis.SyntaxToken intoKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax JoinIntoClause(valuetype Microsoft.CodeAnalysis.SyntaxToken intoKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function JoinIntoClause (intoKeyword As SyntaxToken, identifier As SyntaxToken) As JoinIntoClauseSyntax" />
      <MemberSignature Language="F#" Value="static member JoinIntoClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause (intoKeyword, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intoKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="intoKeyword">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>Creates a new JoinIntoClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LabeledStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax LabeledStatement (Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax LabeledStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LabeledStatement (identifier As SyntaxToken, statement As StatementSyntax) As LabeledStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LabeledStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement (identifier, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new LabeledStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LabeledStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax LabeledStatement (string identifier, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax LabeledStatement(string identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LabeledStatement (identifier As String, statement As StatementSyntax) As LabeledStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LabeledStatement : string * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement (identifier, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new LabeledStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LabeledStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax LabeledStatement (Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken colonToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax LabeledStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LabeledStatement (identifier As SyntaxToken, colonToken As SyntaxToken, statement As StatementSyntax) As LabeledStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LabeledStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement (identifier, colonToken, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="colonToken">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new LabeledStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LetClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax LetClause (Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax LetClause(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LetClause (identifier As SyntaxToken, expression As ExpressionSyntax) As LetClauseSyntax" />
      <MemberSignature Language="F#" Value="static member LetClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause (identifier, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new LetClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LetClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax LetClause (string identifier, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax LetClause(string identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LetClause (identifier As String, expression As ExpressionSyntax) As LetClauseSyntax" />
      <MemberSignature Language="F#" Value="static member LetClause : string * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause (identifier, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new LetClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LetClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax LetClause (Microsoft.CodeAnalysis.SyntaxToken letKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax LetClause(valuetype Microsoft.CodeAnalysis.SyntaxToken letKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, valuetype Microsoft.CodeAnalysis.SyntaxToken equalsToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LetClause (letKeyword As SyntaxToken, identifier As SyntaxToken, equalsToken As SyntaxToken, expression As ExpressionSyntax) As LetClauseSyntax" />
      <MemberSignature Language="F#" Value="static member LetClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause (letKeyword, identifier, equalsToken, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="letKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="equalsToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="letKeyword">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="equalsToken">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new LetClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax LineDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken line, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax LineDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken line, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LineDirectiveTrivia (line As SyntaxToken, isActive As Boolean) As LineDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member LineDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia (line, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="line" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="line">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new LineDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax LineDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken line, Microsoft.CodeAnalysis.SyntaxToken file, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax LineDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken line, valuetype Microsoft.CodeAnalysis.SyntaxToken file, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LineDirectiveTrivia (line As SyntaxToken, file As SyntaxToken, isActive As Boolean) As LineDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member LineDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia (line, file, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="line" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="file" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="line">To be added.</param>
        <param name="file">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new LineDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax LineDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken lineKeyword, Microsoft.CodeAnalysis.SyntaxToken line, Microsoft.CodeAnalysis.SyntaxToken file, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax LineDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken lineKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken line, valuetype Microsoft.CodeAnalysis.SyntaxToken file, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LineDirectiveTrivia (hashToken As SyntaxToken, lineKeyword As SyntaxToken, line As SyntaxToken, file As SyntaxToken, endOfDirectiveToken As SyntaxToken, isActive As Boolean) As LineDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member LineDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia (hashToken, lineKeyword, line, file, endOfDirectiveToken, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="lineKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="line" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="file" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endOfDirectiveToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hashToken">To be added.</param>
        <param name="lineKeyword">To be added.</param>
        <param name="line">To be added.</param>
        <param name="file">To be added.</param>
        <param name="endOfDirectiveToken">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new LineDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineFeed">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia LineFeed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia LineFeed" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineFeed" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LineFeed As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.LineFeed : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineFeed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A trivia with kind EndOfLineTrivia containing a single line feed character.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="List&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; List&lt;TNode&gt; () where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!!TNode&gt; List&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function List(Of TNode As SyntaxNode) () As SyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member List : unit -&gt; Microsoft.CodeAnalysis.SyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        <summary>
            Creates an empty list of syntax nodes.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="List&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; List&lt;TNode&gt; (System.Collections.Generic.IEnumerable&lt;TNode&gt; nodes) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!!TNode&gt; List&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TNode&gt; nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function List(Of TNode As SyntaxNode) (nodes As IEnumerable(Of TNode)) As SyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member List : seq&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; -&gt; Microsoft.CodeAnalysis.SyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.List nodes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        <param name="nodes">A sequence of element nodes.</param>
        <summary>
            Creates a list of syntax nodes.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (value As Char) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : char -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The character value to be represented by the returned token.</param>
        <summary>
            Creates a token with kind CharacterLiteralToken from a character value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (value As Decimal) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : decimal -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The decimal value to be represented by the returned token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from a decimal value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (value As Double) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : double -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The 8-byte floating point value to be represented by the returned token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from an 8-byte floating point value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (value As Integer) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : int -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 4-byte signed integer value to be represented by the returned token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from a 4-byte signed integer value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (value As Long) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : int64 -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 8-byte signed integer value to be represented by the returned token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from an 8-byte signed integer value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (value As Single) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : single -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The 4-byte floating point value to be represented by the returned token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from a 4-byte floating point value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (value As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The string value to be represented by the returned token.</param>
        <summary>
            Creates a token with kind StringLiteralToken from a string value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (value As UInteger) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : uint32 -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 4-byte unsigned integer value to be represented by the returned token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from a 4-byte unsigned integer value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (value As ULong) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : uint64 -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 8-byte unsigned integer value to be represented by the returned token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from an 8-byte unsigned integer value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string text, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (text As String, value As Char) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string * char -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal (text, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal, including quotes and escape sequences.</param>
        <param name="value">The character value to be represented by the returned token.</param>
        <summary>
            Creates a token with kind CharacterLiteralToken from the text and corresponding character value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string text, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (text As String, value As Decimal) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string * decimal -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal (text, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The decimal value to be represented by the returned token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from the text and corresponding decimal value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string text, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (text As String, value As Double) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string * double -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal (text, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 8-byte floating point value to be represented by the returned token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte floating point value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string text, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (text As String, value As Integer) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string * int -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal (text, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 4-byte signed integer value to be represented by the returned token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from the text and corresponding 4-byte signed integer value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string text, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (text As String, value As Long) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string * int64 -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal (text, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 8-byte signed integer value to be represented by the returned token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte signed integer value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string text, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (text As String, value As Single) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string * single -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal (text, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 4-byte floating point value to be represented by the returned token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from the text and corresponding 4-byte floating point value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string text, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (text As String, value As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string * string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal (text, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal, including quotes and escape sequences.</param>
        <param name="value">The string value to be represented by the returned token.</param>
        <summary>
            Creates a token with kind StringLiteralToken from the text and corresponding string value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string text, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (text As String, value As UInteger) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string * uint32 -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal (text, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 4-byte unsigned integer value to be represented by the returned token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from the text and corresponding 4-byte unsigned integer value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string text, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(System.String,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (text As String, value As ULong) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string * uint64 -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal (text, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 8-byte unsigned integer value to be represented by the returned token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte unsigned integer value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, char value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, char value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Char,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As Char, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * char * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal (leading, text, value, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal, including quotes and escape sequences.</param>
        <param name="value">The character value to be represented by the returned token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a token with kind CharacterLiteralToken from the text and corresponding character value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, decimal value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, valuetype System.Decimal value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Decimal,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As Decimal, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * decimal * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal (leading, text, value, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The decimal value to be represented by the returned token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from the text and corresponding decimal value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, double value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, float64 value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Double,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As Double, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * double * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal (leading, text, value, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 8-byte floating point value to be represented by the returned token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte floating point value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, int value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, int32 value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int32,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As Integer, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * int * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal (leading, text, value, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 4-byte signed integer value to be represented by the returned token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from the text and corresponding 4-byte signed integer value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, long value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, int64 value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int64,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As Long, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * int64 * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal (leading, text, value, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 8-byte signed integer value to be represented by the returned token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte signed integer value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, float value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, float32 value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Single,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As Single, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * single * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal (leading, text, value, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 4-byte floating point value to be represented by the returned token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from the text and corresponding 4-byte floating point value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, string value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As String, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal (leading, text, value, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal, including quotes and escape sequences.</param>
        <param name="value">The string value to be represented by the returned token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a token with kind StringLiteralToken from the text and corresponding string value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, uint value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, unsigned int32 value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt32,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As UInteger, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * uint32 * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal (leading, text, value, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 4-byte unsigned integer value to be represented by the returned token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from the text and corresponding 4-byte unsigned integer value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, ulong value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, unsigned int64 value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt64,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As ULong, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * uint64 * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal (leading, text, value, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 8-byte unsigned integer value to be represented by the returned token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte unsigned integer value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LiteralExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax LiteralExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax LiteralExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LiteralExpression (kind As SyntaxKind) As LiteralExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member LiteralExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LiteralExpression kind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>Creates a new LiteralExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LiteralExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax LiteralExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax LiteralExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LiteralExpression (kind As SyntaxKind, token As SyntaxToken) As LiteralExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member LiteralExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LiteralExpression (kind, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="token">To be added.</param>
        <summary>Creates a new LiteralExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax LoadDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken file, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax LoadDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken file, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LoadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadDirectiveTrivia (file As SyntaxToken, isActive As Boolean) As LoadDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member LoadDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LoadDirectiveTrivia (file, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new LoadDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax LoadDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken loadKeyword, Microsoft.CodeAnalysis.SyntaxToken file, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax LoadDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken loadKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken file, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LoadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadDirectiveTrivia (hashToken As SyntaxToken, loadKeyword As SyntaxToken, file As SyntaxToken, endOfDirectiveToken As SyntaxToken, isActive As Boolean) As LoadDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member LoadDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LoadDirectiveTrivia (hashToken, loadKeyword, file, endOfDirectiveToken, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="loadKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="file" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endOfDirectiveToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hashToken">To be added.</param>
        <param name="loadKeyword">To be added.</param>
        <param name="file">To be added.</param>
        <param name="endOfDirectiveToken">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new LoadDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDeclarationStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax LocalDeclarationStatement (Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax LocalDeclarationStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LocalDeclarationStatement (declaration As VariableDeclarationSyntax) As LocalDeclarationStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LocalDeclarationStatement : Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement declaration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>Creates a new LocalDeclarationStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDeclarationStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax LocalDeclarationStatement (Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax LocalDeclarationStatement(valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LocalDeclarationStatement (modifiers As SyntaxTokenList, declaration As VariableDeclarationSyntax) As LocalDeclarationStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LocalDeclarationStatement : Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement (modifiers, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="modifiers">To be added.</param>
        <param name="declaration">To be added.</param>
        <summary>Creates a new LocalDeclarationStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDeclarationStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax LocalDeclarationStatement (Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax LocalDeclarationStatement(valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LocalDeclarationStatement (modifiers As SyntaxTokenList, declaration As VariableDeclarationSyntax, semicolonToken As SyntaxToken) As LocalDeclarationStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LocalDeclarationStatement : Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement (modifiers, declaration, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="modifiers">To be added.</param>
        <param name="declaration">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new LocalDeclarationStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalFunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax LocalFunctionStatement (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax LocalFunctionStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalFunctionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LocalFunctionStatement (returnType As TypeSyntax, identifier As SyntaxToken) As LocalFunctionStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LocalFunctionStatement : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalFunctionStatement (returnType, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="returnType">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>Creates a new LocalFunctionStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalFunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax LocalFunctionStatement (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax LocalFunctionStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalFunctionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LocalFunctionStatement (returnType As TypeSyntax, identifier As String) As LocalFunctionStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LocalFunctionStatement : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalFunctionStatement (returnType, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="returnType">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>Creates a new LocalFunctionStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalFunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax LocalFunctionStatement (Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax LocalFunctionStatement(valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalFunctionStatement(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LocalFunctionStatement (modifiers As SyntaxTokenList, returnType As TypeSyntax, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, constraintClauses As SyntaxList(Of TypeParameterConstraintClauseSyntax), body As BlockSyntax, expressionBody As ArrowExpressionClauseSyntax) As LocalFunctionStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LocalFunctionStatement : Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalFunctionStatement (modifiers, returnType, identifier, typeParameterList, parameterList, constraintClauses, body, expressionBody)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="constraintClauses" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt;" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="modifiers">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="typeParameterList">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="constraintClauses">To be added.</param>
        <param name="body">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <summary>Creates a new LocalFunctionStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalFunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax LocalFunctionStatement (Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax LocalFunctionStatement(valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalFunctionStatement(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LocalFunctionStatement (modifiers As SyntaxTokenList, returnType As TypeSyntax, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, constraintClauses As SyntaxList(Of TypeParameterConstraintClauseSyntax), body As BlockSyntax, expressionBody As ArrowExpressionClauseSyntax, semicolonToken As SyntaxToken) As LocalFunctionStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LocalFunctionStatement : Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalFunctionStatement (modifiers, returnType, identifier, typeParameterList, parameterList, constraintClauses, body, expressionBody, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="constraintClauses" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt;" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="modifiers">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="typeParameterList">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="constraintClauses">To be added.</param>
        <param name="body">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new LocalFunctionStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LockStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax LockStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax LockStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LockStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LockStatement (expression As ExpressionSyntax, statement As StatementSyntax) As LockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LockStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LockStatement (expression, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new LockStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LockStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax LockStatement (Microsoft.CodeAnalysis.SyntaxToken lockKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax LockStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken lockKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LockStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LockStatement (lockKeyword As SyntaxToken, openParenToken As SyntaxToken, expression As ExpressionSyntax, closeParenToken As SyntaxToken, statement As StatementSyntax) As LockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LockStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LockStatement (lockKeyword, openParenToken, expression, closeParenToken, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="lockKeyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new LockStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeRefExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax MakeRefExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax MakeRefExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MakeRefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeRefExpression (expression As ExpressionSyntax) As MakeRefExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MakeRefExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MakeRefExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new MakeRefExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeRefExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax MakeRefExpression (Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax MakeRefExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MakeRefExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeRefExpression (keyword As SyntaxToken, openParenToken As SyntaxToken, expression As ExpressionSyntax, closeParenToken As SyntaxToken) As MakeRefExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MakeRefExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MakeRefExpression (keyword, openParenToken, expression, closeParenToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>Creates a new MakeRefExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax MemberAccessExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax MemberAccessExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberAccessExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberAccessExpression (kind As SyntaxKind, expression As ExpressionSyntax, name As SimpleNameSyntax) As MemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MemberAccessExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberAccessExpression (kind, expression, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="name">To be added.</param>
        <summary>Creates a new MemberAccessExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax MemberAccessExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax MemberAccessExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberAccessExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberAccessExpression (kind As SyntaxKind, expression As ExpressionSyntax, operatorToken As SyntaxToken, name As SimpleNameSyntax) As MemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MemberAccessExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberAccessExpression (kind, expression, operatorToken, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="operatorToken">To be added.</param>
        <param name="name">To be added.</param>
        <summary>Creates a new MemberAccessExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberBindingExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax MemberBindingExpression (Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax MemberBindingExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBindingExpression (name As SimpleNameSyntax) As MemberBindingExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MemberBindingExpression : Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberBindingExpression name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Creates a new MemberBindingExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberBindingExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax MemberBindingExpression (Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax MemberBindingExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberBindingExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBindingExpression (operatorToken As SyntaxToken, name As SimpleNameSyntax) As MemberBindingExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MemberBindingExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberBindingExpression (operatorToken, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="operatorToken">To be added.</param>
        <param name="name">To be added.</param>
        <summary>Creates a new MemberBindingExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax MethodDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax MethodDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MethodDeclaration (returnType As TypeSyntax, identifier As SyntaxToken) As MethodDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member MethodDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration (returnType, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="returnType">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>Creates a new MethodDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax MethodDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax MethodDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MethodDeclaration (returnType As TypeSyntax, identifier As String) As MethodDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member MethodDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration (returnType, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="returnType">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>Creates a new MethodDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax MethodDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax MethodDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, class Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MethodDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, returnType As TypeSyntax, explicitInterfaceSpecifier As ExplicitInterfaceSpecifierSyntax, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, constraintClauses As SyntaxList(Of TypeParameterConstraintClauseSyntax), body As BlockSyntax, expressionBody As ArrowExpressionClauseSyntax) As MethodDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member MethodDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration (attributeLists, modifiers, returnType, explicitInterfaceSpecifier, identifier, typeParameterList, parameterList, constraintClauses, body, expressionBody)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="explicitInterfaceSpecifier" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="constraintClauses" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt;" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="explicitInterfaceSpecifier">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="typeParameterList">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="constraintClauses">To be added.</param>
        <param name="body">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <summary>Creates a new MethodDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax MethodDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax MethodDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, class Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MethodDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, returnType As TypeSyntax, explicitInterfaceSpecifier As ExplicitInterfaceSpecifierSyntax, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, constraintClauses As SyntaxList(Of TypeParameterConstraintClauseSyntax), body As BlockSyntax, semicolonToken As SyntaxToken) As MethodDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member MethodDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration (attributeLists, modifiers, returnType, explicitInterfaceSpecifier, identifier, typeParameterList, parameterList, constraintClauses, body, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="explicitInterfaceSpecifier" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="constraintClauses" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt;" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="explicitInterfaceSpecifier">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="typeParameterList">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="constraintClauses">To be added.</param>
        <param name="body">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax MethodDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax MethodDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, class Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MethodDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, returnType As TypeSyntax, explicitInterfaceSpecifier As ExplicitInterfaceSpecifierSyntax, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, constraintClauses As SyntaxList(Of TypeParameterConstraintClauseSyntax), body As BlockSyntax, expressionBody As ArrowExpressionClauseSyntax, semicolonToken As SyntaxToken) As MethodDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member MethodDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration (attributeLists, modifiers, returnType, explicitInterfaceSpecifier, identifier, typeParameterList, parameterList, constraintClauses, body, expressionBody, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="explicitInterfaceSpecifier" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="constraintClauses" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt;" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="explicitInterfaceSpecifier">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="typeParameterList">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="constraintClauses">To be added.</param>
        <param name="body">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new MethodDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken MissingToken (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken MissingToken(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MissingToken (kind As SyntaxKind) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member MissingToken : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken kind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">A syntax kind value for a token. These have the suffix Token or Keyword.</param>
        <summary>
            Creates a missing token corresponding to syntax kind. A missing token is produced by the parser when an
            expected token is not found. A missing token has no text and normally has associated diagnostics.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken MissingToken (Microsoft.CodeAnalysis.SyntaxTriviaList leading, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken MissingToken(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MissingToken (leading As SyntaxTriviaList, kind As SyntaxKind, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member MissingToken : Microsoft.CodeAnalysis.SyntaxTriviaList * Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MissingToken (leading, kind, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="kind">A syntax kind value for a token. These have the suffix Token or Keyword.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a missing token corresponding to syntax kind. A missing token is produced by the parser when an
            expected token is not found. A missing token has no text and normally has associated diagnostics.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameColon">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax NameColon (Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax NameColon(class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NameColon (name As IdentifierNameSyntax) As NameColonSyntax" />
      <MemberSignature Language="F#" Value="static member NameColon : Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Creates a new NameColonSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameColon">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax NameColon (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax NameColon(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NameColon (name As String) As NameColonSyntax" />
      <MemberSignature Language="F#" Value="static member NameColon : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Creates a new NameColonSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameColon">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax NameColon (Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken colonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax NameColon(class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NameColon (name As IdentifierNameSyntax, colonToken As SyntaxToken) As NameColonSyntax" />
      <MemberSignature Language="F#" Value="static member NameColon : Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon (name, colonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" />
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="colonToken">To be added.</param>
        <summary>Creates a new NameColonSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameEquals">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax NameEquals (Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax NameEquals(class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NameEquals (name As IdentifierNameSyntax) As NameEqualsSyntax" />
      <MemberSignature Language="F#" Value="static member NameEquals : Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Creates a new NameEqualsSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameEquals">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax NameEquals (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax NameEquals(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NameEquals (name As String) As NameEqualsSyntax" />
      <MemberSignature Language="F#" Value="static member NameEquals : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Creates a new NameEqualsSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameEquals">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax NameEquals (Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken equalsToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax NameEquals(class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken equalsToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NameEquals (name As IdentifierNameSyntax, equalsToken As SyntaxToken) As NameEqualsSyntax" />
      <MemberSignature Language="F#" Value="static member NameEquals : Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals (name, equalsToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" />
        <Parameter Name="equalsToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="equalsToken">To be added.</param>
        <summary>Creates a new NameEqualsSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameMemberCref">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax NameMemberCref (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax NameMemberCref(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NameMemberCref (name As TypeSyntax) As NameMemberCrefSyntax" />
      <MemberSignature Language="F#" Value="static member NameMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameMemberCref name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Creates a new NameMemberCrefSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameMemberCref">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax NameMemberCref (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax name, Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax NameMemberCref(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax name, class Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NameMemberCref (name As TypeSyntax, parameters As CrefParameterListSyntax) As NameMemberCrefSyntax" />
      <MemberSignature Language="F#" Value="static member NameMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameMemberCref (name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>Creates a new NameMemberCrefSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax NamespaceDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax NamespaceDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NamespaceDeclaration (name As NameSyntax) As NamespaceDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member NamespaceDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Creates a new NamespaceDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax NamespaceDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax&gt; externs, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax&gt; usings, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax NamespaceDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax&gt; externs, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax&gt; usings, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NamespaceDeclaration (name As NameSyntax, externs As SyntaxList(Of ExternAliasDirectiveSyntax), usings As SyntaxList(Of UsingDirectiveSyntax), members As SyntaxList(Of MemberDeclarationSyntax)) As NamespaceDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member NamespaceDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration (name, externs, usings, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" />
        <Parameter Name="externs" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax&gt;" />
        <Parameter Name="usings" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="externs">To be added.</param>
        <param name="usings">To be added.</param>
        <param name="members">To be added.</param>
        <summary>Creates a new NamespaceDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax NamespaceDeclaration (Microsoft.CodeAnalysis.SyntaxToken namespaceKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax&gt; externs, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax&gt; usings, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax NamespaceDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxToken namespaceKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken openBraceToken, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax&gt; externs, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax&gt; usings, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NamespaceDeclaration (namespaceKeyword As SyntaxToken, name As NameSyntax, openBraceToken As SyntaxToken, externs As SyntaxList(Of ExternAliasDirectiveSyntax), usings As SyntaxList(Of UsingDirectiveSyntax), members As SyntaxList(Of MemberDeclarationSyntax), closeBraceToken As SyntaxToken, semicolonToken As SyntaxToken) As NamespaceDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member NamespaceDeclaration : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration (namespaceKeyword, name, openBraceToken, externs, usings, members, closeBraceToken, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" />
        <Parameter Name="openBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="externs" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax&gt;" />
        <Parameter Name="usings" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt;" />
        <Parameter Name="closeBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="namespaceKeyword">To be added.</param>
        <param name="name">To be added.</param>
        <param name="openBraceToken">To be added.</param>
        <param name="externs">To be added.</param>
        <param name="usings">To be added.</param>
        <param name="members">To be added.</param>
        <param name="closeBraceToken">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new NamespaceDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeOrTokenList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxNodeOrTokenList NodeOrTokenList ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxNodeOrTokenList NodeOrTokenList() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NodeOrTokenList () As SyntaxNodeOrTokenList" />
      <MemberSignature Language="F#" Value="static member NodeOrTokenList : unit -&gt; Microsoft.CodeAnalysis.SyntaxNodeOrTokenList" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNodeOrTokenList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates an empty <see cref="T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeOrTokenList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxNodeOrTokenList NodeOrTokenList (params Microsoft.CodeAnalysis.SyntaxNodeOrToken[] nodesAndTokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxNodeOrTokenList NodeOrTokenList(valuetype Microsoft.CodeAnalysis.SyntaxNodeOrToken[] nodesAndTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(Microsoft.CodeAnalysis.SyntaxNodeOrToken[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NodeOrTokenList (ParamArray nodesAndTokens As SyntaxNodeOrToken()) As SyntaxNodeOrTokenList" />
      <MemberSignature Language="F#" Value="static member NodeOrTokenList : Microsoft.CodeAnalysis.SyntaxNodeOrToken[] -&gt; Microsoft.CodeAnalysis.SyntaxNodeOrTokenList" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList nodesAndTokens" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNodeOrTokenList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodesAndTokens" Type="Microsoft.CodeAnalysis.SyntaxNodeOrToken[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="nodesAndTokens">The nodes and tokens</param>
        <summary>
            Create a <see cref="T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList" /> from one or more <see cref="T:Microsoft.CodeAnalysis.SyntaxNodeOrToken" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeOrTokenList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxNodeOrTokenList NodeOrTokenList (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt; nodesAndTokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxNodeOrTokenList NodeOrTokenList(class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt; nodesAndTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NodeOrTokenList (nodesAndTokens As IEnumerable(Of SyntaxNodeOrToken)) As SyntaxNodeOrTokenList" />
      <MemberSignature Language="F#" Value="static member NodeOrTokenList : seq&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNodeOrTokenList" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NodeOrTokenList nodesAndTokens" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNodeOrTokenList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodesAndTokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt;" />
      </Parameters>
      <Docs>
        <param name="nodesAndTokens">The sequence of nodes and tokens</param>
        <summary>
            Create a <see cref="T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList" /> from a sequence of <see cref="T:Microsoft.CodeAnalysis.SyntaxNodeOrToken" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NullableType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax NullableType (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax elementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax NullableType(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax elementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NullableType (elementType As TypeSyntax) As NullableTypeSyntax" />
      <MemberSignature Language="F#" Value="static member NullableType : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableType elementType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="elementType">To be added.</param>
        <summary>Creates a new NullableTypeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NullableType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax NullableType (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax elementType, Microsoft.CodeAnalysis.SyntaxToken questionToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax NullableType(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax elementType, valuetype Microsoft.CodeAnalysis.SyntaxToken questionToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NullableType (elementType As TypeSyntax, questionToken As SyntaxToken) As NullableTypeSyntax" />
      <MemberSignature Language="F#" Value="static member NullableType : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableType (elementType, questionToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="questionToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="elementType">To be added.</param>
        <param name="questionToken">To be added.</param>
        <summary>Creates a new NullableTypeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax ObjectCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax ObjectCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ObjectCreationExpression (type As TypeSyntax) As ObjectCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ObjectCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Creates a new ObjectCreationExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax ObjectCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax argumentList, Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax ObjectCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax argumentList, class Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ObjectCreationExpression (type As TypeSyntax, argumentList As ArgumentListSyntax, initializer As InitializerExpressionSyntax) As ObjectCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ObjectCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression (type, argumentList, initializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="argumentList">To be added.</param>
        <param name="initializer">To be added.</param>
        <summary>Creates a new ObjectCreationExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax ObjectCreationExpression (Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax argumentList, Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax ObjectCreationExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken newKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax argumentList, class Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ObjectCreationExpression (newKeyword As SyntaxToken, type As TypeSyntax, argumentList As ArgumentListSyntax, initializer As InitializerExpressionSyntax) As ObjectCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ObjectCreationExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression (newKeyword, type, argumentList, initializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="newKeyword">To be added.</param>
        <param name="type">To be added.</param>
        <param name="argumentList">To be added.</param>
        <param name="initializer">To be added.</param>
        <summary>Creates a new ObjectCreationExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OmittedArraySizeExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax OmittedArraySizeExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax OmittedArraySizeExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedArraySizeExpression" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OmittedArraySizeExpression () As OmittedArraySizeExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member OmittedArraySizeExpression : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedArraySizeExpression " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new OmittedArraySizeExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OmittedArraySizeExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax OmittedArraySizeExpression (Microsoft.CodeAnalysis.SyntaxToken omittedArraySizeExpressionToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax OmittedArraySizeExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken omittedArraySizeExpressionToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedArraySizeExpression(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OmittedArraySizeExpression (omittedArraySizeExpressionToken As SyntaxToken) As OmittedArraySizeExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member OmittedArraySizeExpression : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedArraySizeExpression omittedArraySizeExpressionToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="omittedArraySizeExpressionToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="omittedArraySizeExpressionToken">To be added.</param>
        <summary>Creates a new OmittedArraySizeExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OmittedTypeArgument">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax OmittedTypeArgument ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax OmittedTypeArgument() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedTypeArgument" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OmittedTypeArgument () As OmittedTypeArgumentSyntax" />
      <MemberSignature Language="F#" Value="static member OmittedTypeArgument : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedTypeArgument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new OmittedTypeArgumentSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OmittedTypeArgument">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax OmittedTypeArgument (Microsoft.CodeAnalysis.SyntaxToken omittedTypeArgumentToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax OmittedTypeArgument(valuetype Microsoft.CodeAnalysis.SyntaxToken omittedTypeArgumentToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedTypeArgument(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OmittedTypeArgument (omittedTypeArgumentToken As SyntaxToken) As OmittedTypeArgumentSyntax" />
      <MemberSignature Language="F#" Value="static member OmittedTypeArgument : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedTypeArgument omittedTypeArgumentToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="omittedTypeArgumentToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="omittedTypeArgumentToken">To be added.</param>
        <summary>Creates a new OmittedTypeArgumentSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperatorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax OperatorDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, Microsoft.CodeAnalysis.SyntaxToken operatorToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax OperatorDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OperatorDeclaration (returnType As TypeSyntax, operatorToken As SyntaxToken) As OperatorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member OperatorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration (returnType, operatorToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="returnType">To be added.</param>
        <param name="operatorToken">To be added.</param>
        <summary>Creates a new OperatorDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperatorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax OperatorDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax OperatorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OperatorDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, returnType As TypeSyntax, operatorToken As SyntaxToken, parameterList As ParameterListSyntax, body As BlockSyntax, expressionBody As ArrowExpressionClauseSyntax) As OperatorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member OperatorDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration (attributeLists, modifiers, returnType, operatorToken, parameterList, body, expressionBody)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="operatorToken">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="body">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <summary>Creates a new OperatorDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperatorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax OperatorDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax OperatorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OperatorDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, returnType As TypeSyntax, operatorKeyword As SyntaxToken, operatorToken As SyntaxToken, parameterList As ParameterListSyntax, body As BlockSyntax, semicolonToken As SyntaxToken) As OperatorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member OperatorDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration (attributeLists, modifiers, returnType, operatorKeyword, operatorToken, parameterList, body, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="operatorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="operatorKeyword">To be added.</param>
        <param name="operatorToken">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="body">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperatorDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax OperatorDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax OperatorDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax returnType, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax body, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OperatorDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, returnType As TypeSyntax, operatorKeyword As SyntaxToken, operatorToken As SyntaxToken, parameterList As ParameterListSyntax, body As BlockSyntax, expressionBody As ArrowExpressionClauseSyntax, semicolonToken As SyntaxToken) As OperatorDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member OperatorDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration (attributeLists, modifiers, returnType, operatorKeyword, operatorToken, parameterList, body, expressionBody, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="returnType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="operatorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="operatorKeyword">To be added.</param>
        <param name="operatorToken">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="body">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new OperatorDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperatorMemberCref">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax OperatorMemberCref (Microsoft.CodeAnalysis.SyntaxToken operatorToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax OperatorMemberCref(valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OperatorMemberCref (operatorToken As SyntaxToken) As OperatorMemberCrefSyntax" />
      <MemberSignature Language="F#" Value="static member OperatorMemberCref : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref operatorToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="operatorToken">To be added.</param>
        <summary>Creates a new OperatorMemberCrefSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperatorMemberCref">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax OperatorMemberCref (Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax OperatorMemberCref(valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OperatorMemberCref (operatorToken As SyntaxToken, parameters As CrefParameterListSyntax) As OperatorMemberCrefSyntax" />
      <MemberSignature Language="F#" Value="static member OperatorMemberCref : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref (operatorToken, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="operatorToken">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>Creates a new OperatorMemberCrefSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperatorMemberCref">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax OperatorMemberCref (Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax OperatorMemberCref(valuetype Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OperatorMemberCref (operatorKeyword As SyntaxToken, operatorToken As SyntaxToken, parameters As CrefParameterListSyntax) As OperatorMemberCrefSyntax" />
      <MemberSignature Language="F#" Value="static member OperatorMemberCref : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref (operatorKeyword, operatorToken, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="operatorKeyword">To be added.</param>
        <param name="operatorToken">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>Creates a new OperatorMemberCrefSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax OrderByClause (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax&gt; orderings = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax OrderByClause(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax&gt; orderings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OrderByClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrderByClause (Optional orderings As SeparatedSyntaxList(Of OrderingSyntax) = null) As OrderByClauseSyntax" />
      <MemberSignature Language="F#" Value="static member OrderByClause : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OrderByClause orderings" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderings" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="orderings">To be added.</param>
        <summary>Creates a new OrderByClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax OrderByClause (Microsoft.CodeAnalysis.SyntaxToken orderByKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax&gt; orderings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax OrderByClause(valuetype Microsoft.CodeAnalysis.SyntaxToken orderByKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax&gt; orderings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OrderByClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrderByClause (orderByKeyword As SyntaxToken, orderings As SeparatedSyntaxList(Of OrderingSyntax)) As OrderByClauseSyntax" />
      <MemberSignature Language="F#" Value="static member OrderByClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OrderByClause (orderByKeyword, orderings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderByKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="orderings" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="orderByKeyword">To be added.</param>
        <param name="orderings">To be added.</param>
        <summary>Creates a new OrderByClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordering">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax Ordering (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax Ordering(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Ordering(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ordering (kind As SyntaxKind, expression As ExpressionSyntax) As OrderingSyntax" />
      <MemberSignature Language="F#" Value="static member Ordering : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Ordering (kind, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new OrderingSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordering">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax Ordering (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken ascendingOrDescendingKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax Ordering(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken ascendingOrDescendingKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Ordering(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ordering (kind As SyntaxKind, expression As ExpressionSyntax, ascendingOrDescendingKeyword As SyntaxToken) As OrderingSyntax" />
      <MemberSignature Language="F#" Value="static member Ordering : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Ordering (kind, expression, ascendingOrDescendingKeyword)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="ascendingOrDescendingKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="ascendingOrDescendingKeyword">To be added.</param>
        <summary>Creates a new OrderingSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax Parameter (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax Parameter(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Parameter(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parameter (identifier As SyntaxToken) As ParameterSyntax" />
      <MemberSignature Language="F#" Value="static member Parameter : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Parameter identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new ParameterSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax Parameter (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax Parameter(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax default) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Parameter(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parameter (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, type As TypeSyntax, identifier As SyntaxToken, default As EqualsValueClauseSyntax) As ParameterSyntax" />
      <MemberSignature Language="F#" Value="static member Parameter : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Parameter (attributeLists, modifiers, type, identifier, default)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="default" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="type">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="default">To be added.</param>
        <summary>Creates a new ParameterSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax ParameterList (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&gt; parameters = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax ParameterList(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParameterList (Optional parameters As SeparatedSyntaxList(Of ParameterSyntax) = null) As ParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member ParameterList : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParameterList parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="parameters">To be added.</param>
        <summary>Creates a new ParameterListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax ParameterList (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&gt; parameters, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax ParameterList(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&gt; parameters, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParameterList (openParenToken As SyntaxToken, parameters As SeparatedSyntaxList(Of ParameterSyntax), closeParenToken As SyntaxToken) As ParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member ParameterList : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParameterList (openParenToken, parameters, closeParenToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax&gt;" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openParenToken">To be added.</param>
        <param name="parameters">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>Creates a new ParameterListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParenthesizedExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax ParenthesizedExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax ParenthesizedExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParenthesizedExpression (expression As ExpressionSyntax) As ParenthesizedExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ParenthesizedExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new ParenthesizedExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParenthesizedExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax ParenthesizedExpression (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax ParenthesizedExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParenthesizedExpression (openParenToken As SyntaxToken, expression As ExpressionSyntax, closeParenToken As SyntaxToken) As ParenthesizedExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ParenthesizedExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedExpression (openParenToken, expression, closeParenToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openParenToken">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>Creates a new ParenthesizedExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParenthesizedLambdaExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpression (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpression(class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParenthesizedLambdaExpression (body As CSharpSyntaxNode) As ParenthesizedLambdaExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ParenthesizedLambdaExpression : Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression body" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode" />
      </Parameters>
      <Docs>
        <param name="body">To be added.</param>
        <summary>Creates a new ParenthesizedLambdaExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParenthesizedLambdaExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParenthesizedLambdaExpression (parameterList As ParameterListSyntax, body As CSharpSyntaxNode) As ParenthesizedLambdaExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ParenthesizedLambdaExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression (parameterList, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode" />
      </Parameters>
      <Docs>
        <param name="parameterList">To be added.</param>
        <param name="body">To be added.</param>
        <summary>Creates a new ParenthesizedLambdaExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParenthesizedLambdaExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpression (Microsoft.CodeAnalysis.SyntaxToken asyncKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.SyntaxToken arrowToken, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax ParenthesizedLambdaExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken asyncKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax parameterList, valuetype Microsoft.CodeAnalysis.SyntaxToken arrowToken, class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParenthesizedLambdaExpression (asyncKeyword As SyntaxToken, parameterList As ParameterListSyntax, arrowToken As SyntaxToken, body As CSharpSyntaxNode) As ParenthesizedLambdaExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ParenthesizedLambdaExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression (asyncKeyword, parameterList, arrowToken, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
        <Parameter Name="arrowToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode" />
      </Parameters>
      <Docs>
        <param name="asyncKeyword">To be added.</param>
        <param name="parameterList">To be added.</param>
        <param name="arrowToken">To be added.</param>
        <param name="body">To be added.</param>
        <summary>Creates a new ParenthesizedLambdaExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParenthesizedVariableDesignation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax ParenthesizedVariableDesignation (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax&gt; variables = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax ParenthesizedVariableDesignation(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedVariableDesignation(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParenthesizedVariableDesignation (Optional variables As SeparatedSyntaxList(Of VariableDesignationSyntax) = null) As ParenthesizedVariableDesignationSyntax" />
      <MemberSignature Language="F#" Value="static member ParenthesizedVariableDesignation : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedVariableDesignation variables" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">To be added.</param>
        <summary>Creates a new ParenthesizedVariableDesignationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParenthesizedVariableDesignation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax ParenthesizedVariableDesignation (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax&gt; variables, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax ParenthesizedVariableDesignation(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax&gt; variables, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedVariableDesignation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParenthesizedVariableDesignation (openParenToken As SyntaxToken, variables As SeparatedSyntaxList(Of VariableDesignationSyntax), closeParenToken As SyntaxToken) As ParenthesizedVariableDesignationSyntax" />
      <MemberSignature Language="F#" Value="static member ParenthesizedVariableDesignation : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedVariableDesignation (openParenToken, variables, closeParenToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax&gt;" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openParenToken">To be added.</param>
        <param name="variables">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>Creates a new ParenthesizedVariableDesignationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseArgumentList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax ParseArgumentList (string text, int offset = 0, Microsoft.CodeAnalysis.ParseOptions options = null, bool consumeFullText = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax ParseArgumentList(string text, int32 offset, class Microsoft.CodeAnalysis.ParseOptions options, bool consumeFullText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseArgumentList (text As String, Optional offset As Integer = 0, Optional options As ParseOptions = null, Optional consumeFullText As Boolean = true) As ArgumentListSyntax" />
      <MemberSignature Language="F#" Value="static member ParseArgumentList : string * int * Microsoft.CodeAnalysis.ParseOptions * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseArgumentList (text, offset, options, consumeFullText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.ParseOptions" />
        <Parameter Name="consumeFullText" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text of the parenthesized argument list.</param>
        <param name="offset">Optional offset into text.</param>
        <param name="options">The optional parse options to use. If no options are specified default options are
            used.</param>
        <param name="consumeFullText">True if extra tokens in the input should be treated as an error</param>
        <summary>
            Parse an ArgumentListSyntax node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseAttributeArgumentList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax ParseAttributeArgumentList (string text, int offset = 0, Microsoft.CodeAnalysis.ParseOptions options = null, bool consumeFullText = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax ParseAttributeArgumentList(string text, int32 offset, class Microsoft.CodeAnalysis.ParseOptions options, bool consumeFullText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseAttributeArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseAttributeArgumentList (text As String, Optional offset As Integer = 0, Optional options As ParseOptions = null, Optional consumeFullText As Boolean = true) As AttributeArgumentListSyntax" />
      <MemberSignature Language="F#" Value="static member ParseAttributeArgumentList : string * int * Microsoft.CodeAnalysis.ParseOptions * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseAttributeArgumentList (text, offset, options, consumeFullText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.ParseOptions" />
        <Parameter Name="consumeFullText" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text of the attribute argument list.</param>
        <param name="offset">Optional offset into text.</param>
        <param name="options">The optional parse options to use. If no options are specified default options are
            used.</param>
        <param name="consumeFullText">True if extra tokens in the input should be treated as an error</param>
        <summary>
            Parse an AttributeArgumentListSyntax node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseBracketedArgumentList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax ParseBracketedArgumentList (string text, int offset = 0, Microsoft.CodeAnalysis.ParseOptions options = null, bool consumeFullText = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax ParseBracketedArgumentList(string text, int32 offset, class Microsoft.CodeAnalysis.ParseOptions options, bool consumeFullText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseBracketedArgumentList (text As String, Optional offset As Integer = 0, Optional options As ParseOptions = null, Optional consumeFullText As Boolean = true) As BracketedArgumentListSyntax" />
      <MemberSignature Language="F#" Value="static member ParseBracketedArgumentList : string * int * Microsoft.CodeAnalysis.ParseOptions * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedArgumentList (text, offset, options, consumeFullText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.ParseOptions" />
        <Parameter Name="consumeFullText" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text of the bracketed argument list.</param>
        <param name="offset">Optional offset into text.</param>
        <param name="options">The optional parse options to use. If no options are specified default options are
            used.</param>
        <param name="consumeFullText">True if extra tokens in the input should be treated as an error</param>
        <summary>
            Parse a BracketedArgumentListSyntax node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseBracketedParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax ParseBracketedParameterList (string text, int offset = 0, Microsoft.CodeAnalysis.ParseOptions options = null, bool consumeFullText = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax ParseBracketedParameterList(string text, int32 offset, class Microsoft.CodeAnalysis.ParseOptions options, bool consumeFullText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseBracketedParameterList (text As String, Optional offset As Integer = 0, Optional options As ParseOptions = null, Optional consumeFullText As Boolean = true) As BracketedParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member ParseBracketedParameterList : string * int * Microsoft.CodeAnalysis.ParseOptions * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedParameterList (text, offset, options, consumeFullText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.ParseOptions" />
        <Parameter Name="consumeFullText" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text of the bracketed parameter list.</param>
        <param name="offset">Optional offset into text.</param>
        <param name="options">The optional parse options to use. If no options are specified default options are
            used.</param>
        <param name="consumeFullText">True if extra tokens in the input should be treated as an error</param>
        <summary>
            Parse a BracketedParameterListSyntax node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseCompilationUnit">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax ParseCompilationUnit (string text, int offset = 0, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax ParseCompilationUnit(string text, int32 offset, class Microsoft.CodeAnalysis.CSharp.CSharpParseOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseCompilationUnit(System.String,System.Int32,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseCompilationUnit (text As String, Optional offset As Integer = 0, Optional options As CSharpParseOptions = null) As CompilationUnitSyntax" />
      <MemberSignature Language="F#" Value="static member ParseCompilationUnit : string * int * Microsoft.CodeAnalysis.CSharp.CSharpParseOptions -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseCompilationUnit (text, offset, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.CSharp.CSharpParseOptions" />
      </Parameters>
      <Docs>
        <param name="text">The text of the compilation unit.</param>
        <param name="offset">Optional offset into text.</param>
        <param name="options">The optional parse options to use. If no options are specified default options are
            used.</param>
        <summary>
            Parse a CompilationUnitSyntax using the grammar rule for an entire compilation unit (file). To produce a
            SyntaxTree instance, use CSharpSyntaxTree.ParseText instead.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax ParseExpression (string text, int offset = 0, Microsoft.CodeAnalysis.ParseOptions options = null, bool consumeFullText = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax ParseExpression(string text, int32 offset, class Microsoft.CodeAnalysis.ParseOptions options, bool consumeFullText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseExpression(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExpression (text As String, Optional offset As Integer = 0, Optional options As ParseOptions = null, Optional consumeFullText As Boolean = true) As ExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ParseExpression : string * int * Microsoft.CodeAnalysis.ParseOptions * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseExpression (text, offset, options, consumeFullText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.ParseOptions" />
        <Parameter Name="consumeFullText" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text of the expression.</param>
        <param name="offset">Optional offset into text.</param>
        <param name="options">The optional parse options to use. If no options are specified default options are
            used.</param>
        <param name="consumeFullText">True if extra tokens in the input should be treated as an error</param>
        <summary>
            Parse an ExpressionSyntax node using the lowest precedence grammar rule for expressions.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseLeadingTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTriviaList ParseLeadingTrivia (string text, int offset = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTriviaList ParseLeadingTrivia(string text, int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseLeadingTrivia(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseLeadingTrivia (text As String, Optional offset As Integer = 0) As SyntaxTriviaList" />
      <MemberSignature Language="F#" Value="static member ParseLeadingTrivia : string * int -&gt; Microsoft.CodeAnalysis.SyntaxTriviaList" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseLeadingTrivia (text, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTriviaList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="offset">To be added.</param>
        <summary>
            Parse a list of trivia rules for leading trivia.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax ParseName (string text, int offset = 0, bool consumeFullText = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax ParseName(string text, int32 offset, bool consumeFullText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseName(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseName (text As String, Optional offset As Integer = 0, Optional consumeFullText As Boolean = true) As NameSyntax" />
      <MemberSignature Language="F#" Value="static member ParseName : string * int * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseName (text, offset, consumeFullText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="consumeFullText" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="consumeFullText">To be added.</param>
        <summary>
            Parse a NameSyntax node using the grammar rule for names.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax ParseParameterList (string text, int offset = 0, Microsoft.CodeAnalysis.ParseOptions options = null, bool consumeFullText = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax ParseParameterList(string text, int32 offset, class Microsoft.CodeAnalysis.ParseOptions options, bool consumeFullText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseParameterList (text As String, Optional offset As Integer = 0, Optional options As ParseOptions = null, Optional consumeFullText As Boolean = true) As ParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member ParseParameterList : string * int * Microsoft.CodeAnalysis.ParseOptions * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseParameterList (text, offset, options, consumeFullText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.ParseOptions" />
        <Parameter Name="consumeFullText" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text of the parenthesized parameter list.</param>
        <param name="offset">Optional offset into text.</param>
        <param name="options">The optional parse options to use. If no options are specified default options are
            used.</param>
        <param name="consumeFullText">True if extra tokens in the input should be treated as an error</param>
        <summary>
            Parse a ParameterListSyntax node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax ParseStatement (string text, int offset = 0, Microsoft.CodeAnalysis.ParseOptions options = null, bool consumeFullText = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax ParseStatement(string text, int32 offset, class Microsoft.CodeAnalysis.ParseOptions options, bool consumeFullText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseStatement(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseStatement (text As String, Optional offset As Integer = 0, Optional options As ParseOptions = null, Optional consumeFullText As Boolean = true) As StatementSyntax" />
      <MemberSignature Language="F#" Value="static member ParseStatement : string * int * Microsoft.CodeAnalysis.ParseOptions * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseStatement (text, offset, options, consumeFullText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.ParseOptions" />
        <Parameter Name="consumeFullText" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text of the statement.</param>
        <param name="offset">Optional offset into text.</param>
        <param name="options">The optional parse options to use. If no options are specified default options are
            used.</param>
        <param name="consumeFullText">True if extra tokens in the input should be treated as an error</param>
        <summary>
            Parse a StatementSyntaxNode using grammar rule for statements.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseSyntaxTree">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTree ParseSyntaxTree (Microsoft.CodeAnalysis.Text.SourceText text, Microsoft.CodeAnalysis.ParseOptions options = null, string path = &quot;&quot;, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.SyntaxTree ParseSyntaxTree(class Microsoft.CodeAnalysis.Text.SourceText text, class Microsoft.CodeAnalysis.ParseOptions options, string path, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.ParseOptions,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ParseSyntaxTree : Microsoft.CodeAnalysis.Text.SourceText * Microsoft.CodeAnalysis.ParseOptions * string * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.SyntaxTree" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree (text, options, path, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTree</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Microsoft.CodeAnalysis.Text.SourceText" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.ParseOptions" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="options">To be added.</param>
        <param name="path">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
            Produces a syntax tree by parsing the source text.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseSyntaxTree">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTree ParseSyntaxTree (string text, Microsoft.CodeAnalysis.ParseOptions options = null, string path = &quot;&quot;, System.Text.Encoding encoding = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.SyntaxTree ParseSyntaxTree(string text, class Microsoft.CodeAnalysis.ParseOptions options, string path, class System.Text.Encoding encoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(System.String,Microsoft.CodeAnalysis.ParseOptions,System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ParseSyntaxTree : string * Microsoft.CodeAnalysis.ParseOptions * string * System.Text.Encoding * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.SyntaxTree" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree (text, options, path, encoding, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTree</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.ParseOptions" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="options">To be added.</param>
        <param name="path">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
            Produces a syntax tree by parsing the source text.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken ParseToken (string text, int offset = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken ParseToken(string text, int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseToken(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseToken (text As String, Optional offset As Integer = 0) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member ParseToken : string * int -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseToken (text, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The text of the token including leading and trailing trivia.</param>
        <param name="offset">Optional offset into text.</param>
        <summary>
            Parse a C# language token.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseTokens">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; ParseTokens (string text, int offset = 0, int initialTokenPosition = 0, Microsoft.CodeAnalysis.CSharp.CSharpParseOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; ParseTokens(string text, int32 offset, int32 initialTokenPosition, class Microsoft.CodeAnalysis.CSharp.CSharpParseOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTokens(System.String,System.Int32,System.Int32,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Iterator Function ParseTokens (text As String, Optional offset As Integer = 0, Optional initialTokenPosition As Integer = 0, Optional options As CSharpParseOptions = null) As IEnumerable(Of SyntaxToken)" />
      <MemberSignature Language="F#" Value="static member ParseTokens : string * int * int * Microsoft.CodeAnalysis.CSharp.CSharpParseOptions -&gt; seq&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTokens (text, offset, initialTokenPosition, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.CodeAnalysis.CSharp.SyntaxFactory/&lt;ParseTokens&gt;d__178))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="initialTokenPosition" Type="System.Int32" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.CSharp.CSharpParseOptions" />
      </Parameters>
      <Docs>
        <param name="text">The text of all the tokens.</param>
        <param name="offset">Optional offset into text.</param>
        <param name="initialTokenPosition">An integer to use as the starting position of the first token.</param>
        <param name="options">Parse options.</param>
        <summary>
            Parse a sequence of C# language tokens.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseTrailingTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTriviaList ParseTrailingTrivia (string text, int offset = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTriviaList ParseTrailingTrivia(string text, int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTrailingTrivia(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseTrailingTrivia (text As String, Optional offset As Integer = 0) As SyntaxTriviaList" />
      <MemberSignature Language="F#" Value="static member ParseTrailingTrivia : string * int -&gt; Microsoft.CodeAnalysis.SyntaxTriviaList" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTrailingTrivia (text, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTriviaList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="offset">To be added.</param>
        <summary>
            Parse a list of trivia using the parsing rules for trailing trivia.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseTypeName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax ParseTypeName (string text, int offset = 0, bool consumeFullText = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax ParseTypeName(string text, int32 offset, bool consumeFullText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTypeName(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseTypeName (text As String, Optional offset As Integer = 0, Optional consumeFullText As Boolean = true) As TypeSyntax" />
      <MemberSignature Language="F#" Value="static member ParseTypeName : string * int * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTypeName (text, offset, consumeFullText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="consumeFullText" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="consumeFullText">To be added.</param>
        <summary>
            Parse a TypeNameSyntax node using the grammar rule for type names.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PointerType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax PointerType (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax elementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax PointerType(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax elementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PointerType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PointerType (elementType As TypeSyntax) As PointerTypeSyntax" />
      <MemberSignature Language="F#" Value="static member PointerType : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PointerType elementType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="elementType">To be added.</param>
        <summary>Creates a new PointerTypeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PointerType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax PointerType (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax elementType, Microsoft.CodeAnalysis.SyntaxToken asteriskToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax PointerType(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax elementType, valuetype Microsoft.CodeAnalysis.SyntaxToken asteriskToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PointerType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PointerType (elementType As TypeSyntax, asteriskToken As SyntaxToken) As PointerTypeSyntax" />
      <MemberSignature Language="F#" Value="static member PointerType : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PointerType (elementType, asteriskToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="asteriskToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="elementType">To be added.</param>
        <param name="asteriskToken">To be added.</param>
        <summary>Creates a new PointerTypeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostfixUnaryExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax PostfixUnaryExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax operand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax PostfixUnaryExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PostfixUnaryExpression (kind As SyntaxKind, operand As ExpressionSyntax) As PostfixUnaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member PostfixUnaryExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PostfixUnaryExpression (kind, operand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="operand" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="operand">To be added.</param>
        <summary>Creates a new PostfixUnaryExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostfixUnaryExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax PostfixUnaryExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax operand, Microsoft.CodeAnalysis.SyntaxToken operatorToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax PostfixUnaryExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax operand, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PostfixUnaryExpression (kind As SyntaxKind, operand As ExpressionSyntax, operatorToken As SyntaxToken) As PostfixUnaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member PostfixUnaryExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PostfixUnaryExpression (kind, operand, operatorToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="operand" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="operand">To be added.</param>
        <param name="operatorToken">To be added.</param>
        <summary>Creates a new PostfixUnaryExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PragmaChecksumDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax PragmaChecksumDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken file, Microsoft.CodeAnalysis.SyntaxToken guid, Microsoft.CodeAnalysis.SyntaxToken bytes, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax PragmaChecksumDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken file, valuetype Microsoft.CodeAnalysis.SyntaxToken guid, valuetype Microsoft.CodeAnalysis.SyntaxToken bytes, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PragmaChecksumDirectiveTrivia (file As SyntaxToken, guid As SyntaxToken, bytes As SyntaxToken, isActive As Boolean) As PragmaChecksumDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member PragmaChecksumDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaChecksumDirectiveTrivia (file, guid, bytes, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="guid" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="bytes" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">To be added.</param>
        <param name="guid">To be added.</param>
        <param name="bytes">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new PragmaChecksumDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PragmaChecksumDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax PragmaChecksumDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken pragmaKeyword, Microsoft.CodeAnalysis.SyntaxToken checksumKeyword, Microsoft.CodeAnalysis.SyntaxToken file, Microsoft.CodeAnalysis.SyntaxToken guid, Microsoft.CodeAnalysis.SyntaxToken bytes, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax PragmaChecksumDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken pragmaKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken checksumKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken file, valuetype Microsoft.CodeAnalysis.SyntaxToken guid, valuetype Microsoft.CodeAnalysis.SyntaxToken bytes, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PragmaChecksumDirectiveTrivia (hashToken As SyntaxToken, pragmaKeyword As SyntaxToken, checksumKeyword As SyntaxToken, file As SyntaxToken, guid As SyntaxToken, bytes As SyntaxToken, endOfDirectiveToken As SyntaxToken, isActive As Boolean) As PragmaChecksumDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member PragmaChecksumDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaChecksumDirectiveTrivia (hashToken, pragmaKeyword, checksumKeyword, file, guid, bytes, endOfDirectiveToken, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="pragmaKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="checksumKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="file" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="guid" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="bytes" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endOfDirectiveToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hashToken">To be added.</param>
        <param name="pragmaKeyword">To be added.</param>
        <param name="checksumKeyword">To be added.</param>
        <param name="file">To be added.</param>
        <param name="guid">To be added.</param>
        <param name="bytes">To be added.</param>
        <param name="endOfDirectiveToken">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new PragmaChecksumDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PragmaWarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax PragmaWarningDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken disableOrRestoreKeyword, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax PragmaWarningDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken disableOrRestoreKeyword, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PragmaWarningDirectiveTrivia (disableOrRestoreKeyword As SyntaxToken, isActive As Boolean) As PragmaWarningDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member PragmaWarningDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia (disableOrRestoreKeyword, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disableOrRestoreKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disableOrRestoreKeyword">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new PragmaWarningDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PragmaWarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax PragmaWarningDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken disableOrRestoreKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; errorCodes, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax PragmaWarningDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken disableOrRestoreKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; errorCodes, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PragmaWarningDirectiveTrivia (disableOrRestoreKeyword As SyntaxToken, errorCodes As SeparatedSyntaxList(Of ExpressionSyntax), isActive As Boolean) As PragmaWarningDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member PragmaWarningDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia (disableOrRestoreKeyword, errorCodes, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disableOrRestoreKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="errorCodes" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt;" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disableOrRestoreKeyword">To be added.</param>
        <param name="errorCodes">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new PragmaWarningDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PragmaWarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax PragmaWarningDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken pragmaKeyword, Microsoft.CodeAnalysis.SyntaxToken warningKeyword, Microsoft.CodeAnalysis.SyntaxToken disableOrRestoreKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; errorCodes, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax PragmaWarningDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken pragmaKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken warningKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken disableOrRestoreKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; errorCodes, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PragmaWarningDirectiveTrivia (hashToken As SyntaxToken, pragmaKeyword As SyntaxToken, warningKeyword As SyntaxToken, disableOrRestoreKeyword As SyntaxToken, errorCodes As SeparatedSyntaxList(Of ExpressionSyntax), endOfDirectiveToken As SyntaxToken, isActive As Boolean) As PragmaWarningDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member PragmaWarningDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia (hashToken, pragmaKeyword, warningKeyword, disableOrRestoreKeyword, errorCodes, endOfDirectiveToken, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="pragmaKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="warningKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="disableOrRestoreKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="errorCodes" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax&gt;" />
        <Parameter Name="endOfDirectiveToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hashToken">To be added.</param>
        <param name="pragmaKeyword">To be added.</param>
        <param name="warningKeyword">To be added.</param>
        <param name="disableOrRestoreKeyword">To be added.</param>
        <param name="errorCodes">To be added.</param>
        <param name="endOfDirectiveToken">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new PragmaWarningDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PredefinedType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax PredefinedType (Microsoft.CodeAnalysis.SyntaxToken keyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax PredefinedType(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PredefinedType(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PredefinedType (keyword As SyntaxToken) As PredefinedTypeSyntax" />
      <MemberSignature Language="F#" Value="static member PredefinedType : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PredefinedType keyword" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">To be added.</param>
        <summary>Creates a new PredefinedTypeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrefixUnaryExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax PrefixUnaryExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax operand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax PrefixUnaryExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PrefixUnaryExpression (kind As SyntaxKind, operand As ExpressionSyntax) As PrefixUnaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member PrefixUnaryExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PrefixUnaryExpression (kind, operand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="operand" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="operand">To be added.</param>
        <summary>Creates a new PrefixUnaryExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrefixUnaryExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax PrefixUnaryExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax operand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax PrefixUnaryExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PrefixUnaryExpression (kind As SyntaxKind, operatorToken As SyntaxToken, operand As ExpressionSyntax) As PrefixUnaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member PrefixUnaryExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PrefixUnaryExpression (kind, operatorToken, operand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operand" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="operatorToken">To be added.</param>
        <param name="operand">To be added.</param>
        <summary>Creates a new PrefixUnaryExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreprocessingMessage">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia PreprocessingMessage (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTrivia PreprocessingMessage(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PreprocessingMessage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PreprocessingMessage (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member PreprocessingMessage : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PreprocessingMessage text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <summary>
            Creates a trivia with kind PreprocessingMessageTrivia.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax PropertyDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax PropertyDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PropertyDeclaration (type As TypeSyntax, identifier As SyntaxToken) As PropertyDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member PropertyDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration (type, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>Creates a new PropertyDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax PropertyDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax PropertyDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PropertyDeclaration (type As TypeSyntax, identifier As String) As PropertyDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member PropertyDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration (type, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>Creates a new PropertyDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax PropertyDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax accessorList);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax PropertyDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax accessorList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PropertyDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, type As TypeSyntax, explicitInterfaceSpecifier As ExplicitInterfaceSpecifierSyntax, identifier As SyntaxToken, accessorList As AccessorListSyntax) As PropertyDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member PropertyDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration (attributeLists, modifiers, type, explicitInterfaceSpecifier, identifier, accessorList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="explicitInterfaceSpecifier" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="accessorList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="type">To be added.</param>
        <param name="explicitInterfaceSpecifier">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="accessorList">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax PropertyDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax accessorList, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax PropertyDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax accessorList, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, class Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PropertyDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, type As TypeSyntax, explicitInterfaceSpecifier As ExplicitInterfaceSpecifierSyntax, identifier As SyntaxToken, accessorList As AccessorListSyntax, expressionBody As ArrowExpressionClauseSyntax, initializer As EqualsValueClauseSyntax) As PropertyDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member PropertyDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration (attributeLists, modifiers, type, explicitInterfaceSpecifier, identifier, accessorList, expressionBody, initializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="explicitInterfaceSpecifier" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="accessorList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="type">To be added.</param>
        <param name="explicitInterfaceSpecifier">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="accessorList">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <param name="initializer">To be added.</param>
        <summary>Creates a new PropertyDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax PropertyDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax accessorList, Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax initializer, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax PropertyDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax explicitInterfaceSpecifier, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax accessorList, class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax expressionBody, class Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax initializer, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PropertyDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, type As TypeSyntax, explicitInterfaceSpecifier As ExplicitInterfaceSpecifierSyntax, identifier As SyntaxToken, accessorList As AccessorListSyntax, expressionBody As ArrowExpressionClauseSyntax, initializer As EqualsValueClauseSyntax, semicolonToken As SyntaxToken) As PropertyDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member PropertyDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration (attributeLists, modifiers, type, explicitInterfaceSpecifier, identifier, accessorList, expressionBody, initializer, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="explicitInterfaceSpecifier" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="accessorList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax" />
        <Parameter Name="expressionBody" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="type">To be added.</param>
        <param name="explicitInterfaceSpecifier">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="accessorList">To be added.</param>
        <param name="expressionBody">To be added.</param>
        <param name="initializer">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new PropertyDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QualifiedCref">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax QualifiedCref (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax container, Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax member);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax QualifiedCref(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax container, class Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax member) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QualifiedCref (container As TypeSyntax, member As MemberCrefSyntax) As QualifiedCrefSyntax" />
      <MemberSignature Language="F#" Value="static member QualifiedCref : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedCref (container, member)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="member" Type="Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <param name="member">To be added.</param>
        <summary>Creates a new QualifiedCrefSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QualifiedCref">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax QualifiedCref (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax container, Microsoft.CodeAnalysis.SyntaxToken dotToken, Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax member);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax QualifiedCref(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax container, valuetype Microsoft.CodeAnalysis.SyntaxToken dotToken, class Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax member) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QualifiedCref (container As TypeSyntax, dotToken As SyntaxToken, member As MemberCrefSyntax) As QualifiedCrefSyntax" />
      <MemberSignature Language="F#" Value="static member QualifiedCref : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedCref (container, dotToken, member)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="dotToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="member" Type="Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <param name="dotToken">To be added.</param>
        <param name="member">To be added.</param>
        <summary>Creates a new QualifiedCrefSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QualifiedName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax QualifiedName (Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax left, Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax QualifiedName(class Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax left, class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QualifiedName (left As NameSyntax, right As SimpleNameSyntax) As QualifiedNameSyntax" />
      <MemberSignature Language="F#" Value="static member QualifiedName : Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedName (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Creates a new QualifiedNameSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QualifiedName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax QualifiedName (Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax left, Microsoft.CodeAnalysis.SyntaxToken dotToken, Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax QualifiedName(class Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken dotToken, class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QualifiedName (left As NameSyntax, dotToken As SyntaxToken, right As SimpleNameSyntax) As QualifiedNameSyntax" />
      <MemberSignature Language="F#" Value="static member QualifiedName : Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedName (left, dotToken, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" />
        <Parameter Name="dotToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="dotToken">To be added.</param>
        <param name="right">To be added.</param>
        <summary>Creates a new QualifiedNameSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryBody">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax QueryBody (Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax selectOrGroup);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax QueryBody(class Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax selectOrGroup) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryBody(Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueryBody (selectOrGroup As SelectOrGroupClauseSyntax) As QueryBodySyntax" />
      <MemberSignature Language="F#" Value="static member QueryBody : Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryBody selectOrGroup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectOrGroup" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="selectOrGroup">To be added.</param>
        <summary>Creates a new QueryBodySyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryBody">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax QueryBody (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax&gt; clauses, Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax selectOrGroup, Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax continuation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax QueryBody(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax&gt; clauses, class Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax selectOrGroup, class Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax continuation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryBody(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueryBody (clauses As SyntaxList(Of QueryClauseSyntax), selectOrGroup As SelectOrGroupClauseSyntax, continuation As QueryContinuationSyntax) As QueryBodySyntax" />
      <MemberSignature Language="F#" Value="static member QueryBody : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax&gt; * Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryBody (clauses, selectOrGroup, continuation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clauses" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax&gt;" />
        <Parameter Name="selectOrGroup" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax" />
        <Parameter Name="continuation" Type="Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax" />
      </Parameters>
      <Docs>
        <param name="clauses">To be added.</param>
        <param name="selectOrGroup">To be added.</param>
        <param name="continuation">To be added.</param>
        <summary>Creates a new QueryBodySyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinuation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax QueryContinuation (Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax QueryContinuation(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueryContinuation (identifier As SyntaxToken, body As QueryBodySyntax) As QueryContinuationSyntax" />
      <MemberSignature Language="F#" Value="static member QueryContinuation : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation (identifier, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="body">To be added.</param>
        <summary>Creates a new QueryContinuationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinuation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax QueryContinuation (string identifier, Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax QueryContinuation(string identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueryContinuation (identifier As String, body As QueryBodySyntax) As QueryContinuationSyntax" />
      <MemberSignature Language="F#" Value="static member QueryContinuation : string * Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation (identifier, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="body">To be added.</param>
        <summary>Creates a new QueryContinuationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinuation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax QueryContinuation (Microsoft.CodeAnalysis.SyntaxToken intoKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax QueryContinuation(valuetype Microsoft.CodeAnalysis.SyntaxToken intoKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueryContinuation (intoKeyword As SyntaxToken, identifier As SyntaxToken, body As QueryBodySyntax) As QueryContinuationSyntax" />
      <MemberSignature Language="F#" Value="static member QueryContinuation : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation (intoKeyword, identifier, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intoKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax" />
      </Parameters>
      <Docs>
        <param name="intoKeyword">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="body">To be added.</param>
        <summary>Creates a new QueryContinuationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax QueryExpression (Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax fromClause, Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax QueryExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax fromClause, class Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueryExpression (fromClause As FromClauseSyntax, body As QueryBodySyntax) As QueryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member QueryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryExpression (fromClause, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromClause" Type="Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax" />
      </Parameters>
      <Docs>
        <param name="fromClause">To be added.</param>
        <param name="body">To be added.</param>
        <summary>Creates a new QueryExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax ReferenceDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken file, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax ReferenceDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken file, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReferenceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceDirectiveTrivia (file As SyntaxToken, isActive As Boolean) As ReferenceDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ReferenceDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReferenceDirectiveTrivia (file, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new ReferenceDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax ReferenceDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken referenceKeyword, Microsoft.CodeAnalysis.SyntaxToken file, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax ReferenceDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken referenceKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken file, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReferenceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceDirectiveTrivia (hashToken As SyntaxToken, referenceKeyword As SyntaxToken, file As SyntaxToken, endOfDirectiveToken As SyntaxToken, isActive As Boolean) As ReferenceDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ReferenceDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReferenceDirectiveTrivia (hashToken, referenceKeyword, file, endOfDirectiveToken, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="referenceKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="file" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endOfDirectiveToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hashToken">To be added.</param>
        <param name="referenceKeyword">To be added.</param>
        <param name="file">To be added.</param>
        <param name="endOfDirectiveToken">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new ReferenceDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax RefExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax RefExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RefExpression (expression As ExpressionSyntax) As RefExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member RefExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new RefExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax RefExpression (Microsoft.CodeAnalysis.SyntaxToken refKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax RefExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken refKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RefExpression (refKeyword As SyntaxToken, expression As ExpressionSyntax) As RefExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member RefExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefExpression (refKeyword, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="refKeyword">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new RefExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax RefType (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax RefType(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RefType (type As TypeSyntax) As RefTypeSyntax" />
      <MemberSignature Language="F#" Value="static member RefType : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Creates a new RefTypeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax RefType (Microsoft.CodeAnalysis.SyntaxToken refKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax RefType(valuetype Microsoft.CodeAnalysis.SyntaxToken refKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefType(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RefType (refKeyword As SyntaxToken, type As TypeSyntax) As RefTypeSyntax" />
      <MemberSignature Language="F#" Value="static member RefType : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefType (refKeyword, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="refKeyword">To be added.</param>
        <param name="type">To be added.</param>
        <summary>Creates a new RefTypeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefTypeExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax RefTypeExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax RefTypeExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefTypeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RefTypeExpression (expression As ExpressionSyntax) As RefTypeExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member RefTypeExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefTypeExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new RefTypeExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefTypeExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax RefTypeExpression (Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax RefTypeExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefTypeExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RefTypeExpression (keyword As SyntaxToken, openParenToken As SyntaxToken, expression As ExpressionSyntax, closeParenToken As SyntaxToken) As RefTypeExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member RefTypeExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefTypeExpression (keyword, openParenToken, expression, closeParenToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>Creates a new RefTypeExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefValueExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax RefValueExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax RefValueExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefValueExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RefValueExpression (expression As ExpressionSyntax, type As TypeSyntax) As RefValueExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member RefValueExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefValueExpression (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="type">To be added.</param>
        <summary>Creates a new RefValueExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefValueExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax RefValueExpression (Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken comma, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax RefValueExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken comma, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefValueExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RefValueExpression (keyword As SyntaxToken, openParenToken As SyntaxToken, expression As ExpressionSyntax, comma As SyntaxToken, type As TypeSyntax, closeParenToken As SyntaxToken) As RefValueExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member RefValueExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefValueExpression (keyword, openParenToken, expression, comma, type, closeParenToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="comma" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="comma">To be added.</param>
        <param name="type">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>Creates a new RefValueExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegionDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax RegionDirectiveTrivia (bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax RegionDirectiveTrivia(bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RegionDirectiveTrivia(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegionDirectiveTrivia (isActive As Boolean) As RegionDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member RegionDirectiveTrivia : bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RegionDirectiveTrivia isActive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isActive">To be added.</param>
        <summary>Creates a new RegionDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegionDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax RegionDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken regionKeyword, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax RegionDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken regionKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegionDirectiveTrivia (hashToken As SyntaxToken, regionKeyword As SyntaxToken, endOfDirectiveToken As SyntaxToken, isActive As Boolean) As RegionDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member RegionDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RegionDirectiveTrivia (hashToken, regionKeyword, endOfDirectiveToken, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="regionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endOfDirectiveToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hashToken">To be added.</param>
        <param name="regionKeyword">To be added.</param>
        <param name="endOfDirectiveToken">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new RegionDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax ReturnStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax ReturnStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReturnStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReturnStatement (Optional expression As ExpressionSyntax = null) As ReturnStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ReturnStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReturnStatement expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new ReturnStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax ReturnStatement (Microsoft.CodeAnalysis.SyntaxToken returnKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax ReturnStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken returnKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReturnStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReturnStatement (returnKeyword As SyntaxToken, expression As ExpressionSyntax, semicolonToken As SyntaxToken) As ReturnStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ReturnStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReturnStatement (returnKeyword, expression, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="returnKeyword">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new ReturnStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax SelectClause (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax SelectClause(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SelectClause (expression As ExpressionSyntax) As SelectClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SelectClause : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SelectClause expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new SelectClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax SelectClause (Microsoft.CodeAnalysis.SyntaxToken selectKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax SelectClause(valuetype Microsoft.CodeAnalysis.SyntaxToken selectKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SelectClause (selectKeyword As SyntaxToken, expression As ExpressionSyntax) As SelectClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SelectClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SelectClause (selectKeyword, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="selectKeyword">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new SelectClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatedList&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; SeparatedList&lt;TNode&gt; () where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; SeparatedList&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SeparatedList(Of TNode As SyntaxNode) () As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member SeparatedList : unit -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        <summary>
            Creates an empty separated list.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatedList&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; SeparatedList&lt;TNode&gt; (Microsoft.CodeAnalysis.SyntaxNodeOrTokenList nodesAndTokens) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; SeparatedList&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(valuetype Microsoft.CodeAnalysis.SyntaxNodeOrTokenList nodesAndTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SeparatedList(Of TNode As SyntaxNode) (nodesAndTokens As SyntaxNodeOrTokenList) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member SeparatedList : Microsoft.CodeAnalysis.SyntaxNodeOrTokenList -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList nodesAndTokens" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="nodesAndTokens" Type="Microsoft.CodeAnalysis.SyntaxNodeOrTokenList" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        <param name="nodesAndTokens">The list of nodes and tokens.</param>
        <summary>
            Creates a separated list from a <see cref="T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList" />, where the list elements start with a node and then alternate between
            additional nodes and separator tokens.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatedList&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; SeparatedList&lt;TNode&gt; (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt; nodesAndTokens) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; SeparatedList&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt; nodesAndTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SeparatedList(Of TNode As SyntaxNode) (nodesAndTokens As IEnumerable(Of SyntaxNodeOrToken)) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member SeparatedList : seq&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt; -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList nodesAndTokens" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="nodesAndTokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        <param name="nodesAndTokens">A sequence of nodes or tokens, alternating between nodes and separator tokens.</param>
        <summary>
            Creates a separated list from a sequence of nodes and tokens, starting with a node and alternating between additional nodes and separator tokens.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatedList&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; SeparatedList&lt;TNode&gt; (System.Collections.Generic.IEnumerable&lt;TNode&gt; nodes) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; SeparatedList&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TNode&gt; nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SeparatedList(Of TNode As SyntaxNode) (nodes As IEnumerable(Of TNode)) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member SeparatedList : seq&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList nodes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        <param name="nodes">A sequence of syntax nodes.</param>
        <summary>
            Creates a separated list of nodes from a sequence of nodes, synthesizing comma separators in between.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatedList&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; SeparatedList&lt;TNode&gt; (System.Collections.Generic.IEnumerable&lt;TNode&gt; nodes, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; separators) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; SeparatedList&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TNode&gt; nodes, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; separators) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SeparatedList(Of TNode As SyntaxNode) (nodes As IEnumerable(Of TNode), separators As IEnumerable(Of SyntaxToken)) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member SeparatedList : seq&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SeparatedList (nodes, separators)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;TNode&gt;" />
        <Parameter Name="separators" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        <param name="nodes">A sequence of syntax nodes.</param>
        <param name="separators">A sequence of token to be interleaved between the nodes. The number of tokens must
            be one less than the number of nodes.</param>
        <summary>
            Creates a separated list of nodes from a sequence of nodes and a sequence of separator tokens.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShebangDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax ShebangDirectiveTrivia (bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax ShebangDirectiveTrivia(bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ShebangDirectiveTrivia(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ShebangDirectiveTrivia (isActive As Boolean) As ShebangDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ShebangDirectiveTrivia : bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ShebangDirectiveTrivia isActive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isActive">To be added.</param>
        <summary>Creates a new ShebangDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShebangDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax ShebangDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken exclamationToken, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax ShebangDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken exclamationToken, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ShebangDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ShebangDirectiveTrivia (hashToken As SyntaxToken, exclamationToken As SyntaxToken, endOfDirectiveToken As SyntaxToken, isActive As Boolean) As ShebangDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ShebangDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ShebangDirectiveTrivia (hashToken, exclamationToken, endOfDirectiveToken, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="exclamationToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endOfDirectiveToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hashToken">To be added.</param>
        <param name="exclamationToken">To be added.</param>
        <param name="endOfDirectiveToken">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new ShebangDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleBaseType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax SimpleBaseType (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax SimpleBaseType(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleBaseType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleBaseType (type As TypeSyntax) As SimpleBaseTypeSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleBaseType : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleBaseType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Creates a new SimpleBaseTypeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleLambdaExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax SimpleLambdaExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax parameter, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax SimpleLambdaExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax parameter, class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleLambdaExpression (parameter As ParameterSyntax, body As CSharpSyntaxNode) As SimpleLambdaExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleLambdaExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax * Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression (parameter, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode" />
      </Parameters>
      <Docs>
        <param name="parameter">To be added.</param>
        <param name="body">To be added.</param>
        <summary>Creates a new SimpleLambdaExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleLambdaExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax SimpleLambdaExpression (Microsoft.CodeAnalysis.SyntaxToken asyncKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax parameter, Microsoft.CodeAnalysis.SyntaxToken arrowToken, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax SimpleLambdaExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken asyncKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax parameter, valuetype Microsoft.CodeAnalysis.SyntaxToken arrowToken, class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleLambdaExpression (asyncKeyword As SyntaxToken, parameter As ParameterSyntax, arrowToken As SyntaxToken, body As CSharpSyntaxNode) As SimpleLambdaExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleLambdaExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression (asyncKeyword, parameter, arrowToken, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameter" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax" />
        <Parameter Name="arrowToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode" />
      </Parameters>
      <Docs>
        <param name="asyncKeyword">To be added.</param>
        <param name="parameter">To be added.</param>
        <param name="arrowToken">To be added.</param>
        <param name="body">To be added.</param>
        <summary>Creates a new SimpleLambdaExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingletonList&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; SingletonList&lt;TNode&gt; (TNode node) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!!TNode&gt; SingletonList&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(!!TNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonList``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SingletonList(Of TNode As SyntaxNode) (node As TNode) As SyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member SingletonList : 'Node -&gt; Microsoft.CodeAnalysis.SyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonList node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="TNode" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        <param name="node">The single element node.</param>
        <summary>
            Creates a singleton list of syntax nodes.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingletonSeparatedList&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; SingletonSeparatedList&lt;TNode&gt; (TNode node) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; SingletonSeparatedList&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(!!TNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonSeparatedList``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SingletonSeparatedList(Of TNode As SyntaxNode) (node As TNode) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member SingletonSeparatedList : 'Node -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingletonSeparatedList node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="TNode" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        <param name="node">A single node.</param>
        <summary>
            Creates a singleton separated list.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleVariableDesignation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax SingleVariableDesignation (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax SingleVariableDesignation(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingleVariableDesignation(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SingleVariableDesignation (identifier As SyntaxToken) As SingleVariableDesignationSyntax" />
      <MemberSignature Language="F#" Value="static member SingleVariableDesignation : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingleVariableDesignation identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new SingleVariableDesignationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeOfExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax SizeOfExpression (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax SizeOfExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SizeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SizeOfExpression (type As TypeSyntax) As SizeOfExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member SizeOfExpression : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SizeOfExpression type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Creates a new SizeOfExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeOfExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax SizeOfExpression (Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax SizeOfExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SizeOfExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SizeOfExpression (keyword As SyntaxToken, openParenToken As SyntaxToken, type As TypeSyntax, closeParenToken As SyntaxToken) As SizeOfExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member SizeOfExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SizeOfExpression (keyword, openParenToken, type, closeParenToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="type">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>Creates a new SizeOfExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkippedTokensTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax SkippedTokensTrivia ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax SkippedTokensTrivia() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SkippedTokensTrivia" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SkippedTokensTrivia () As SkippedTokensTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member SkippedTokensTrivia : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SkippedTokensTrivia " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new SkippedTokensTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkippedTokensTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax SkippedTokensTrivia (Microsoft.CodeAnalysis.SyntaxTokenList tokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax SkippedTokensTrivia(valuetype Microsoft.CodeAnalysis.SyntaxTokenList tokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SkippedTokensTrivia(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SkippedTokensTrivia (tokens As SyntaxTokenList) As SkippedTokensTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member SkippedTokensTrivia : Microsoft.CodeAnalysis.SyntaxTokenList -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SkippedTokensTrivia tokens" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
      </Parameters>
      <Docs>
        <param name="tokens">To be added.</param>
        <summary>Creates a new SkippedTokensTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia Space { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia Space" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Space" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Space As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.Space : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Space" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             A trivia with kind WhitespaceTrivia containing a single space character.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StackAllocArrayCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax StackAllocArrayCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax StackAllocArrayCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StackAllocArrayCreationExpression (type As TypeSyntax) As StackAllocArrayCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member StackAllocArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Creates a new StackAllocArrayCreationExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StackAllocArrayCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax StackAllocArrayCreationExpression (Microsoft.CodeAnalysis.SyntaxToken stackAllocKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax StackAllocArrayCreationExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken stackAllocKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StackAllocArrayCreationExpression (stackAllocKeyword As SyntaxToken, type As TypeSyntax) As StackAllocArrayCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member StackAllocArrayCreationExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression (stackAllocKeyword, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stackAllocKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="stackAllocKeyword">To be added.</param>
        <param name="type">To be added.</param>
        <summary>Creates a new StackAllocArrayCreationExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StructDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax StructDeclaration (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax StructDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StructDeclaration (identifier As SyntaxToken) As StructDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member StructDeclaration : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new StructDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StructDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax StructDeclaration (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax StructDeclaration(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StructDeclaration (identifier As String) As StructDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member StructDeclaration : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new StructDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StructDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax StructDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax StructDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StructDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, baseList As BaseListSyntax, constraintClauses As SyntaxList(Of TypeParameterConstraintClauseSyntax), members As SyntaxList(Of MemberDeclarationSyntax)) As StructDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member StructDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration (attributeLists, modifiers, identifier, typeParameterList, baseList, constraintClauses, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" />
        <Parameter Name="baseList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" />
        <Parameter Name="constraintClauses" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="typeParameterList">To be added.</param>
        <param name="baseList">To be added.</param>
        <param name="constraintClauses">To be added.</param>
        <param name="members">To be added.</param>
        <summary>Creates a new StructDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StructDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax StructDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax StructDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, valuetype Microsoft.CodeAnalysis.SyntaxToken openBraceToken, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StructDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, baseList As BaseListSyntax, constraintClauses As SyntaxList(Of TypeParameterConstraintClauseSyntax), openBraceToken As SyntaxToken, members As SyntaxList(Of MemberDeclarationSyntax), closeBraceToken As SyntaxToken, semicolonToken As SyntaxToken) As StructDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member StructDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration (attributeLists, modifiers, keyword, identifier, typeParameterList, baseList, constraintClauses, openBraceToken, members, closeBraceToken, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" />
        <Parameter Name="baseList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" />
        <Parameter Name="constraintClauses" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt;" />
        <Parameter Name="openBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt;" />
        <Parameter Name="closeBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="keyword">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="typeParameterList">To be added.</param>
        <param name="baseList">To be added.</param>
        <param name="constraintClauses">To be added.</param>
        <param name="openBraceToken">To be added.</param>
        <param name="members">To be added.</param>
        <param name="closeBraceToken">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new StructDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchSection">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax SwitchSection ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax SwitchSection() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchSection" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchSection () As SwitchSectionSyntax" />
      <MemberSignature Language="F#" Value="static member SwitchSection : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchSection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new SwitchSectionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchSection">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax SwitchSection (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax&gt; labels, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax SwitchSection(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax&gt; labels, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchSection(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchSection (labels As SyntaxList(Of SwitchLabelSyntax), statements As SyntaxList(Of StatementSyntax)) As SwitchSectionSyntax" />
      <MemberSignature Language="F#" Value="static member SwitchSection : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchSection (labels, statements)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="labels" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax&gt;" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="labels">To be added.</param>
        <param name="statements">To be added.</param>
        <summary>Creates a new SwitchSectionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax SwitchStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax SwitchStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchStatement (expression As ExpressionSyntax) As SwitchStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SwitchStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new SwitchStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax SwitchStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax&gt; sections);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax SwitchStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax&gt; sections) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchStatement (expression As ExpressionSyntax, sections As SyntaxList(Of SwitchSectionSyntax)) As SwitchStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SwitchStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement (expression, sections)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="sections" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="sections">To be added.</param>
        <summary>Creates a new SwitchStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax SwitchStatement (Microsoft.CodeAnalysis.SyntaxToken switchKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax&gt; sections, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax SwitchStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken switchKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken, valuetype Microsoft.CodeAnalysis.SyntaxToken openBraceToken, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax&gt; sections, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchStatement (switchKeyword As SyntaxToken, openParenToken As SyntaxToken, expression As ExpressionSyntax, closeParenToken As SyntaxToken, openBraceToken As SyntaxToken, sections As SyntaxList(Of SwitchSectionSyntax), closeBraceToken As SyntaxToken) As SwitchStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SwitchStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement (switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, sections, closeBraceToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="sections" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax&gt;" />
        <Parameter Name="closeBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="switchKeyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <param name="openBraceToken">To be added.</param>
        <param name="sections">To be added.</param>
        <param name="closeBraceToken">To be added.</param>
        <summary>Creates a new SwitchStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyntaxTree">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTree SyntaxTree (Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.ParseOptions options = null, string path = &quot;&quot;, System.Text.Encoding encoding = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.SyntaxTree SyntaxTree(class Microsoft.CodeAnalysis.SyntaxNode root, class Microsoft.CodeAnalysis.ParseOptions options, string path, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTree(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ParseOptions,System.String,System.Text.Encoding)" />
      <MemberSignature Language="F#" Value="static member SyntaxTree : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.ParseOptions * string * System.Text.Encoding -&gt; Microsoft.CodeAnalysis.SyntaxTree" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTree (root, options, path, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTree</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.ParseOptions" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="root">To be added.</param>
        <param name="options">To be added.</param>
        <param name="path">To be added.</param>
        <param name="encoding">To be added.</param>
        <summary>
            Create a new syntax tree from a syntax node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyntaxTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia SyntaxTrivia (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTrivia SyntaxTrivia(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SyntaxTrivia (kind As SyntaxKind, text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member SyntaxTrivia : Microsoft.CodeAnalysis.CSharp.SyntaxKind * string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTrivia (kind, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="kind">
            A <see cref="T:Microsoft.CodeAnalysis.CSharp.SyntaxKind" /> representing the specific kind of <see cref="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SyntaxTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String)" />. One of
            <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.WhitespaceTrivia" />, <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.EndOfLineTrivia" />,
            <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.SingleLineCommentTrivia" />, <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.MultiLineCommentTrivia" />,
            <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DocumentationCommentExteriorTrivia" />, <see cref="F:Microsoft.CodeAnalysis.CSharp.SyntaxKind.DisabledTextTrivia" /></param>
        <param name="text">
            The actual text of this token.
            </param>
        <summary>
            Trivia nodes represent parts of the program text that are not parts of the
            syntactic grammar, such as spaces, newlines, comments, preprocessor
            directives, and disabled code.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tab">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia Tab { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia Tab" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Tab" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Tab As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.Tab : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Tab" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A trivia with kind WhitespaceTrivia containing a single tab character.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThisExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax ThisExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax ThisExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThisExpression" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ThisExpression () As ThisExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ThisExpression : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThisExpression " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new ThisExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThisExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax ThisExpression (Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax ThisExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThisExpression(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ThisExpression (token As SyntaxToken) As ThisExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ThisExpression : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThisExpression token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>Creates a new ThisExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax ThrowExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax ThrowExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ThrowExpression (expression As ExpressionSyntax) As ThrowExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ThrowExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new ThrowExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax ThrowExpression (Microsoft.CodeAnalysis.SyntaxToken throwKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax ThrowExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken throwKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ThrowExpression (throwKeyword As SyntaxToken, expression As ExpressionSyntax) As ThrowExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ThrowExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowExpression (throwKeyword, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="throwKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="throwKeyword">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new ThrowExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax ThrowStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax ThrowStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ThrowStatement (Optional expression As ExpressionSyntax = null) As ThrowStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ThrowStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowStatement expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>Creates a new ThrowStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax ThrowStatement (Microsoft.CodeAnalysis.SyntaxToken throwKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax ThrowStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken throwKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ThrowStatement (throwKeyword As SyntaxToken, expression As ExpressionSyntax, semicolonToken As SyntaxToken) As ThrowStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ThrowStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowStatement (throwKeyword, expression, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="throwKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="throwKeyword">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new ThrowStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Token (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Token(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Token (kind As SyntaxKind) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Token : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token kind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">A syntax kind value for a token. These have the suffix Token or Keyword.</param>
        <summary>
            Creates a token corresponding to a syntax kind. This method can be used for token syntax kinds whose text
            can be inferred by the kind alone.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Token (Microsoft.CodeAnalysis.SyntaxTriviaList leading, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Token(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Token (leading As SyntaxTriviaList, kind As SyntaxKind, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Token : Microsoft.CodeAnalysis.SyntaxTriviaList * Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token (leading, kind, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="kind">A syntax kind value for a token. These have the suffix Token or Keyword.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a token corresponding to syntax kind. This method can be used for token syntax kinds whose text can
            be inferred by the kind alone.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Token (Microsoft.CodeAnalysis.SyntaxTriviaList leading, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, string text, string valueText, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken Token(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, string text, string valueText, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Token (leading As SyntaxTriviaList, kind As SyntaxKind, text As String, valueText As String, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Token : Microsoft.CodeAnalysis.SyntaxTriviaList * Microsoft.CodeAnalysis.CSharp.SyntaxKind * string * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Token (leading, kind, text, valueText, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="valueText" Type="System.String" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="kind">A syntax kind value for a token. These have the suffix Token or Keyword.</param>
        <param name="text">The text from which this token was created (e.g. lexed).</param>
        <param name="valueText">How C# should interpret the text of this token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a token corresponding to syntax kind. This method gives control over token Text and ValueText.
            
            For example, consider the text '&lt;see cref="operator &amp;#43;"/&gt;'.  To create a token for the value of
            the operator symbol (&amp;#43;), one would call 
            Token(default(SyntaxTriviaList), SyntaxKind.PlusToken, "&amp;#43;", "+", default(SyntaxTriviaList)).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTokenList TokenList ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTokenList TokenList() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TokenList () As SyntaxTokenList" />
      <MemberSignature Language="F#" Value="static member TokenList : unit -&gt; Microsoft.CodeAnalysis.SyntaxTokenList" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTokenList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates an empty list of tokens.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTokenList TokenList (Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTokenList TokenList(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TokenList (token As SyntaxToken) As SyntaxTokenList" />
      <MemberSignature Language="F#" Value="static member TokenList : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.SyntaxTokenList" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTokenList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="token">The single token.</param>
        <summary>
            Creates a singleton list of tokens.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTokenList TokenList (params Microsoft.CodeAnalysis.SyntaxToken[] tokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTokenList TokenList(valuetype Microsoft.CodeAnalysis.SyntaxToken[] tokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TokenList (ParamArray tokens As SyntaxToken()) As SyntaxTokenList" />
      <MemberSignature Language="F#" Value="static member TokenList : Microsoft.CodeAnalysis.SyntaxToken[] -&gt; Microsoft.CodeAnalysis.SyntaxTokenList" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList tokens" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTokenList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokens" Type="Microsoft.CodeAnalysis.SyntaxToken[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tokens">An array of tokens.</param>
        <summary>
            Creates a list of tokens.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTokenList TokenList (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; tokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTokenList TokenList(class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; tokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TokenList (tokens As IEnumerable(Of SyntaxToken)) As SyntaxTokenList" />
      <MemberSignature Language="F#" Value="static member TokenList : seq&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; -&gt; Microsoft.CodeAnalysis.SyntaxTokenList" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TokenList tokens" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTokenList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;" />
      </Parameters>
      <Docs>
        <param name="tokens"></param>
        <summary>
            Creates a list of tokens.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia Trivia (Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTrivia Trivia(class Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Trivia (node As StructuredTriviaSyntax) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member Trivia : Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Trivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
            Creates a trivia from a StructuredTriviaSyntax node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TriviaList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TriviaList () As SyntaxTriviaList" />
      <MemberSignature Language="F#" Value="static member TriviaList : unit -&gt; Microsoft.CodeAnalysis.SyntaxTriviaList" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTriviaList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates an empty list of trivia.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TriviaList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList (Microsoft.CodeAnalysis.SyntaxTrivia trivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList(valuetype Microsoft.CodeAnalysis.SyntaxTrivia trivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TriviaList (trivia As SyntaxTrivia) As SyntaxTriviaList" />
      <MemberSignature Language="F#" Value="static member TriviaList : Microsoft.CodeAnalysis.SyntaxTrivia -&gt; Microsoft.CodeAnalysis.SyntaxTriviaList" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList trivia" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTriviaList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trivia" Type="Microsoft.CodeAnalysis.SyntaxTrivia" />
      </Parameters>
      <Docs>
        <param name="trivia">A single trivia.</param>
        <summary>
            Creates a singleton list of trivia.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TriviaList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList (params Microsoft.CodeAnalysis.SyntaxTrivia[] trivias);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList(valuetype Microsoft.CodeAnalysis.SyntaxTrivia[] trivias) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TriviaList (ParamArray trivias As SyntaxTrivia()) As SyntaxTriviaList" />
      <MemberSignature Language="F#" Value="static member TriviaList : Microsoft.CodeAnalysis.SyntaxTrivia[] -&gt; Microsoft.CodeAnalysis.SyntaxTriviaList" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList trivias" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTriviaList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trivias" Type="Microsoft.CodeAnalysis.SyntaxTrivia[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trivias">An array of trivia.</param>
        <summary>
            Creates a list of trivia.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TriviaList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; trivias);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList(class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; trivias) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TriviaList (trivias As IEnumerable(Of SyntaxTrivia)) As SyntaxTriviaList" />
      <MemberSignature Language="F#" Value="static member TriviaList : seq&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; -&gt; Microsoft.CodeAnalysis.SyntaxTriviaList" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TriviaList trivias" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTriviaList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trivias" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
      </Parameters>
      <Docs>
        <param name="trivias">A sequence of trivia.</param>
        <summary>
            Creates a list of trivia.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax TryStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt; catches = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax TryStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt; catches) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStatement (Optional catches As SyntaxList(Of CatchClauseSyntax) = null) As TryStatementSyntax" />
      <MemberSignature Language="F#" Value="static member TryStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement catches" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catches" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="catches">To be added.</param>
        <summary>Creates a new TryStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax TryStatement (Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt; catches, Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax finally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax TryStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt; catches, class Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax finally) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStatement (block As BlockSyntax, catches As SyntaxList(Of CatchClauseSyntax), finally As FinallyClauseSyntax) As TryStatementSyntax" />
      <MemberSignature Language="F#" Value="static member TryStatement : Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt; * Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement (block, catches, finally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="block" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="catches" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt;" />
        <Parameter Name="finally" Type="Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="block">To be added.</param>
        <param name="catches">To be added.</param>
        <param name="finally">To be added.</param>
        <summary>Creates a new TryStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax TryStatement (Microsoft.CodeAnalysis.SyntaxToken tryKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt; catches, Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax finally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax TryStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken tryKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt; catches, class Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax finally) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStatement (tryKeyword As SyntaxToken, block As BlockSyntax, catches As SyntaxList(Of CatchClauseSyntax), finally As FinallyClauseSyntax) As TryStatementSyntax" />
      <MemberSignature Language="F#" Value="static member TryStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt; * Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TryStatement (tryKeyword, block, catches, finally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tryKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="block" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
        <Parameter Name="catches" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax&gt;" />
        <Parameter Name="finally" Type="Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="tryKeyword">To be added.</param>
        <param name="block">To be added.</param>
        <param name="catches">To be added.</param>
        <param name="finally">To be added.</param>
        <summary>Creates a new TryStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TupleElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax TupleElement (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax TupleElement(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleElement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TupleElement (type As TypeSyntax) As TupleElementSyntax" />
      <MemberSignature Language="F#" Value="static member TupleElement : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleElement type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Creates a new TupleElementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TupleElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax TupleElement (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax TupleElement(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleElement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TupleElement (type As TypeSyntax, identifier As SyntaxToken) As TupleElementSyntax" />
      <MemberSignature Language="F#" Value="static member TupleElement : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleElement (type, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>Creates a new TupleElementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TupleExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax TupleExpression (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; arguments = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax TupleExpression(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleExpression(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TupleExpression (Optional arguments As SeparatedSyntaxList(Of ArgumentSyntax) = null) As TupleExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member TupleExpression : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleExpression arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="arguments">To be added.</param>
        <summary>Creates a new TupleExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TupleExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax TupleExpression (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; arguments, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax TupleExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; arguments, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TupleExpression (openParenToken As SyntaxToken, arguments As SeparatedSyntaxList(Of ArgumentSyntax), closeParenToken As SyntaxToken) As TupleExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member TupleExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleExpression (openParenToken, arguments, closeParenToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax&gt;" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openParenToken">To be added.</param>
        <param name="arguments">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>Creates a new TupleExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TupleType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax TupleType (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax&gt; elements = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax TupleType(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax&gt; elements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleType(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TupleType (Optional elements As SeparatedSyntaxList(Of TupleElementSyntax) = null) As TupleTypeSyntax" />
      <MemberSignature Language="F#" Value="static member TupleType : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleType elements" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elements" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="elements">To be added.</param>
        <summary>Creates a new TupleTypeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TupleType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax TupleType (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax&gt; elements, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax TupleType(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax&gt; elements, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleType(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TupleType (openParenToken As SyntaxToken, elements As SeparatedSyntaxList(Of TupleElementSyntax), closeParenToken As SyntaxToken) As TupleTypeSyntax" />
      <MemberSignature Language="F#" Value="static member TupleType : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleType (openParenToken, elements, closeParenToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="elements" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax&gt;" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openParenToken">To be added.</param>
        <param name="elements">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>Creates a new TupleTypeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeArgumentList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax TypeArgumentList (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax&gt; arguments = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax TypeArgumentList(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeArgumentList (Optional arguments As SeparatedSyntaxList(Of TypeSyntax) = null) As TypeArgumentListSyntax" />
      <MemberSignature Language="F#" Value="static member TypeArgumentList : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeArgumentList arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="arguments">To be added.</param>
        <summary>Creates a new TypeArgumentListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeArgumentList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax TypeArgumentList (Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax&gt; arguments, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax TypeArgumentList(valuetype Microsoft.CodeAnalysis.SyntaxToken lessThanToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax&gt; arguments, valuetype Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeArgumentList (lessThanToken As SyntaxToken, arguments As SeparatedSyntaxList(Of TypeSyntax), greaterThanToken As SyntaxToken) As TypeArgumentListSyntax" />
      <MemberSignature Language="F#" Value="static member TypeArgumentList : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeArgumentList (lessThanToken, arguments, greaterThanToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lessThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax&gt;" />
        <Parameter Name="greaterThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="lessThanToken">To be added.</param>
        <param name="arguments">To be added.</param>
        <param name="greaterThanToken">To be added.</param>
        <summary>Creates a new TypeArgumentListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax TypeConstraint (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax TypeConstraint(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeConstraint (type As TypeSyntax) As TypeConstraintSyntax" />
      <MemberSignature Language="F#" Value="static member TypeConstraint : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeConstraint type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Creates a new TypeConstraintSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeCref">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax TypeCref (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax TypeCref(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeCref (type As TypeSyntax) As TypeCrefSyntax" />
      <MemberSignature Language="F#" Value="static member TypeCref : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeCref type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Creates a new TypeCrefSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax TypeDeclaration (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax TypeDeclaration(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeDeclaration (kind As SyntaxKind, identifier As SyntaxToken) As TypeDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member TypeDeclaration : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration (kind, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax TypeDeclaration (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax TypeDeclaration(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeDeclaration (kind As SyntaxKind, identifier As String) As TypeDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member TypeDeclaration : Microsoft.CodeAnalysis.CSharp.SyntaxKind * string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration (kind, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax TypeDeclaration (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributes, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax TypeDeclaration(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributes, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; constraintClauses, valuetype Microsoft.CodeAnalysis.SyntaxToken openBraceToken, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; members, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeDeclaration (kind As SyntaxKind, attributes As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, keyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, baseList As BaseListSyntax, constraintClauses As SyntaxList(Of TypeParameterConstraintClauseSyntax), openBraceToken As SyntaxToken, members As SyntaxList(Of MemberDeclarationSyntax), closeBraceToken As SyntaxToken, semicolonToken As SyntaxToken) As TypeDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member TypeDeclaration : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeDeclaration (kind, attributes, modifiers, keyword, identifier, typeParameterList, baseList, constraintClauses, openBraceToken, members, closeBraceToken, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" />
        <Parameter Name="baseList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" />
        <Parameter Name="constraintClauses" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax&gt;" />
        <Parameter Name="openBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax&gt;" />
        <Parameter Name="closeBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="attributes">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="keyword">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="typeParameterList">To be added.</param>
        <param name="baseList">To be added.</param>
        <param name="constraintClauses">To be added.</param>
        <param name="openBraceToken">To be added.</param>
        <param name="members">To be added.</param>
        <param name="closeBraceToken">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeOfExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax TypeOfExpression (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax TypeOfExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeOfExpression (type As TypeSyntax) As TypeOfExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member TypeOfExpression : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeOfExpression type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Creates a new TypeOfExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeOfExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax TypeOfExpression (Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax TypeOfExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeOfExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeOfExpression (keyword As SyntaxToken, openParenToken As SyntaxToken, type As TypeSyntax, closeParenToken As SyntaxToken) As TypeOfExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member TypeOfExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeOfExpression (keyword, openParenToken, type, closeParenToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="type">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>Creates a new TypeOfExpressionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameter">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax TypeParameter (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax TypeParameter(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameter (identifier As SyntaxToken) As TypeParameterSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameter : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new TypeParameterSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameter">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax TypeParameter (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax TypeParameter(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameter (identifier As String) As TypeParameterSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameter : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new TypeParameterSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameter">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax TypeParameter (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxToken varianceKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax TypeParameter(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxToken varianceKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameter (attributeLists As SyntaxList(Of AttributeListSyntax), varianceKeyword As SyntaxToken, identifier As SyntaxToken) As TypeParameterSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameter : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter (attributeLists, varianceKeyword, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="varianceKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="varianceKeyword">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>Creates a new TypeParameterSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameterConstraintClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax TypeParameterConstraintClause (Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax TypeParameterConstraintClause(class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameterConstraintClause (name As IdentifierNameSyntax) As TypeParameterConstraintClauseSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameterConstraintClause : Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Creates a new TypeParameterConstraintClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameterConstraintClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax TypeParameterConstraintClause (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax TypeParameterConstraintClause(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameterConstraintClause (name As String) As TypeParameterConstraintClauseSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameterConstraintClause : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Creates a new TypeParameterConstraintClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameterConstraintClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax TypeParameterConstraintClause (Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax name, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax&gt; constraints);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax TypeParameterConstraintClause(class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax name, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax&gt; constraints) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameterConstraintClause (name As IdentifierNameSyntax, constraints As SeparatedSyntaxList(Of TypeParameterConstraintSyntax)) As TypeParameterConstraintClauseSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameterConstraintClause : Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause (name, constraints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" />
        <Parameter Name="constraints" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="constraints">To be added.</param>
        <summary>Creates a new TypeParameterConstraintClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameterConstraintClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax TypeParameterConstraintClause (Microsoft.CodeAnalysis.SyntaxToken whereKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken colonToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax&gt; constraints);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax TypeParameterConstraintClause(valuetype Microsoft.CodeAnalysis.SyntaxToken whereKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax&gt; constraints) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameterConstraintClause (whereKeyword As SyntaxToken, name As IdentifierNameSyntax, colonToken As SyntaxToken, constraints As SeparatedSyntaxList(Of TypeParameterConstraintSyntax)) As TypeParameterConstraintClauseSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameterConstraintClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause (whereKeyword, name, colonToken, constraints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whereKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" />
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="constraints" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="whereKeyword">To be added.</param>
        <param name="name">To be added.</param>
        <param name="colonToken">To be added.</param>
        <param name="constraints">To be added.</param>
        <summary>Creates a new TypeParameterConstraintClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax TypeParameterList (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax&gt; parameters = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax TypeParameterList(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameterList (Optional parameters As SeparatedSyntaxList(Of TypeParameterSyntax) = null) As TypeParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameterList : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterList parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="parameters">To be added.</param>
        <summary>Creates a new TypeParameterListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax TypeParameterList (Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax&gt; parameters, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax TypeParameterList(valuetype Microsoft.CodeAnalysis.SyntaxToken lessThanToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax&gt; parameters, valuetype Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameterList (lessThanToken As SyntaxToken, parameters As SeparatedSyntaxList(Of TypeParameterSyntax), greaterThanToken As SyntaxToken) As TypeParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameterList : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterList (lessThanToken, parameters, greaterThanToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lessThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax&gt;" />
        <Parameter Name="greaterThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="lessThanToken">To be added.</param>
        <param name="parameters">To be added.</param>
        <param name="greaterThanToken">To be added.</param>
        <summary>Creates a new TypeParameterListSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UndefDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax UndefDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken name, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax UndefDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken name, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UndefDirectiveTrivia (name As SyntaxToken, isActive As Boolean) As UndefDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member UndefDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia (name, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new UndefDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UndefDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax UndefDirectiveTrivia (string name, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax UndefDirectiveTrivia(string name, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UndefDirectiveTrivia (name As String, isActive As Boolean) As UndefDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member UndefDirectiveTrivia : string * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia (name, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new UndefDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UndefDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax UndefDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken undefKeyword, Microsoft.CodeAnalysis.SyntaxToken name, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax UndefDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken undefKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken name, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UndefDirectiveTrivia (hashToken As SyntaxToken, undefKeyword As SyntaxToken, name As SyntaxToken, endOfDirectiveToken As SyntaxToken, isActive As Boolean) As UndefDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member UndefDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia (hashToken, undefKeyword, name, endOfDirectiveToken, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="undefKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endOfDirectiveToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hashToken">To be added.</param>
        <param name="undefKeyword">To be added.</param>
        <param name="name">To be added.</param>
        <param name="endOfDirectiveToken">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new UndefDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsafeStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax UnsafeStatement (Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax UnsafeStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UnsafeStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeStatement (Optional block As BlockSyntax = null) As UnsafeStatementSyntax" />
      <MemberSignature Language="F#" Value="static member UnsafeStatement : Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UnsafeStatement block" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="block" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
      </Parameters>
      <Docs>
        <param name="block">To be added.</param>
        <summary>Creates a new UnsafeStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsafeStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax UnsafeStatement (Microsoft.CodeAnalysis.SyntaxToken unsafeKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax UnsafeStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken unsafeKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax block) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UnsafeStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeStatement (unsafeKeyword As SyntaxToken, block As BlockSyntax) As UnsafeStatementSyntax" />
      <MemberSignature Language="F#" Value="static member UnsafeStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UnsafeStatement (unsafeKeyword, block)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unsafeKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="block" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
      </Parameters>
      <Docs>
        <param name="unsafeKeyword">To be added.</param>
        <param name="block">To be added.</param>
        <summary>Creates a new UnsafeStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingDirective">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax UsingDirective (Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax UsingDirective(class Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UsingDirective (name As NameSyntax) As UsingDirectiveSyntax" />
      <MemberSignature Language="F#" Value="static member UsingDirective : Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Creates a new UsingDirectiveSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingDirective">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax UsingDirective (Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax alias, Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax UsingDirective(class Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax alias, class Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UsingDirective (alias As NameEqualsSyntax, name As NameSyntax) As UsingDirectiveSyntax" />
      <MemberSignature Language="F#" Value="static member UsingDirective : Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective (alias, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alias" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" />
      </Parameters>
      <Docs>
        <param name="alias">To be added.</param>
        <param name="name">To be added.</param>
        <summary>Creates a new UsingDirectiveSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingDirective">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax UsingDirective (Microsoft.CodeAnalysis.SyntaxToken staticKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax alias, Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax UsingDirective(valuetype Microsoft.CodeAnalysis.SyntaxToken staticKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax alias, class Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UsingDirective (staticKeyword As SyntaxToken, alias As NameEqualsSyntax, name As NameSyntax) As UsingDirectiveSyntax" />
      <MemberSignature Language="F#" Value="static member UsingDirective : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective (staticKeyword, alias, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="staticKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="alias" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" />
      </Parameters>
      <Docs>
        <param name="staticKeyword">To be added.</param>
        <param name="alias">To be added.</param>
        <param name="name">To be added.</param>
        <summary>Creates a new UsingDirectiveSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingDirective">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax UsingDirective (Microsoft.CodeAnalysis.SyntaxToken usingKeyword, Microsoft.CodeAnalysis.SyntaxToken staticKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax alias, Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax UsingDirective(valuetype Microsoft.CodeAnalysis.SyntaxToken usingKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken staticKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax alias, class Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UsingDirective (usingKeyword As SyntaxToken, staticKeyword As SyntaxToken, alias As NameEqualsSyntax, name As NameSyntax, semicolonToken As SyntaxToken) As UsingDirectiveSyntax" />
      <MemberSignature Language="F#" Value="static member UsingDirective : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective (usingKeyword, staticKeyword, alias, name, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usingKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="staticKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="alias" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="usingKeyword">To be added.</param>
        <param name="staticKeyword">To be added.</param>
        <param name="alias">To be added.</param>
        <param name="name">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new UsingDirectiveSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax UsingStatement (Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax UsingStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UsingStatement (statement As StatementSyntax) As UsingStatementSyntax" />
      <MemberSignature Language="F#" Value="static member UsingStatement : Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement statement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="statement">To be added.</param>
        <summary>Creates a new UsingStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax UsingStatement (Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax UsingStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UsingStatement (declaration As VariableDeclarationSyntax, expression As ExpressionSyntax, statement As StatementSyntax) As UsingStatementSyntax" />
      <MemberSignature Language="F#" Value="static member UsingStatement : Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement (declaration, expression, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new UsingStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax UsingStatement (Microsoft.CodeAnalysis.SyntaxToken usingKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax UsingStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken usingKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax declaration, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UsingStatement (usingKeyword As SyntaxToken, openParenToken As SyntaxToken, declaration As VariableDeclarationSyntax, expression As ExpressionSyntax, closeParenToken As SyntaxToken, statement As StatementSyntax) As UsingStatementSyntax" />
      <MemberSignature Language="F#" Value="static member UsingStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement (usingKeyword, openParenToken, declaration, expression, closeParenToken, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usingKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="usingKeyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="declaration">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new UsingStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VariableDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax VariableDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax VariableDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VariableDeclaration (type As TypeSyntax) As VariableDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member VariableDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclaration type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Creates a new VariableDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VariableDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax VariableDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax VariableDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VariableDeclaration (type As TypeSyntax, variables As SeparatedSyntaxList(Of VariableDeclaratorSyntax)) As VariableDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member VariableDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclaration (type, variables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="variables">To be added.</param>
        <summary>Creates a new VariableDeclarationSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VariableDeclarator">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax VariableDeclarator (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax VariableDeclarator(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VariableDeclarator (identifier As SyntaxToken) As VariableDeclaratorSyntax" />
      <MemberSignature Language="F#" Value="static member VariableDeclarator : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new VariableDeclaratorSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VariableDeclarator">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax VariableDeclarator (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax VariableDeclarator(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VariableDeclarator (identifier As String) As VariableDeclaratorSyntax" />
      <MemberSignature Language="F#" Value="static member VariableDeclarator : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>Creates a new VariableDeclaratorSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VariableDeclarator">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax VariableDeclarator (Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax argumentList, Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax VariableDeclarator(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax argumentList, class Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VariableDeclarator (identifier As SyntaxToken, argumentList As BracketedArgumentListSyntax, initializer As EqualsValueClauseSyntax) As VariableDeclaratorSyntax" />
      <MemberSignature Language="F#" Value="static member VariableDeclarator : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator (identifier, argumentList, initializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="argumentList">To be added.</param>
        <param name="initializer">To be added.</param>
        <summary>Creates a new VariableDeclaratorSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerbatimIdentifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken VerbatimIdentifier (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, string valueText, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken VerbatimIdentifier(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, string valueText, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VerbatimIdentifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerbatimIdentifier (leading As SyntaxTriviaList, text As String, valueText As String, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member VerbatimIdentifier : Microsoft.CodeAnalysis.SyntaxTriviaList * string * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VerbatimIdentifier (leading, text, valueText, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="valueText" Type="System.String" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the identifier name, including any escapes or leading '@'
            character as it is in source.</param>
        <param name="valueText">The canonical value of the token's text.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a verbatim token with kind IdentifierToken containing the specified text.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax WarningDirectiveTrivia (bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax WarningDirectiveTrivia(bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WarningDirectiveTrivia(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WarningDirectiveTrivia (isActive As Boolean) As WarningDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member WarningDirectiveTrivia : bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WarningDirectiveTrivia isActive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isActive">To be added.</param>
        <summary>Creates a new WarningDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax WarningDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken warningKeyword, Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax WarningDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken warningKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfDirectiveToken, bool isActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WarningDirectiveTrivia (hashToken As SyntaxToken, warningKeyword As SyntaxToken, endOfDirectiveToken As SyntaxToken, isActive As Boolean) As WarningDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member WarningDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WarningDirectiveTrivia (hashToken, warningKeyword, endOfDirectiveToken, isActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="warningKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endOfDirectiveToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="isActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hashToken">To be added.</param>
        <param name="warningKeyword">To be added.</param>
        <param name="endOfDirectiveToken">To be added.</param>
        <param name="isActive">To be added.</param>
        <summary>Creates a new WarningDirectiveTriviaSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhenClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax WhenClause (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax WhenClause(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhenClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenClause (condition As ExpressionSyntax) As WhenClauseSyntax" />
      <MemberSignature Language="F#" Value="static member WhenClause : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhenClause condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="condition">To be added.</param>
        <summary>Creates a new WhenClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhenClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax WhenClause (Microsoft.CodeAnalysis.SyntaxToken whenKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax WhenClause(valuetype Microsoft.CodeAnalysis.SyntaxToken whenKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhenClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenClause (whenKeyword As SyntaxToken, condition As ExpressionSyntax) As WhenClauseSyntax" />
      <MemberSignature Language="F#" Value="static member WhenClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhenClause (whenKeyword, condition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whenKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="whenKeyword">To be added.</param>
        <param name="condition">To be added.</param>
        <summary>Creates a new WhenClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax WhereClause (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax WhereClause(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhereClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhereClause (condition As ExpressionSyntax) As WhereClauseSyntax" />
      <MemberSignature Language="F#" Value="static member WhereClause : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhereClause condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="condition">To be added.</param>
        <summary>Creates a new WhereClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax WhereClause (Microsoft.CodeAnalysis.SyntaxToken whereKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax WhereClause(valuetype Microsoft.CodeAnalysis.SyntaxToken whereKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhereClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhereClause (whereKeyword As SyntaxToken, condition As ExpressionSyntax) As WhereClauseSyntax" />
      <MemberSignature Language="F#" Value="static member WhereClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhereClause (whereKeyword, condition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whereKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="whereKeyword">To be added.</param>
        <param name="condition">To be added.</param>
        <summary>Creates a new WhereClauseSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhileStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax WhileStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax WhileStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhileStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhileStatement (condition As ExpressionSyntax, statement As StatementSyntax) As WhileStatementSyntax" />
      <MemberSignature Language="F#" Value="static member WhileStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhileStatement (condition, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="condition">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new WhileStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhileStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax WhileStatement (Microsoft.CodeAnalysis.SyntaxToken whileKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken closeParenToken, Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax WhileStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken whileKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax condition, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken, class Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhileStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhileStatement (whileKeyword As SyntaxToken, openParenToken As SyntaxToken, condition As ExpressionSyntax, closeParenToken As SyntaxToken, statement As StatementSyntax) As WhileStatementSyntax" />
      <MemberSignature Language="F#" Value="static member WhileStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhileStatement (whileKeyword, openParenToken, condition, closeParenToken, statement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whileKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="whileKeyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="condition">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>Creates a new WhileStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Whitespace">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia Whitespace (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTrivia Whitespace(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Whitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Whitespace (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member Whitespace : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Whitespace text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text of the whitespace. Any text can be specified here, however only specific
            whitespace characters are recognized by the parser.</param>
        <summary>
            Creates a trivia with kind WhitespaceTrivia containing the specified text.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Whitespace">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia Whitespace (string text, bool elastic);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxTrivia Whitespace(string text, bool elastic) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Whitespace(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Whitespace (text As String, elastic As Boolean) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member Whitespace : string * bool -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Whitespace (text, elastic)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use SyntaxFactory.Whitespace or SyntaxFactory.ElasticWhitespace")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="elastic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="elastic">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlCDataSection">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax XmlCDataSection (Microsoft.CodeAnalysis.SyntaxTokenList textTokens = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax XmlCDataSection(valuetype Microsoft.CodeAnalysis.SyntaxTokenList textTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCDataSection(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlCDataSection (Optional textTokens As SyntaxTokenList = null) As XmlCDataSectionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlCDataSection : Microsoft.CodeAnalysis.SyntaxTokenList -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCDataSection textTokens" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
      </Parameters>
      <Docs>
        <param name="textTokens">To be added.</param>
        <summary>Creates a new XmlCDataSectionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlCDataSection">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax XmlCDataSection (Microsoft.CodeAnalysis.SyntaxToken startCDataToken, Microsoft.CodeAnalysis.SyntaxTokenList textTokens, Microsoft.CodeAnalysis.SyntaxToken endCDataToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax XmlCDataSection(valuetype Microsoft.CodeAnalysis.SyntaxToken startCDataToken, valuetype Microsoft.CodeAnalysis.SyntaxTokenList textTokens, valuetype Microsoft.CodeAnalysis.SyntaxToken endCDataToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCDataSection(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlCDataSection (startCDataToken As SyntaxToken, textTokens As SyntaxTokenList, endCDataToken As SyntaxToken) As XmlCDataSectionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlCDataSection : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCDataSection (startCDataToken, textTokens, endCDataToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startCDataToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="endCDataToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="startCDataToken">To be added.</param>
        <param name="textTokens">To be added.</param>
        <param name="endCDataToken">To be added.</param>
        <summary>Creates a new XmlCDataSectionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlComment">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax XmlComment (Microsoft.CodeAnalysis.SyntaxTokenList textTokens = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax XmlComment(valuetype Microsoft.CodeAnalysis.SyntaxTokenList textTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlComment(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlComment (Optional textTokens As SyntaxTokenList = null) As XmlCommentSyntax" />
      <MemberSignature Language="F#" Value="static member XmlComment : Microsoft.CodeAnalysis.SyntaxTokenList -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlComment textTokens" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
      </Parameters>
      <Docs>
        <param name="textTokens">To be added.</param>
        <summary>Creates a new XmlCommentSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlComment">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax XmlComment (Microsoft.CodeAnalysis.SyntaxToken lessThanExclamationMinusMinusToken, Microsoft.CodeAnalysis.SyntaxTokenList textTokens, Microsoft.CodeAnalysis.SyntaxToken minusMinusGreaterThanToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax XmlComment(valuetype Microsoft.CodeAnalysis.SyntaxToken lessThanExclamationMinusMinusToken, valuetype Microsoft.CodeAnalysis.SyntaxTokenList textTokens, valuetype Microsoft.CodeAnalysis.SyntaxToken minusMinusGreaterThanToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlComment(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlComment (lessThanExclamationMinusMinusToken As SyntaxToken, textTokens As SyntaxTokenList, minusMinusGreaterThanToken As SyntaxToken) As XmlCommentSyntax" />
      <MemberSignature Language="F#" Value="static member XmlComment : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlComment (lessThanExclamationMinusMinusToken, textTokens, minusMinusGreaterThanToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lessThanExclamationMinusMinusToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="minusMinusGreaterThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="lessThanExclamationMinusMinusToken">To be added.</param>
        <param name="textTokens">To be added.</param>
        <param name="minusMinusGreaterThanToken">To be added.</param>
        <summary>Creates a new XmlCommentSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlCrefAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlCrefAttribute (cref As CrefSyntax) As XmlCrefAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlCrefAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute cref" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cref" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" />
      </Parameters>
      <Docs>
        <param name="cref">The <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" /> used for the xml cref attribute syntax.</param>
        <summary>
            Creates a syntax node for a cref attribute within a xml documentation comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlCrefAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref, Microsoft.CodeAnalysis.CSharp.SyntaxKind quoteKind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind quoteKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlCrefAttribute (cref As CrefSyntax, quoteKind As SyntaxKind) As XmlCrefAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlCrefAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax * Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute (cref, quoteKind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cref" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" />
        <Parameter Name="quoteKind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="cref">The <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" /> used for the xml cref attribute syntax.</param>
        <param name="quoteKind">The kind of the quote for the referenced item in the cref attribute.</param>
        <summary>
            Creates a syntax node for a cref attribute within a xml documentation comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlCrefAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, class Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref, valuetype Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlCrefAttribute (name As XmlNameSyntax, startQuoteToken As SyntaxToken, cref As CrefSyntax, endQuoteToken As SyntaxToken) As XmlCrefAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlCrefAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute (name, startQuoteToken, cref, endQuoteToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
        <Parameter Name="startQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="cref" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" />
        <Parameter Name="endQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="startQuoteToken">To be added.</param>
        <param name="cref">To be added.</param>
        <param name="endQuoteToken">To be added.</param>
        <summary>Creates a new XmlCrefAttributeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlCrefAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken equalsToken, valuetype Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, class Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref, valuetype Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlCrefAttribute (name As XmlNameSyntax, equalsToken As SyntaxToken, startQuoteToken As SyntaxToken, cref As CrefSyntax, endQuoteToken As SyntaxToken) As XmlCrefAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlCrefAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute (name, equalsToken, startQuoteToken, cref, endQuoteToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
        <Parameter Name="equalsToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="startQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="cref" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" />
        <Parameter Name="endQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="equalsToken">To be added.</param>
        <param name="startQuoteToken">To be added.</param>
        <param name="cref">To be added.</param>
        <param name="endQuoteToken">To be added.</param>
        <summary>Creates a new XmlCrefAttributeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlElement (Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax startTag, Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax endTag);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlElement(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax startTag, class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax endTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElement (startTag As XmlElementStartTagSyntax, endTag As XmlElementEndTagSyntax) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement (startTag, endTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startTag" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax" />
        <Parameter Name="endTag" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax" />
      </Parameters>
      <Docs>
        <param name="startTag">To be added.</param>
        <param name="endTag">To be added.</param>
        <summary>Creates a new XmlElementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlElement (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlElement(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElement (name As XmlNameSyntax, content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement (name, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="name">The name of the empty xml element.</param>
        <param name="content">A list of syntax nodes that represents the content of the xml element.</param>
        <summary>
            Creates the syntax representation of a named xml element within xml documentation comments.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlElement (string localName, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlElement(string localName, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement(System.String,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElement (localName As String, content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElement : string * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement (localName, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="localName">The name of the empty xml element.</param>
        <param name="content">A list of syntax nodes that represents the content of the xml element.</param>
        <summary>
            Creates the syntax representation of a named xml element within xml documentation comments.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlElement (Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax startTag, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content, Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax endTag);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlElement(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax startTag, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content, class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax endTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElement (startTag As XmlElementStartTagSyntax, content As SyntaxList(Of XmlNodeSyntax), endTag As XmlElementEndTagSyntax) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; * Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement (startTag, content, endTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startTag" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt;" />
        <Parameter Name="endTag" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax" />
      </Parameters>
      <Docs>
        <param name="startTag">To be added.</param>
        <param name="content">To be added.</param>
        <param name="endTag">To be added.</param>
        <summary>Creates a new XmlElementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElementEndTag">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax XmlElementEndTag (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax XmlElementEndTag(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementEndTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElementEndTag (name As XmlNameSyntax) As XmlElementEndTagSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElementEndTag : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementEndTag name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Creates a new XmlElementEndTagSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElementEndTag">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax XmlElementEndTag (Microsoft.CodeAnalysis.SyntaxToken lessThanSlashToken, Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax XmlElementEndTag(valuetype Microsoft.CodeAnalysis.SyntaxToken lessThanSlashToken, class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementEndTag(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElementEndTag (lessThanSlashToken As SyntaxToken, name As XmlNameSyntax, greaterThanToken As SyntaxToken) As XmlElementEndTagSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElementEndTag : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementEndTag (lessThanSlashToken, name, greaterThanToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lessThanSlashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
        <Parameter Name="greaterThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="lessThanSlashToken">To be added.</param>
        <param name="name">To be added.</param>
        <param name="greaterThanToken">To be added.</param>
        <summary>Creates a new XmlElementEndTagSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElementStartTag">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax XmlElementStartTag (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax XmlElementStartTag(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElementStartTag (name As XmlNameSyntax) As XmlElementStartTagSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElementStartTag : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Creates a new XmlElementStartTagSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElementStartTag">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax XmlElementStartTag (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax&gt; attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax XmlElementStartTag(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax&gt; attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElementStartTag (name As XmlNameSyntax, attributes As SyntaxList(Of XmlAttributeSyntax)) As XmlElementStartTagSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElementStartTag : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag (name, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>Creates a new XmlElementStartTagSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElementStartTag">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax XmlElementStartTag (Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax&gt; attributes, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax XmlElementStartTag(valuetype Microsoft.CodeAnalysis.SyntaxToken lessThanToken, class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax&gt; attributes, valuetype Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElementStartTag (lessThanToken As SyntaxToken, name As XmlNameSyntax, attributes As SyntaxList(Of XmlAttributeSyntax), greaterThanToken As SyntaxToken) As XmlElementStartTagSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElementStartTag : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag (lessThanToken, name, attributes, greaterThanToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lessThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax&gt;" />
        <Parameter Name="greaterThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="lessThanToken">To be added.</param>
        <param name="name">To be added.</param>
        <param name="attributes">To be added.</param>
        <param name="greaterThanToken">To be added.</param>
        <summary>Creates a new XmlElementStartTagSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEmptyElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlEmptyElement (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlEmptyElement(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEmptyElement (name As XmlNameSyntax) As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlEmptyElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Creates a new XmlEmptyElementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEmptyElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlEmptyElement (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlEmptyElement(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEmptyElement (localName As String) As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlEmptyElement : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">The name of the empty xml element.</param>
        <summary>
            Creates the syntax representation of a named empty xml element within xml documentation comments.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEmptyElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlEmptyElement (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax&gt; attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlEmptyElement(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax&gt; attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEmptyElement (name As XmlNameSyntax, attributes As SyntaxList(Of XmlAttributeSyntax)) As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlEmptyElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement (name, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>Creates a new XmlEmptyElementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEmptyElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlEmptyElement (Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax&gt; attributes, Microsoft.CodeAnalysis.SyntaxToken slashGreaterThanToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlEmptyElement(valuetype Microsoft.CodeAnalysis.SyntaxToken lessThanToken, class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax&gt; attributes, valuetype Microsoft.CodeAnalysis.SyntaxToken slashGreaterThanToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEmptyElement (lessThanToken As SyntaxToken, name As XmlNameSyntax, attributes As SyntaxList(Of XmlAttributeSyntax), slashGreaterThanToken As SyntaxToken) As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlEmptyElement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement (lessThanToken, name, attributes, slashGreaterThanToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lessThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax&gt;" />
        <Parameter Name="slashGreaterThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="lessThanToken">To be added.</param>
        <param name="name">To be added.</param>
        <param name="attributes">To be added.</param>
        <param name="slashGreaterThanToken">To be added.</param>
        <summary>Creates a new XmlEmptyElementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEntity">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlEntity (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken XmlEntity(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, string value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEntity(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEntity (leading As SyntaxTriviaList, text As String, value As String, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlEntity : Microsoft.CodeAnalysis.SyntaxTriviaList * string * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEntity (leading, text, value, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The xml entity value.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a token with kind XmlEntityLiteralToken.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlExampleElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlExampleElement (params Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlExampleElement(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlExampleElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlExampleElement (ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlExampleElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlExampleElement content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">A list of syntax nodes that represents the content of the example element.</param>
        <summary>
            Creates the syntax representation of an example element within xml documentation comments.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlExampleElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlExampleElement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlExampleElement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlExampleElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlExampleElement (content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlExampleElement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlExampleElement content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="content">A list of syntax nodes that represents the content of the example element.</param>
        <summary>
            Creates the syntax representation of an example element within xml documentation comments.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlExceptionElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlExceptionElement (Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref, params Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlExceptionElement(class Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref, class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlExceptionElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlExceptionElement (cref As CrefSyntax, ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlExceptionElement : Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlExceptionElement (cref, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cref" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="cref">Syntax representation of the reference to the exception type.</param>
        <param name="content">A list of syntax nodes that represents the content of the exception element.</param>
        <summary>
            Creates the syntax representation of an exception element within xml documentation comments.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlExceptionElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlExceptionElement (Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlExceptionElement(class Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlExceptionElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlExceptionElement (cref As CrefSyntax, content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlExceptionElement : Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlExceptionElement (cref, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cref" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="cref">Syntax representation of the reference to the exception type.</param>
        <param name="content">A list of syntax nodes that represents the content of the exception element.</param>
        <summary>
            Creates the syntax representation of an exception element within xml documentation comments.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlMultiLineElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlMultiLineElement (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlMultiLineElement(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlMultiLineElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlMultiLineElement (name As XmlNameSyntax, content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlMultiLineElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlMultiLineElement (name, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="name">The name of the xml element.</param>
        <param name="content">A list of syntax nodes that represents the content of the xml multi line element.</param>
        <summary>
            Creates the syntax representation of an xml element that spans multiple text lines.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlMultiLineElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlMultiLineElement (string localName, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlMultiLineElement(string localName, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlMultiLineElement(System.String,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlMultiLineElement (localName As String, content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlMultiLineElement : string * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlMultiLineElement (localName, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="localName">The name of the xml element.</param>
        <param name="content">A list of syntax nodes that represents the content of the xml multi line element.</param>
        <summary>
            Creates the syntax representation of an xml element that spans multiple text lines.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax XmlName (Microsoft.CodeAnalysis.SyntaxToken localName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax XmlName(valuetype Microsoft.CodeAnalysis.SyntaxToken localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlName (localName As SyntaxToken) As XmlNameSyntax" />
      <MemberSignature Language="F#" Value="static member XmlName : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="localName">To be added.</param>
        <summary>Creates a new XmlNameSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax XmlName (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax XmlName(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlName (localName As String) As XmlNameSyntax" />
      <MemberSignature Language="F#" Value="static member XmlName : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">To be added.</param>
        <summary>Creates a new XmlNameSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax XmlName (Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax prefix, Microsoft.CodeAnalysis.SyntaxToken localName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax XmlName(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax prefix, valuetype Microsoft.CodeAnalysis.SyntaxToken localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlName (prefix As XmlPrefixSyntax, localName As SyntaxToken) As XmlNameSyntax" />
      <MemberSignature Language="F#" Value="static member XmlName : Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName (prefix, localName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax" />
        <Parameter Name="localName" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="prefix">To be added.</param>
        <param name="localName">To be added.</param>
        <summary>Creates a new XmlNameSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNameAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax XmlNameAttribute (string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax XmlNameAttribute(string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlNameAttribute (parameterName As String) As XmlNameAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlNameAttribute : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute parameterName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameterName">The value of the name attribute.</param>
        <summary>
            Creates a syntax node for a name attribute in a xml element within a xml documentation comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNameAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax XmlNameAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax identifier, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax XmlNameAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax identifier, valuetype Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlNameAttribute (name As XmlNameSyntax, startQuoteToken As SyntaxToken, identifier As IdentifierNameSyntax, endQuoteToken As SyntaxToken) As XmlNameAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlNameAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute (name, startQuoteToken, identifier, endQuoteToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
        <Parameter Name="startQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" />
        <Parameter Name="endQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="startQuoteToken">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="endQuoteToken">To be added.</param>
        <summary>Creates a new XmlNameAttributeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNameAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax XmlNameAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, string identifier, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax XmlNameAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, string identifier, valuetype Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.String,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlNameAttribute (name As XmlNameSyntax, startQuoteToken As SyntaxToken, identifier As String, endQuoteToken As SyntaxToken) As XmlNameAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlNameAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxToken * string * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute (name, startQuoteToken, identifier, endQuoteToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
        <Parameter Name="startQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="endQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="startQuoteToken">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="endQuoteToken">To be added.</param>
        <summary>Creates a new XmlNameAttributeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNameAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax XmlNameAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax identifier, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax XmlNameAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken equalsToken, valuetype Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax identifier, valuetype Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlNameAttribute (name As XmlNameSyntax, equalsToken As SyntaxToken, startQuoteToken As SyntaxToken, identifier As IdentifierNameSyntax, endQuoteToken As SyntaxToken) As XmlNameAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlNameAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute (name, equalsToken, startQuoteToken, identifier, endQuoteToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
        <Parameter Name="equalsToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="startQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" />
        <Parameter Name="endQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="equalsToken">To be added.</param>
        <param name="startQuoteToken">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="endQuoteToken">To be added.</param>
        <summary>Creates a new XmlNameAttributeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNewLine">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax XmlNewLine (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax XmlNewLine(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNewLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlNewLine (text As String) As XmlTextSyntax" />
      <MemberSignature Language="F#" Value="static member XmlNewLine : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNewLine text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The raw text within the new line.</param>
        <summary>
            Creates the syntax representation of an xml text that contains a newline token with a documentation comment 
            exterior trivia at the end (continued documentation comment).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNullKeywordElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlNullKeywordElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlNullKeywordElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNullKeywordElement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlNullKeywordElement () As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlNullKeywordElement : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNullKeywordElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates the syntax representation of a see element within xml documentation comments,
            that points to the 'null' language keyword.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlParaElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlParaElement (params Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlParaElement(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParaElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlParaElement (ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlParaElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParaElement content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">A list of syntax nodes that represents the content of the para element.</param>
        <summary>
            Creates the syntax representation of a para element within xml documentation comments.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlParaElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlParaElement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlParaElement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParaElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlParaElement (content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlParaElement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParaElement content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="content">A list of syntax nodes that represents the content of the para element.</param>
        <summary>
            Creates the syntax representation of a para element within xml documentation comments.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlParamElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlParamElement (string parameterName, params Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlParamElement(string parameterName, class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParamElement(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlParamElement (parameterName As String, ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlParamElement : string * Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParamElement (parameterName, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parameterName">The name of the parameter.</param>
        <param name="content">A list of syntax nodes that represents the content of the param element (e.g. 
            the description and meaning of the parameter).</param>
        <summary>
            Creates the syntax representation of a param element within xml documentation comments (e.g. for
            documentation of method parameters).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlParamElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlParamElement (string parameterName, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlParamElement(string parameterName, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParamElement(System.String,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlParamElement (parameterName As String, content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlParamElement : string * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParamElement (parameterName, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="parameterName">The name of the parameter.</param>
        <param name="content">A list of syntax nodes that represents the content of the param element (e.g. 
            the description and meaning of the parameter).</param>
        <summary>
            Creates the syntax representation of a param element within xml documentation comments (e.g. for
            documentation of method parameters).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlParamRefElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlParamRefElement (string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlParamRefElement(string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParamRefElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlParamRefElement (parameterName As String) As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlParamRefElement : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParamRefElement parameterName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameterName">The name of the referenced parameter.</param>
        <summary>
            Creates the syntax representation of a paramref element within xml documentation comments (e.g. for
            referencing particular parameters of a method).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlPermissionElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlPermissionElement (Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref, params Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlPermissionElement(class Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref, class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPermissionElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlPermissionElement (cref As CrefSyntax, ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlPermissionElement : Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax * Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPermissionElement (cref, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cref" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="cref">Syntax representation of the reference to the permission type.</param>
        <param name="content">A list of syntax nodes that represents the content of the permission element.</param>
        <summary>
            Creates the syntax representation of a permission element within xml documentation comments.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlPermissionElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlPermissionElement (Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlPermissionElement(class Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPermissionElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlPermissionElement (cref As CrefSyntax, content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlPermissionElement : Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPermissionElement (cref, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cref" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="cref">Syntax representation of the reference to the permission type.</param>
        <param name="content">A list of syntax nodes that represents the content of the permission element.</param>
        <summary>
            Creates the syntax representation of a permission element within xml documentation comments.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlPlaceholderElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlPlaceholderElement (params Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlPlaceholderElement(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPlaceholderElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlPlaceholderElement (ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlPlaceholderElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPlaceholderElement content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">A list of syntax nodes that represents the content of the placeholder element.</param>
        <summary>
            Creates the syntax representation of a placeholder element within xml documentation comments.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlPlaceholderElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlPlaceholderElement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlPlaceholderElement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPlaceholderElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlPlaceholderElement (content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlPlaceholderElement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPlaceholderElement content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="content">A list of syntax nodes that represents the content of the placeholder element.</param>
        <summary>
            Creates the syntax representation of a placeholder element within xml documentation comments.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlPrefix">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax XmlPrefix (Microsoft.CodeAnalysis.SyntaxToken prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax XmlPrefix(valuetype Microsoft.CodeAnalysis.SyntaxToken prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlPrefix (prefix As SyntaxToken) As XmlPrefixSyntax" />
      <MemberSignature Language="F#" Value="static member XmlPrefix : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix prefix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="prefix">To be added.</param>
        <summary>Creates a new XmlPrefixSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlPrefix">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax XmlPrefix (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax XmlPrefix(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlPrefix (prefix As String) As XmlPrefixSyntax" />
      <MemberSignature Language="F#" Value="static member XmlPrefix : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix prefix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">To be added.</param>
        <summary>Creates a new XmlPrefixSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlPrefix">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax XmlPrefix (Microsoft.CodeAnalysis.SyntaxToken prefix, Microsoft.CodeAnalysis.SyntaxToken colonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax XmlPrefix(valuetype Microsoft.CodeAnalysis.SyntaxToken prefix, valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlPrefix (prefix As SyntaxToken, colonToken As SyntaxToken) As XmlPrefixSyntax" />
      <MemberSignature Language="F#" Value="static member XmlPrefix : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix (prefix, colonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="prefix">To be added.</param>
        <param name="colonToken">To be added.</param>
        <summary>Creates a new XmlPrefixSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlPreliminaryElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlPreliminaryElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlPreliminaryElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPreliminaryElement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlPreliminaryElement () As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlPreliminaryElement : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPreliminaryElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates a syntax node for a priliminary element within a xml documentation comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlProcessingInstruction">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax XmlProcessingInstruction (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax XmlProcessingInstruction(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlProcessingInstruction (name As XmlNameSyntax) As XmlProcessingInstructionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlProcessingInstruction : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Creates a new XmlProcessingInstructionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlProcessingInstruction">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax XmlProcessingInstruction (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxTokenList textTokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax XmlProcessingInstruction(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxTokenList textTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlProcessingInstruction (name As XmlNameSyntax, textTokens As SyntaxTokenList) As XmlProcessingInstructionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlProcessingInstruction : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxTokenList -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction (name, textTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="textTokens">To be added.</param>
        <summary>Creates a new XmlProcessingInstructionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlProcessingInstruction">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax XmlProcessingInstruction (Microsoft.CodeAnalysis.SyntaxToken startProcessingInstructionToken, Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxTokenList textTokens, Microsoft.CodeAnalysis.SyntaxToken endProcessingInstructionToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax XmlProcessingInstruction(valuetype Microsoft.CodeAnalysis.SyntaxToken startProcessingInstructionToken, class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxTokenList textTokens, valuetype Microsoft.CodeAnalysis.SyntaxToken endProcessingInstructionToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlProcessingInstruction (startProcessingInstructionToken As SyntaxToken, name As XmlNameSyntax, textTokens As SyntaxTokenList, endProcessingInstructionToken As SyntaxToken) As XmlProcessingInstructionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlProcessingInstruction : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction (startProcessingInstructionToken, name, textTokens, endProcessingInstructionToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startProcessingInstructionToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="endProcessingInstructionToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="startProcessingInstructionToken">To be added.</param>
        <param name="name">To be added.</param>
        <param name="textTokens">To be added.</param>
        <param name="endProcessingInstructionToken">To be added.</param>
        <summary>Creates a new XmlProcessingInstructionSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlRemarksElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlRemarksElement (params Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlRemarksElement(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlRemarksElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlRemarksElement (ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlRemarksElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlRemarksElement content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">A list of xml node syntax that will be the content within the remarks element.</param>
        <summary>
            Creates a remarks element within an xml documentation comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlRemarksElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlRemarksElement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlRemarksElement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlRemarksElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlRemarksElement (content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlRemarksElement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlRemarksElement content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="content">A list of xml node syntax that will be the content within the remarks element.</param>
        <summary>
            Creates a remarks element within an xml documentation comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlReturnsElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlReturnsElement (params Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlReturnsElement(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlReturnsElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlReturnsElement (ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlReturnsElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlReturnsElement content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">A list of xml node syntax that will be the content within the returns element.</param>
        <summary>
            Creates a returns element within an xml documentation comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlReturnsElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlReturnsElement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlReturnsElement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlReturnsElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlReturnsElement (content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlReturnsElement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlReturnsElement content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="content">A list of xml node syntax that will be the content within the returns element.</param>
        <summary>
            Creates a returns element within an xml documentation comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlSeeAlsoElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlSeeAlsoElement (Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlSeeAlsoElement(class Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSeeAlsoElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlSeeAlsoElement (cref As CrefSyntax) As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlSeeAlsoElement : Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSeeAlsoElement cref" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cref" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" />
      </Parameters>
      <Docs>
        <param name="cref">A cref syntax node that points to the referenced item (e.g. a class, struct).</param>
        <summary>
            Creates a seealso element within an xml documentation comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlSeeAlsoElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlSeeAlsoElement (Uri linkAddress, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; linkText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlSeeAlsoElement(class System.Uri linkAddress, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; linkText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSeeAlsoElement(System.Uri,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlSeeAlsoElement (linkAddress As Uri, linkText As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlSeeAlsoElement : Uri * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSeeAlsoElement (linkAddress, linkText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkAddress" Type="System.Uri" />
        <Parameter Name="linkText" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="linkAddress">The uri of the referenced item.</param>
        <param name="linkText">A list of xml node syntax that will be used as the link text for the referenced item.</param>
        <summary>
            Creates a seealso element within an xml documentation comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlSeeElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlSeeElement (Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlSeeElement(class Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax cref) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSeeElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlSeeElement (cref As CrefSyntax) As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlSeeElement : Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSeeElement cref" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cref" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" />
      </Parameters>
      <Docs>
        <param name="cref">A cref syntax node that points to the referenced item (e.g. a class, struct).</param>
        <summary>
            Creates a see element within an xml documentation comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlSummaryElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlSummaryElement (params Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlSummaryElement(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSummaryElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlSummaryElement (ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlSummaryElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSummaryElement content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">A list of xml node syntax that will be the content within the summary element.</param>
        <summary>
            Creates a summary element within an xml documentation comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlSummaryElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlSummaryElement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlSummaryElement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSummaryElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlSummaryElement (content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlSummaryElement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSummaryElement content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="content">A list of xml node syntax that will be the content within the summary element.</param>
        <summary>
            Creates a summary element within an xml documentation comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlText">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax XmlText ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax XmlText() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlText () As XmlTextSyntax" />
      <MemberSignature Language="F#" Value="static member XmlText : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new XmlTextSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlText">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax XmlText (params Microsoft.CodeAnalysis.SyntaxToken[] textTokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax XmlText(valuetype Microsoft.CodeAnalysis.SyntaxToken[] textTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlText (ParamArray textTokens As SyntaxToken()) As XmlTextSyntax" />
      <MemberSignature Language="F#" Value="static member XmlText : Microsoft.CodeAnalysis.SyntaxToken[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText textTokens" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxToken[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="textTokens">A list of text tokens used as the text of the xml text node.</param>
        <summary>
            Generates the syntax representation of a xml text node (e.g. for xml documentation comments).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlText">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax XmlText (Microsoft.CodeAnalysis.SyntaxTokenList textTokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax XmlText(valuetype Microsoft.CodeAnalysis.SyntaxTokenList textTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlText (textTokens As SyntaxTokenList) As XmlTextSyntax" />
      <MemberSignature Language="F#" Value="static member XmlText : Microsoft.CodeAnalysis.SyntaxTokenList -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText textTokens" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
      </Parameters>
      <Docs>
        <param name="textTokens">To be added.</param>
        <summary>Creates a new XmlTextSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlText">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax XmlText (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax XmlText(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlText (value As String) As XmlTextSyntax" />
      <MemberSignature Language="F#" Value="static member XmlText : string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The string literal used as the text of the xml text node.</param>
        <summary>
            Generates the syntax representation of a xml text node (e.g. for xml documentation comments).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax XmlTextAttribute (string name, params Microsoft.CodeAnalysis.SyntaxToken[] textTokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax XmlTextAttribute(string name, valuetype Microsoft.CodeAnalysis.SyntaxToken[] textTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(System.String,Microsoft.CodeAnalysis.SyntaxToken[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextAttribute (name As String, ParamArray textTokens As SyntaxToken()) As XmlTextAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlTextAttribute : string * Microsoft.CodeAnalysis.SyntaxToken[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute (name, textTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxToken[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">The name of the xml text attribute.</param>
        <param name="textTokens">A list of tokens used for the value of the xml text attribute.</param>
        <summary>
            Creates the syntax representation of an xml text attribute.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax XmlTextAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax XmlTextAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextAttribute (name As String, value As String) As XmlTextAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlTextAttribute : string * string -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the xml text attribute.</param>
        <param name="value">The value of the xml text attribute.</param>
        <summary>
            Creates the syntax representation of an xml text attribute.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax XmlTextAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.CSharp.SyntaxKind quoteKind, Microsoft.CodeAnalysis.SyntaxTokenList textTokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax XmlTextAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind quoteKind, valuetype Microsoft.CodeAnalysis.SyntaxTokenList textTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextAttribute (name As XmlNameSyntax, quoteKind As SyntaxKind, textTokens As SyntaxTokenList) As XmlTextAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlTextAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxTokenList -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute (name, quoteKind, textTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
        <Parameter Name="quoteKind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
      </Parameters>
      <Docs>
        <param name="name">The name of the xml text attribute.</param>
        <param name="quoteKind">The kind of the quote token to be used to quote the value (e.g. " or ').</param>
        <param name="textTokens">A list of tokens used for the value of the xml text attribute.</param>
        <summary>
            Creates the syntax representation of an xml text attribute.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax XmlTextAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax XmlTextAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, valuetype Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextAttribute (name As XmlNameSyntax, startQuoteToken As SyntaxToken, endQuoteToken As SyntaxToken) As XmlTextAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlTextAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute (name, startQuoteToken, endQuoteToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
        <Parameter Name="startQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="startQuoteToken">To be added.</param>
        <param name="endQuoteToken">To be added.</param>
        <summary>Creates a new XmlTextAttributeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax XmlTextAttribute (string name, Microsoft.CodeAnalysis.CSharp.SyntaxKind quoteKind, Microsoft.CodeAnalysis.SyntaxTokenList textTokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax XmlTextAttribute(string name, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind quoteKind, valuetype Microsoft.CodeAnalysis.SyntaxTokenList textTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(System.String,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextAttribute (name As String, quoteKind As SyntaxKind, textTokens As SyntaxTokenList) As XmlTextAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlTextAttribute : string * Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxTokenList -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute (name, quoteKind, textTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="quoteKind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
      </Parameters>
      <Docs>
        <param name="name">The name of the xml text attribute.</param>
        <param name="quoteKind">The kind of the quote token to be used to quote the value (e.g. " or ').</param>
        <param name="textTokens">A list of tokens used for the value of the xml text attribute.</param>
        <summary>
            Creates the syntax representation of an xml text attribute.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax XmlTextAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.SyntaxTokenList textTokens, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax XmlTextAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, valuetype Microsoft.CodeAnalysis.SyntaxTokenList textTokens, valuetype Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextAttribute (name As XmlNameSyntax, startQuoteToken As SyntaxToken, textTokens As SyntaxTokenList, endQuoteToken As SyntaxToken) As XmlTextAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlTextAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute (name, startQuoteToken, textTokens, endQuoteToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
        <Parameter Name="startQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="endQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="startQuoteToken">To be added.</param>
        <param name="textTokens">To be added.</param>
        <param name="endQuoteToken">To be added.</param>
        <summary>Creates a new XmlTextAttributeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax XmlTextAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.SyntaxTokenList textTokens, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax XmlTextAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken equalsToken, valuetype Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, valuetype Microsoft.CodeAnalysis.SyntaxTokenList textTokens, valuetype Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextAttribute (name As XmlNameSyntax, equalsToken As SyntaxToken, startQuoteToken As SyntaxToken, textTokens As SyntaxTokenList, endQuoteToken As SyntaxToken) As XmlTextAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlTextAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute (name, equalsToken, startQuoteToken, textTokens, endQuoteToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
        <Parameter Name="equalsToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="startQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="endQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="equalsToken">To be added.</param>
        <param name="startQuoteToken">To be added.</param>
        <param name="textTokens">To be added.</param>
        <param name="endQuoteToken">To be added.</param>
        <summary>Creates a new XmlTextAttributeSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextLiteral">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlTextLiteral (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken XmlTextLiteral(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextLiteral(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextLiteral (value As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlTextLiteral : string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextLiteral value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The text used within the xml text literal.</param>
        <summary>
            Generates the syntax representation of an xml text literal.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextLiteral">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlTextLiteral (string text, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken XmlTextLiteral(string text, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextLiteral(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextLiteral (text As String, value As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlTextLiteral : string * string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextLiteral (text, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The text used within the xml text literal.</param>
        <summary>
            Generates the syntax representation of an xml text literal.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextLiteral">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlTextLiteral (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken XmlTextLiteral(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, string value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextLiteral(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextLiteral (leading As SyntaxTriviaList, text As String, value As String, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlTextLiteral : Microsoft.CodeAnalysis.SyntaxTriviaList * string * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextLiteral (leading, text, value, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The xml text value.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a token with kind XmlTextLiteralToken.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextNewLine">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlTextNewLine (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken XmlTextNewLine(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextNewLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextNewLine (text As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlTextNewLine : string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextNewLine text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The raw text within the new line.</param>
        <summary>
            Creates the syntax representation of an xml newline token with a documentation comment exterior trivia at 
            the end (continued documentation comment).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextNewLine">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlTextNewLine (string text, bool continueXmlDocumentationComment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken XmlTextNewLine(string text, bool continueXmlDocumentationComment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextNewLine(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextNewLine (text As String, continueXmlDocumentationComment As Boolean) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlTextNewLine : string * bool -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextNewLine (text, continueXmlDocumentationComment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="continueXmlDocumentationComment" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The raw text within the new line.</param>
        <param name="continueXmlDocumentationComment">
            If set to true, a documentation comment exterior token will be added to the trailing trivia
            of the new token.</param>
        <summary>
            Creates the syntax representation of an xml newline token for xml documentation comments.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextNewLine">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlTextNewLine (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.SyntaxToken XmlTextNewLine(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, string value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextNewLine(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextNewLine (leading As SyntaxTriviaList, text As String, value As String, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlTextNewLine : Microsoft.CodeAnalysis.SyntaxTriviaList * string * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextNewLine (leading, text, value, trailing)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The xml text new line value.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
            Creates a token with kind XmlTextLiteralNewLineToken.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlThreadSafetyElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlThreadSafetyElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlThreadSafetyElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlThreadSafetyElement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlThreadSafetyElement () As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlThreadSafetyElement : unit -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlThreadSafetyElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates a threadsafty element within an xml documentation comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlThreadSafetyElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlThreadSafetyElement (bool isStatic, bool isInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax XmlThreadSafetyElement(bool isStatic, bool isInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlThreadSafetyElement(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlThreadSafetyElement (isStatic As Boolean, isInstance As Boolean) As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlThreadSafetyElement : bool * bool -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlThreadSafetyElement (isStatic, isInstance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isStatic" Type="System.Boolean" />
        <Parameter Name="isInstance" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isStatic">Indicates whether static member of this type are safe for multi-threaded operations.</param>
        <param name="isInstance">Indicates whether instance members of this type are safe for multi-threaded operations.</param>
        <summary>
            Creates a threadsafety element within an xml documentation comment.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlValueElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlValueElement (params Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlValueElement(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlValueElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlValueElement (ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlValueElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlValueElement content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">A list of xml syntax nodes that represents the content of the value element.</param>
        <summary>
            Creates the the syntax representation of an xml value element (e.g. for xml documentation comments).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlValueElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlValueElement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax XmlValueElement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlValueElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlValueElement (content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlValueElement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlValueElement content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="content">A list of xml syntax nodes that represents the content of the value element.</param>
        <summary>
            Creates the the syntax representation of an xml value element (e.g. for xml documentation comments).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax YieldStatement (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax YieldStatement(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.YieldStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function YieldStatement (kind As SyntaxKind, Optional expression As ExpressionSyntax = null) As YieldStatementSyntax" />
      <MemberSignature Language="F#" Value="static member YieldStatement : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.YieldStatement (kind, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>Creates a new YieldStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax YieldStatement (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken yieldKeyword, Microsoft.CodeAnalysis.SyntaxToken returnOrBreakKeyword, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax YieldStatement(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken yieldKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken returnOrBreakKeyword, class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.YieldStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function YieldStatement (kind As SyntaxKind, yieldKeyword As SyntaxToken, returnOrBreakKeyword As SyntaxToken, expression As ExpressionSyntax, semicolonToken As SyntaxToken) As YieldStatementSyntax" />
      <MemberSignature Language="F#" Value="static member YieldStatement : Microsoft.CodeAnalysis.CSharp.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFactory.YieldStatement (kind, yieldKeyword, returnOrBreakKeyword, expression, semicolonToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
        <Parameter Name="yieldKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="returnOrBreakKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="yieldKeyword">To be added.</param>
        <param name="returnOrBreakKeyword">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>Creates a new YieldStatementSyntax instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>