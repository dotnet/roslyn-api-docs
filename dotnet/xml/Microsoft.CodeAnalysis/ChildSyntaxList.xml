<Type Name="ChildSyntaxList" FullName="Microsoft.CodeAnalysis.ChildSyntaxList">
  <TypeSignature Language="C#" Value="public struct ChildSyntaxList : IEquatable&lt;Microsoft.CodeAnalysis.ChildSyntaxList&gt;, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt;, System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt;, System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ChildSyntaxList extends System.ValueType implements class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt;, class System.Collections.IEnumerable, class System.IEquatable`1&lt;valuetype Microsoft.CodeAnalysis.ChildSyntaxList&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.ChildSyntaxList" />
  <TypeSignature Language="VB.NET" Value="Public Structure ChildSyntaxList&#xA;Implements IEnumerable(Of SyntaxNodeOrToken), IEquatable(Of ChildSyntaxList), IReadOnlyCollection(Of SyntaxNodeOrToken), IReadOnlyList(Of SyntaxNodeOrToken)" />
  <TypeSignature Language="F#" Value="type ChildSyntaxList = struct&#xA;    interface IReadOnlyList&lt;SyntaxNodeOrToken&gt;&#xA;    interface seq&lt;SyntaxNodeOrToken&gt;&#xA;    interface IEnumerable&#xA;    interface IReadOnlyCollection&lt;SyntaxNodeOrToken&gt;" />
  <TypeSignature Language="C++ CLI" Value="public value class ChildSyntaxList : IEquatable&lt;Microsoft::CodeAnalysis::ChildSyntaxList&gt;, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNodeOrToken&gt;, System::Collections::Generic::IReadOnlyCollection&lt;Microsoft::CodeAnalysis::SyntaxNodeOrToken&gt;, System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::SyntaxNodeOrToken&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Microsoft.CodeAnalysis.ChildSyntaxList&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Any">
      <MemberSignature Language="C#" Value="public bool Any ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Any() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.ChildSyntaxList.Any" />
      <MemberSignature Language="VB.NET" Value="Public Function Any () As Boolean" />
      <MemberSignature Language="F#" Value="member this.Any : unit -&gt; bool" Usage="childSyntaxList.Any " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Any();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; bool Any();" />
      <MemberSignature Language="C++ WINRT" Value="bool Any();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.ChildSyntaxList.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.CodeAnalysis.ChildSyntaxList.Count" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the number of children contained in the <see cref="T:Microsoft.CodeAnalysis.ChildSyntaxList" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Microsoft.CodeAnalysis.ChildSyntaxList other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype Microsoft.CodeAnalysis.ChildSyntaxList other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.ChildSyntaxList.Equals(Microsoft.CodeAnalysis.ChildSyntaxList)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As ChildSyntaxList) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : Microsoft.CodeAnalysis.ChildSyntaxList -&gt; bool" Usage="childSyntaxList.Equals other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Microsoft::CodeAnalysis::ChildSyntaxList other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.CodeAnalysis.ChildSyntaxList" />
      </Parameters>
      <Docs>
        <param name="other">The <see cref="T:Microsoft.CodeAnalysis.ChildSyntaxList" /> structure to be compared with the current instance.</param>
        <summary>Determines whether the specified <see cref="T:Microsoft.CodeAnalysis.ChildSyntaxList" /> structure is equal to the current instance.</summary>
        <returns>true if the specified <see cref="T:Microsoft.CodeAnalysis.ChildSyntaxList" /> structure is equal to the current instance; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.ChildSyntaxList.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="childSyntaxList.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override bool Equals(Platform::Object ^ obj);" />
      <MemberSignature Language="C++ WINRT" Value=" override bool Equals(winrt::Windows::Foundation::IInspectable const &amp; obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to be compared with the current instance.</param>
        <summary>Determines whether the specified object is equal to the current instance.</summary>
        <returns>true if the specified object is a <see cref="T:Microsoft.CodeAnalysis.ChildSyntaxList" /> structure and is equal to the current instance; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="First">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNodeOrToken First ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxNodeOrToken First() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.ChildSyntaxList.First" />
      <MemberSignature Language="VB.NET" Value="Public Function First () As SyntaxNodeOrToken" />
      <MemberSignature Language="F#" Value="member this.First : unit -&gt; Microsoft.CodeAnalysis.SyntaxNodeOrToken" Usage="childSyntaxList.First " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNodeOrToken First();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNodeOrToken</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns the first child in the list.
            </summary>
        <returns>The first child in the list.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The list is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.ChildSyntaxList/Enumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.ChildSyntaxList.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ChildSyntaxList.Enumerator" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator" Usage="childSyntaxList.GetEnumerator " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::ChildSyntaxList::Enumerator GetEnumerator();" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::ChildSyntaxList::Enumerator GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ChildSyntaxList+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through the <see cref="T:Microsoft.CodeAnalysis.ChildSyntaxList" />.</summary>
        <returns>A <see cref="T:Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator" /> for the <see cref="T:Microsoft.CodeAnalysis.ChildSyntaxList" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.ChildSyntaxList.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="childSyntaxList.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="C++ WINRT" Value=" override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for the current instance.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNodeOrToken this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxNodeOrToken Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.ChildSyntaxList.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As SyntaxNodeOrToken" />
      <MemberSignature Language="F#" Value="member this.Item(int) : Microsoft.CodeAnalysis.SyntaxNodeOrToken" Usage="Microsoft.CodeAnalysis.ChildSyntaxList.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxNodeOrToken default[int] { Microsoft::CodeAnalysis::SyntaxNodeOrToken get(int index); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNodeOrToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the child to get.</param>
        <summary>Gets the child at the specified index.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than <see cref="P:Microsoft.CodeAnalysis.ChildSyntaxList.Count" />. </exception>
      </Docs>
    </Member>
    <Member MemberName="Last">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNodeOrToken Last ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxNodeOrToken Last() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.ChildSyntaxList.Last" />
      <MemberSignature Language="VB.NET" Value="Public Function Last () As SyntaxNodeOrToken" />
      <MemberSignature Language="F#" Value="member this.Last : unit -&gt; Microsoft.CodeAnalysis.SyntaxNodeOrToken" Usage="childSyntaxList.Last " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNodeOrToken Last();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNodeOrToken</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns the last child in the list.
            </summary>
        <returns>The last child in the list.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The list is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Microsoft.CodeAnalysis.ChildSyntaxList list1, Microsoft.CodeAnalysis.ChildSyntaxList list2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype Microsoft.CodeAnalysis.ChildSyntaxList list1, valuetype Microsoft.CodeAnalysis.ChildSyntaxList list2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.ChildSyntaxList.op_Equality(Microsoft.CodeAnalysis.ChildSyntaxList,Microsoft.CodeAnalysis.ChildSyntaxList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (list1 As ChildSyntaxList, list2 As ChildSyntaxList) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( = ) : Microsoft.CodeAnalysis.ChildSyntaxList * Microsoft.CodeAnalysis.ChildSyntaxList -&gt; bool" Usage="list1 = list2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Microsoft::CodeAnalysis::ChildSyntaxList list1, Microsoft::CodeAnalysis::ChildSyntaxList list2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list1" Type="Microsoft.CodeAnalysis.ChildSyntaxList" />
        <Parameter Name="list2" Type="Microsoft.CodeAnalysis.ChildSyntaxList" />
      </Parameters>
      <Docs>
        <param name="list1">The <see cref="T:Microsoft.CodeAnalysis.ChildSyntaxList" /> structure on the left side of the equality operator.</param>
        <param name="list2">The <see cref="T:Microsoft.CodeAnalysis.ChildSyntaxList" /> structure on the right side of the equality operator.</param>
        <summary>Indicates whether two <see cref="T:Microsoft.CodeAnalysis.ChildSyntaxList" /> structures are equal.</summary>
        <returns>true if <paramref name="list1" /> is equal to <paramref name="list2" />; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Microsoft.CodeAnalysis.ChildSyntaxList list1, Microsoft.CodeAnalysis.ChildSyntaxList list2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype Microsoft.CodeAnalysis.ChildSyntaxList list1, valuetype Microsoft.CodeAnalysis.ChildSyntaxList list2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.ChildSyntaxList.op_Inequality(Microsoft.CodeAnalysis.ChildSyntaxList,Microsoft.CodeAnalysis.ChildSyntaxList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (list1 As ChildSyntaxList, list2 As ChildSyntaxList) As Boolean" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Microsoft.CodeAnalysis.ChildSyntaxList * Microsoft.CodeAnalysis.ChildSyntaxList -&gt; bool" Usage="Microsoft.CodeAnalysis.ChildSyntaxList.op_Inequality (list1, list2)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Microsoft::CodeAnalysis::ChildSyntaxList list1, Microsoft::CodeAnalysis::ChildSyntaxList list2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list1" Type="Microsoft.CodeAnalysis.ChildSyntaxList" />
        <Parameter Name="list2" Type="Microsoft.CodeAnalysis.ChildSyntaxList" />
      </Parameters>
      <Docs>
        <param name="list1">The <see cref="T:Microsoft.CodeAnalysis.ChildSyntaxList" /> structure on the left side of the inequality operator.</param>
        <param name="list2">The <see cref="T:Microsoft.CodeAnalysis.ChildSyntaxList" /> structure on the right side of the inequality operator.</param>
        <summary>Indicates whether two <see cref="T:Microsoft.CodeAnalysis.ChildSyntaxList" /> structures are unequal.</summary>
        <returns>true if <paramref name="list1" /> is equal to <paramref name="list2" />; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.ChildSyntaxList.Reversed Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.ChildSyntaxList/Reversed Reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.ChildSyntaxList.Reverse" />
      <MemberSignature Language="VB.NET" Value="Public Function Reverse () As ChildSyntaxList.Reversed" />
      <MemberSignature Language="F#" Value="member this.Reverse : unit -&gt; Microsoft.CodeAnalysis.ChildSyntaxList.Reversed" Usage="childSyntaxList.Reverse " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::ChildSyntaxList::Reversed Reverse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ChildSyntaxList+Reversed</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a list which contains all children of <see cref="T:Microsoft.CodeAnalysis.ChildSyntaxList" /> in reversed order.
            </summary>
        <returns>
          <see cref="T:Microsoft.CodeAnalysis.ChildSyntaxList.Reversed" /> which contains all children of <see cref="T:Microsoft.CodeAnalysis.ChildSyntaxList" /> in reversed order</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt; IEnumerable&lt;SyntaxNodeOrToken&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt; System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.ChildSyntaxList.System#Collections#Generic#IEnumerable&lt;Microsoft#CodeAnalysis#SyntaxNodeOrToken&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of SyntaxNodeOrToken) Implements IEnumerable(Of SyntaxNodeOrToken).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;Microsoft::CodeAnalysis::SyntaxNodeOrToken&gt; ^ System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNodeOrToken&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.ChildSyntaxList.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>