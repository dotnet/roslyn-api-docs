<Type Name="SpeculativeBindingOption" FullName="Microsoft.CodeAnalysis.SpeculativeBindingOption">
  <TypeSignature Language="C#" Value="public enum SpeculativeBindingOption" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SpeculativeBindingOption extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.SpeculativeBindingOption" />
  <TypeSignature Language="VB.NET" Value="Public Enum SpeculativeBindingOption" />
  <TypeSignature Language="F#" Value="type SpeculativeBindingOption = " />
  <TypeSignature Language="C++ CLI" Value="public enum class SpeculativeBindingOption" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
            Describes the kind of binding to be performed in one of the SemanticModel
            speculative binding methods.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="BindAsExpression">
      <MemberSignature Language="C#" Value="BindAsExpression" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.SpeculativeBindingOption BindAsExpression = int32(0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.SpeculativeBindingOption.BindAsExpression" />
      <MemberSignature Language="VB.NET" Value="BindAsExpression" />
      <MemberSignature Language="F#" Value="BindAsExpression = 0" Usage="Microsoft.CodeAnalysis.SpeculativeBindingOption.BindAsExpression" />
      <MemberSignature Language="C++ CLI" Value="BindAsExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SpeculativeBindingOption</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
            Binds the given expression using the normal expression binding rules
            that would occur during normal binding of expressions.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="BindAsTypeOrNamespace">
      <MemberSignature Language="C#" Value="BindAsTypeOrNamespace" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.SpeculativeBindingOption BindAsTypeOrNamespace = int32(1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.SpeculativeBindingOption.BindAsTypeOrNamespace" />
      <MemberSignature Language="VB.NET" Value="BindAsTypeOrNamespace" />
      <MemberSignature Language="F#" Value="BindAsTypeOrNamespace = 1" Usage="Microsoft.CodeAnalysis.SpeculativeBindingOption.BindAsTypeOrNamespace" />
      <MemberSignature Language="C++ CLI" Value="BindAsTypeOrNamespace" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SpeculativeBindingOption</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
            Binds the given expression as a type or namespace only. If this option
            is selected, then the given expression must derive from TypeSyntax.
            </summary>
      </Docs>
    </Member>
  </Members>
</Type>