<Type Name="IWhileLoopOperation" FullName="Microsoft.CodeAnalysis.Operations.IWhileLoopOperation">
  <TypeSignature Language="C#" Value="public interface IWhileLoopOperation : Microsoft.CodeAnalysis.Operations.ILoopOperation" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWhileLoopOperation implements class Microsoft.CodeAnalysis.IOperation, class Microsoft.CodeAnalysis.Operations.ILoopOperation" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Operations.IWhileLoopOperation" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWhileLoopOperation&#xA;Implements ILoopOperation" />
  <TypeSignature Language="F#" Value="type IWhileLoopOperation = interface&#xA;    interface ILoopOperation&#xA;    interface IOperation" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWhileLoopOperation : Microsoft::CodeAnalysis::Operations::ILoopOperation" />
  <TypeSignature Language="C++ CX" Value="public interface class IWhileLoopOperation : Microsoft::CodeAnalysis::Operations::ILoopOperation" />
  <TypeSignature Language="C++ WINRT" Value="__interface IWhileLoopOperation : Microsoft::CodeAnalysis::Operations::ILoopOperation" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.CodeAnalysis.Operations.ILoopOperation</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents a while or do while loop.
            <para>
            Current usage:
             (1) C# 'while' and 'do while' loop statements.
             (2) VB 'While', 'Do While' and 'Do Until' loop statements.
            </para></summary>
    <remarks>
            This interface is reserved for implementation by its associated APIs. We reserve the right to
            change it in the future.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IOperation Condition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IOperation Condition" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IWhileLoopOperation.Condition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Condition As IOperation" />
      <MemberSignature Language="F#" Value="member this.Condition : Microsoft.CodeAnalysis.IOperation" Usage="Microsoft.CodeAnalysis.Operations.IWhileLoopOperation.Condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ Condition { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ Condition { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Condition of the loop.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionIsTop">
      <MemberSignature Language="C#" Value="public bool ConditionIsTop { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConditionIsTop" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IWhileLoopOperation.ConditionIsTop" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConditionIsTop As Boolean" />
      <MemberSignature Language="F#" Value="member this.ConditionIsTop : bool" Usage="Microsoft.CodeAnalysis.Operations.IWhileLoopOperation.ConditionIsTop" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConditionIsTop { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool ConditionIsTop { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            True if the <see cref="P:Microsoft.CodeAnalysis.Operations.IWhileLoopOperation.Condition" /> is evaluated at start of each loop iteration.
            False if it is evaluated at the end of each loop iteration.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionIsUntil">
      <MemberSignature Language="C#" Value="public bool ConditionIsUntil { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConditionIsUntil" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IWhileLoopOperation.ConditionIsUntil" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConditionIsUntil As Boolean" />
      <MemberSignature Language="F#" Value="member this.ConditionIsUntil : bool" Usage="Microsoft.CodeAnalysis.Operations.IWhileLoopOperation.ConditionIsUntil" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConditionIsUntil { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool ConditionIsUntil { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            True if the loop has 'Until' loop semantics and the loop is executed while <see cref="P:Microsoft.CodeAnalysis.Operations.IWhileLoopOperation.Condition" /> is false.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoredCondition">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IOperation IgnoredCondition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IOperation IgnoredCondition" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IWhileLoopOperation.IgnoredCondition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IgnoredCondition As IOperation" />
      <MemberSignature Language="F#" Value="member this.IgnoredCondition : Microsoft.CodeAnalysis.IOperation" Usage="Microsoft.CodeAnalysis.Operations.IWhileLoopOperation.IgnoredCondition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ IgnoredCondition { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ IgnoredCondition { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Additional conditional supplied for loop in error cases, which is ignored by the compiler.
            For example, for VB 'Do While' or 'Do Until' loop with syntax errors where both the top and bottom conditions are provided.
            The top condition is preferred and exposed as <see cref="P:Microsoft.CodeAnalysis.Operations.IWhileLoopOperation.Condition" /> and the bottom condition is ignored and exposed by this property.
            This property should be null for all non-error cases.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>