<Type Name="JoinClauseSyntax" FullName="Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax">
  <TypeSignature Language="C#" Value="public abstract class JoinClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract JoinClauseSyntax extends Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class JoinClauseSyntax&#xA;Inherits QueryClauseSyntax" />
  <TypeSignature Language="F#" Value="type JoinClauseSyntax = class&#xA;    inherit QueryClauseSyntax" />
  <TypeSignature Language="C++ CLI" Value="public ref class JoinClauseSyntax abstract : Microsoft::CodeAnalysis::VisualBasic::Syntax::QueryClauseSyntax" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
 Represents a Join or a Group Join query operator.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddAdditionalJoins">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax AddAdditionalJoins (params Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax AddAdditionalJoins(class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax.AddAdditionalJoins(Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddAdditionalJoins (ParamArray items As JoinClauseSyntax()) As JoinClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.AddAdditionalJoins : Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax" Usage="joinClauseSyntax.AddAdditionalJoins items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinClauseSyntax ^ AddAdditionalJoins(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinClauseSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdditionalJoins">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt; AdditionalJoins { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt; AdditionalJoins" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax.AdditionalJoins" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AdditionalJoins As SyntaxList(Of JoinClauseSyntax)" />
      <MemberSignature Language="F#" Value="member this.AdditionalJoins : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax.AdditionalJoins" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinClauseSyntax ^&gt; AdditionalJoins { Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinClauseSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 An additional Join or Group Join query operator.
 </summary>
        <value>To be added.</value>
        <remarks>
 If nothing is present, an empty list is returned.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJoinConditions">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax AddJoinConditions (params Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax AddJoinConditions(class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax.AddJoinConditions(Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJoinConditions (ParamArray items As JoinConditionSyntax()) As JoinClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.AddJoinConditions : Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax" Usage="joinClauseSyntax.AddJoinConditions items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinClauseSyntax ^ AddJoinConditions(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinConditionSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJoinedVariables">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax AddJoinedVariables (params Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax AddJoinedVariables(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax.AddJoinedVariables(Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJoinedVariables (ParamArray items As CollectionRangeVariableSyntax()) As JoinClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.AddJoinedVariables : Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax" Usage="joinClauseSyntax.AddJoinedVariables items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinClauseSyntax ^ AddJoinedVariables(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JoinConditions">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; JoinConditions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; JoinConditions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax.JoinConditions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property JoinConditions As SeparatedSyntaxList(Of JoinConditionSyntax)" />
      <MemberSignature Language="F#" Value="member this.JoinConditions : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax.JoinConditions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinConditionSyntax ^&gt; JoinConditions { Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinConditionSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The conditions indicating what expressions to compare during the join. Each
 condition is a JoinCondition, and the separators are "And" keywords.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JoinedVariables">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; JoinedVariables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; JoinedVariables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax.JoinedVariables" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property JoinedVariables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax)" />
      <MemberSignature Language="F#" Value="member this.JoinedVariables : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax.JoinedVariables" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^&gt; JoinedVariables { Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Defines the collection range variables being joined to.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JoinKeyword">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxToken JoinKeyword { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken JoinKeyword" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax.JoinKeyword" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property JoinKeyword As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.JoinKeyword : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax.JoinKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxToken JoinKeyword { Microsoft::CodeAnalysis::SyntaxToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The "Join" keyword.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyword">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxToken OnKeyword { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken OnKeyword" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax.OnKeyword" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OnKeyword As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.OnKeyword : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax.OnKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxToken OnKeyword { Microsoft::CodeAnalysis::SyntaxToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The "On" keyword.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAdditionalJoins">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax WithAdditionalJoins (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt; additionalJoins);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax WithAdditionalJoins(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt; additionalJoins) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax.WithAdditionalJoins(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithAdditionalJoins (additionalJoins As SyntaxList(Of JoinClauseSyntax)) As JoinClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.WithAdditionalJoins : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax" Usage="joinClauseSyntax.WithAdditionalJoins additionalJoins" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinClauseSyntax ^ WithAdditionalJoins(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinClauseSyntax ^&gt; additionalJoins);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="additionalJoins" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="additionalJoins">To be added.</param>
        <summary>
 Returns a copy of this with the AdditionalJoins property changed to the
 specified value. Returns this instance if the specified value is the same as
 the current value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithJoinConditions">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax WithJoinConditions (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; joinConditions);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax WithJoinConditions(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; joinConditions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax.WithJoinConditions(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithJoinConditions (joinConditions As SeparatedSyntaxList(Of JoinConditionSyntax)) As JoinClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.WithJoinConditions : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax" Usage="joinClauseSyntax.WithJoinConditions joinConditions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinClauseSyntax ^ WithJoinConditions(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinConditionSyntax ^&gt; joinConditions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinConditions" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="joinConditions">To be added.</param>
        <summary>
 Returns a copy of this with the JoinConditions property changed to the
 specified value. Returns this instance if the specified value is the same as
 the current value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithJoinedVariables">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax WithJoinedVariables (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; joinedVariables);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax WithJoinedVariables(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; joinedVariables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax.WithJoinedVariables(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithJoinedVariables (joinedVariables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax)) As JoinClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.WithJoinedVariables : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax" Usage="joinClauseSyntax.WithJoinedVariables joinedVariables" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinClauseSyntax ^ WithJoinedVariables(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^&gt; joinedVariables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinedVariables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="joinedVariables">To be added.</param>
        <summary>
 Returns a copy of this with the JoinedVariables property changed to the
 specified value. Returns this instance if the specified value is the same as
 the current value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithJoinKeyword">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax WithJoinKeyword (Microsoft.CodeAnalysis.SyntaxToken joinKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax WithJoinKeyword(valuetype Microsoft.CodeAnalysis.SyntaxToken joinKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax.WithJoinKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithJoinKeyword (joinKeyword As SyntaxToken) As JoinClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.WithJoinKeyword : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax" Usage="joinClauseSyntax.WithJoinKeyword joinKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinClauseSyntax ^ WithJoinKeyword(Microsoft::CodeAnalysis::SyntaxToken joinKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="joinKeyword">To be added.</param>
        <summary>
 Returns a copy of this with the JoinKeyword property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithOnKeyword">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax WithOnKeyword (Microsoft.CodeAnalysis.SyntaxToken onKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax WithOnKeyword(valuetype Microsoft.CodeAnalysis.SyntaxToken onKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax.WithOnKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithOnKeyword (onKeyword As SyntaxToken) As JoinClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.WithOnKeyword : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax" Usage="joinClauseSyntax.WithOnKeyword onKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinClauseSyntax ^ WithOnKeyword(Microsoft::CodeAnalysis::SyntaxToken onKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="onKeyword">To be added.</param>
        <summary>
 Returns a copy of this with the OnKeyword property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>