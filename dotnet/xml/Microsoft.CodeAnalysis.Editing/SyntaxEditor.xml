<Type Name="SyntaxEditor" FullName="Microsoft.CodeAnalysis.Editing.SyntaxEditor">
  <TypeSignature Language="C#" Value="public class SyntaxEditor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SyntaxEditor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Editing.SyntaxEditor" />
  <TypeSignature Language="VB.NET" Value="Public Class SyntaxEditor" />
  <TypeSignature Language="F#" Value="type SyntaxEditor = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class SyntaxEditor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            An editor for making changes to a syntax tree. 
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SyntaxEditor (Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.Workspace workspace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.CodeAnalysis.SyntaxNode root, class Microsoft.CodeAnalysis.Workspace workspace) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.#ctor(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Workspace)" />
      <MemberSignature Language="F#" Value="new Microsoft.CodeAnalysis.Editing.SyntaxEditor : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.Workspace -&gt; Microsoft.CodeAnalysis.Editing.SyntaxEditor" Usage="new Microsoft.CodeAnalysis.Editing.SyntaxEditor (root, workspace)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SyntaxEditor(Microsoft::CodeAnalysis::SyntaxNode ^ root, Microsoft::CodeAnalysis::Workspace ^ workspace);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="workspace" Type="Microsoft.CodeAnalysis.Workspace" />
      </Parameters>
      <Docs>
        <param name="root">To be added.</param>
        <param name="workspace">To be added.</param>
        <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Editing.SyntaxEditor" /> instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Generator">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Editing.SyntaxGenerator Generator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.Editing.SyntaxGenerator Generator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Editing.SyntaxEditor.Generator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Generator As SyntaxGenerator" />
      <MemberSignature Language="F#" Value="member this.Generator : Microsoft.CodeAnalysis.Editing.SyntaxGenerator" Usage="Microsoft.CodeAnalysis.Editing.SyntaxEditor.Generator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::Editing::SyntaxGenerator ^ Generator { Microsoft::CodeAnalysis::Editing::SyntaxGenerator ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Editing.SyntaxGenerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A <see cref="T:Microsoft.CodeAnalysis.Editing.SyntaxGenerator" /> to use to create and change <see cref="T:Microsoft.CodeAnalysis.SyntaxNode" />'s.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChangedRoot">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode GetChangedRoot ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.SyntaxNode GetChangedRoot() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChangedRoot () As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.GetChangedRoot : unit -&gt; Microsoft.CodeAnalysis.SyntaxNode" Usage="syntaxEditor.GetChangedRoot " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNode ^ GetChangedRoot();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns the changed root node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAfter">
      <MemberSignature Language="C#" Value="public void InsertAfter (Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.SyntaxNode newNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAfter(class Microsoft.CodeAnalysis.SyntaxNode node, class Microsoft.CodeAnalysis.SyntaxNode newNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.InsertAfter(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAfter (node As SyntaxNode, newNode As SyntaxNode)" />
      <MemberSignature Language="F#" Value="member this.InsertAfter : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; unit" Usage="syntaxEditor.InsertAfter (node, newNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAfter(Microsoft::CodeAnalysis::SyntaxNode ^ node, Microsoft::CodeAnalysis::SyntaxNode ^ newNode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="newNode" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">The node already existing in the tree that the new nodes will be placed after. This must be a node this is contained within a syntax list.</param>
        <param name="newNode">The node to place after the existing node. This node must be of a compatible type to be placed in the same list containing the existing node.</param>
        <summary>
            Insert the new node after the specified node already existing in the tree.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAfter">
      <MemberSignature Language="C#" Value="public void InsertAfter (Microsoft.CodeAnalysis.SyntaxNode node, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; newNodes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAfter(class Microsoft.CodeAnalysis.SyntaxNode node, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; newNodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.InsertAfter(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAfter (node As SyntaxNode, newNodes As IEnumerable(Of SyntaxNode))" />
      <MemberSignature Language="F#" Value="member this.InsertAfter : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; unit" Usage="syntaxEditor.InsertAfter (node, newNodes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAfter(Microsoft::CodeAnalysis::SyntaxNode ^ node, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ newNodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="newNodes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="node">The node already existing in the tree that the new nodes will be placed after. This must be a node this is contained within a syntax list.</param>
        <param name="newNodes">The nodes to place after the existing node. These nodes must be of a compatible type to be placed in the same list containing the existing node.</param>
        <summary>
            Insert the new nodes after the specified node already existing in the tree.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertBefore">
      <MemberSignature Language="C#" Value="public void InsertBefore (Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.SyntaxNode newNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertBefore(class Microsoft.CodeAnalysis.SyntaxNode node, class Microsoft.CodeAnalysis.SyntaxNode newNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.InsertBefore(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertBefore (node As SyntaxNode, newNode As SyntaxNode)" />
      <MemberSignature Language="F#" Value="member this.InsertBefore : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; unit" Usage="syntaxEditor.InsertBefore (node, newNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertBefore(Microsoft::CodeAnalysis::SyntaxNode ^ node, Microsoft::CodeAnalysis::SyntaxNode ^ newNode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="newNode" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">The node already existing in the tree that the new nodes will be placed before. This must be a node this is contained within a syntax list.</param>
        <param name="newNode">The node to place before the existing node. This node must be of a compatible type to be placed in the same list containing the existing node.</param>
        <summary>
            Insert the new node before the specified node already existing in the tree.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertBefore">
      <MemberSignature Language="C#" Value="public void InsertBefore (Microsoft.CodeAnalysis.SyntaxNode node, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; newNodes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertBefore(class Microsoft.CodeAnalysis.SyntaxNode node, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; newNodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.InsertBefore(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertBefore (node As SyntaxNode, newNodes As IEnumerable(Of SyntaxNode))" />
      <MemberSignature Language="F#" Value="member this.InsertBefore : Microsoft.CodeAnalysis.SyntaxNode * seq&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; unit" Usage="syntaxEditor.InsertBefore (node, newNodes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertBefore(Microsoft::CodeAnalysis::SyntaxNode ^ node, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ newNodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="newNodes" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="node">The node already existing in the tree that the new nodes will be placed before. This must be a node this is contained within a syntax list.</param>
        <param name="newNodes">The nodes to place before the existing node. These nodes must be of a compatible type to be placed in the same list containing the existing node.</param>
        <summary>
            Insert the new nodes before the specified node already existing in the tree.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalRoot">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode OriginalRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.SyntaxNode OriginalRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Editing.SyntaxEditor.OriginalRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalRoot As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.OriginalRoot : Microsoft.CodeAnalysis.SyntaxNode" Usage="Microsoft.CodeAnalysis.Editing.SyntaxEditor.OriginalRoot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxNode ^ OriginalRoot { Microsoft::CodeAnalysis::SyntaxNode ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The <see cref="T:Microsoft.CodeAnalysis.SyntaxNode" /> that was specified when the <see cref="T:Microsoft.CodeAnalysis.Editing.SyntaxEditor" /> was constructed.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveNode">
      <MemberSignature Language="C#" Value="public void RemoveNode (Microsoft.CodeAnalysis.SyntaxNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveNode(class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveNode (node As SyntaxNode)" />
      <MemberSignature Language="F#" Value="member this.RemoveNode : Microsoft.CodeAnalysis.SyntaxNode -&gt; unit" Usage="syntaxEditor.RemoveNode node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveNode(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">The node to remove that currently exists as part of the tree.</param>
        <summary>
            Remove the node from the tree.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveNode">
      <MemberSignature Language="C#" Value="public void RemoveNode (Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.SyntaxRemoveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveNode(class Microsoft.CodeAnalysis.SyntaxNode node, valuetype Microsoft.CodeAnalysis.SyntaxRemoveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.RemoveNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxRemoveOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveNode (node As SyntaxNode, options As SyntaxRemoveOptions)" />
      <MemberSignature Language="F#" Value="member this.RemoveNode : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxRemoveOptions -&gt; unit" Usage="syntaxEditor.RemoveNode (node, options)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveNode(Microsoft::CodeAnalysis::SyntaxNode ^ node, Microsoft::CodeAnalysis::SyntaxRemoveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.SyntaxRemoveOptions" />
      </Parameters>
      <Docs>
        <param name="node">The node to remove that currently exists as part of the tree.</param>
        <param name="options">Options that affect how node removal works.</param>
        <summary>
            Remove the node from the tree.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceNode">
      <MemberSignature Language="C#" Value="public void ReplaceNode (Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.SyntaxNode newNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceNode(class Microsoft.CodeAnalysis.SyntaxNode node, class Microsoft.CodeAnalysis.SyntaxNode newNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceNode (node As SyntaxNode, newNode As SyntaxNode)" />
      <MemberSignature Language="F#" Value="member this.ReplaceNode : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode -&gt; unit" Usage="syntaxEditor.ReplaceNode (node, newNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceNode(Microsoft::CodeAnalysis::SyntaxNode ^ node, Microsoft::CodeAnalysis::SyntaxNode ^ newNode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="newNode" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">The node to replace that already exists in the tree.</param>
        <param name="newNode">The new node that will be placed into the tree in the existing node's location.</param>
        <summary>
            Replace the specified node with a different node.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceNode">
      <MemberSignature Language="C#" Value="public void ReplaceNode (Microsoft.CodeAnalysis.SyntaxNode node, Func&lt;Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.CodeAnalysis.SyntaxNode&gt; computeReplacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceNode(class Microsoft.CodeAnalysis.SyntaxNode node, class System.Func`3&lt;class Microsoft.CodeAnalysis.SyntaxNode, class Microsoft.CodeAnalysis.Editing.SyntaxGenerator, class Microsoft.CodeAnalysis.SyntaxNode&gt; computeReplacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceNode(Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.CodeAnalysis.SyntaxNode})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceNode (node As SyntaxNode, computeReplacement As Func(Of SyntaxNode, SyntaxGenerator, SyntaxNode))" />
      <MemberSignature Language="F#" Value="member this.ReplaceNode : Microsoft.CodeAnalysis.SyntaxNode * Func&lt;Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.Editing.SyntaxGenerator, Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; unit" Usage="syntaxEditor.ReplaceNode (node, computeReplacement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceNode(Microsoft::CodeAnalysis::SyntaxNode ^ node, Func&lt;Microsoft::CodeAnalysis::SyntaxNode ^, Microsoft::CodeAnalysis::Editing::SyntaxGenerator ^, Microsoft::CodeAnalysis::SyntaxNode ^&gt; ^ computeReplacement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="computeReplacement" Type="System.Func&lt;Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Editing.SyntaxGenerator,Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="node">The node to replace that already exists in the tree.</param>
        <param name="computeReplacement">A function that computes a replacement node. 
            The node passed into the compute function includes changes from prior edits. It will not appear as a descendant of the original root.</param>
        <summary>
            Replace the specified node with a node produced by the function.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackNode">
      <MemberSignature Language="C#" Value="public void TrackNode (Microsoft.CodeAnalysis.SyntaxNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrackNode(class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Editing.SyntaxEditor.TrackNode(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrackNode (node As SyntaxNode)" />
      <MemberSignature Language="F#" Value="member this.TrackNode : Microsoft.CodeAnalysis.SyntaxNode -&gt; unit" Usage="syntaxEditor.TrackNode node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrackNode(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
            Makes sure the node is tracked, even if it is not changed.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>