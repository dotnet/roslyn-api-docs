<Type Name="OperationExtensions" FullName="Microsoft.CodeAnalysis.Semantics.OperationExtensions">
  <TypeSignature Language="C#" Value="public static class OperationExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit OperationExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Semantics.OperationExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module OperationExtensions" />
  <TypeSignature Language="F#" Value="type OperationExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Descendants">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt; Descendants (this Microsoft.CodeAnalysis.IOperation operation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.IOperation&gt; Descendants(class Microsoft.CodeAnalysis.IOperation operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Semantics.OperationExtensions.Descendants(Microsoft.CodeAnalysis.IOperation)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Descendants (operation As IOperation) As IEnumerable(Of IOperation)" />
      <MemberSignature Language="F#" Value="static member Descendants : Microsoft.CodeAnalysis.IOperation -&gt; seq&lt;Microsoft.CodeAnalysis.IOperation&gt;" Usage="Microsoft.CodeAnalysis.Semantics.OperationExtensions.Descendants operation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operation" Type="Microsoft.CodeAnalysis.IOperation" RefType="this" />
      </Parameters>
      <Docs>
        <param name="operation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DescendantsAndSelf">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt; DescendantsAndSelf (this Microsoft.CodeAnalysis.IOperation operation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.IOperation&gt; DescendantsAndSelf(class Microsoft.CodeAnalysis.IOperation operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Semantics.OperationExtensions.DescendantsAndSelf(Microsoft.CodeAnalysis.IOperation)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DescendantsAndSelf (operation As IOperation) As IEnumerable(Of IOperation)" />
      <MemberSignature Language="F#" Value="static member DescendantsAndSelf : Microsoft.CodeAnalysis.IOperation -&gt; seq&lt;Microsoft.CodeAnalysis.IOperation&gt;" Usage="Microsoft.CodeAnalysis.Semantics.OperationExtensions.DescendantsAndSelf operation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operation" Type="Microsoft.CodeAnalysis.IOperation" RefType="this" />
      </Parameters>
      <Docs>
        <param name="operation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredVariables">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ILocalSymbol&gt; GetDeclaredVariables (this Microsoft.CodeAnalysis.Semantics.IVariableDeclarationStatement declarationStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.ILocalSymbol&gt; GetDeclaredVariables(class Microsoft.CodeAnalysis.Semantics.IVariableDeclarationStatement declarationStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Semantics.OperationExtensions.GetDeclaredVariables(Microsoft.CodeAnalysis.Semantics.IVariableDeclarationStatement)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredVariables (declarationStatement As IVariableDeclarationStatement) As ImmutableArray(Of ILocalSymbol)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredVariables : Microsoft.CodeAnalysis.Semantics.IVariableDeclarationStatement -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ILocalSymbol&gt;" Usage="Microsoft.CodeAnalysis.Semantics.OperationExtensions.GetDeclaredVariables declarationStatement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ILocalSymbol&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declarationStatement" Type="Microsoft.CodeAnalysis.Semantics.IVariableDeclarationStatement" RefType="this" />
      </Parameters>
      <Docs>
        <param name="declarationStatement">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRootOperation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IOperation GetRootOperation (this Microsoft.CodeAnalysis.ISymbol symbol, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.IOperation GetRootOperation(class Microsoft.CodeAnalysis.ISymbol symbol, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Semantics.OperationExtensions.GetRootOperation(Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetRootOperation : Microsoft.CodeAnalysis.ISymbol * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IOperation" Usage="Microsoft.CodeAnalysis.Semantics.OperationExtensions.GetRootOperation (symbol, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.ISymbol" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="symbol">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>