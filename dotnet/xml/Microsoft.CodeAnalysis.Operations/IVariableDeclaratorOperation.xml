<Type Name="IVariableDeclaratorOperation" FullName="Microsoft.CodeAnalysis.Operations.IVariableDeclaratorOperation">
  <TypeSignature Language="C#" Value="public interface IVariableDeclaratorOperation : Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IVariableDeclaratorOperation implements class Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Operations.IVariableDeclaratorOperation" />
  <TypeSignature Language="VB.NET" Value="Public Interface IVariableDeclaratorOperation&#xA;Implements IOperation" />
  <TypeSignature Language="F#" Value="type IVariableDeclaratorOperation = interface&#xA;    interface IOperation" />
  <TypeSignature Language="C++ CLI" Value="public interface class IVariableDeclaratorOperation : Microsoft::CodeAnalysis::IOperation" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.CodeAnalysis.IOperation</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
             Represents a single variable declarator and initializer.
             </summary>
    <remarks>
             In VB, the initializer for this node is only ever used for explicit array bounds initializers. This node corresponds to
             the VariableDeclaratorSyntax in C# and the ModifiedIdentifierSyntax in VB.
            
             This interface is reserved for implementation by its associated APIs. We reserve the right to
             change it in the future.
             </remarks>
    <para>
             Current Usage:
               (1) C# variable declarator
               (2) C# catch variable declaration
               (3) VB single variable declaration
               (4) VB catch variable declaration
             </para>
  </Docs>
  <Members>
    <Member MemberName="IgnoredArguments">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt; IgnoredArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.IOperation&gt; IgnoredArguments" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IVariableDeclaratorOperation.IgnoredArguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IgnoredArguments As ImmutableArray(Of IOperation)" />
      <MemberSignature Language="F#" Value="member this.IgnoredArguments : System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt;" Usage="Microsoft.CodeAnalysis.Operations.IVariableDeclaratorOperation.IgnoredArguments" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::IOperation ^&gt; IgnoredArguments { System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::IOperation ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Additional arguments supplied to the declarator in error cases, ignored by the compiler. This only used for the C# case of
            DeclaredArgumentSyntax nodes on a VariableDeclaratorSyntax.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initializer">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Operations.IVariableInitializerOperation Initializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.Operations.IVariableInitializerOperation Initializer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IVariableDeclaratorOperation.Initializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Initializer As IVariableInitializerOperation" />
      <MemberSignature Language="F#" Value="member this.Initializer : Microsoft.CodeAnalysis.Operations.IVariableInitializerOperation" Usage="Microsoft.CodeAnalysis.Operations.IVariableDeclaratorOperation.Initializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::Operations::IVariableInitializerOperation ^ Initializer { Microsoft::CodeAnalysis::Operations::IVariableInitializerOperation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Operations.IVariableInitializerOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Optional initializer of the variable.
            </summary>
        <value>To be added.</value>
        <remarks>
            If this variable is in an <see cref="T:Microsoft.CodeAnalysis.Operations.IVariableDeclarationOperation" />, the initializer may be located
            in the parent operation. Call <see cref="M:Microsoft.CodeAnalysis.Operations.OperationExtensions.GetVariableInitializer(Microsoft.CodeAnalysis.Operations.IVariableDeclaratorOperation)" />
            to check in all locations. It is only possible to have initializers in both locations in VB invalid code scenarios.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Symbol">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.ILocalSymbol Symbol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.ILocalSymbol Symbol" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IVariableDeclaratorOperation.Symbol" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Symbol As ILocalSymbol" />
      <MemberSignature Language="F#" Value="member this.Symbol : Microsoft.CodeAnalysis.ILocalSymbol" Usage="Microsoft.CodeAnalysis.Operations.IVariableDeclaratorOperation.Symbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::ILocalSymbol ^ Symbol { Microsoft::CodeAnalysis::ILocalSymbol ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ILocalSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Symbol declared by this variable declaration
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>