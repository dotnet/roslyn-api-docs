<Type Name="IForLoopStatement" FullName="Microsoft.CodeAnalysis.Semantics.IForLoopStatement">
  <TypeSignature Language="C#" Value="public interface IForLoopStatement : Microsoft.CodeAnalysis.Semantics.IForWhileUntilLoopStatement" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IForLoopStatement implements class Microsoft.CodeAnalysis.IOperation, class Microsoft.CodeAnalysis.Semantics.IForWhileUntilLoopStatement, class Microsoft.CodeAnalysis.Semantics.ILoopStatement" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Semantics.IForLoopStatement" />
  <TypeSignature Language="VB.NET" Value="Public Interface IForLoopStatement&#xA;Implements IForWhileUntilLoopStatement" />
  <TypeSignature Language="F#" Value="type IForLoopStatement = interface&#xA;    interface IForWhileUntilLoopStatement&#xA;    interface ILoopStatement&#xA;    interface IOperation" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.CodeAnalysis.Semantics.IForWhileUntilLoopStatement</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents a C# for statement or a VB For statement.
            </summary>
    <remarks>
            This interface is reserved for implementation by its associated APIs. We reserve the right to
            change it in the future.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="AtLoopBottom">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt; AtLoopBottom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.IOperation&gt; AtLoopBottom" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Semantics.IForLoopStatement.AtLoopBottom" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AtLoopBottom As ImmutableArray(Of IOperation)" />
      <MemberSignature Language="F#" Value="member this.AtLoopBottom : System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt;" Usage="Microsoft.CodeAnalysis.Semantics.IForLoopStatement.AtLoopBottom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Statements to execute at the bottom of the loop. For C# these come from the third clause of the for statement. For VB these increment the index variable of the For statement.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Before">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt; Before { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.IOperation&gt; Before" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Semantics.IForLoopStatement.Before" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Before As ImmutableArray(Of IOperation)" />
      <MemberSignature Language="F#" Value="member this.Before : System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt;" Usage="Microsoft.CodeAnalysis.Semantics.IForLoopStatement.Before" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IOperation&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Statements to execute before entry to the loop. For C# these come from the first clause of the for statement. For VB these initialize the index variable of the For statement.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Locals">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ILocalSymbol&gt; Locals { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.ILocalSymbol&gt; Locals" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Semantics.IForLoopStatement.Locals" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Locals As ImmutableArray(Of ILocalSymbol)" />
      <MemberSignature Language="F#" Value="member this.Locals : System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ILocalSymbol&gt;" Usage="Microsoft.CodeAnalysis.Semantics.IForLoopStatement.Locals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ILocalSymbol&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Declarations local to the loop.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>