<Type Name="CodeFixProvider" FullName="Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider">
  <TypeSignature Language="C#" Value="public abstract class CodeFixProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CodeFixProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeFixProvider" />
  <TypeSignature Language="F#" Value="type CodeFixProvider = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Implement this type to provide fixes for source code problems.
            Remember to use <see cref="T:Microsoft.CodeAnalysis.CodeFixes.ExportCodeFixProviderAttribute" /> so the host environment can offer your fixes in a UI.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeFixProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FixableDiagnosticIds">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Immutable.ImmutableArray&lt;string&gt; FixableDiagnosticIds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;string&gt; FixableDiagnosticIds" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.FixableDiagnosticIds" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property FixableDiagnosticIds As ImmutableArray(Of String)" />
      <MemberSignature Language="F#" Value="member this.FixableDiagnosticIds : System.Collections.Immutable.ImmutableArray&lt;string&gt;" Usage="Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.FixableDiagnosticIds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A list of diagnostic IDs that this provider can provider fixes for.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFixAllProvider">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.CodeFixes.FixAllProvider GetFixAllProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.CodeFixes.FixAllProvider GetFixAllProvider() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.GetFixAllProvider" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFixAllProvider () As FixAllProvider" />
      <MemberSignature Language="F#" Value="abstract member GetFixAllProvider : unit -&gt; Microsoft.CodeAnalysis.CodeFixes.FixAllProvider&#xA;override this.GetFixAllProvider : unit -&gt; Microsoft.CodeAnalysis.CodeFixes.FixAllProvider" Usage="codeFixProvider.GetFixAllProvider " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CodeFixes.FixAllProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets an optional <see cref="T:Microsoft.CodeAnalysis.CodeFixes.FixAllProvider" /> that can fix all/multiple occurrences of diagnostics fixed by this code fix provider.
            Return null if the provider doesn't support fix all/multiple occurrences.
            Otherwise, you can return any of the well known fix all providers from <see cref="T:Microsoft.CodeAnalysis.CodeFixes.WellKnownFixAllProviders" /> or implement your own fix all provider.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterCodeFixesAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task RegisterCodeFixesAsync (Microsoft.CodeAnalysis.CodeFixes.CodeFixContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RegisterCodeFixesAsync(valuetype Microsoft.CodeAnalysis.CodeFixes.CodeFixContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function RegisterCodeFixesAsync (context As CodeFixContext) As Task" />
      <MemberSignature Language="F#" Value="abstract member RegisterCodeFixesAsync : Microsoft.CodeAnalysis.CodeFixes.CodeFixContext -&gt; System.Threading.Tasks.Task" Usage="codeFixProvider.RegisterCodeFixesAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.CodeAnalysis.CodeFixes.CodeFixContext" />
      </Parameters>
      <Docs>
        <param name="context">
            A <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext" /> containing context information about the diagnostics to fix.
            The context must only contain diagnostics with an <see cref="P:Microsoft.CodeAnalysis.Diagnostic.Id" /> included in the <see cref="P:Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.FixableDiagnosticIds" /> for the current provider.
            </param>
        <summary>
            Computes one or more fixes for the specified <see cref="T:Microsoft.CodeAnalysis.CodeFixes.CodeFixContext" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>