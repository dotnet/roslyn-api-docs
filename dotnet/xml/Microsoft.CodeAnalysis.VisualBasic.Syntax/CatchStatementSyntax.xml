<Type Name="CatchStatementSyntax" FullName="Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax">
  <TypeSignature Language="C#" Value="public sealed class CatchStatementSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CatchStatementSyntax extends Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CatchStatementSyntax&#xA;Inherits StatementSyntax" />
  <TypeSignature Language="F#" Value="type CatchStatementSyntax = class&#xA;    inherit StatementSyntax" />
  <TypeSignature Language="C++ CLI" Value="public ref class CatchStatementSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax" />
  <TypeSignature Language="C++ CX" Value="public ref class CatchStatementSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax" />
  <TypeSignature Language="C++ WINRT" Value="class CatchStatementSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
 Represents the "Catch ... When ..." statement that begins a "Catch" block.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public override void Accept (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Accept(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax.Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Accept (visitor As VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor -&gt; unit" Usage="catchStatementSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value=" override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public override TResult Accept&lt;TResult&gt; (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt; visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!TResult Accept&lt;TResult&gt;(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor`1&lt;!!TResult&gt; visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax.Accept``1(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Accept(Of TResult) (visitor As VisualBasicSyntaxVisitor(Of TResult)) As TResult" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;'Result&gt; -&gt; 'Result" Usage="catchStatementSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor&lt;TResult&gt; ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor&lt;TResult&gt; const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsClause">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax AsClause { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax AsClause" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax.AsClause" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsClause As SimpleAsClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.AsClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax.AsClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ AsClause { Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ AsClause { Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 A simple "As" clause specifying the type of exception to catch.
 </summary>
        <value>To be added.</value>
        <remarks>
 This child is optional. If it is not present, then Nothing is returned.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchKeyword">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxToken CatchKeyword { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken CatchKeyword" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax.CatchKeyword" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CatchKeyword As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.CatchKeyword : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax.CatchKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxToken CatchKeyword { Microsoft::CodeAnalysis::SyntaxToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The "Catch" keyword.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IdentifierName">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax IdentifierName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax IdentifierName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax.IdentifierName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IdentifierName As IdentifierNameSyntax" />
      <MemberSignature Language="F#" Value="member this.IdentifierName : Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax.IdentifierName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ IdentifierName { Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ IdentifierName { Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 An identifier declaring a new variable or naming an existing variable to store
 the exception caught by the "Catch" statement.
 </summary>
        <value>To be added.</value>
        <remarks>
 This child is optional. If it is not present, then Nothing is returned.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax Update (Microsoft.CodeAnalysis.SyntaxToken catchKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax identifierName, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax whenClause);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax Update(valuetype Microsoft.CodeAnalysis.SyntaxToken catchKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax identifierName, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax whenClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (catchKeyword As SyntaxToken, identifierName As IdentifierNameSyntax, asClause As SimpleAsClauseSyntax, whenClause As CatchFilterClauseSyntax) As CatchStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.Update : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax" Usage="catchStatementSyntax.Update (catchKeyword, identifierName, asClause, whenClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax ^ Update(Microsoft::CodeAnalysis::SyntaxToken catchKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ identifierName, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax ^ whenClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catchKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifierName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
        <Parameter Name="whenClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="catchKeyword">
 The value for the CatchKeyword property.
 </param>
        <param name="identifierName">
 The value for the IdentifierName property.
 </param>
        <param name="asClause">
 The value for the AsClause property.
 </param>
        <param name="whenClause">
 The value for the WhenClause property.
 </param>
        <summary>
 Returns a copy of this with the specified changes. Returns this instance if
 there are no actual changes.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhenClause">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax WhenClause { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax WhenClause" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax.WhenClause" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhenClause As CatchFilterClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.WhenClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax.WhenClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax ^ WhenClause { Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax ^ WhenClause { Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 A "When" clause to filter exceptions before catching.
 </summary>
        <value>To be added.</value>
        <remarks>
 This child is optional. If it is not present, then Nothing is returned.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAsClause">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax WithAsClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax WithAsClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax.WithAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithAsClause (asClause As SimpleAsClauseSyntax) As CatchStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.WithAsClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax" Usage="catchStatementSyntax.WithAsClause asClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax ^ WithAsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax ^ WithAsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax WithAsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax const &amp; asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="asClause">To be added.</param>
        <summary>
 Returns a copy of this with the AsClause property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithCatchKeyword">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax WithCatchKeyword (Microsoft.CodeAnalysis.SyntaxToken catchKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax WithCatchKeyword(valuetype Microsoft.CodeAnalysis.SyntaxToken catchKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax.WithCatchKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithCatchKeyword (catchKeyword As SyntaxToken) As CatchStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.WithCatchKeyword : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax" Usage="catchStatementSyntax.WithCatchKeyword catchKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax ^ WithCatchKeyword(Microsoft::CodeAnalysis::SyntaxToken catchKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catchKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="catchKeyword">To be added.</param>
        <summary>
 Returns a copy of this with the CatchKeyword property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithIdentifierName">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax WithIdentifierName (Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax identifierName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax WithIdentifierName(class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax identifierName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax.WithIdentifierName(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithIdentifierName (identifierName As IdentifierNameSyntax) As CatchStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.WithIdentifierName : Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax" Usage="catchStatementSyntax.WithIdentifierName identifierName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax ^ WithIdentifierName(Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ identifierName);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax ^ WithIdentifierName(Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ identifierName);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax WithIdentifierName(Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax const &amp; identifierName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifierName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
      </Parameters>
      <Docs>
        <param name="identifierName">To be added.</param>
        <summary>
 Returns a copy of this with the IdentifierName property changed to the
 specified value. Returns this instance if the specified value is the same as
 the current value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithWhenClause">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax WithWhenClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax whenClause);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax WithWhenClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax whenClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax.WithWhenClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithWhenClause (whenClause As CatchFilterClauseSyntax) As CatchStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.WithWhenClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax" Usage="catchStatementSyntax.WithWhenClause whenClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax ^ WithWhenClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax ^ whenClause);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax ^ WithWhenClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax ^ whenClause);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax WithWhenClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax const &amp; whenClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whenClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="whenClause">To be added.</param>
        <summary>
 Returns a copy of this with the WhenClause property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>