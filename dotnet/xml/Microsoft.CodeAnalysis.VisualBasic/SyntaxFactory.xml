<Type Name="SyntaxFactory" FullName="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory">
  <TypeSignature Language="C#" Value="public class SyntaxFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SyntaxFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class SyntaxFactory" />
  <TypeSignature Language="F#" Value="type SyntaxFactory = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class SyntaxFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SyntaxFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SyntaxFactory();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax AccessorBlock (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax AccessorBlock(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AccessorBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AccessorBlock (kind As SyntaxKind, accessorStatement As AccessorStatementSyntax, endAccessorStatement As EndBlockStatementSyntax) As AccessorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member AccessorBlock : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AccessorBlock (kind, accessorStatement, endAccessorStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ AccessorBlock(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ accessorStatement, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endAccessorStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="accessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
        <Parameter Name="endAccessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of AccessorBlockSyntax.
 One of GetAccessorBlock, SetAccessorBlock, AddHandlerAccessorBlock,
 RemoveHandlerAccessorBlock, RaiseEventAccessorBlock.
 </param>
        <param name="accessorStatement">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" statement that
 begins the accessor block.
 </param>
        <param name="endAccessorStatement">
 The "End Get", "End Set", "End AddHandler", "End RemoveHandler", or "End
 RaiseEvent" statement that ends the accessor block.
 </param>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax AccessorBlock (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax AccessorBlock(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AccessorBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AccessorBlock (kind As SyntaxKind, accessorStatement As AccessorStatementSyntax, statements As SyntaxList(Of StatementSyntax), endAccessorStatement As EndBlockStatementSyntax) As AccessorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member AccessorBlock : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AccessorBlock (kind, accessorStatement, statements, endAccessorStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ AccessorBlock(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ accessorStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endAccessorStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="accessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endAccessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of AccessorBlockSyntax.
 One of GetAccessorBlock, SetAccessorBlock, AddHandlerAccessorBlock,
 RemoveHandlerAccessorBlock, RaiseEventAccessorBlock.
 </param>
        <param name="accessorStatement">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" statement that
 begins the accessor block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <param name="endAccessorStatement">
 The "End Get", "End Set", "End AddHandler", "End RemoveHandler", or "End
 RaiseEvent" statement that ends the accessor block.
 </param>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AccessorStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken accessorKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AccessorStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken accessorKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AccessorStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AccessorStatement (kind As SyntaxKind, accessorKeyword As SyntaxToken) As AccessorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member AccessorStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AccessorStatement (kind, accessorKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ AccessorStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken accessorKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="accessorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 AccessorStatementSyntax. One of GetAccessorStatement, SetAccessorStatement,
 AddHandlerAccessorStatement, RemoveHandlerAccessorStatement,
 RaiseEventAccessorStatement.
 </param>
        <param name="accessorKeyword">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" keyword that
 introduces this accessor declaration.
 </param>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AccessorStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AccessorStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AccessorStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AccessorStatement (kind As SyntaxKind, attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, accessorKeyword As SyntaxToken, parameterList As ParameterListSyntax) As AccessorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member AccessorStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AccessorStatement (kind, attributeLists, modifiers, accessorKeyword, parameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ AccessorStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken accessorKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="accessorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 AccessorStatementSyntax. One of GetAccessorStatement, SetAccessorStatement,
 AddHandlerAccessorStatement, RemoveHandlerAccessorStatement,
 RaiseEventAccessorStatement.
 </param>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="accessorKeyword">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" keyword that
 introduces this accessor declaration.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax AddAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax AddAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignmentStatement (left As ExpressionSyntax, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member AddAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddAssignmentStatement (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ AddAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax AddAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax AddAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignmentStatement (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member AddAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddAssignmentStatement (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ AddAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="operatorToken">
 The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
 "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax AddExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax AddExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AddExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ AddExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax AddExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax AddExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AddExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ AddExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandlerAccessorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax AddHandlerAccessorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax AddHandlerAccessorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddHandlerAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddHandlerAccessorBlock (accessorStatement As AccessorStatementSyntax) As AccessorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member AddHandlerAccessorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddHandlerAccessorBlock accessorStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ AddHandlerAccessorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ accessorStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="accessorStatement">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" statement that
 begins the accessor block.
 </param>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandlerAccessorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax AddHandlerAccessorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax AddHandlerAccessorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddHandlerAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddHandlerAccessorBlock (accessorStatement As AccessorStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As AccessorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member AddHandlerAccessorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddHandlerAccessorBlock (accessorStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ AddHandlerAccessorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ accessorStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="accessorStatement">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" statement that
 begins the accessor block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandlerAccessorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax AddHandlerAccessorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax AddHandlerAccessorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddHandlerAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddHandlerAccessorBlock (accessorStatement As AccessorStatementSyntax, statements As SyntaxList(Of StatementSyntax), endAccessorStatement As EndBlockStatementSyntax) As AccessorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member AddHandlerAccessorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddHandlerAccessorBlock (accessorStatement, statements, endAccessorStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ AddHandlerAccessorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ accessorStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endAccessorStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endAccessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="accessorStatement">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" statement that
 begins the accessor block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <param name="endAccessorStatement">
 The "End Get", "End Set", "End AddHandler", "End RemoveHandler", or "End
 RaiseEvent" statement that ends the accessor block.
 </param>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandlerAccessorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AddHandlerAccessorStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AddHandlerAccessorStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddHandlerAccessorStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddHandlerAccessorStatement () As AccessorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member AddHandlerAccessorStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddHandlerAccessorStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ AddHandlerAccessorStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandlerAccessorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AddHandlerAccessorStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AddHandlerAccessorStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddHandlerAccessorStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddHandlerAccessorStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, parameterList As ParameterListSyntax) As AccessorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member AddHandlerAccessorStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddHandlerAccessorStatement (attributeLists, modifiers, parameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ AddHandlerAccessorStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandlerAccessorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AddHandlerAccessorStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax AddHandlerAccessorStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddHandlerAccessorStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddHandlerAccessorStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, accessorKeyword As SyntaxToken, parameterList As ParameterListSyntax) As AccessorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member AddHandlerAccessorStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddHandlerAccessorStatement (attributeLists, modifiers, accessorKeyword, parameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ AddHandlerAccessorStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken accessorKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="accessorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="accessorKeyword">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" keyword that
 introduces this accessor declaration.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandlerStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax AddHandlerStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax AddHandlerStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddHandlerStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddHandlerStatement (eventExpression As ExpressionSyntax, delegateExpression As ExpressionSyntax) As AddRemoveHandlerStatementSyntax" />
      <MemberSignature Language="F#" Value="static member AddHandlerStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddHandlerStatement (eventExpression, delegateExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AddRemoveHandlerStatementSyntax ^ AddHandlerStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ eventExpression, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ delegateExpression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="delegateExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="eventExpression">
 The event being accessed.
 </param>
        <param name="delegateExpression">
 The delegate being added or removed.
 </param>
        <summary>
 Represents an AddHandler or RemoveHandler statement. The Kind property
 determines which one.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandlerStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax AddHandlerStatement (Microsoft.CodeAnalysis.SyntaxToken addHandlerOrRemoveHandlerKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax AddHandlerStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken addHandlerOrRemoveHandlerKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, valuetype Microsoft.CodeAnalysis.SyntaxToken commaToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddHandlerStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddHandlerStatement (addHandlerOrRemoveHandlerKeyword As SyntaxToken, eventExpression As ExpressionSyntax, commaToken As SyntaxToken, delegateExpression As ExpressionSyntax) As AddRemoveHandlerStatementSyntax" />
      <MemberSignature Language="F#" Value="static member AddHandlerStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddHandlerStatement (addHandlerOrRemoveHandlerKeyword, eventExpression, commaToken, delegateExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AddRemoveHandlerStatementSyntax ^ AddHandlerStatement(Microsoft::CodeAnalysis::SyntaxToken addHandlerOrRemoveHandlerKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ eventExpression, Microsoft::CodeAnalysis::SyntaxToken commaToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ delegateExpression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addHandlerOrRemoveHandlerKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="eventExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="commaToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="delegateExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="addHandlerOrRemoveHandlerKeyword">
 The "AddHandler" or "RemoveHandler" keyword.
 </param>
        <param name="eventExpression">
 The event being accessed.
 </param>
        <param name="commaToken">
 The "," token.
 </param>
        <param name="delegateExpression">
 The delegate being added or removed.
 </param>
        <summary>
 Represents an AddHandler or RemoveHandler statement. The Kind property
 determines which one.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRemoveHandlerStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax AddRemoveHandlerStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken addHandlerOrRemoveHandlerKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax AddRemoveHandlerStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken addHandlerOrRemoveHandlerKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddRemoveHandlerStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddRemoveHandlerStatement (kind As SyntaxKind, addHandlerOrRemoveHandlerKeyword As SyntaxToken, eventExpression As ExpressionSyntax, delegateExpression As ExpressionSyntax) As AddRemoveHandlerStatementSyntax" />
      <MemberSignature Language="F#" Value="static member AddRemoveHandlerStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddRemoveHandlerStatement (kind, addHandlerOrRemoveHandlerKeyword, eventExpression, delegateExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AddRemoveHandlerStatementSyntax ^ AddRemoveHandlerStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken addHandlerOrRemoveHandlerKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ eventExpression, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ delegateExpression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="addHandlerOrRemoveHandlerKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="eventExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="delegateExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 AddRemoveHandlerStatementSyntax. One of AddHandlerStatement,
 RemoveHandlerStatement.
 </param>
        <param name="addHandlerOrRemoveHandlerKeyword">
 The "AddHandler" or "RemoveHandler" keyword.
 </param>
        <param name="eventExpression">
 The event being accessed.
 </param>
        <param name="delegateExpression">
 The delegate being added or removed.
 </param>
        <summary>
 Represents an AddHandler or RemoveHandler statement. The Kind property
 determines which one.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRemoveHandlerStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax AddRemoveHandlerStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken addHandlerOrRemoveHandlerKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax AddRemoveHandlerStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken addHandlerOrRemoveHandlerKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, valuetype Microsoft.CodeAnalysis.SyntaxToken commaToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddRemoveHandlerStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddRemoveHandlerStatement (kind As SyntaxKind, addHandlerOrRemoveHandlerKeyword As SyntaxToken, eventExpression As ExpressionSyntax, commaToken As SyntaxToken, delegateExpression As ExpressionSyntax) As AddRemoveHandlerStatementSyntax" />
      <MemberSignature Language="F#" Value="static member AddRemoveHandlerStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddRemoveHandlerStatement (kind, addHandlerOrRemoveHandlerKeyword, eventExpression, commaToken, delegateExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AddRemoveHandlerStatementSyntax ^ AddRemoveHandlerStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken addHandlerOrRemoveHandlerKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ eventExpression, Microsoft::CodeAnalysis::SyntaxToken commaToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ delegateExpression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="addHandlerOrRemoveHandlerKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="eventExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="commaToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="delegateExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 AddRemoveHandlerStatementSyntax. One of AddHandlerStatement,
 RemoveHandlerStatement.
 </param>
        <param name="addHandlerOrRemoveHandlerKeyword">
 The "AddHandler" or "RemoveHandler" keyword.
 </param>
        <param name="eventExpression">
 The event being accessed.
 </param>
        <param name="commaToken">
 The "," token.
 </param>
        <param name="delegateExpression">
 The delegate being added or removed.
 </param>
        <summary>
 Represents an AddHandler or RemoveHandler statement. The Kind property
 determines which one.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddressOfExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax AddressOfExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax AddressOfExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddressOfExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddressOfExpression (operand As ExpressionSyntax) As UnaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AddressOfExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddressOfExpression operand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::UnaryExpressionSyntax ^ AddressOfExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ operand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="operand">
 The expression being operated on.
 </param>
        <summary>
 Describes a unary operator: Plus, Negate, Not or AddressOf.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddressOfExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax AddressOfExpression (Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax AddressOfExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddressOfExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddressOfExpression (operatorToken As SyntaxToken, operand As ExpressionSyntax) As UnaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AddressOfExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AddressOfExpression (operatorToken, operand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::UnaryExpressionSyntax ^ AddressOfExpression(Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ operand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operand" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="operatorToken">
 The token that is the operator.
 </param>
        <param name="operand">
 The expression being operated on.
 </param>
        <summary>
 Describes a unary operator: Plus, Negate, Not or AddressOf.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AggregateClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax AggregateClause (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; variables, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; aggregationVariables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax AggregateClause(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; variables, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; aggregationVariables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AggregateClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax},Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AggregateClause (variables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As AggregateClauseSyntax" />
      <MemberSignature Language="F#" Value="static member AggregateClause : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AggregateClause (variables, aggregationVariables)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregateClauseSyntax ^ AggregateClause(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^&gt; variables, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregationRangeVariableSyntax ^&gt; aggregationVariables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt;" />
        <Parameter Name="aggregationVariables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">
 The list of collection range variables declared by this Aggregate operator.
 </param>
        <param name="aggregationVariables">
 The list of new variables being defined by the aggregation.
 </param>
        <summary>
 Represents an Aggregate query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AggregateClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax AggregateClause (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; variables, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax&gt; additionalQueryOperators, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; aggregationVariables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax AggregateClause(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; variables, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax&gt; additionalQueryOperators, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; aggregationVariables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AggregateClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax},Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AggregateClause (variables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), additionalQueryOperators As SyntaxList(Of QueryClauseSyntax), aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As AggregateClauseSyntax" />
      <MemberSignature Language="F#" Value="static member AggregateClause : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax&gt; * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AggregateClause (variables, additionalQueryOperators, aggregationVariables)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregateClauseSyntax ^ AggregateClause(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^&gt; variables, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::QueryClauseSyntax ^&gt; additionalQueryOperators, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregationRangeVariableSyntax ^&gt; aggregationVariables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt;" />
        <Parameter Name="additionalQueryOperators" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax&gt;" />
        <Parameter Name="aggregationVariables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">
 The list of collection range variables declared by this Aggregate operator.
 </param>
        <param name="additionalQueryOperators">
 A list of additional query operators. It may be empty.
 </param>
        <param name="aggregationVariables">
 The list of new variables being defined by the aggregation.
 </param>
        <summary>
 Represents an Aggregate query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AggregateClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax AggregateClause (Microsoft.CodeAnalysis.SyntaxToken aggregateKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; variables, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax&gt; additionalQueryOperators, Microsoft.CodeAnalysis.SyntaxToken intoKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; aggregationVariables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax AggregateClause(valuetype Microsoft.CodeAnalysis.SyntaxToken aggregateKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; variables, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax&gt; additionalQueryOperators, valuetype Microsoft.CodeAnalysis.SyntaxToken intoKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; aggregationVariables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AggregateClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AggregateClause (aggregateKeyword As SyntaxToken, variables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), additionalQueryOperators As SyntaxList(Of QueryClauseSyntax), intoKeyword As SyntaxToken, aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As AggregateClauseSyntax" />
      <MemberSignature Language="F#" Value="static member AggregateClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AggregateClause (aggregateKeyword, variables, additionalQueryOperators, intoKeyword, aggregationVariables)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregateClauseSyntax ^ AggregateClause(Microsoft::CodeAnalysis::SyntaxToken aggregateKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^&gt; variables, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::QueryClauseSyntax ^&gt; additionalQueryOperators, Microsoft::CodeAnalysis::SyntaxToken intoKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregationRangeVariableSyntax ^&gt; aggregationVariables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aggregateKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt;" />
        <Parameter Name="additionalQueryOperators" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax&gt;" />
        <Parameter Name="intoKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="aggregationVariables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="aggregateKeyword">
 The "Aggregate" keyword.
 </param>
        <param name="variables">
 The list of collection range variables declared by this Aggregate operator.
 </param>
        <param name="additionalQueryOperators">
 A list of additional query operators. It may be empty.
 </param>
        <param name="intoKeyword">
 The "Into" keyword.
 </param>
        <param name="aggregationVariables">
 The list of new variables being defined by the aggregation.
 </param>
        <summary>
 Represents an Aggregate query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AggregationRangeVariable">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax AggregationRangeVariable (Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationSyntax aggregation);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax AggregationRangeVariable(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationSyntax aggregation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AggregationRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AggregationRangeVariable (aggregation As AggregationSyntax) As AggregationRangeVariableSyntax" />
      <MemberSignature Language="F#" Value="static member AggregationRangeVariable : Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AggregationRangeVariable aggregation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregationRangeVariableSyntax ^ AggregationRangeVariable(Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregationSyntax ^ aggregation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aggregation" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationSyntax" />
      </Parameters>
      <Docs>
        <param name="aggregation">
 The name of the aggregation function. The "Group" aggregation function is
 represented by the identifier "Group".
 </param>
        <summary>
 Describes a single variable of the form "[x [As Type] =] aggregation-function"
 for use in the Into clause of Aggregate or Group By or Group Join query
 operators.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AggregationRangeVariable">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax AggregationRangeVariable (Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax nameEquals, Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationSyntax aggregation);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax AggregationRangeVariable(class Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax nameEquals, class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationSyntax aggregation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AggregationRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AggregationRangeVariable (nameEquals As VariableNameEqualsSyntax, aggregation As AggregationSyntax) As AggregationRangeVariableSyntax" />
      <MemberSignature Language="F#" Value="static member AggregationRangeVariable : Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AggregationRangeVariable (nameEquals, aggregation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregationRangeVariableSyntax ^ AggregationRangeVariable(Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableNameEqualsSyntax ^ nameEquals, Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregationSyntax ^ aggregation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nameEquals" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax" />
        <Parameter Name="aggregation" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationSyntax" />
      </Parameters>
      <Docs>
        <param name="nameEquals">
 The optional name and type of the expression range variable. If omitted, the
 name of the expression range variable is inferred from the aggregation
 expression.
 </param>
        <param name="aggregation">
 The name of the aggregation function. The "Group" aggregation function is
 represented by the identifier "Group".
 </param>
        <summary>
 Describes a single variable of the form "[x [As Type] =] aggregation-function"
 for use in the Into clause of Aggregate or Group By or Group Join query
 operators.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAlsoExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax AndAlsoExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax AndAlsoExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AndAlsoExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAlsoExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AndAlsoExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AndAlsoExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ AndAlsoExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAlsoExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax AndAlsoExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax AndAlsoExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AndAlsoExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAlsoExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AndAlsoExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AndAlsoExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ AndAlsoExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax AndExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax AndExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AndExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AndExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AndExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ AndExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax AndExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax AndExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AndExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AndExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AndExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ AndExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousObjectCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax AnonymousObjectCreationExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax AnonymousObjectCreationExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AnonymousObjectCreationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AnonymousObjectCreationExpression (initializer As ObjectMemberInitializerSyntax) As AnonymousObjectCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AnonymousObjectCreationExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AnonymousObjectCreationExpression initializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AnonymousObjectCreationExpressionSyntax ^ AnonymousObjectCreationExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectMemberInitializerSyntax ^ initializer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax" />
      </Parameters>
      <Docs>
        <param name="initializer">
 The With clause to initialize the new object.
 </param>
        <summary>
 Represents a New expression that create an object of anonymous type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousObjectCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax AnonymousObjectCreationExpression (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax AnonymousObjectCreationExpression(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AnonymousObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AnonymousObjectCreationExpression (attributeLists As SyntaxList(Of AttributeListSyntax), initializer As ObjectMemberInitializerSyntax) As AnonymousObjectCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AnonymousObjectCreationExpression : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AnonymousObjectCreationExpression (attributeLists, initializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AnonymousObjectCreationExpressionSyntax ^ AnonymousObjectCreationExpression(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectMemberInitializerSyntax ^ initializer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on the type. If no attributes were specified, an
 empty list is returned.
 </param>
        <param name="initializer">
 The With clause to initialize the new object.
 </param>
        <summary>
 Represents a New expression that create an object of anonymous type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousObjectCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax AnonymousObjectCreationExpression (Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax AnonymousObjectCreationExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken newKeyword, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AnonymousObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AnonymousObjectCreationExpression (newKeyword As SyntaxToken, attributeLists As SyntaxList(Of AttributeListSyntax), initializer As ObjectMemberInitializerSyntax) As AnonymousObjectCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AnonymousObjectCreationExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AnonymousObjectCreationExpression (newKeyword, attributeLists, initializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AnonymousObjectCreationExpressionSyntax ^ AnonymousObjectCreationExpression(Microsoft::CodeAnalysis::SyntaxToken newKeyword, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectMemberInitializerSyntax ^ initializer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax" />
      </Parameters>
      <Docs>
        <param name="newKeyword">
 The "New" keyword.
 </param>
        <param name="attributeLists">
 A list of all attribute lists on the type. If no attributes were specified, an
 empty list is returned.
 </param>
        <param name="initializer">
 The With clause to initialize the new object.
 </param>
        <summary>
 Represents a New expression that create an object of anonymous type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEquivalent">
      <MemberSignature Language="C#" Value="public static bool AreEquivalent (Microsoft.CodeAnalysis.SyntaxToken oldToken, Microsoft.CodeAnalysis.SyntaxToken newToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool AreEquivalent(valuetype Microsoft.CodeAnalysis.SyntaxToken oldToken, valuetype Microsoft.CodeAnalysis.SyntaxToken newToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreEquivalent (oldToken As SyntaxToken, newToken As SyntaxToken) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEquivalent : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AreEquivalent (oldToken, newToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool AreEquivalent(Microsoft::CodeAnalysis::SyntaxToken oldToken, Microsoft::CodeAnalysis::SyntaxToken newToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="newToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="oldToken">The old token.</param>
        <param name="newToken">The new token.</param>
        <summary>
 Determines if two syntax tokens are the same, disregarding trivia differences.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEquivalent">
      <MemberSignature Language="C#" Value="public static bool AreEquivalent (Microsoft.CodeAnalysis.SyntaxTokenList oldList, Microsoft.CodeAnalysis.SyntaxTokenList newList);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool AreEquivalent(valuetype Microsoft.CodeAnalysis.SyntaxTokenList oldList, valuetype Microsoft.CodeAnalysis.SyntaxTokenList newList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreEquivalent (oldList As SyntaxTokenList, newList As SyntaxTokenList) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEquivalent : Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxTokenList -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AreEquivalent (oldList, newList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool AreEquivalent(Microsoft::CodeAnalysis::SyntaxTokenList oldList, Microsoft::CodeAnalysis::SyntaxTokenList newList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldList" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="newList" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
      </Parameters>
      <Docs>
        <param name="oldList">The old token list.</param>
        <param name="newList">The new token list.</param>
        <summary>
 Determines if two lists of tokens are the same, disregarding trivia differences.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEquivalent">
      <MemberSignature Language="C#" Value="public static bool AreEquivalent (Microsoft.CodeAnalysis.SyntaxNode oldNode, Microsoft.CodeAnalysis.SyntaxNode newNode, bool topLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool AreEquivalent(class Microsoft.CodeAnalysis.SyntaxNode oldNode, class Microsoft.CodeAnalysis.SyntaxNode newNode, bool topLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreEquivalent (oldNode As SyntaxNode, newNode As SyntaxNode, topLevel As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEquivalent : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode * bool -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AreEquivalent (oldNode, newNode, topLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool AreEquivalent(Microsoft::CodeAnalysis::SyntaxNode ^ oldNode, Microsoft::CodeAnalysis::SyntaxNode ^ newNode, bool topLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldNode" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="newNode" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="topLevel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="oldNode">The old node.</param>
        <param name="newNode">The new node.</param>
        <param name="topLevel"> 
 True to ignore any differences of nodes inside bodies of methods, operators, constructors and accessors, and field and auto-property initializers, 
 otherwise all nodes and tokens must be equivalent. 
 </param>
        <summary>
 Determines if two syntax nodes are the same, disregarding trivia differences.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEquivalent">
      <MemberSignature Language="C#" Value="public static bool AreEquivalent (Microsoft.CodeAnalysis.SyntaxNode oldNode, Microsoft.CodeAnalysis.SyntaxNode newNode, Func&lt;Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,bool&gt; ignoreChildNode = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool AreEquivalent(class Microsoft.CodeAnalysis.SyntaxNode oldNode, class Microsoft.CodeAnalysis.SyntaxNode newNode, class System.Func`2&lt;valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind, bool&gt; ignoreChildNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreEquivalent (oldNode As SyntaxNode, newNode As SyntaxNode, Optional ignoreChildNode As Func(Of SyntaxKind, Boolean) = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEquivalent : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.SyntaxNode * Func&lt;Microsoft.CodeAnalysis.VisualBasic.SyntaxKind, bool&gt; -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AreEquivalent (oldNode, newNode, ignoreChildNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldNode" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="newNode" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="ignoreChildNode" Type="System.Func&lt;Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="oldNode">The old node.</param>
        <param name="newNode">The new node.</param>
        <param name="ignoreChildNode">
 If specified called for every child syntax node (not token) that is visited during the comparison. 
 It it returns true the child is recursively visited, otherwise the child and its subtree is disregarded.
 </param>
        <summary>
 Determines if two syntax nodes are the same, disregarding trivia differences.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEquivalent">
      <MemberSignature Language="C#" Value="public static bool AreEquivalent (Microsoft.CodeAnalysis.SyntaxTree oldTree, Microsoft.CodeAnalysis.SyntaxTree newTree, bool topLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool AreEquivalent(class Microsoft.CodeAnalysis.SyntaxTree oldTree, class Microsoft.CodeAnalysis.SyntaxTree newTree, bool topLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AreEquivalent(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreEquivalent (oldTree As SyntaxTree, newTree As SyntaxTree, topLevel As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEquivalent : Microsoft.CodeAnalysis.SyntaxTree * Microsoft.CodeAnalysis.SyntaxTree * bool -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AreEquivalent (oldTree, newTree, topLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool AreEquivalent(Microsoft::CodeAnalysis::SyntaxTree ^ oldTree, Microsoft::CodeAnalysis::SyntaxTree ^ newTree, bool topLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldTree" Type="Microsoft.CodeAnalysis.SyntaxTree" />
        <Parameter Name="newTree" Type="Microsoft.CodeAnalysis.SyntaxTree" />
        <Parameter Name="topLevel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="oldTree">The original tree.</param>
        <param name="newTree">The new tree.</param>
        <param name="topLevel"> 
 True to ignore any differences of nodes inside bodies of methods, operators, constructors and accessors, and field and auto-property initializers, 
 otherwise all nodes and tokens must be equivalent. 
 </param>
        <summary>
 Determines if two trees are the same, disregarding trivia differences.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEquivalent&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static bool AreEquivalent&lt;TNode&gt; (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; oldList, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; newList, Func&lt;Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,bool&gt; ignoreChildNode = null) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static bool AreEquivalent&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; oldList, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; newList, class System.Func`2&lt;valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind, bool&gt; ignoreChildNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},System.Func{Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreEquivalent(Of TNode As SyntaxNode) (oldList As SeparatedSyntaxList(Of TNode), newList As SeparatedSyntaxList(Of TNode), Optional ignoreChildNode As Func(Of SyntaxKind, Boolean) = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEquivalent : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * Func&lt;Microsoft.CodeAnalysis.VisualBasic.SyntaxKind, bool&gt; -&gt; bool (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AreEquivalent (oldList, newList, ignoreChildNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="oldList" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;" />
        <Parameter Name="newList" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;" />
        <Parameter Name="ignoreChildNode" Type="System.Func&lt;Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="oldList">The old list.</param>
        <param name="newList">The new list.</param>
        <param name="ignoreChildNode">
 If specified called for every child syntax node (not token) that is visited during the comparison. 
 It returns true the child is recursively visited, otherwise the child and its subtree is disregarded.
 </param>
        <summary>
 Determines if two lists of syntax nodes are the same, disregarding trivia differences.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEquivalent&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static bool AreEquivalent&lt;TNode&gt; (Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; oldList, Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; newList, Func&lt;Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,bool&gt; ignoreChildNode = null) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static bool AreEquivalent&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!!TNode&gt; oldList, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!!TNode&gt; newList, class System.Func`2&lt;valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind, bool&gt; ignoreChildNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AreEquivalent``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.SyntaxList{``0},System.Func{Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreEquivalent(Of TNode As SyntaxNode) (oldList As SyntaxList(Of TNode), newList As SyntaxList(Of TNode), Optional ignoreChildNode As Func(Of SyntaxKind, Boolean) = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member AreEquivalent : Microsoft.CodeAnalysis.SyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * Func&lt;Microsoft.CodeAnalysis.VisualBasic.SyntaxKind, bool&gt; -&gt; bool (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AreEquivalent (oldList, newList, ignoreChildNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="oldList" Type="Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;" />
        <Parameter Name="newList" Type="Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;" />
        <Parameter Name="ignoreChildNode" Type="System.Func&lt;Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="oldList">The old list.</param>
        <param name="newList">The new list.</param>
        <param name="ignoreChildNode">
 If specified called for every child syntax node (not token) that is visited during the comparison. 
 It returns true the child is recursively visited, otherwise the child and its subtree is disregarded.
 </param>
        <summary>
 Determines if two lists of syntax nodes are the same, disregarding trivia differences.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArgumentList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArgumentList ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArgumentList() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArgumentList" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArgumentList () As ArgumentListSyntax" />
      <MemberSignature Language="F#" Value="static member ArgumentList : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArgumentList " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ ArgumentList();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a parenthesized argument list.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArgumentList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArgumentList (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArgumentList(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArgumentList (arguments As SeparatedSyntaxList(Of ArgumentSyntax)) As ArgumentListSyntax" />
      <MemberSignature Language="F#" Value="static member ArgumentList : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArgumentList arguments" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ ArgumentList(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentSyntax ^&gt; arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="arguments">
 The list of arguments. This may be empty. Omitted argument are represented by
 an OmittedArgumentSyntax node.
 </param>
        <summary>
 Represents a parenthesized argument list.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArgumentList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArgumentList (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax&gt; arguments, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArgumentList(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax&gt; arguments, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArgumentList (openParenToken As SyntaxToken, arguments As SeparatedSyntaxList(Of ArgumentSyntax), closeParenToken As SyntaxToken) As ArgumentListSyntax" />
      <MemberSignature Language="F#" Value="static member ArgumentList : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArgumentList (openParenToken, arguments, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ ArgumentList(Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentSyntax ^&gt; arguments, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax&gt;" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openParenToken">
 The "(" token.
 </param>
        <param name="arguments">
 The list of arguments. This may be empty. Omitted argument are represented by
 an OmittedArgumentSyntax node.
 </param>
        <param name="closeParenToken">
 The ")" token.
 </param>
        <summary>
 Represents a parenthesized argument list.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax ArrayCreationExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax ArrayCreationExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayCreationExpression (type As TypeSyntax, initializer As CollectionInitializerSyntax) As ArrayCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ArrayCreationExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArrayCreationExpression (type, initializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayCreationExpressionSyntax ^ ArrayCreationExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type, Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionInitializerSyntax ^ initializer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax" />
      </Parameters>
      <Docs>
        <param name="type">
 The element type of the array being created.
 </param>
        <param name="initializer">
 The initializer including the braces.
 </param>
        <summary>
 Represents an expression that creates a new array.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax ArrayCreationExpression (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds, Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax ArrayCreationExpression(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayCreationExpression (attributeLists As SyntaxList(Of AttributeListSyntax), type As TypeSyntax, arrayBounds As ArgumentListSyntax, initializer As CollectionInitializerSyntax) As ArrayCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ArrayCreationExpression : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArrayCreationExpression (attributeLists, type, arrayBounds, initializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayCreationExpressionSyntax ^ ArrayCreationExpression(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type, Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ arrayBounds, Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionInitializerSyntax ^ initializer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
        <Parameter Name="arrayBounds" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on the type. If no attributes were specified, an
 empty list is returned.
 </param>
        <param name="type">
 The element type of the array being created.
 </param>
        <param name="arrayBounds">
 The optional array bounds, such as "(4)" or "(0 to 5, 0 To 6)".
 </param>
        <param name="initializer">
 The initializer including the braces.
 </param>
        <summary>
 Represents an expression that creates a new array.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax ArrayCreationExpression (Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax&gt; rankSpecifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax ArrayCreationExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken newKeyword, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax&gt; rankSpecifiers, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayCreationExpression (newKeyword As SyntaxToken, attributeLists As SyntaxList(Of AttributeListSyntax), type As TypeSyntax, arrayBounds As ArgumentListSyntax, rankSpecifiers As SyntaxList(Of ArrayRankSpecifierSyntax), initializer As CollectionInitializerSyntax) As ArrayCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ArrayCreationExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArrayCreationExpression (newKeyword, attributeLists, type, arrayBounds, rankSpecifiers, initializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayCreationExpressionSyntax ^ ArrayCreationExpression(Microsoft::CodeAnalysis::SyntaxToken newKeyword, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type, Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ arrayBounds, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayRankSpecifierSyntax ^&gt; rankSpecifiers, Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionInitializerSyntax ^ initializer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
        <Parameter Name="arrayBounds" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" />
        <Parameter Name="rankSpecifiers" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax&gt;" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax" />
      </Parameters>
      <Docs>
        <param name="newKeyword">
 The "New" keyword.
 </param>
        <param name="attributeLists">
 A list of all attribute lists on the type. If no attributes were specified, an
 empty list is returned.
 </param>
        <param name="type">
 The element type of the array being created.
 </param>
        <param name="arrayBounds">
 The optional array bounds, such as "(4)" or "(0 to 5, 0 To 6)".
 </param>
        <param name="rankSpecifiers">
 A list of array modifiers such as "()" or "(,)". If no array modifiers were
 present, an empty list is returned.
 </param>
        <param name="initializer">
 The initializer including the braces.
 </param>
        <summary>
 Represents an expression that creates a new array.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayRankSpecifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax ArrayRankSpecifier ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax ArrayRankSpecifier() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArrayRankSpecifier" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayRankSpecifier () As ArrayRankSpecifierSyntax" />
      <MemberSignature Language="F#" Value="static member ArrayRankSpecifier : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArrayRankSpecifier " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayRankSpecifierSyntax ^ ArrayRankSpecifier();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a modifier that describes an array type, without bounds, such as
 "()" or "(,)".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayRankSpecifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax ArrayRankSpecifier (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SyntaxTokenList commaTokens, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax ArrayRankSpecifier(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, valuetype Microsoft.CodeAnalysis.SyntaxTokenList commaTokens, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArrayRankSpecifier(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayRankSpecifier (openParenToken As SyntaxToken, commaTokens As SyntaxTokenList, closeParenToken As SyntaxToken) As ArrayRankSpecifierSyntax" />
      <MemberSignature Language="F#" Value="static member ArrayRankSpecifier : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArrayRankSpecifier (openParenToken, commaTokens, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayRankSpecifierSyntax ^ ArrayRankSpecifier(Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::SyntaxTokenList commaTokens, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="commaTokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openParenToken">
 The "(" token.
 </param>
        <param name="commaTokens">
 The comma tokens in the array type. There is one less comma than the rank.
 </param>
        <param name="closeParenToken">
 The ")" token.
 </param>
        <summary>
 Represents a modifier that describes an array type, without bounds, such as
 "()" or "(,)".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax ArrayType (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax elementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax ArrayType(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax elementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArrayType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayType (elementType As TypeSyntax) As ArrayTypeSyntax" />
      <MemberSignature Language="F#" Value="static member ArrayType : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArrayType elementType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayTypeSyntax ^ ArrayType(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ elementType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="elementType">
 The type of the elements of the array.
 </param>
        <summary>
 Represents an array type, such as "A() or "A(,)", without bounds specified for
 the array.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax ArrayType (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax elementType, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax&gt; rankSpecifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax ArrayType(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax elementType, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax&gt; rankSpecifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArrayType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayType (elementType As TypeSyntax, rankSpecifiers As SyntaxList(Of ArrayRankSpecifierSyntax)) As ArrayTypeSyntax" />
      <MemberSignature Language="F#" Value="static member ArrayType : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ArrayType (elementType, rankSpecifiers)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayTypeSyntax ^ ArrayType(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ elementType, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayRankSpecifierSyntax ^&gt; rankSpecifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
        <Parameter Name="rankSpecifiers" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="elementType">
 The type of the elements of the array.
 </param>
        <param name="rankSpecifiers">
 Represents the list of "()" or "(,,)" modifiers on the array type.
 </param>
        <summary>
 Represents an array type, such as "A() or "A(,)", without bounds specified for
 the array.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AscendingOrdering">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax AscendingOrdering (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax AscendingOrdering(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AscendingOrdering(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AscendingOrdering (expression As ExpressionSyntax) As OrderingSyntax" />
      <MemberSignature Language="F#" Value="static member AscendingOrdering : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AscendingOrdering expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OrderingSyntax ^ AscendingOrdering(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression to sort by.
 </param>
        <summary>
 An expression to order by, plus an optional ordering. The Kind indicates
 whether to order in ascending or descending order.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AscendingOrdering">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax AscendingOrdering (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken ascendingOrDescendingKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax AscendingOrdering(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken ascendingOrDescendingKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AscendingOrdering(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AscendingOrdering (expression As ExpressionSyntax, ascendingOrDescendingKeyword As SyntaxToken) As OrderingSyntax" />
      <MemberSignature Language="F#" Value="static member AscendingOrdering : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AscendingOrdering (expression, ascendingOrDescendingKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OrderingSyntax ^ AscendingOrdering(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SyntaxToken ascendingOrDescendingKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="ascendingOrDescendingKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression to sort by.
 </param>
        <param name="ascendingOrDescendingKeyword">
 The "Ascending" or "Descending" keyword, if present. To determine whether to
 sort in ascending or descending order, checking the Kind property is easier.
 </param>
        <summary>
 An expression to order by, plus an optional ordering. The Kind indicates
 whether to order in ascending or descending order.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsNewClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax AsNewClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax newExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax AsNewClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax newExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AsNewClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsNewClause (newExpression As NewExpressionSyntax) As AsNewClauseSyntax" />
      <MemberSignature Language="F#" Value="static member AsNewClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AsNewClause newExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AsNewClauseSyntax ^ AsNewClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::NewExpressionSyntax ^ newExpression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="newExpression">
 The New expression
 </param>
        <summary>
 Represents an "As New {type-name} [arguments] [initializers]" clause in a
 declaration. The type has optional attributes associated with it, although
 attributes are not permitted in many places where this node occurs (they are
 permitted, for example, on automatically implemented properties.)
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsNewClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax AsNewClause (Microsoft.CodeAnalysis.SyntaxToken asKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax newExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax AsNewClause(valuetype Microsoft.CodeAnalysis.SyntaxToken asKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax newExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AsNewClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsNewClause (asKeyword As SyntaxToken, newExpression As NewExpressionSyntax) As AsNewClauseSyntax" />
      <MemberSignature Language="F#" Value="static member AsNewClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AsNewClause (asKeyword, newExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AsNewClauseSyntax ^ AsNewClause(Microsoft::CodeAnalysis::SyntaxToken asKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::NewExpressionSyntax ^ newExpression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="newExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="asKeyword">
 The "As" keyword.
 </param>
        <param name="newExpression">
 The New expression
 </param>
        <summary>
 Represents an "As New {type-name} [arguments] [initializers]" clause in a
 declaration. The type has optional attributes associated with it, although
 attributes are not permitted in many places where this node occurs (they are
 permitted, for example, on automatically implemented properties.)
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax AssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax AssignmentStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AssignmentStatement (kind As SyntaxKind, left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member AssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AssignmentStatement (kind, left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ AssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 AssignmentStatementSyntax. One of SimpleAssignmentStatement,
 MidAssignmentStatement, AddAssignmentStatement, SubtractAssignmentStatement,
 MultiplyAssignmentStatement, DivideAssignmentStatement,
 IntegerDivideAssignmentStatement, ExponentiateAssignmentStatement,
 LeftShiftAssignmentStatement, RightShiftAssignmentStatement,
 ConcatenateAssignmentStatement.
 </param>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="operatorToken">
 The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
 "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax Attribute (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax Attribute(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Attribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Attribute (name As TypeSyntax) As AttributeSyntax" />
      <MemberSignature Language="F#" Value="static member Attribute : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Attribute name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeSyntax ^ Attribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="name">
 The name of the attribute.
 </param>
        <summary>
 Represents a single attribute declaration within an attribute list.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax Attribute (Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax target, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax name, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax Attribute(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax target, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax name, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Attribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Attribute (target As AttributeTargetSyntax, name As TypeSyntax, argumentList As ArgumentListSyntax) As AttributeSyntax" />
      <MemberSignature Language="F#" Value="static member Attribute : Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Attribute (target, name, argumentList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeSyntax ^ Attribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeTargetSyntax ^ target, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ name, Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ argumentList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="target">
 Optional attribute target. Assembly|Module :
 </param>
        <param name="name">
 The name of the attribute.
 </param>
        <param name="argumentList">
 The argument list, if present. If no argument list was supplied, Nothing is
 returned.
 </param>
        <summary>
 Represents a single attribute declaration within an attribute list.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax AttributeList ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax AttributeList() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AttributeList" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AttributeList () As AttributeListSyntax" />
      <MemberSignature Language="F#" Value="static member AttributeList : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AttributeList " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^ AttributeList();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a group of attributes within "&lt;" and "&gt;" brackets.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax AttributeList (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax&gt; attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax AttributeList(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax&gt; attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AttributeList (attributes As SeparatedSyntaxList(Of AttributeSyntax)) As AttributeListSyntax" />
      <MemberSignature Language="F#" Value="static member AttributeList : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AttributeList attributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^ AttributeList(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeSyntax ^&gt; attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="attributes">
 A comma separated list of attribute declarations in this attribute list.
 </param>
        <summary>
 Represents a group of attributes within "&lt;" and "&gt;" brackets.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax AttributeList (Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax&gt; attributes, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax AttributeList(valuetype Microsoft.CodeAnalysis.SyntaxToken lessThanToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax&gt; attributes, valuetype Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AttributeList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AttributeList (lessThanToken As SyntaxToken, attributes As SeparatedSyntaxList(Of AttributeSyntax), greaterThanToken As SyntaxToken) As AttributeListSyntax" />
      <MemberSignature Language="F#" Value="static member AttributeList : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AttributeList (lessThanToken, attributes, greaterThanToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^ AttributeList(Microsoft::CodeAnalysis::SyntaxToken lessThanToken, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeSyntax ^&gt; attributes, Microsoft::CodeAnalysis::SyntaxToken greaterThanToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lessThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax&gt;" />
        <Parameter Name="greaterThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="lessThanToken">
 The "&lt;" token.
 </param>
        <param name="attributes">
 A comma separated list of attribute declarations in this attribute list.
 </param>
        <param name="greaterThanToken">
 The "&gt;" token.
 </param>
        <summary>
 Represents a group of attributes within "&lt;" and "&gt;" brackets.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributesStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax AttributesStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax AttributesStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AttributesStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AttributesStatement () As AttributesStatementSyntax" />
      <MemberSignature Language="F#" Value="static member AttributesStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AttributesStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributesStatementSyntax ^ AttributesStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a file-level attribute, in which the attributes have no other
 syntactic element they are attached to.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributesStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax AttributesStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax AttributesStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AttributesStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AttributesStatement (attributeLists As SyntaxList(Of AttributeListSyntax)) As AttributesStatementSyntax" />
      <MemberSignature Language="F#" Value="static member AttributesStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AttributesStatement attributeLists" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributesStatementSyntax ^ AttributesStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 The list of attribute lists.
 </param>
        <summary>
 Represents a file-level attribute, in which the attributes have no other
 syntactic element they are attached to.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeTarget">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax AttributeTarget (Microsoft.CodeAnalysis.SyntaxToken attributeModifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax AttributeTarget(valuetype Microsoft.CodeAnalysis.SyntaxToken attributeModifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AttributeTarget(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AttributeTarget (attributeModifier As SyntaxToken) As AttributeTargetSyntax" />
      <MemberSignature Language="F#" Value="static member AttributeTarget : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AttributeTarget attributeModifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeTargetSyntax ^ AttributeTarget(Microsoft::CodeAnalysis::SyntaxToken attributeModifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeModifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeModifier">
 The "Assembly" or "Module" attribute modifier, is present. If no attribute
 modifier is present, Nothing is returned.
 </param>
        <summary>
 Represents a single attribute declaration within an attribute list.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeTarget">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax AttributeTarget (Microsoft.CodeAnalysis.SyntaxToken attributeModifier, Microsoft.CodeAnalysis.SyntaxToken colonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax AttributeTarget(valuetype Microsoft.CodeAnalysis.SyntaxToken attributeModifier, valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AttributeTarget(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AttributeTarget (attributeModifier As SyntaxToken, colonToken As SyntaxToken) As AttributeTargetSyntax" />
      <MemberSignature Language="F#" Value="static member AttributeTarget : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AttributeTarget (attributeModifier, colonToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeTargetSyntax ^ AttributeTarget(Microsoft::CodeAnalysis::SyntaxToken attributeModifier, Microsoft::CodeAnalysis::SyntaxToken colonToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeModifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeModifier">
 The "Assembly" or "Module" attribute modifier, is present. If no attribute
 modifier is present, Nothing is returned.
 </param>
        <param name="colonToken">
 The ":" token, if an attribute modifier is present. If no attribute modifier is
 present, Nothing is returned.
 </param>
        <summary>
 Represents a single attribute declaration within an attribute list.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AwaitExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax AwaitExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax AwaitExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AwaitExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AwaitExpression (expression As ExpressionSyntax) As AwaitExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AwaitExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AwaitExpression expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AwaitExpressionSyntax ^ AwaitExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression being awaited.
 </param>
        <summary>
 Represents an Await expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AwaitExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax AwaitExpression (Microsoft.CodeAnalysis.SyntaxToken awaitKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax AwaitExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken awaitKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AwaitExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AwaitExpression (awaitKeyword As SyntaxToken, expression As ExpressionSyntax) As AwaitExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member AwaitExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.AwaitExpression (awaitKeyword, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AwaitExpressionSyntax ^ AwaitExpression(Microsoft::CodeAnalysis::SyntaxToken awaitKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="awaitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="awaitKeyword">
 The "Await" keyword.
 </param>
        <param name="expression">
 The expression being awaited.
 </param>
        <summary>
 Represents an Await expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BadDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax BadDirectiveTrivia ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax BadDirectiveTrivia() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.BadDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BadDirectiveTrivia () As BadDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member BadDirectiveTrivia : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.BadDirectiveTrivia " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BadDirectiveTriviaSyntax ^ BadDirectiveTrivia();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an unrecognized pre-processing directive. This occurs when the
 parser encounters a hash '#' token at the beginning of a physical line but does
 recognize the text that follows as a valid Visual Basic pre-processing
 directive.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BadDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax BadDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax BadDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.BadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BadDirectiveTrivia (hashToken As SyntaxToken) As BadDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member BadDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.BadDirectiveTrivia hashToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BadDirectiveTriviaSyntax ^ BadDirectiveTrivia(Microsoft::CodeAnalysis::SyntaxToken hashToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="hashToken">
 The "#" token in a preprocessor directive.
 </param>
        <summary>
 Represents an unrecognized pre-processing directive. This occurs when the
 parser encounters a hash '#' token at the beginning of a physical line but does
 recognize the text that follows as a valid Visual Basic pre-processing
 directive.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BadToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken BadToken (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken BadToken(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.BadToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BadToken (text As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member BadToken : string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.BadToken text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken BadToken(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BadToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken BadToken (Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken BadToken(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.BadToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BadToken (leadingTrivia As SyntaxTriviaList, text As String, trailingTrivia As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member BadToken : Microsoft.CodeAnalysis.SyntaxTriviaList * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.BadToken (leadingTrivia, text, trailingTrivia)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken BadToken(Microsoft::CodeAnalysis::SyntaxTriviaList leadingTrivia, System::String ^ text, Microsoft::CodeAnalysis::SyntaxTriviaList trailingTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leadingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="trailingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leadingTrivia">To be added.</param>
        <param name="text">To be added.</param>
        <param name="trailingTrivia">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BinaryConditionalExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax BinaryConditionalExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax firstExpression, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax secondExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax BinaryConditionalExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax firstExpression, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax secondExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.BinaryConditionalExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BinaryConditionalExpression (firstExpression As ExpressionSyntax, secondExpression As ExpressionSyntax) As BinaryConditionalExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member BinaryConditionalExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.BinaryConditionalExpression (firstExpression, secondExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryConditionalExpressionSyntax ^ BinaryConditionalExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ firstExpression, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ secondExpression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="firstExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="secondExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="firstExpression">
 The first expression inside the parentheses.
 </param>
        <param name="secondExpression">
 The second expression inside the parentheses.
 </param>
        <summary>
 Represents a conditional expression, If(condition, true-expr, false-expr) or
 If(expr, nothing-expr).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BinaryConditionalExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax BinaryConditionalExpression (Microsoft.CodeAnalysis.SyntaxToken ifKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax firstExpression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax secondExpression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax BinaryConditionalExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken ifKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax firstExpression, valuetype Microsoft.CodeAnalysis.SyntaxToken commaToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax secondExpression, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.BinaryConditionalExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BinaryConditionalExpression (ifKeyword As SyntaxToken, openParenToken As SyntaxToken, firstExpression As ExpressionSyntax, commaToken As SyntaxToken, secondExpression As ExpressionSyntax, closeParenToken As SyntaxToken) As BinaryConditionalExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member BinaryConditionalExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.BinaryConditionalExpression (ifKeyword, openParenToken, firstExpression, commaToken, secondExpression, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryConditionalExpressionSyntax ^ BinaryConditionalExpression(Microsoft::CodeAnalysis::SyntaxToken ifKeyword, Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ firstExpression, Microsoft::CodeAnalysis::SyntaxToken commaToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ secondExpression, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="firstExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="commaToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="secondExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="ifKeyword">
 The "If" keyword
 </param>
        <param name="openParenToken">
 The "(" token
 </param>
        <param name="firstExpression">
 The first expression inside the parentheses.
 </param>
        <param name="commaToken">
 The "," token.
 </param>
        <param name="secondExpression">
 The second expression inside the parentheses.
 </param>
        <param name="closeParenToken">
 The ")" token
 </param>
        <summary>
 Represents a conditional expression, If(condition, true-expr, false-expr) or
 If(expr, nothing-expr).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BinaryExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax BinaryExpression (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax BinaryExpression(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.BinaryExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BinaryExpression (kind As SyntaxKind, left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member BinaryExpression : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.BinaryExpression (kind, left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ BinaryExpression(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 BinaryExpressionSyntax. One of AddExpression, SubtractExpression,
 MultiplyExpression, DivideExpression, IntegerDivideExpression,
 ExponentiateExpression, LeftShiftExpression, RightShiftExpression,
 ConcatenateExpression, ModuloExpression, EqualsExpression, NotEqualsExpression,
 LessThanExpression, LessThanOrEqualExpression, GreaterThanOrEqualExpression,
 GreaterThanExpression, IsExpression, IsNotExpression, LikeExpression,
 OrExpression, ExclusiveOrExpression, AndExpression, OrElseExpression,
 AndAlsoExpression.
 </param>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BracketedIdentifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken BracketedIdentifier (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken BracketedIdentifier(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.BracketedIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BracketedIdentifier (text As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member BracketedIdentifier : string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.BracketedIdentifier text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken BracketedIdentifier(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <summary>
 Create a bracketed identifier.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BracketedIdentifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken BracketedIdentifier (Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken BracketedIdentifier(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.BracketedIdentifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BracketedIdentifier (leadingTrivia As SyntaxTriviaList, text As String, trailingTrivia As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member BracketedIdentifier : Microsoft.CodeAnalysis.SyntaxTriviaList * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.BracketedIdentifier (leadingTrivia, text, trailingTrivia)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken BracketedIdentifier(Microsoft::CodeAnalysis::SyntaxTriviaList leadingTrivia, System::String ^ text, Microsoft::CodeAnalysis::SyntaxTriviaList trailingTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leadingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="trailingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leadingTrivia">To be added.</param>
        <param name="text">To be added.</param>
        <param name="trailingTrivia">To be added.</param>
        <summary>
 Create a bracketed identifier.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CallStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax CallStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax invocation);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax CallStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax invocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CallStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CallStatement (invocation As ExpressionSyntax) As CallStatementSyntax" />
      <MemberSignature Language="F#" Value="static member CallStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CallStatement invocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CallStatementSyntax ^ CallStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ invocation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invocation" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="invocation">
 The expression denoting the call. This could be an Invocation or a MemberAccess
 (in the case where no parentheses were supplied.)
 </param>
        <summary>
 Represent an call statement (also known as a invocation statement).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CallStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax CallStatement (Microsoft.CodeAnalysis.SyntaxToken callKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax invocation);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax CallStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken callKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax invocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CallStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CallStatement (callKeyword As SyntaxToken, invocation As ExpressionSyntax) As CallStatementSyntax" />
      <MemberSignature Language="F#" Value="static member CallStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CallStatement (callKeyword, invocation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CallStatementSyntax ^ CallStatement(Microsoft::CodeAnalysis::SyntaxToken callKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ invocation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="invocation" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="callKeyword">
 The "Call" keyword.
 </param>
        <param name="invocation">
 The expression denoting the call. This could be an Invocation or a MemberAccess
 (in the case where no parentheses were supplied.)
 </param>
        <summary>
 Represent an call statement (also known as a invocation statement).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CarriageReturn">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia CarriageReturn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia CarriageReturn" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CarriageReturn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CarriageReturn As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.CarriageReturn : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CarriageReturn" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::CodeAnalysis::SyntaxTrivia CarriageReturn { Microsoft::CodeAnalysis::SyntaxTrivia get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 A trivia with kind EndOfLineTrivia containing a single carriage return character.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CarriageReturnLineFeed">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia CarriageReturnLineFeed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia CarriageReturnLineFeed" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CarriageReturnLineFeed" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CarriageReturnLineFeed As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.CarriageReturnLineFeed : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CarriageReturnLineFeed" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::CodeAnalysis::SyntaxTrivia CarriageReturnLineFeed { Microsoft::CodeAnalysis::SyntaxTrivia get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 A trivia with kind EndOfLineTrivia containing both the carriage return And line feed characters.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax CaseBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax CaseBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseBlock (caseStatement As CaseStatementSyntax) As CaseBlockSyntax" />
      <MemberSignature Language="F#" Value="static member CaseBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseBlock caseStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseBlockSyntax ^ CaseBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ caseStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caseStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="caseStatement">
 The statement that begins the case block.
 </param>
        <summary>
 Represents a case statement and its subsequent block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax CaseBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax CaseBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseBlock (caseStatement As CaseStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As CaseBlockSyntax" />
      <MemberSignature Language="F#" Value="static member CaseBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseBlock (caseStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseBlockSyntax ^ CaseBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ caseStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caseStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="caseStatement">
 The statement that begins the case block.
 </param>
        <param name="statements">
 The statements contained in the case block. This might be an empty list.
 </param>
        <summary>
 Represents a case statement and its subsequent block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax CaseBlock (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax CaseBlock(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseBlock (kind As SyntaxKind, caseStatement As CaseStatementSyntax) As CaseBlockSyntax" />
      <MemberSignature Language="F#" Value="static member CaseBlock : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseBlock (kind, caseStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseBlockSyntax ^ CaseBlock(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ caseStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="caseStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of CaseBlockSyntax. One
 of CaseBlock, CaseElseBlock.
 </param>
        <param name="caseStatement">
 The statement that begins the case block.
 </param>
        <summary>
 Represents a case statement and its subsequent block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax CaseBlock (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax CaseBlock(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseBlock (kind As SyntaxKind, caseStatement As CaseStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As CaseBlockSyntax" />
      <MemberSignature Language="F#" Value="static member CaseBlock : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseBlock (kind, caseStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseBlockSyntax ^ CaseBlock(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ caseStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="caseStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of CaseBlockSyntax. One
 of CaseBlock, CaseElseBlock.
 </param>
        <param name="caseStatement">
 The statement that begins the case block.
 </param>
        <param name="statements">
 The statements contained in the case block. This might be an empty list.
 </param>
        <summary>
 Represents a case statement and its subsequent block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseElseBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax CaseElseBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax CaseElseBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseElseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseElseBlock (caseStatement As CaseStatementSyntax) As CaseBlockSyntax" />
      <MemberSignature Language="F#" Value="static member CaseElseBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseElseBlock caseStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseBlockSyntax ^ CaseElseBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ caseStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caseStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="caseStatement">
 The statement that begins the case block.
 </param>
        <summary>
 Represents a case statement and its subsequent block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseElseBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax CaseElseBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax CaseElseBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax caseStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseElseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseElseBlock (caseStatement As CaseStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As CaseBlockSyntax" />
      <MemberSignature Language="F#" Value="static member CaseElseBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseElseBlock (caseStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseBlockSyntax ^ CaseElseBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ caseStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caseStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="caseStatement">
 The statement that begins the case block.
 </param>
        <param name="statements">
 The statements contained in the case block. This might be an empty list.
 </param>
        <summary>
 Represents a case statement and its subsequent block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseElseStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseElseStatement (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseElseStatement(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseElseStatement(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseElseStatement (cases As SeparatedSyntaxList(Of CaseClauseSyntax)) As CaseStatementSyntax" />
      <MemberSignature Language="F#" Value="static member CaseElseStatement : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseElseStatement cases" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ CaseElseStatement(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseClauseSyntax ^&gt; cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cases" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="cases">
 A list of clauses associated with this Case. If Kind=CaseElse, then this list
 has exactly one child, which is a ElseCaseClause.
 </param>
        <summary>
 Represents a Case or Case Else statement. This statement is always the Begin of
 a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
 Kind=Case.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseElseStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseElseStatement (params Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseElseStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseElseStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseElseStatement (ParamArray cases As CaseClauseSyntax()) As CaseStatementSyntax" />
      <MemberSignature Language="F#" Value="static member CaseElseStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseElseStatement cases" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ CaseElseStatement(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseClauseSyntax ^&gt; ^ cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cases" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="cases">
 A list of clauses associated with this Case. If Kind=CaseElse, then this list
 has exactly one child, which is a ElseCaseClause.
 </param>
        <summary>
 Represents a Case or Case Else statement. This statement is always the Begin of
 a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
 Kind=Case.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseElseStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseElseStatement (Microsoft.CodeAnalysis.SyntaxToken caseKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseElseStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken caseKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseElseStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseElseStatement (caseKeyword As SyntaxToken, cases As SeparatedSyntaxList(Of CaseClauseSyntax)) As CaseStatementSyntax" />
      <MemberSignature Language="F#" Value="static member CaseElseStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseElseStatement (caseKeyword, cases)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ CaseElseStatement(Microsoft::CodeAnalysis::SyntaxToken caseKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseClauseSyntax ^&gt; cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caseKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="cases" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="caseKeyword">
 The "Case" keyword
 </param>
        <param name="cases">
 A list of clauses associated with this Case. If Kind=CaseElse, then this list
 has exactly one child, which is a ElseCaseClause.
 </param>
        <summary>
 Represents a Case or Case Else statement. This statement is always the Begin of
 a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
 Kind=Case.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseEqualsClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseEqualsClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseEqualsClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseEqualsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseEqualsClause (value As ExpressionSyntax) As RelationalCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CaseEqualsClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseEqualsClause value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RelationalCaseClauseSyntax ^ CaseEqualsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="value">
 The expression that denotes the value being tested against.
 </param>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseEqualsClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseEqualsClause (Microsoft.CodeAnalysis.SyntaxToken isKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseEqualsClause(valuetype Microsoft.CodeAnalysis.SyntaxToken isKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseEqualsClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseEqualsClause (isKeyword As SyntaxToken, operatorToken As SyntaxToken, value As ExpressionSyntax) As RelationalCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CaseEqualsClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseEqualsClause (isKeyword, operatorToken, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RelationalCaseClauseSyntax ^ CaseEqualsClause(Microsoft::CodeAnalysis::SyntaxToken isKeyword, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="isKeyword">
 The "Is" keyword, if present.
 </param>
        <param name="operatorToken">
 The operator in the relational clause. One of "=", "&lt;", "&gt;", "&lt;=" or
 "&gt;=".
 </param>
        <param name="value">
 The expression that denotes the value being tested against.
 </param>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseGreaterThanClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseGreaterThanClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseGreaterThanClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseGreaterThanClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseGreaterThanClause (value As ExpressionSyntax) As RelationalCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CaseGreaterThanClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseGreaterThanClause value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RelationalCaseClauseSyntax ^ CaseGreaterThanClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="value">
 The expression that denotes the value being tested against.
 </param>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseGreaterThanClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseGreaterThanClause (Microsoft.CodeAnalysis.SyntaxToken isKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseGreaterThanClause(valuetype Microsoft.CodeAnalysis.SyntaxToken isKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseGreaterThanClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseGreaterThanClause (isKeyword As SyntaxToken, operatorToken As SyntaxToken, value As ExpressionSyntax) As RelationalCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CaseGreaterThanClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseGreaterThanClause (isKeyword, operatorToken, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RelationalCaseClauseSyntax ^ CaseGreaterThanClause(Microsoft::CodeAnalysis::SyntaxToken isKeyword, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="isKeyword">
 The "Is" keyword, if present.
 </param>
        <param name="operatorToken">
 The operator in the relational clause. One of "=", "&lt;", "&gt;", "&lt;=" or
 "&gt;=".
 </param>
        <param name="value">
 The expression that denotes the value being tested against.
 </param>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseGreaterThanOrEqualClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseGreaterThanOrEqualClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseGreaterThanOrEqualClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseGreaterThanOrEqualClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseGreaterThanOrEqualClause (value As ExpressionSyntax) As RelationalCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CaseGreaterThanOrEqualClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseGreaterThanOrEqualClause value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RelationalCaseClauseSyntax ^ CaseGreaterThanOrEqualClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="value">
 The expression that denotes the value being tested against.
 </param>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseGreaterThanOrEqualClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseGreaterThanOrEqualClause (Microsoft.CodeAnalysis.SyntaxToken isKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseGreaterThanOrEqualClause(valuetype Microsoft.CodeAnalysis.SyntaxToken isKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseGreaterThanOrEqualClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseGreaterThanOrEqualClause (isKeyword As SyntaxToken, operatorToken As SyntaxToken, value As ExpressionSyntax) As RelationalCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CaseGreaterThanOrEqualClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseGreaterThanOrEqualClause (isKeyword, operatorToken, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RelationalCaseClauseSyntax ^ CaseGreaterThanOrEqualClause(Microsoft::CodeAnalysis::SyntaxToken isKeyword, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="isKeyword">
 The "Is" keyword, if present.
 </param>
        <param name="operatorToken">
 The operator in the relational clause. One of "=", "&lt;", "&gt;", "&lt;=" or
 "&gt;=".
 </param>
        <param name="value">
 The expression that denotes the value being tested against.
 </param>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseLessThanClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseLessThanClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseLessThanClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseLessThanClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseLessThanClause (value As ExpressionSyntax) As RelationalCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CaseLessThanClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseLessThanClause value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RelationalCaseClauseSyntax ^ CaseLessThanClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="value">
 The expression that denotes the value being tested against.
 </param>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseLessThanClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseLessThanClause (Microsoft.CodeAnalysis.SyntaxToken isKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseLessThanClause(valuetype Microsoft.CodeAnalysis.SyntaxToken isKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseLessThanClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseLessThanClause (isKeyword As SyntaxToken, operatorToken As SyntaxToken, value As ExpressionSyntax) As RelationalCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CaseLessThanClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseLessThanClause (isKeyword, operatorToken, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RelationalCaseClauseSyntax ^ CaseLessThanClause(Microsoft::CodeAnalysis::SyntaxToken isKeyword, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="isKeyword">
 The "Is" keyword, if present.
 </param>
        <param name="operatorToken">
 The operator in the relational clause. One of "=", "&lt;", "&gt;", "&lt;=" or
 "&gt;=".
 </param>
        <param name="value">
 The expression that denotes the value being tested against.
 </param>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseLessThanOrEqualClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseLessThanOrEqualClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseLessThanOrEqualClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseLessThanOrEqualClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseLessThanOrEqualClause (value As ExpressionSyntax) As RelationalCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CaseLessThanOrEqualClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseLessThanOrEqualClause value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RelationalCaseClauseSyntax ^ CaseLessThanOrEqualClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="value">
 The expression that denotes the value being tested against.
 </param>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseLessThanOrEqualClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseLessThanOrEqualClause (Microsoft.CodeAnalysis.SyntaxToken isKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseLessThanOrEqualClause(valuetype Microsoft.CodeAnalysis.SyntaxToken isKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseLessThanOrEqualClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseLessThanOrEqualClause (isKeyword As SyntaxToken, operatorToken As SyntaxToken, value As ExpressionSyntax) As RelationalCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CaseLessThanOrEqualClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseLessThanOrEqualClause (isKeyword, operatorToken, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RelationalCaseClauseSyntax ^ CaseLessThanOrEqualClause(Microsoft::CodeAnalysis::SyntaxToken isKeyword, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="isKeyword">
 The "Is" keyword, if present.
 </param>
        <param name="operatorToken">
 The operator in the relational clause. One of "=", "&lt;", "&gt;", "&lt;=" or
 "&gt;=".
 </param>
        <param name="value">
 The expression that denotes the value being tested against.
 </param>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseNotEqualsClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseNotEqualsClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseNotEqualsClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseNotEqualsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseNotEqualsClause (value As ExpressionSyntax) As RelationalCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CaseNotEqualsClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseNotEqualsClause value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RelationalCaseClauseSyntax ^ CaseNotEqualsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="value">
 The expression that denotes the value being tested against.
 </param>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseNotEqualsClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseNotEqualsClause (Microsoft.CodeAnalysis.SyntaxToken isKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax CaseNotEqualsClause(valuetype Microsoft.CodeAnalysis.SyntaxToken isKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseNotEqualsClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseNotEqualsClause (isKeyword As SyntaxToken, operatorToken As SyntaxToken, value As ExpressionSyntax) As RelationalCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CaseNotEqualsClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseNotEqualsClause (isKeyword, operatorToken, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RelationalCaseClauseSyntax ^ CaseNotEqualsClause(Microsoft::CodeAnalysis::SyntaxToken isKeyword, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="isKeyword">
 The "Is" keyword, if present.
 </param>
        <param name="operatorToken">
 The operator in the relational clause. One of "=", "&lt;", "&gt;", "&lt;=" or
 "&gt;=".
 </param>
        <param name="value">
 The expression that denotes the value being tested against.
 </param>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseStatement(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseStatement (cases As SeparatedSyntaxList(Of CaseClauseSyntax)) As CaseStatementSyntax" />
      <MemberSignature Language="F#" Value="static member CaseStatement : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseStatement cases" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ CaseStatement(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseClauseSyntax ^&gt; cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cases" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="cases">
 A list of clauses associated with this Case. If Kind=CaseElse, then this list
 has exactly one child, which is a ElseCaseClause.
 </param>
        <summary>
 Represents a Case or Case Else statement. This statement is always the Begin of
 a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
 Kind=Case.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement (params Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseStatement (ParamArray cases As CaseClauseSyntax()) As CaseStatementSyntax" />
      <MemberSignature Language="F#" Value="static member CaseStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseStatement cases" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ CaseStatement(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseClauseSyntax ^&gt; ^ cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cases" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="cases">
 A list of clauses associated with this Case. If Kind=CaseElse, then this list
 has exactly one child, which is a ElseCaseClause.
 </param>
        <summary>
 Represents a Case or Case Else statement. This statement is always the Begin of
 a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
 Kind=Case.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement (Microsoft.CodeAnalysis.SyntaxToken caseKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken caseKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseStatement (caseKeyword As SyntaxToken, cases As SeparatedSyntaxList(Of CaseClauseSyntax)) As CaseStatementSyntax" />
      <MemberSignature Language="F#" Value="static member CaseStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseStatement (caseKeyword, cases)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ CaseStatement(Microsoft::CodeAnalysis::SyntaxToken caseKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseClauseSyntax ^&gt; cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caseKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="cases" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="caseKeyword">
 The "Case" keyword
 </param>
        <param name="cases">
 A list of clauses associated with this Case. If Kind=CaseElse, then this list
 has exactly one child, which is a ElseCaseClause.
 </param>
        <summary>
 Represents a Case or Case Else statement. This statement is always the Begin of
 a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
 Kind=Case.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseStatement (kind As SyntaxKind, cases As SeparatedSyntaxList(Of CaseClauseSyntax)) As CaseStatementSyntax" />
      <MemberSignature Language="F#" Value="static member CaseStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseStatement (kind, cases)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ CaseStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseClauseSyntax ^&gt; cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="cases" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of CaseStatementSyntax.
 One of CaseStatement, CaseElseStatement.
 </param>
        <param name="cases">
 A list of clauses associated with this Case. If Kind=CaseElse, then this list
 has exactly one child, which is a ElseCaseClause.
 </param>
        <summary>
 Represents a Case or Case Else statement. This statement is always the Begin of
 a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
 Kind=Case.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, params Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseStatement (kind As SyntaxKind, ParamArray cases As CaseClauseSyntax()) As CaseStatementSyntax" />
      <MemberSignature Language="F#" Value="static member CaseStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseStatement (kind, cases)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ CaseStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, ... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseClauseSyntax ^&gt; ^ cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="cases" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of CaseStatementSyntax.
 One of CaseStatement, CaseElseStatement.
 </param>
        <param name="cases">
 A list of clauses associated with this Case. If Kind=CaseElse, then this list
 has exactly one child, which is a ElseCaseClause.
 </param>
        <summary>
 Represents a Case or Case Else statement. This statement is always the Begin of
 a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
 Kind=Case.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken caseKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax CaseStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken caseKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CaseStatement (kind As SyntaxKind, caseKeyword As SyntaxToken, cases As SeparatedSyntaxList(Of CaseClauseSyntax)) As CaseStatementSyntax" />
      <MemberSignature Language="F#" Value="static member CaseStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CaseStatement (kind, caseKeyword, cases)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ CaseStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken caseKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseClauseSyntax ^&gt; cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="caseKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="cases" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of CaseStatementSyntax.
 One of CaseStatement, CaseElseStatement.
 </param>
        <param name="caseKeyword">
 The "Case" keyword
 </param>
        <param name="cases">
 A list of clauses associated with this Case. If Kind=CaseElse, then this list
 has exactly one child, which is a ElseCaseClause.
 </param>
        <summary>
 Represents a Case or Case Else statement. This statement is always the Begin of
 a CaseBlock. If this is a Case Else statement, the Kind=CaseElse, otherwise the
 Kind=Case.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax CatchBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax catchStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax CatchBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax catchStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CatchBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CatchBlock (catchStatement As CatchStatementSyntax) As CatchBlockSyntax" />
      <MemberSignature Language="F#" Value="static member CatchBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CatchBlock catchStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchBlockSyntax ^ CatchBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax ^ catchStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catchStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="catchStatement">
 The "Catch" statement that begins the "Catch" block.
 </param>
        <summary>
 Represents a "Catch ..." block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax CatchBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax catchStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax CatchBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax catchStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CatchBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CatchBlock (catchStatement As CatchStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As CatchBlockSyntax" />
      <MemberSignature Language="F#" Value="static member CatchBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CatchBlock (catchStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchBlockSyntax ^ CatchBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax ^ catchStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catchStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="catchStatement">
 The "Catch" statement that begins the "Catch" block.
 </param>
        <param name="statements">
 A list of statements to be executed if an exception is caught by the "Catch"
 block.
 </param>
        <summary>
 Represents a "Catch ..." block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchFilterClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax CatchFilterClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax CatchFilterClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CatchFilterClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CatchFilterClause (filter As ExpressionSyntax) As CatchFilterClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CatchFilterClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CatchFilterClause filter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax ^ CatchFilterClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ filter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="filter">
 The filter expression to be evaluated.
 </param>
        <summary>
 Represents the "When ..." clause of a "Catch" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchFilterClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax CatchFilterClause (Microsoft.CodeAnalysis.SyntaxToken whenKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax CatchFilterClause(valuetype Microsoft.CodeAnalysis.SyntaxToken whenKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CatchFilterClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CatchFilterClause (whenKeyword As SyntaxToken, filter As ExpressionSyntax) As CatchFilterClauseSyntax" />
      <MemberSignature Language="F#" Value="static member CatchFilterClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CatchFilterClause (whenKeyword, filter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax ^ CatchFilterClause(Microsoft::CodeAnalysis::SyntaxToken whenKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ filter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whenKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="filter" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="whenKeyword">
 The "When" keyword.
 </param>
        <param name="filter">
 The filter expression to be evaluated.
 </param>
        <summary>
 Represents the "When ..." clause of a "Catch" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax CatchStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax CatchStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CatchStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CatchStatement () As CatchStatementSyntax" />
      <MemberSignature Language="F#" Value="static member CatchStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CatchStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax ^ CatchStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents the "Catch ... When ..." statement that begins a "Catch" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax CatchStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax identifierName, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax whenClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax CatchStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax identifierName, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax whenClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CatchStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CatchStatement (identifierName As IdentifierNameSyntax, asClause As SimpleAsClauseSyntax, whenClause As CatchFilterClauseSyntax) As CatchStatementSyntax" />
      <MemberSignature Language="F#" Value="static member CatchStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CatchStatement (identifierName, asClause, whenClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax ^ CatchStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ identifierName, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax ^ whenClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifierName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
        <Parameter Name="whenClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="identifierName">
 An identifier declaring a new variable or naming an existing variable to store
 the exception caught by the "Catch" statement.
 </param>
        <param name="asClause">
 A simple "As" clause specifying the type of exception to catch.
 </param>
        <param name="whenClause">
 A "When" clause to filter exceptions before catching.
 </param>
        <summary>
 Represents the "Catch ... When ..." statement that begins a "Catch" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax CatchStatement (Microsoft.CodeAnalysis.SyntaxToken catchKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax identifierName, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax whenClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax CatchStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken catchKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax identifierName, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax whenClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CatchStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CatchStatement (catchKeyword As SyntaxToken, identifierName As IdentifierNameSyntax, asClause As SimpleAsClauseSyntax, whenClause As CatchFilterClauseSyntax) As CatchStatementSyntax" />
      <MemberSignature Language="F#" Value="static member CatchStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CatchStatement (catchKeyword, identifierName, asClause, whenClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax ^ CatchStatement(Microsoft::CodeAnalysis::SyntaxToken catchKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ identifierName, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax ^ whenClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catchKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifierName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
        <Parameter Name="whenClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="catchKeyword">
 The "Catch" keyword.
 </param>
        <param name="identifierName">
 An identifier declaring a new variable or naming an existing variable to store
 the exception caught by the "Catch" statement.
 </param>
        <param name="asClause">
 A simple "As" clause specifying the type of exception to catch.
 </param>
        <param name="whenClause">
 A "When" clause to filter exceptions before catching.
 </param>
        <summary>
 Represents the "Catch ... When ..." statement that begins a "Catch" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterLiteralExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax CharacterLiteralExpression (Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax CharacterLiteralExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CharacterLiteralExpression(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CharacterLiteralExpression (token As SyntaxToken) As LiteralExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member CharacterLiteralExpression : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CharacterLiteralExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ CharacterLiteralExpression(Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="token">
 The token that represents the literal. The Kind property determines what type
 this property returns: Kind=IntegerLiteral ==&gt; Returns IntegerLiteralToken.
 Kind=CharacterLiteral ==&gt; Returns CharacterLiteralToken. Kind=DecimalLiteral
 ==&gt; Returns DecimalLiteralToken Kind=FloatingLiteral ==&gt; Returns
 FloatingLiteralToken Kind=DateLiteral ==&gt; Returns DateLiteralToken
 Kind=StringLiteral ==&gt; Returns StringLiteralToken Kind=BooleanLiteral ==&gt;
 Returns Keyword (with it's kind being TrueKeyword or FalseKeyword)
 Kind=NothingLiteral ==&gt; Returns Keyword (with it's kind being
 NothingKeyword)
 </param>
        <summary>
 Represents a literal. The kind of literal is determined by the Kind property:
 IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
 FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
 determined by casting the associated Token to the correct type and getting the
 value from the token.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterLiteralToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken CharacterLiteralToken (string text, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken CharacterLiteralToken(string text, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CharacterLiteralToken(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CharacterLiteralToken (text As String, value As Char) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member CharacterLiteralToken : string * char -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CharacterLiteralToken (text, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken CharacterLiteralToken(System::String ^ text, char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="value">To be added.</param>
        <summary>
 Represents an string literal token.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterLiteralToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken CharacterLiteralToken (Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, char value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken CharacterLiteralToken(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, char value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CharacterLiteralToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Char,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CharacterLiteralToken (leadingTrivia As SyntaxTriviaList, text As String, value As Char, trailingTrivia As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member CharacterLiteralToken : Microsoft.CodeAnalysis.SyntaxTriviaList * string * char * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CharacterLiteralToken (leadingTrivia, text, value, trailingTrivia)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken CharacterLiteralToken(Microsoft::CodeAnalysis::SyntaxTriviaList leadingTrivia, System::String ^ text, char value, Microsoft::CodeAnalysis::SyntaxTriviaList trailingTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leadingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="trailingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leadingTrivia">To be added.</param>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="value">To be added.</param>
        <param name="trailingTrivia">To be added.</param>
        <summary>
 Represents an string literal token.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax ClassBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax classStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax ClassBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax classStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ClassBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClassBlock (classStatement As ClassStatementSyntax) As ClassBlockSyntax" />
      <MemberSignature Language="F#" Value="static member ClassBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ClassBlock classStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ClassBlockSyntax ^ ClassBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ClassStatementSyntax ^ classStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="classStatement">
 The "Class" statement that begins the block.
 </param>
        <summary>
 Represents a declaration of a Class its contents and the End statement that
 ends it.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax ClassBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax classStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax ClassBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax classStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ClassBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClassBlock (classStatement As ClassStatementSyntax, inherits As SyntaxList(Of InheritsStatementSyntax), implements As SyntaxList(Of ImplementsStatementSyntax), members As SyntaxList(Of StatementSyntax)) As ClassBlockSyntax" />
      <MemberSignature Language="F#" Value="static member ClassBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ClassBlock (classStatement, inherits, implements, members)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ClassBlockSyntax ^ ClassBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ClassStatementSyntax ^ classStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^&gt; inherits, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^&gt; implements, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax" />
        <Parameter Name="inherits" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt;" />
        <Parameter Name="implements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="classStatement">
 The "Class" statement that begins the block.
 </param>
        <param name="inherits">
 A list of the Inherits declarations for the type.
 </param>
        <param name="implements">
 A list of the Implements declarations for the type.
 </param>
        <param name="members">
 The declarations contained in the type or module.
 </param>
        <summary>
 Represents a declaration of a Class its contents and the End statement that
 ends it.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax ClassBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax classStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endClassStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax ClassBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax classStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endClassStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ClassBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClassBlock (classStatement As ClassStatementSyntax, inherits As SyntaxList(Of InheritsStatementSyntax), implements As SyntaxList(Of ImplementsStatementSyntax), members As SyntaxList(Of StatementSyntax), endClassStatement As EndBlockStatementSyntax) As ClassBlockSyntax" />
      <MemberSignature Language="F#" Value="static member ClassBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ClassBlock (classStatement, inherits, implements, members, endClassStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ClassBlockSyntax ^ ClassBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ClassStatementSyntax ^ classStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^&gt; inherits, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^&gt; implements, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; members, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endClassStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax" />
        <Parameter Name="inherits" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt;" />
        <Parameter Name="implements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endClassStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="classStatement">
 The "Class" statement that begins the block.
 </param>
        <param name="inherits">
 A list of the Inherits declarations for the type.
 </param>
        <param name="implements">
 A list of the Implements declarations for the type.
 </param>
        <param name="members">
 The declarations contained in the type or module.
 </param>
        <param name="endClassStatement">
 The "End Class" statement that ends the block.
 </param>
        <summary>
 Represents a declaration of a Class its contents and the End statement that
 ends it.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax ClassConstraint (Microsoft.CodeAnalysis.SyntaxToken constraintKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax ClassConstraint(valuetype Microsoft.CodeAnalysis.SyntaxToken constraintKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ClassConstraint(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClassConstraint (constraintKeyword As SyntaxToken) As SpecialConstraintSyntax" />
      <MemberSignature Language="F#" Value="static member ClassConstraint : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ClassConstraint constraintKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SpecialConstraintSyntax ^ ClassConstraint(Microsoft::CodeAnalysis::SyntaxToken constraintKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constraintKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="constraintKeyword">
 The "New", "Class" or "Structure" keyword that denotes the kind of special
 constraint.
 </param>
        <summary>
 One of the special type parameter constraints: New, Class or Structure. Which
 kind of special constraint it is can be obtained from the Kind property and is
 one of: NewConstraint, ReferenceConstraint or ValueConstraint.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax ClassStatement (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax ClassStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ClassStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClassStatement (identifier As SyntaxToken) As ClassStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ClassStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ClassStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ClassStatementSyntax ^ ClassStatement(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the type being declared.
 </param>
        <summary>
 Represents the beginning statement of a Class declaration. This node always
 appears as the Begin of a TypeBlock with Kind=ClassDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax ClassStatement (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax ClassStatement(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ClassStatement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClassStatement (identifier As String) As ClassStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ClassStatement : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ClassStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ClassStatementSyntax ^ ClassStatement(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the type being declared.
 </param>
        <summary>
 Represents the beginning statement of a Class declaration. This node always
 appears as the Begin of a TypeBlock with Kind=ClassDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax ClassStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax ClassStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ClassStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClassStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As ClassStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ClassStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ClassStatement (attributeLists, modifiers, identifier, typeParameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ClassStatementSyntax ^ ClassStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, an empty list is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned.
 </param>
        <param name="identifier">
 The name of the type being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic parameters for this type. If no
 generic parameters were present, Nothing is returned.
 </param>
        <summary>
 Represents the beginning statement of a Class declaration. This node always
 appears as the Begin of a TypeBlock with Kind=ClassDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax ClassStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken classKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax ClassStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken classKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ClassStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClassStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, classKeyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As ClassStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ClassStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ClassStatement (attributeLists, modifiers, classKeyword, identifier, typeParameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ClassStatementSyntax ^ ClassStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken classKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="classKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, an empty list is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned.
 </param>
        <param name="classKeyword">
 The "Class" keyword.
 </param>
        <param name="identifier">
 The name of the type being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic parameters for this type. If no
 generic parameters were present, Nothing is returned.
 </param>
        <summary>
 Represents the beginning statement of a Class declaration. This node always
 appears as the Begin of a TypeBlock with Kind=ClassDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionInitializer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax CollectionInitializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax CollectionInitializer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CollectionInitializer" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CollectionInitializer () As CollectionInitializerSyntax" />
      <MemberSignature Language="F#" Value="static member CollectionInitializer : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CollectionInitializer " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionInitializerSyntax ^ CollectionInitializer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an expression that creates a new array without naming the element
 type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionInitializer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax CollectionInitializer (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax CollectionInitializer(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CollectionInitializer(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CollectionInitializer (initializers As SeparatedSyntaxList(Of ExpressionSyntax)) As CollectionInitializerSyntax" />
      <MemberSignature Language="F#" Value="static member CollectionInitializer : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CollectionInitializer initializers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionInitializerSyntax ^ CollectionInitializer(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^&gt; initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializers" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="initializers">
 The list of initializers between the braces.
 </param>
        <summary>
 Represents an expression that creates a new array without naming the element
 type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionInitializer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax CollectionInitializer (Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt; initializers, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax CollectionInitializer(valuetype Microsoft.CodeAnalysis.SyntaxToken openBraceToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt; initializers, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CollectionInitializer(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CollectionInitializer (openBraceToken As SyntaxToken, initializers As SeparatedSyntaxList(Of ExpressionSyntax), closeBraceToken As SyntaxToken) As CollectionInitializerSyntax" />
      <MemberSignature Language="F#" Value="static member CollectionInitializer : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CollectionInitializer (openBraceToken, initializers, closeBraceToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionInitializerSyntax ^ CollectionInitializer(Microsoft::CodeAnalysis::SyntaxToken openBraceToken, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^&gt; initializers, Microsoft::CodeAnalysis::SyntaxToken closeBraceToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="initializers" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt;" />
        <Parameter Name="closeBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openBraceToken">
 The "{" token.
 </param>
        <param name="initializers">
 The list of initializers between the braces.
 </param>
        <param name="closeBraceToken">
 The "}" token.
 </param>
        <summary>
 Represents an expression that creates a new array without naming the element
 type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionRangeVariable">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax CollectionRangeVariable (Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax CollectionRangeVariable(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CollectionRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CollectionRangeVariable (identifier As ModifiedIdentifierSyntax, expression As ExpressionSyntax) As CollectionRangeVariableSyntax" />
      <MemberSignature Language="F#" Value="static member CollectionRangeVariable : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CollectionRangeVariable (identifier, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^ CollectionRangeVariable(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModifiedIdentifierSyntax ^ identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the range variable being defined.
 </param>
        <param name="expression">
 The expression that serves as the source of items for the range variable.
 </param>
        <summary>
 Describes a single variable of the form "x [As Type] In expression" for use in
 query expressions.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionRangeVariable">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax CollectionRangeVariable (Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax CollectionRangeVariable(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CollectionRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CollectionRangeVariable (identifier As ModifiedIdentifierSyntax, asClause As SimpleAsClauseSyntax, expression As ExpressionSyntax) As CollectionRangeVariableSyntax" />
      <MemberSignature Language="F#" Value="static member CollectionRangeVariable : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CollectionRangeVariable (identifier, asClause, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^ CollectionRangeVariable(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModifiedIdentifierSyntax ^ identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the range variable being defined.
 </param>
        <param name="asClause">
 Describes the type of the variable being defined.
 </param>
        <param name="expression">
 The expression that serves as the source of items for the range variable.
 </param>
        <summary>
 Describes a single variable of the form "x [As Type] In expression" for use in
 query expressions.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionRangeVariable">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax CollectionRangeVariable (Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.SyntaxToken inKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax CollectionRangeVariable(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, valuetype Microsoft.CodeAnalysis.SyntaxToken inKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CollectionRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CollectionRangeVariable (identifier As ModifiedIdentifierSyntax, asClause As SimpleAsClauseSyntax, inKeyword As SyntaxToken, expression As ExpressionSyntax) As CollectionRangeVariableSyntax" />
      <MemberSignature Language="F#" Value="static member CollectionRangeVariable : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CollectionRangeVariable (identifier, asClause, inKeyword, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^ CollectionRangeVariable(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModifiedIdentifierSyntax ^ identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::SyntaxToken inKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
        <Parameter Name="inKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the range variable being defined.
 </param>
        <param name="asClause">
 Describes the type of the variable being defined.
 </param>
        <param name="inKeyword">
 The "In" keyword.
 </param>
        <param name="expression">
 The expression that serves as the source of items for the range variable.
 </param>
        <summary>
 Describes a single variable of the form "x [As Type] In expression" for use in
 query expressions.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColonTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia ColonTrivia (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTrivia ColonTrivia(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ColonTrivia(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ColonTrivia (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member ColonTrivia : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ColonTrivia text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTrivia ColonTrivia(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
 The actual text of this token.
 </param>
        <summary>
 Trivia nodes represents parts of the program text that are not parts of the
 syntactic grammar, such as spaces, newlines, comments, preprocessors
 directives, and disabled code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommentTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia CommentTrivia (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTrivia CommentTrivia(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CommentTrivia(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CommentTrivia (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member CommentTrivia : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CommentTrivia text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTrivia CommentTrivia(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
 The actual text of this token.
 </param>
        <summary>
 Trivia nodes represents parts of the program text that are not parts of the
 syntactic grammar, such as spaces, newlines, comments, preprocessors
 directives, and disabled code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompilationUnit">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax CompilationUnit ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax CompilationUnit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CompilationUnit" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompilationUnit () As CompilationUnitSyntax" />
      <MemberSignature Language="F#" Value="static member CompilationUnit : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CompilationUnit " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CompilationUnitSyntax ^ CompilationUnit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an entire source file of VB code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompilationUnit">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax CompilationUnit (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax&gt; options, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax&gt; imports, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax&gt; attributes, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax CompilationUnit(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax&gt; options, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax&gt; imports, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax&gt; attributes, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CompilationUnit(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompilationUnit (options As SyntaxList(Of OptionStatementSyntax), imports As SyntaxList(Of ImportsStatementSyntax), attributes As SyntaxList(Of AttributesStatementSyntax), members As SyntaxList(Of StatementSyntax)) As CompilationUnitSyntax" />
      <MemberSignature Language="F#" Value="static member CompilationUnit : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CompilationUnit (options, imports, attributes, members)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CompilationUnitSyntax ^ CompilationUnit(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::OptionStatementSyntax ^&gt; options, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportsStatementSyntax ^&gt; imports, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributesStatementSyntax ^&gt; attributes, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax&gt;" />
        <Parameter Name="imports" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax&gt;" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="options">
 Represents the list of Option statements at the beginning of a source file.
 </param>
        <param name="imports">
 Represents the list of Imports statements at the beginning of a source file.
 </param>
        <param name="attributes">
 Represents the list of AttributeStatements at the beginning of a source file
 that contain the Assembly and Module attributes.
 </param>
        <param name="members">
 Represents the members of the default namespace for this source file: all the
 top-level type and namespace declarations in the file. May also contain
 Statements that are not valid
 </param>
        <summary>
 Represents an entire source file of VB code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompilationUnit">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax CompilationUnit (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax&gt; options, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax&gt; imports, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax&gt; attributes, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members, Microsoft.CodeAnalysis.SyntaxToken endOfFileToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax CompilationUnit(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax&gt; options, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax&gt; imports, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax&gt; attributes, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members, valuetype Microsoft.CodeAnalysis.SyntaxToken endOfFileToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CompilationUnit(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompilationUnit (options As SyntaxList(Of OptionStatementSyntax), imports As SyntaxList(Of ImportsStatementSyntax), attributes As SyntaxList(Of AttributesStatementSyntax), members As SyntaxList(Of StatementSyntax), endOfFileToken As SyntaxToken) As CompilationUnitSyntax" />
      <MemberSignature Language="F#" Value="static member CompilationUnit : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CompilationUnit (options, imports, attributes, members, endOfFileToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CompilationUnitSyntax ^ CompilationUnit(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::OptionStatementSyntax ^&gt; options, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportsStatementSyntax ^&gt; imports, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributesStatementSyntax ^&gt; attributes, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; members, Microsoft::CodeAnalysis::SyntaxToken endOfFileToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax&gt;" />
        <Parameter Name="imports" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax&gt;" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endOfFileToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="options">
 Represents the list of Option statements at the beginning of a source file.
 </param>
        <param name="imports">
 Represents the list of Imports statements at the beginning of a source file.
 </param>
        <param name="attributes">
 Represents the list of AttributeStatements at the beginning of a source file
 that contain the Assembly and Module attributes.
 </param>
        <param name="members">
 Represents the members of the default namespace for this source file: all the
 top-level type and namespace declarations in the file. May also contain
 Statements that are not valid
 </param>
        <param name="endOfFileToken">
 Represents the end of the source file. This token may have trivia (whitespace,
 comments, ...) attached to it.
 </param>
        <summary>
 Represents an entire source file of VB code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcatenateAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax ConcatenateAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax ConcatenateAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConcatenateAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConcatenateAssignmentStatement (left As ExpressionSyntax, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ConcatenateAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConcatenateAssignmentStatement (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ ConcatenateAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcatenateAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax ConcatenateAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax ConcatenateAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConcatenateAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConcatenateAssignmentStatement (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ConcatenateAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConcatenateAssignmentStatement (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ ConcatenateAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="operatorToken">
 The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
 "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcatenateExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ConcatenateExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ConcatenateExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConcatenateExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConcatenateExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ConcatenateExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConcatenateExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ ConcatenateExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcatenateExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ConcatenateExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ConcatenateExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConcatenateExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConcatenateExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ConcatenateExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConcatenateExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ ConcatenateExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionalAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax ConditionalAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenNotNull);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax ConditionalAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenNotNull) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConditionalAccessExpression (whenNotNull As ExpressionSyntax) As ConditionalAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ConditionalAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConditionalAccessExpression whenNotNull" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ConditionalAccessExpressionSyntax ^ ConditionalAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ whenNotNull);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whenNotNull" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="whenNotNull">
 ExpressionSyntax node representing the access expression to be executed when
 the object is not null."
 </param>
        <summary>
 ExpressionSyntax node representing the object conditionally accessed.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionalAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax ConditionalAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenNotNull);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax ConditionalAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenNotNull) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConditionalAccessExpression (expression As ExpressionSyntax, whenNotNull As ExpressionSyntax) As ConditionalAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ConditionalAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConditionalAccessExpression (expression, whenNotNull)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ConditionalAccessExpressionSyntax ^ ConditionalAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ whenNotNull);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="whenNotNull" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression on the left-hand-side of the "?".
 </param>
        <param name="whenNotNull">
 ExpressionSyntax node representing the access expression to be executed when
 the object is not null."
 </param>
        <summary>
 ExpressionSyntax node representing the object conditionally accessed.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConditionalAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax ConditionalAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken questionMarkToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenNotNull);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax ConditionalAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken questionMarkToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenNotNull) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConditionalAccessExpression (expression As ExpressionSyntax, questionMarkToken As SyntaxToken, whenNotNull As ExpressionSyntax) As ConditionalAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ConditionalAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConditionalAccessExpression (expression, questionMarkToken, whenNotNull)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ConditionalAccessExpressionSyntax ^ ConditionalAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SyntaxToken questionMarkToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ whenNotNull);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="questionMarkToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="whenNotNull" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression on the left-hand-side of the "?".
 </param>
        <param name="questionMarkToken">
 "?" token.
 </param>
        <param name="whenNotNull">
 ExpressionSyntax node representing the access expression to be executed when
 the object is not null."
 </param>
        <summary>
 ExpressionSyntax node representing the object conditionally accessed.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConflictMarkerTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia ConflictMarkerTrivia (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTrivia ConflictMarkerTrivia(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConflictMarkerTrivia(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConflictMarkerTrivia (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member ConflictMarkerTrivia : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConflictMarkerTrivia text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTrivia ConflictMarkerTrivia(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
 The actual text of this token.
 </param>
        <summary>
 Trivia nodes represents parts of the program text that are not parts of the
 syntactic grammar, such as spaces, newlines, comments, preprocessors
 directives, and disabled code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax ConstDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken name, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax ConstDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken name, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConstDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstDirectiveTrivia (name As SyntaxToken, value As ExpressionSyntax) As ConstDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ConstDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConstDirectiveTrivia (name, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ConstDirectiveTriviaSyntax ^ ConstDirectiveTrivia(Microsoft::CodeAnalysis::SyntaxToken name, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="name">
 The name of the pre-processing constant being defined.
 </param>
        <param name="value">
 An expression representing the value of the pre-processing constant being
 defined.
 </param>
        <summary>
 Represents a #Const pre-processing constant declaration appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax ConstDirectiveTrivia (string name, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax ConstDirectiveTrivia(string name, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConstDirectiveTrivia(System.String,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstDirectiveTrivia (name As String, value As ExpressionSyntax) As ConstDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ConstDirectiveTrivia : string * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConstDirectiveTrivia (name, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ConstDirectiveTriviaSyntax ^ ConstDirectiveTrivia(System::String ^ name, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="name">
 The name of the pre-processing constant being defined.
 </param>
        <param name="value">
 An expression representing the value of the pre-processing constant being
 defined.
 </param>
        <summary>
 Represents a #Const pre-processing constant declaration appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax ConstDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken constKeyword, Microsoft.CodeAnalysis.SyntaxToken name, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax ConstDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken constKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken name, valuetype Microsoft.CodeAnalysis.SyntaxToken equalsToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConstDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstDirectiveTrivia (hashToken As SyntaxToken, constKeyword As SyntaxToken, name As SyntaxToken, equalsToken As SyntaxToken, value As ExpressionSyntax) As ConstDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ConstDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConstDirectiveTrivia (hashToken, constKeyword, name, equalsToken, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ConstDirectiveTriviaSyntax ^ ConstDirectiveTrivia(Microsoft::CodeAnalysis::SyntaxToken hashToken, Microsoft::CodeAnalysis::SyntaxToken constKeyword, Microsoft::CodeAnalysis::SyntaxToken name, Microsoft::CodeAnalysis::SyntaxToken equalsToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="constKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="equalsToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="hashToken">
 The "#" token in a preprocessor directive.
 </param>
        <param name="constKeyword">
 The "Const" keyword.
 </param>
        <param name="name">
 The name of the pre-processing constant being defined.
 </param>
        <param name="equalsToken">
 The "=" token.
 </param>
        <param name="value">
 An expression representing the value of the pre-processing constant being
 defined.
 </param>
        <summary>
 Represents a #Const pre-processing constant declaration appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax ConstructorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax subNewStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax ConstructorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax subNewStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConstructorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstructorBlock (subNewStatement As SubNewStatementSyntax) As ConstructorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member ConstructorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConstructorBlock subNewStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ConstructorBlockSyntax ^ ConstructorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::SubNewStatementSyntax ^ subNewStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subNewStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="subNewStatement">
 The "Sub New" statement that begins the block.
 </param>
        <summary>
 Represents a constructor block declaration: A declaration that has a beginning
 declaration, a body of executable statements and an end statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax ConstructorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax subNewStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax ConstructorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax subNewStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConstructorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstructorBlock (subNewStatement As SubNewStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As ConstructorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member ConstructorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConstructorBlock (subNewStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ConstructorBlockSyntax ^ ConstructorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::SubNewStatementSyntax ^ subNewStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subNewStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="subNewStatement">
 The "Sub New" statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <summary>
 Represents a constructor block declaration: A declaration that has a beginning
 declaration, a body of executable statements and an end statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax ConstructorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax subNewStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax ConstructorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax subNewStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConstructorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConstructorBlock (subNewStatement As SubNewStatementSyntax, statements As SyntaxList(Of StatementSyntax), endSubStatement As EndBlockStatementSyntax) As ConstructorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member ConstructorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ConstructorBlock (subNewStatement, statements, endSubStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ConstructorBlockSyntax ^ ConstructorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::SubNewStatementSyntax ^ subNewStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endSubStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subNewStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endSubStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="subNewStatement">
 The "Sub New" statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <param name="endSubStatement">
 The "End Sub" statement that ends the block declaration.
 </param>
        <summary>
 Represents a constructor block declaration: A declaration that has a beginning
 declaration, a body of executable statements and an end statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueDoStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueDoStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueDoStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ContinueDoStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ContinueDoStatement () As ContinueStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ContinueDoStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ContinueDoStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ContinueStatementSyntax ^ ContinueDoStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a "Continue (block)" statement. THe kind of block referenced can be
 determined by examining the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueDoStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueDoStatement (Microsoft.CodeAnalysis.SyntaxToken continueKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueDoStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken continueKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ContinueDoStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ContinueDoStatement (continueKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ContinueStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ContinueDoStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ContinueDoStatement (continueKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ContinueStatementSyntax ^ ContinueDoStatement(Microsoft::CodeAnalysis::SyntaxToken continueKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continueKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="continueKeyword">
 The "Continue" keyword.
 </param>
        <param name="blockKeyword">
 The "Do", "For" or "While" keyword that identifies the kind of loop being
 continued.
 </param>
        <summary>
 Represents a "Continue (block)" statement. THe kind of block referenced can be
 determined by examining the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueForStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueForStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueForStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ContinueForStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ContinueForStatement () As ContinueStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ContinueForStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ContinueForStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ContinueStatementSyntax ^ ContinueForStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a "Continue (block)" statement. THe kind of block referenced can be
 determined by examining the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueForStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueForStatement (Microsoft.CodeAnalysis.SyntaxToken continueKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueForStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken continueKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ContinueForStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ContinueForStatement (continueKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ContinueStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ContinueForStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ContinueForStatement (continueKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ContinueStatementSyntax ^ ContinueForStatement(Microsoft::CodeAnalysis::SyntaxToken continueKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continueKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="continueKeyword">
 The "Continue" keyword.
 </param>
        <param name="blockKeyword">
 The "Do", "For" or "While" keyword that identifies the kind of loop being
 continued.
 </param>
        <summary>
 Represents a "Continue (block)" statement. THe kind of block referenced can be
 determined by examining the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ContinueStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ContinueStatement (kind As SyntaxKind, blockKeyword As SyntaxToken) As ContinueStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ContinueStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ContinueStatement (kind, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ContinueStatementSyntax ^ ContinueStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 ContinueStatementSyntax. One of ContinueWhileStatement, ContinueDoStatement,
 ContinueForStatement.
 </param>
        <param name="blockKeyword">
 The "Do", "For" or "While" keyword that identifies the kind of loop being
 continued.
 </param>
        <summary>
 Represents a "Continue (block)" statement. THe kind of block referenced can be
 determined by examining the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken continueKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken continueKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ContinueStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ContinueStatement (kind As SyntaxKind, continueKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ContinueStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ContinueStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ContinueStatement (kind, continueKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ContinueStatementSyntax ^ ContinueStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken continueKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="continueKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 ContinueStatementSyntax. One of ContinueWhileStatement, ContinueDoStatement,
 ContinueForStatement.
 </param>
        <param name="continueKeyword">
 The "Continue" keyword.
 </param>
        <param name="blockKeyword">
 The "Do", "For" or "While" keyword that identifies the kind of loop being
 continued.
 </param>
        <summary>
 Represents a "Continue (block)" statement. THe kind of block referenced can be
 determined by examining the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhileStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueWhileStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueWhileStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ContinueWhileStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ContinueWhileStatement () As ContinueStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ContinueWhileStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ContinueWhileStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ContinueStatementSyntax ^ ContinueWhileStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a "Continue (block)" statement. THe kind of block referenced can be
 determined by examining the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhileStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueWhileStatement (Microsoft.CodeAnalysis.SyntaxToken continueKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax ContinueWhileStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken continueKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ContinueWhileStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ContinueWhileStatement (continueKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ContinueStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ContinueWhileStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ContinueWhileStatement (continueKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ContinueStatementSyntax ^ ContinueWhileStatement(Microsoft::CodeAnalysis::SyntaxToken continueKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continueKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="continueKeyword">
 The "Continue" keyword.
 </param>
        <param name="blockKeyword">
 The "Do", "For" or "While" keyword that identifies the kind of loop being
 continued.
 </param>
        <summary>
 Represents a "Continue (block)" statement. THe kind of block referenced can be
 determined by examining the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrefOperatorReference">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax CrefOperatorReference (Microsoft.CodeAnalysis.SyntaxToken operatorToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax CrefOperatorReference(valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CrefOperatorReference(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrefOperatorReference (operatorToken As SyntaxToken) As CrefOperatorReferenceSyntax" />
      <MemberSignature Language="F#" Value="static member CrefOperatorReference : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CrefOperatorReference operatorToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefOperatorReferenceSyntax ^ CrefOperatorReference(Microsoft::CodeAnalysis::SyntaxToken operatorToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="operatorToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrefOperatorReference">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax CrefOperatorReference (Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax CrefOperatorReference(valuetype Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CrefOperatorReference(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrefOperatorReference (operatorKeyword As SyntaxToken, operatorToken As SyntaxToken) As CrefOperatorReferenceSyntax" />
      <MemberSignature Language="F#" Value="static member CrefOperatorReference : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CrefOperatorReference (operatorKeyword, operatorToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefOperatorReferenceSyntax ^ CrefOperatorReference(Microsoft::CodeAnalysis::SyntaxToken operatorKeyword, Microsoft::CodeAnalysis::SyntaxToken operatorToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="operatorKeyword">To be added.</param>
        <param name="operatorToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrefReference">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax CrefReference (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax CrefReference(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CrefReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrefReference (name As TypeSyntax) As CrefReferenceSyntax" />
      <MemberSignature Language="F#" Value="static member CrefReference : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CrefReference name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefReferenceSyntax ^ CrefReference(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
 Syntax node class that represents a value of 'cref' attribute inside
 documentation comment trivia.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrefReference">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax CrefReference (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax name, Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax signature, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax CrefReference(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax name, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax signature, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CrefReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrefReference (name As TypeSyntax, signature As CrefSignatureSyntax, asClause As SimpleAsClauseSyntax) As CrefReferenceSyntax" />
      <MemberSignature Language="F#" Value="static member CrefReference : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CrefReference (name, signature, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefReferenceSyntax ^ CrefReference(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ name, Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefSignatureSyntax ^ signature, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
        <Parameter Name="signature" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="signature">To be added.</param>
        <param name="asClause">To be added.</param>
        <summary>
 Syntax node class that represents a value of 'cref' attribute inside
 documentation comment trivia.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrefSignature">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax CrefSignature (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax&gt; argumentTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax CrefSignature(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax&gt; argumentTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CrefSignature(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrefSignature (argumentTypes As SeparatedSyntaxList(Of CrefSignaturePartSyntax)) As CrefSignatureSyntax" />
      <MemberSignature Language="F#" Value="static member CrefSignature : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CrefSignature argumentTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefSignatureSyntax ^ CrefSignature(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefSignaturePartSyntax ^&gt; argumentTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argumentTypes" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="argumentTypes">To be added.</param>
        <summary>
 Represents a parenthesized list of argument types for a signature inside
 CrefReferenceSyntax syntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrefSignature">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax CrefSignature (params Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax[] argumentTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax CrefSignature(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax[] argumentTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CrefSignature(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrefSignature (ParamArray argumentTypes As CrefSignaturePartSyntax()) As CrefSignatureSyntax" />
      <MemberSignature Language="F#" Value="static member CrefSignature : Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CrefSignature argumentTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefSignatureSyntax ^ CrefSignature(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefSignaturePartSyntax ^&gt; ^ argumentTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argumentTypes" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="argumentTypes">To be added.</param>
        <summary>
 Represents a parenthesized list of argument types for a signature inside
 CrefReferenceSyntax syntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrefSignature">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax CrefSignature (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax&gt; argumentTypes, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax CrefSignature(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax&gt; argumentTypes, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CrefSignature(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrefSignature (openParenToken As SyntaxToken, argumentTypes As SeparatedSyntaxList(Of CrefSignaturePartSyntax), closeParenToken As SyntaxToken) As CrefSignatureSyntax" />
      <MemberSignature Language="F#" Value="static member CrefSignature : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CrefSignature (openParenToken, argumentTypes, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefSignatureSyntax ^ CrefSignature(Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefSignaturePartSyntax ^&gt; argumentTypes, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="argumentTypes" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax&gt;" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openParenToken">To be added.</param>
        <param name="argumentTypes">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>
 Represents a parenthesized list of argument types for a signature inside
 CrefReferenceSyntax syntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrefSignaturePart">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax CrefSignaturePart ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax CrefSignaturePart() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CrefSignaturePart" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrefSignaturePart () As CrefSignaturePartSyntax" />
      <MemberSignature Language="F#" Value="static member CrefSignaturePart : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CrefSignaturePart " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefSignaturePartSyntax ^ CrefSignaturePart();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrefSignaturePart">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax CrefSignaturePart (Microsoft.CodeAnalysis.SyntaxToken modifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax CrefSignaturePart(valuetype Microsoft.CodeAnalysis.SyntaxToken modifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CrefSignaturePart(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrefSignaturePart (modifier As SyntaxToken, type As TypeSyntax) As CrefSignaturePartSyntax" />
      <MemberSignature Language="F#" Value="static member CrefSignaturePart : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CrefSignaturePart (modifier, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefSignaturePartSyntax ^ CrefSignaturePart(Microsoft::CodeAnalysis::SyntaxToken modifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="modifier">To be added.</param>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CTypeExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax CTypeExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax CTypeExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CTypeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CTypeExpression (expression As ExpressionSyntax, type As TypeSyntax) As CTypeExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member CTypeExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CTypeExpression (expression, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CTypeExpressionSyntax ^ CTypeExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression being cast.
 </param>
        <param name="type">
 The type the expression is being cast to.
 </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CTypeExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax CTypeExpression (Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax CTypeExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken commaToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CTypeExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CTypeExpression (keyword As SyntaxToken, openParenToken As SyntaxToken, expression As ExpressionSyntax, commaToken As SyntaxToken, type As TypeSyntax, closeParenToken As SyntaxToken) As CTypeExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member CTypeExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.CTypeExpression (keyword, openParenToken, expression, commaToken, type, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CTypeExpressionSyntax ^ CTypeExpression(Microsoft::CodeAnalysis::SyntaxToken keyword, Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SyntaxToken commaToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="commaToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">
 The "CType", "DirectCast" or "TryCast" keyword.
 </param>
        <param name="openParenToken">
 The "(" token.
 </param>
        <param name="expression">
 The expression being cast.
 </param>
        <param name="commaToken">
 The "," token.
 </param>
        <param name="type">
 The type the expression is being cast to.
 </param>
        <param name="closeParenToken">
 The ")" token.
 </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DateLiteralExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax DateLiteralExpression (Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax DateLiteralExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DateLiteralExpression(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DateLiteralExpression (token As SyntaxToken) As LiteralExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member DateLiteralExpression : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DateLiteralExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ DateLiteralExpression(Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="token">
 The token that represents the literal. The Kind property determines what type
 this property returns: Kind=IntegerLiteral ==&gt; Returns IntegerLiteralToken.
 Kind=CharacterLiteral ==&gt; Returns CharacterLiteralToken. Kind=DecimalLiteral
 ==&gt; Returns DecimalLiteralToken Kind=FloatingLiteral ==&gt; Returns
 FloatingLiteralToken Kind=DateLiteral ==&gt; Returns DateLiteralToken
 Kind=StringLiteral ==&gt; Returns StringLiteralToken Kind=BooleanLiteral ==&gt;
 Returns Keyword (with it's kind being TrueKeyword or FalseKeyword)
 Kind=NothingLiteral ==&gt; Returns Keyword (with it's kind being
 NothingKeyword)
 </param>
        <summary>
 Represents a literal. The kind of literal is determined by the Kind property:
 IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
 FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
 determined by casting the associated Token to the correct type and getting the
 value from the token.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DateLiteralToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken DateLiteralToken (string text, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken DateLiteralToken(string text, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DateLiteralToken(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DateLiteralToken (text As String, value As DateTime) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member DateLiteralToken : string * DateTime -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DateLiteralToken (text, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken DateLiteralToken(System::String ^ text, DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="value">To be added.</param>
        <summary>
 Represents an Date literal token.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DateLiteralToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken DateLiteralToken (Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, DateTime value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken DateLiteralToken(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, valuetype System.DateTime value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DateLiteralToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.DateTime,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DateLiteralToken (leadingTrivia As SyntaxTriviaList, text As String, value As DateTime, trailingTrivia As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member DateLiteralToken : Microsoft.CodeAnalysis.SyntaxTriviaList * string * DateTime * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DateLiteralToken (leadingTrivia, text, value, trailingTrivia)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken DateLiteralToken(Microsoft::CodeAnalysis::SyntaxTriviaList leadingTrivia, System::String ^ text, DateTime value, Microsoft::CodeAnalysis::SyntaxTriviaList trailingTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leadingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="trailingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leadingTrivia">To be added.</param>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="value">To be added.</param>
        <param name="trailingTrivia">To be added.</param>
        <summary>
 Represents an Date literal token.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecimalLiteralToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken DecimalLiteralToken (string text, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeSuffix, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken DecimalLiteralToken(string text, valuetype Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeSuffix, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DecimalLiteralToken(System.String,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecimalLiteralToken (text As String, typeSuffix As TypeCharacter, value As Decimal) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member DecimalLiteralToken : string * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter * decimal -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DecimalLiteralToken (text, typeSuffix, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken DecimalLiteralToken(System::String ^ text, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeCharacter typeSuffix, System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="typeSuffix" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="typeSuffix">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
 Represents a Decimal literal token.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecimalLiteralToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken DecimalLiteralToken (Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeSuffix, decimal value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken DecimalLiteralToken(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, valuetype Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeSuffix, valuetype System.Decimal value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DecimalLiteralToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter,System.Decimal,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DecimalLiteralToken (leadingTrivia As SyntaxTriviaList, text As String, typeSuffix As TypeCharacter, value As Decimal, trailingTrivia As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member DecimalLiteralToken : Microsoft.CodeAnalysis.SyntaxTriviaList * string * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter * decimal * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DecimalLiteralToken (leadingTrivia, text, typeSuffix, value, trailingTrivia)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken DecimalLiteralToken(Microsoft::CodeAnalysis::SyntaxTriviaList leadingTrivia, System::String ^ text, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeCharacter typeSuffix, System::Decimal value, Microsoft::CodeAnalysis::SyntaxTriviaList trailingTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leadingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="typeSuffix" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="trailingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leadingTrivia">To be added.</param>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="typeSuffix">To be added.</param>
        <param name="value">To be added.</param>
        <param name="trailingTrivia">To be added.</param>
        <summary>
 Represents a Decimal literal token.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclareFunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareFunctionStatement (Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareFunctionStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareFunctionStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeclareFunctionStatement (identifier As SyntaxToken, libraryName As LiteralExpressionSyntax) As DeclareStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DeclareFunctionStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareFunctionStatement (identifier, libraryName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclareStatementSyntax ^ DeclareFunctionStatement(Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ libraryName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="libraryName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <param name="libraryName">
 The string literal with the library name.
 </param>
        <summary>
 A Declare statement that declares an external DLL method.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclareFunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareFunctionStatement (string identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareFunctionStatement(string identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareFunctionStatement(System.String,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeclareFunctionStatement (identifier As String, libraryName As LiteralExpressionSyntax) As DeclareStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DeclareFunctionStatement : string * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareFunctionStatement (identifier, libraryName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclareStatementSyntax ^ DeclareFunctionStatement(System::String ^ identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ libraryName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="libraryName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <param name="libraryName">
 The string literal with the library name.
 </param>
        <summary>
 A Declare statement that declares an external DLL method.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclareFunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareFunctionStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareFunctionStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareFunctionStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeclareFunctionStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, charsetKeyword As SyntaxToken, identifier As SyntaxToken, libraryName As LiteralExpressionSyntax, aliasName As LiteralExpressionSyntax, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As DeclareStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DeclareFunctionStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareFunctionStatement (attributeLists, modifiers, charsetKeyword, identifier, libraryName, aliasName, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclareStatementSyntax ^ DeclareFunctionStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken charsetKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ libraryName, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ aliasName, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="charsetKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="libraryName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
        <Parameter Name="aliasName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="charsetKeyword">
 If present, the keyword that defines the string translation semantics of the
 external method.
 </param>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <param name="libraryName">
 The string literal with the library name.
 </param>
        <param name="aliasName">
 The string literal with the alias. If not present, returns Nothing.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 A Declare statement that declares an external DLL method.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclareFunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareFunctionStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken declareKeyword, Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken libKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, Microsoft.CodeAnalysis.SyntaxToken aliasKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareFunctionStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken declareKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, valuetype Microsoft.CodeAnalysis.SyntaxToken libKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, valuetype Microsoft.CodeAnalysis.SyntaxToken aliasKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareFunctionStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeclareFunctionStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, declareKeyword As SyntaxToken, charsetKeyword As SyntaxToken, subOrFunctionKeyword As SyntaxToken, identifier As SyntaxToken, libKeyword As SyntaxToken, libraryName As LiteralExpressionSyntax, aliasKeyword As SyntaxToken, aliasName As LiteralExpressionSyntax, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As DeclareStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DeclareFunctionStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareFunctionStatement (attributeLists, modifiers, declareKeyword, charsetKeyword, subOrFunctionKeyword, identifier, libKeyword, libraryName, aliasKeyword, aliasName, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclareStatementSyntax ^ DeclareFunctionStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken declareKeyword, Microsoft::CodeAnalysis::SyntaxToken charsetKeyword, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::SyntaxToken libKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ libraryName, Microsoft::CodeAnalysis::SyntaxToken aliasKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ aliasName, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="declareKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="charsetKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="libKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="libraryName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
        <Parameter Name="aliasKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="aliasName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="declareKeyword">
 The "Declare" keyword.
 </param>
        <param name="charsetKeyword">
 If present, the keyword that defines the string translation semantics of the
 external method.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword.
 </param>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <param name="libKeyword">
 The "Lib" keyword.
 </param>
        <param name="libraryName">
 The string literal with the library name.
 </param>
        <param name="aliasKeyword">
 If present, the "Alias" keyword. If not present, returns Nothing.
 </param>
        <param name="aliasName">
 The string literal with the alias. If not present, returns Nothing.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 A Declare statement that declares an external DLL method.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclareStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeclareStatement (kind As SyntaxKind, subOrFunctionKeyword As SyntaxToken, identifier As SyntaxToken, libraryName As LiteralExpressionSyntax) As DeclareStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DeclareStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareStatement (kind, subOrFunctionKeyword, identifier, libraryName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclareStatementSyntax ^ DeclareStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ libraryName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="libraryName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 DeclareStatementSyntax. One of DeclareSubStatement, DeclareFunctionStatement.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword.
 </param>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <param name="libraryName">
 The string literal with the library name.
 </param>
        <summary>
 A Declare statement that declares an external DLL method.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclareStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, string identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, string identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,System.String,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeclareStatement (kind As SyntaxKind, subOrFunctionKeyword As SyntaxToken, identifier As String, libraryName As LiteralExpressionSyntax) As DeclareStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DeclareStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * string * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareStatement (kind, subOrFunctionKeyword, identifier, libraryName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclareStatementSyntax ^ DeclareStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, System::String ^ identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ libraryName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="libraryName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 DeclareStatementSyntax. One of DeclareSubStatement, DeclareFunctionStatement.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword.
 </param>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <param name="libraryName">
 The string literal with the library name.
 </param>
        <summary>
 A Declare statement that declares an external DLL method.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclareStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeclareStatement (kind As SyntaxKind, attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, charsetKeyword As SyntaxToken, subOrFunctionKeyword As SyntaxToken, identifier As SyntaxToken, libraryName As LiteralExpressionSyntax, aliasName As LiteralExpressionSyntax, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As DeclareStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DeclareStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareStatement (kind, attributeLists, modifiers, charsetKeyword, subOrFunctionKeyword, identifier, libraryName, aliasName, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclareStatementSyntax ^ DeclareStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken charsetKeyword, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ libraryName, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ aliasName, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="charsetKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="libraryName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
        <Parameter Name="aliasName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 DeclareStatementSyntax. One of DeclareSubStatement, DeclareFunctionStatement.
 </param>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="charsetKeyword">
 If present, the keyword that defines the string translation semantics of the
 external method.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword.
 </param>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <param name="libraryName">
 The string literal with the library name.
 </param>
        <param name="aliasName">
 The string literal with the alias. If not present, returns Nothing.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 A Declare statement that declares an external DLL method.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclareStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken declareKeyword, Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken libKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, Microsoft.CodeAnalysis.SyntaxToken aliasKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken declareKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, valuetype Microsoft.CodeAnalysis.SyntaxToken libKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, valuetype Microsoft.CodeAnalysis.SyntaxToken aliasKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeclareStatement (kind As SyntaxKind, attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, declareKeyword As SyntaxToken, charsetKeyword As SyntaxToken, subOrFunctionKeyword As SyntaxToken, identifier As SyntaxToken, libKeyword As SyntaxToken, libraryName As LiteralExpressionSyntax, aliasKeyword As SyntaxToken, aliasName As LiteralExpressionSyntax, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As DeclareStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DeclareStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareStatement (kind, attributeLists, modifiers, declareKeyword, charsetKeyword, subOrFunctionKeyword, identifier, libKeyword, libraryName, aliasKeyword, aliasName, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclareStatementSyntax ^ DeclareStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken declareKeyword, Microsoft::CodeAnalysis::SyntaxToken charsetKeyword, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::SyntaxToken libKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ libraryName, Microsoft::CodeAnalysis::SyntaxToken aliasKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ aliasName, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="declareKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="charsetKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="libKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="libraryName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
        <Parameter Name="aliasKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="aliasName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 DeclareStatementSyntax. One of DeclareSubStatement, DeclareFunctionStatement.
 </param>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="declareKeyword">
 The "Declare" keyword.
 </param>
        <param name="charsetKeyword">
 If present, the keyword that defines the string translation semantics of the
 external method.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword.
 </param>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <param name="libKeyword">
 The "Lib" keyword.
 </param>
        <param name="libraryName">
 The string literal with the library name.
 </param>
        <param name="aliasKeyword">
 If present, the "Alias" keyword. If not present, returns Nothing.
 </param>
        <param name="aliasName">
 The string literal with the alias. If not present, returns Nothing.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 A Declare statement that declares an external DLL method.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclareSubStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareSubStatement (Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareSubStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareSubStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeclareSubStatement (identifier As SyntaxToken, libraryName As LiteralExpressionSyntax) As DeclareStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DeclareSubStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareSubStatement (identifier, libraryName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclareStatementSyntax ^ DeclareSubStatement(Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ libraryName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="libraryName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <param name="libraryName">
 The string literal with the library name.
 </param>
        <summary>
 A Declare statement that declares an external DLL method.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclareSubStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareSubStatement (string identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareSubStatement(string identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareSubStatement(System.String,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeclareSubStatement (identifier As String, libraryName As LiteralExpressionSyntax) As DeclareStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DeclareSubStatement : string * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareSubStatement (identifier, libraryName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclareStatementSyntax ^ DeclareSubStatement(System::String ^ identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ libraryName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="libraryName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <param name="libraryName">
 The string literal with the library name.
 </param>
        <summary>
 A Declare statement that declares an external DLL method.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclareSubStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareSubStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareSubStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareSubStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeclareSubStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, charsetKeyword As SyntaxToken, identifier As SyntaxToken, libraryName As LiteralExpressionSyntax, aliasName As LiteralExpressionSyntax, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As DeclareStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DeclareSubStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareSubStatement (attributeLists, modifiers, charsetKeyword, identifier, libraryName, aliasName, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclareStatementSyntax ^ DeclareSubStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken charsetKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ libraryName, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ aliasName, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="charsetKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="libraryName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
        <Parameter Name="aliasName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="charsetKeyword">
 If present, the keyword that defines the string translation semantics of the
 external method.
 </param>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <param name="libraryName">
 The string literal with the library name.
 </param>
        <param name="aliasName">
 The string literal with the alias. If not present, returns Nothing.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 A Declare statement that declares an external DLL method.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclareSubStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareSubStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken declareKeyword, Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken libKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, Microsoft.CodeAnalysis.SyntaxToken aliasKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax DeclareSubStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken declareKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken charsetKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, valuetype Microsoft.CodeAnalysis.SyntaxToken libKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax libraryName, valuetype Microsoft.CodeAnalysis.SyntaxToken aliasKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax aliasName, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareSubStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeclareSubStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, declareKeyword As SyntaxToken, charsetKeyword As SyntaxToken, subOrFunctionKeyword As SyntaxToken, identifier As SyntaxToken, libKeyword As SyntaxToken, libraryName As LiteralExpressionSyntax, aliasKeyword As SyntaxToken, aliasName As LiteralExpressionSyntax, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As DeclareStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DeclareSubStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DeclareSubStatement (attributeLists, modifiers, declareKeyword, charsetKeyword, subOrFunctionKeyword, identifier, libKeyword, libraryName, aliasKeyword, aliasName, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclareStatementSyntax ^ DeclareSubStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken declareKeyword, Microsoft::CodeAnalysis::SyntaxToken charsetKeyword, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::SyntaxToken libKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ libraryName, Microsoft::CodeAnalysis::SyntaxToken aliasKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ aliasName, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="declareKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="charsetKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="libKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="libraryName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
        <Parameter Name="aliasKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="aliasName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="declareKeyword">
 The "Declare" keyword.
 </param>
        <param name="charsetKeyword">
 If present, the keyword that defines the string translation semantics of the
 external method.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword.
 </param>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <param name="libKeyword">
 The "Lib" keyword.
 </param>
        <param name="libraryName">
 The string literal with the library name.
 </param>
        <param name="aliasKeyword">
 If present, the "Alias" keyword. If not present, returns Nothing.
 </param>
        <param name="aliasName">
 The string literal with the alias. If not present, returns Nothing.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 A Declare statement that declares an external DLL method.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateFunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateFunctionStatement (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateFunctionStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateFunctionStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DelegateFunctionStatement (identifier As SyntaxToken) As DelegateStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DelegateFunctionStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateFunctionStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DelegateStatementSyntax ^ DelegateFunctionStatement(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the delegate being declared.
 </param>
        <summary>
 A statement that declares a delegate type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateFunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateFunctionStatement (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateFunctionStatement(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateFunctionStatement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DelegateFunctionStatement (identifier As String) As DelegateStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DelegateFunctionStatement : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateFunctionStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DelegateStatementSyntax ^ DelegateFunctionStatement(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the delegate being declared.
 </param>
        <summary>
 A statement that declares a delegate type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateFunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateFunctionStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateFunctionStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateFunctionStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DelegateFunctionStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As DelegateStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DelegateFunctionStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateFunctionStatement (attributeLists, modifiers, identifier, typeParameterList, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DelegateStatementSyntax ^ DelegateFunctionStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="identifier">
 The name of the delegate being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic type parameters for this
 delegate. If no generic type parameters were present, Nothing is returned.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 A statement that declares a delegate type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateFunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateFunctionStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken delegateKeyword, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateFunctionStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken delegateKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateFunctionStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DelegateFunctionStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, delegateKeyword As SyntaxToken, subOrFunctionKeyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As DelegateStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DelegateFunctionStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateFunctionStatement (attributeLists, modifiers, delegateKeyword, subOrFunctionKeyword, identifier, typeParameterList, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DelegateStatementSyntax ^ DelegateFunctionStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken delegateKeyword, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="delegateKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="delegateKeyword">
 The "Delegate" keyword.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword.
 </param>
        <param name="identifier">
 The name of the delegate being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic type parameters for this
 delegate. If no generic type parameters were present, Nothing is returned.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 A statement that declares a delegate type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DelegateStatement (kind As SyntaxKind, subOrFunctionKeyword As SyntaxToken, identifier As SyntaxToken) As DelegateStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DelegateStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateStatement (kind, subOrFunctionKeyword, identifier)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DelegateStatementSyntax ^ DelegateStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 DelegateStatementSyntax. One of DelegateSubStatement,
 DelegateFunctionStatement.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword.
 </param>
        <param name="identifier">
 The name of the delegate being declared.
 </param>
        <summary>
 A statement that declares a delegate type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DelegateStatement (kind As SyntaxKind, subOrFunctionKeyword As SyntaxToken, identifier As String) As DelegateStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DelegateStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateStatement (kind, subOrFunctionKeyword, identifier)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DelegateStatementSyntax ^ DelegateStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 DelegateStatementSyntax. One of DelegateSubStatement,
 DelegateFunctionStatement.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword.
 </param>
        <param name="identifier">
 The name of the delegate being declared.
 </param>
        <summary>
 A statement that declares a delegate type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DelegateStatement (kind As SyntaxKind, attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, subOrFunctionKeyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As DelegateStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DelegateStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateStatement (kind, attributeLists, modifiers, subOrFunctionKeyword, identifier, typeParameterList, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DelegateStatementSyntax ^ DelegateStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 DelegateStatementSyntax. One of DelegateSubStatement,
 DelegateFunctionStatement.
 </param>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword.
 </param>
        <param name="identifier">
 The name of the delegate being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic type parameters for this
 delegate. If no generic type parameters were present, Nothing is returned.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 A statement that declares a delegate type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken delegateKeyword, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken delegateKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DelegateStatement (kind As SyntaxKind, attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, delegateKeyword As SyntaxToken, subOrFunctionKeyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As DelegateStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DelegateStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateStatement (kind, attributeLists, modifiers, delegateKeyword, subOrFunctionKeyword, identifier, typeParameterList, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DelegateStatementSyntax ^ DelegateStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken delegateKeyword, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="delegateKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 DelegateStatementSyntax. One of DelegateSubStatement,
 DelegateFunctionStatement.
 </param>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="delegateKeyword">
 The "Delegate" keyword.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword.
 </param>
        <param name="identifier">
 The name of the delegate being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic type parameters for this
 delegate. If no generic type parameters were present, Nothing is returned.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 A statement that declares a delegate type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateSubStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateSubStatement (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateSubStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateSubStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DelegateSubStatement (identifier As SyntaxToken) As DelegateStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DelegateSubStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateSubStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DelegateStatementSyntax ^ DelegateSubStatement(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the delegate being declared.
 </param>
        <summary>
 A statement that declares a delegate type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateSubStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateSubStatement (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateSubStatement(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateSubStatement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DelegateSubStatement (identifier As String) As DelegateStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DelegateSubStatement : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateSubStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DelegateStatementSyntax ^ DelegateSubStatement(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the delegate being declared.
 </param>
        <summary>
 A statement that declares a delegate type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateSubStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateSubStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateSubStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateSubStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DelegateSubStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As DelegateStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DelegateSubStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateSubStatement (attributeLists, modifiers, identifier, typeParameterList, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DelegateStatementSyntax ^ DelegateSubStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="identifier">
 The name of the delegate being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic type parameters for this
 delegate. If no generic type parameters were present, Nothing is returned.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 A statement that declares a delegate type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateSubStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateSubStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken delegateKeyword, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax DelegateSubStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken delegateKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateSubStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DelegateSubStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, delegateKeyword As SyntaxToken, subOrFunctionKeyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As DelegateStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DelegateSubStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DelegateSubStatement (attributeLists, modifiers, delegateKeyword, subOrFunctionKeyword, identifier, typeParameterList, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DelegateStatementSyntax ^ DelegateSubStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken delegateKeyword, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="delegateKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="delegateKeyword">
 The "Delegate" keyword.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword.
 </param>
        <param name="identifier">
 The name of the delegate being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic type parameters for this
 delegate. If no generic type parameters were present, Nothing is returned.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 A statement that declares a delegate type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DescendingOrdering">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax DescendingOrdering (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax DescendingOrdering(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DescendingOrdering(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DescendingOrdering (expression As ExpressionSyntax) As OrderingSyntax" />
      <MemberSignature Language="F#" Value="static member DescendingOrdering : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DescendingOrdering expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OrderingSyntax ^ DescendingOrdering(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression to sort by.
 </param>
        <summary>
 An expression to order by, plus an optional ordering. The Kind indicates
 whether to order in ascending or descending order.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DescendingOrdering">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax DescendingOrdering (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken ascendingOrDescendingKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax DescendingOrdering(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken ascendingOrDescendingKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DescendingOrdering(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DescendingOrdering (expression As ExpressionSyntax, ascendingOrDescendingKeyword As SyntaxToken) As OrderingSyntax" />
      <MemberSignature Language="F#" Value="static member DescendingOrdering : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DescendingOrdering (expression, ascendingOrDescendingKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OrderingSyntax ^ DescendingOrdering(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SyntaxToken ascendingOrDescendingKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="ascendingOrDescendingKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression to sort by.
 </param>
        <param name="ascendingOrDescendingKeyword">
 The "Ascending" or "Descending" keyword, if present. To determine whether to
 sort in ascending or descending order, checking the Kind property is easier.
 </param>
        <summary>
 An expression to order by, plus an optional ordering. The Kind indicates
 whether to order in ascending or descending order.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DictionaryAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax DictionaryAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax DictionaryAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DictionaryAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DictionaryAccessExpression (name As SimpleNameSyntax) As MemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member DictionaryAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DictionaryAccessExpression name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MemberAccessExpressionSyntax ^ DictionaryAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleNameSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">
 The identifier after the "." or "!" token.
 </param>
        <summary>
 Represents member access (.name) or dictionary access (!name). The Kind
 property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DictionaryAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax DictionaryAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax DictionaryAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DictionaryAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DictionaryAccessExpression (expression As ExpressionSyntax, name As SimpleNameSyntax) As MemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member DictionaryAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DictionaryAccessExpression (expression, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MemberAccessExpressionSyntax ^ DictionaryAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleNameSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression on the left-hand-side of the "." or "!" token.
 </param>
        <param name="name">
 The identifier after the "." or "!" token.
 </param>
        <summary>
 Represents member access (.name) or dictionary access (!name). The Kind
 property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DictionaryAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax DictionaryAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax DictionaryAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DictionaryAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DictionaryAccessExpression (expression As ExpressionSyntax, operatorToken As SyntaxToken, name As SimpleNameSyntax) As MemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member DictionaryAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DictionaryAccessExpression (expression, operatorToken, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MemberAccessExpressionSyntax ^ DictionaryAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleNameSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression on the left-hand-side of the "." or "!" token.
 </param>
        <param name="operatorToken">
 The "." or "!" token.
 </param>
        <param name="name">
 The identifier after the "." or "!" token.
 </param>
        <summary>
 Represents member access (.name) or dictionary access (!name). The Kind
 property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectCastExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax DirectCastExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax DirectCastExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DirectCastExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DirectCastExpression (expression As ExpressionSyntax, type As TypeSyntax) As DirectCastExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member DirectCastExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DirectCastExpression (expression, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DirectCastExpressionSyntax ^ DirectCastExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression being cast.
 </param>
        <param name="type">
 The type the expression is being cast to.
 </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectCastExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax DirectCastExpression (Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax DirectCastExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken commaToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DirectCastExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DirectCastExpression (keyword As SyntaxToken, openParenToken As SyntaxToken, expression As ExpressionSyntax, commaToken As SyntaxToken, type As TypeSyntax, closeParenToken As SyntaxToken) As DirectCastExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member DirectCastExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DirectCastExpression (keyword, openParenToken, expression, commaToken, type, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DirectCastExpressionSyntax ^ DirectCastExpression(Microsoft::CodeAnalysis::SyntaxToken keyword, Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SyntaxToken commaToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="commaToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">
 The "CType", "DirectCast" or "TryCast" keyword.
 </param>
        <param name="openParenToken">
 The "(" token.
 </param>
        <param name="expression">
 The expression being cast.
 </param>
        <param name="commaToken">
 The "," token.
 </param>
        <param name="type">
 The type the expression is being cast to.
 </param>
        <param name="closeParenToken">
 The ")" token.
 </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisabledTextTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia DisabledTextTrivia (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTrivia DisabledTextTrivia(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DisabledTextTrivia(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DisabledTextTrivia (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member DisabledTextTrivia : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DisabledTextTrivia text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTrivia DisabledTextTrivia(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
 The actual text of this token.
 </param>
        <summary>
 Trivia nodes represents parts of the program text that are not parts of the
 syntactic grammar, such as spaces, newlines, comments, preprocessors
 directives, and disabled code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableWarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax DisableWarningDirectiveTrivia (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax&gt; errorCodes);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax DisableWarningDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax&gt; errorCodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DisableWarningDirectiveTrivia(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DisableWarningDirectiveTrivia (errorCodes As SeparatedSyntaxList(Of IdentifierNameSyntax)) As DisableWarningDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member DisableWarningDirectiveTrivia : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DisableWarningDirectiveTrivia errorCodes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DisableWarningDirectiveTriviaSyntax ^ DisableWarningDirectiveTrivia(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^&gt; errorCodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorCodes" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="errorCodes">To be added.</param>
        <summary>
 Represents #Disable Warning pre-processing directive appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableWarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax DisableWarningDirectiveTrivia (params Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax[] errorCodes);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax DisableWarningDirectiveTrivia(class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax[] errorCodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DisableWarningDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DisableWarningDirectiveTrivia (ParamArray errorCodes As IdentifierNameSyntax()) As DisableWarningDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member DisableWarningDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DisableWarningDirectiveTrivia errorCodes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DisableWarningDirectiveTriviaSyntax ^ DisableWarningDirectiveTrivia(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^&gt; ^ errorCodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorCodes" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="errorCodes">To be added.</param>
        <summary>
 Represents #Disable Warning pre-processing directive appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableWarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax DisableWarningDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken disableKeyword, Microsoft.CodeAnalysis.SyntaxToken warningKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax&gt; errorCodes);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax DisableWarningDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken disableKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken warningKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax&gt; errorCodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DisableWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DisableWarningDirectiveTrivia (hashToken As SyntaxToken, disableKeyword As SyntaxToken, warningKeyword As SyntaxToken, errorCodes As SeparatedSyntaxList(Of IdentifierNameSyntax)) As DisableWarningDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member DisableWarningDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DisableWarningDirectiveTrivia (hashToken, disableKeyword, warningKeyword, errorCodes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DisableWarningDirectiveTriviaSyntax ^ DisableWarningDirectiveTrivia(Microsoft::CodeAnalysis::SyntaxToken hashToken, Microsoft::CodeAnalysis::SyntaxToken disableKeyword, Microsoft::CodeAnalysis::SyntaxToken warningKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^&gt; errorCodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="disableKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="warningKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="errorCodes" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="hashToken">
 The "#" token in a preprocessor directive.
 </param>
        <param name="disableKeyword">To be added.</param>
        <param name="warningKeyword">To be added.</param>
        <param name="errorCodes">To be added.</param>
        <summary>
 Represents #Disable Warning pre-processing directive appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DistinctClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax DistinctClause ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax DistinctClause() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DistinctClause" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DistinctClause () As DistinctClauseSyntax" />
      <MemberSignature Language="F#" Value="static member DistinctClause : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DistinctClause " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DistinctClauseSyntax ^ DistinctClause();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents the "Distinct" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DistinctClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax DistinctClause (Microsoft.CodeAnalysis.SyntaxToken distinctKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax DistinctClause(valuetype Microsoft.CodeAnalysis.SyntaxToken distinctKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DistinctClause(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DistinctClause (distinctKeyword As SyntaxToken) As DistinctClauseSyntax" />
      <MemberSignature Language="F#" Value="static member DistinctClause : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DistinctClause distinctKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DistinctClauseSyntax ^ DistinctClause(Microsoft::CodeAnalysis::SyntaxToken distinctKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distinctKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="distinctKeyword">
 The "Distinct" keyword.
 </param>
        <summary>
 Represents the "Distinct" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax DivideAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax DivideAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DivideAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssignmentStatement (left As ExpressionSyntax, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DivideAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DivideAssignmentStatement (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ DivideAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax DivideAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax DivideAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DivideAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssignmentStatement (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DivideAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DivideAssignmentStatement (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ DivideAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="operatorToken">
 The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
 "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax DivideExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax DivideExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DivideExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member DivideExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DivideExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ DivideExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax DivideExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax DivideExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DivideExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member DivideExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DivideExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ DivideExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentationComment">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax DocumentationComment (params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax DocumentationComment(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DocumentationComment(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DocumentationComment (ParamArray content As XmlNodeSyntax()) As DocumentationCommentTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member DocumentationComment : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DocumentationComment content" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DocumentationCommentTriviaSyntax ^ DocumentationComment(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
 A list of xml node syntax that will be the content within the xml documentation comment
 (e.g. a summary element, a returns element, exception element and so on).
 </param>
        <summary>
 Creates an xml documentation comment that abstracts xml syntax creation.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentationCommentExteriorTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia DocumentationCommentExteriorTrivia (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTrivia DocumentationCommentExteriorTrivia(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DocumentationCommentExteriorTrivia(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DocumentationCommentExteriorTrivia (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member DocumentationCommentExteriorTrivia : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DocumentationCommentExteriorTrivia text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTrivia DocumentationCommentExteriorTrivia(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
 The actual text of this token.
 </param>
        <summary>
 Trivia nodes represents parts of the program text that are not parts of the
 syntactic grammar, such as spaces, newlines, comments, preprocessors
 directives, and disabled code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentationCommentLineBreakToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken DocumentationCommentLineBreakToken (string text, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken DocumentationCommentLineBreakToken(string text, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DocumentationCommentLineBreakToken(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DocumentationCommentLineBreakToken (text As String, value As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member DocumentationCommentLineBreakToken : string * string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DocumentationCommentLineBreakToken (text, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken DocumentationCommentLineBreakToken(System::String ^ text, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="value">To be added.</param>
        <summary>
 Represents character data in Xml content also known as PCData or in an Xml
 attribute value. All text is here for now even text that does not need
 normalization such as comment, pi and cdata text.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentationCommentLineBreakToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken DocumentationCommentLineBreakToken (Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken DocumentationCommentLineBreakToken(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, string value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DocumentationCommentLineBreakToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DocumentationCommentLineBreakToken (leadingTrivia As SyntaxTriviaList, text As String, value As String, trailingTrivia As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member DocumentationCommentLineBreakToken : Microsoft.CodeAnalysis.SyntaxTriviaList * string * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DocumentationCommentLineBreakToken (leadingTrivia, text, value, trailingTrivia)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken DocumentationCommentLineBreakToken(Microsoft::CodeAnalysis::SyntaxTriviaList leadingTrivia, System::String ^ text, System::String ^ value, Microsoft::CodeAnalysis::SyntaxTriviaList trailingTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leadingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="trailingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leadingTrivia">To be added.</param>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="value">To be added.</param>
        <param name="trailingTrivia">To be added.</param>
        <summary>
 Represents character data in Xml content also known as PCData or in an Xml
 attribute value. All text is here for now even text that does not need
 normalization such as comment, pi and cdata text.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentationCommentTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax DocumentationCommentTrivia ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax DocumentationCommentTrivia() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DocumentationCommentTrivia" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DocumentationCommentTrivia () As DocumentationCommentTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member DocumentationCommentTrivia : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DocumentationCommentTrivia " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DocumentationCommentTriviaSyntax ^ DocumentationCommentTrivia();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a documentation comment e.g. ''' &lt;Summary&gt; appearing in
 source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentationCommentTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax DocumentationCommentTrivia (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax DocumentationCommentTrivia(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DocumentationCommentTrivia(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DocumentationCommentTrivia (content As SyntaxList(Of XmlNodeSyntax)) As DocumentationCommentTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member DocumentationCommentTrivia : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DocumentationCommentTrivia content" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DocumentationCommentTriviaSyntax ^ DocumentationCommentTrivia(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="content">To be added.</param>
        <summary>
 Represents a documentation comment e.g. ''' &lt;Summary&gt; appearing in
 source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoLoopBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoLoopBlock (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoLoopBlock(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoLoopBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoLoopBlock (kind As SyntaxKind, doStatement As DoStatementSyntax, loopStatement As LoopStatementSyntax) As DoLoopBlockSyntax" />
      <MemberSignature Language="F#" Value="static member DoLoopBlock : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoLoopBlock (kind, doStatement, loopStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoLoopBlockSyntax ^ DoLoopBlock(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ doStatement, Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ loopStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="doStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" />
        <Parameter Name="loopStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of DoLoopBlockSyntax.
 One of SimpleDoLoopBlock, DoWhileLoopBlock, DoUntilLoopBlock, DoLoopWhileBlock,
 DoLoopUntilBlock.
 </param>
        <param name="doStatement">
 The Do statement that begins the block.
 </param>
        <param name="loopStatement">
 The Loop statement that ends the block.
 </param>
        <summary>
 Represents a Do-Loop block. The Kind property can be used to determine if this
 is a Do While, Do Until, Do Loop While, Do Loop Until, or infinite Do Loop.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoLoopBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoLoopBlock (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoLoopBlock(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoLoopBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoLoopBlock (kind As SyntaxKind, doStatement As DoStatementSyntax, statements As SyntaxList(Of StatementSyntax), loopStatement As LoopStatementSyntax) As DoLoopBlockSyntax" />
      <MemberSignature Language="F#" Value="static member DoLoopBlock : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoLoopBlock (kind, doStatement, statements, loopStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoLoopBlockSyntax ^ DoLoopBlock(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ doStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ loopStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="doStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="loopStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of DoLoopBlockSyntax.
 One of SimpleDoLoopBlock, DoWhileLoopBlock, DoUntilLoopBlock, DoLoopWhileBlock,
 DoLoopUntilBlock.
 </param>
        <param name="doStatement">
 The Do statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <param name="loopStatement">
 The Loop statement that ends the block.
 </param>
        <summary>
 Represents a Do-Loop block. The Kind property can be used to determine if this
 is a Do While, Do Until, Do Loop While, Do Loop Until, or infinite Do Loop.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoLoopUntilBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoLoopUntilBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoLoopUntilBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoLoopUntilBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoLoopUntilBlock (doStatement As DoStatementSyntax, loopStatement As LoopStatementSyntax) As DoLoopBlockSyntax" />
      <MemberSignature Language="F#" Value="static member DoLoopUntilBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoLoopUntilBlock (doStatement, loopStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoLoopBlockSyntax ^ DoLoopUntilBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ doStatement, Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ loopStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="doStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" />
        <Parameter Name="loopStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="doStatement">
 The Do statement that begins the block.
 </param>
        <param name="loopStatement">
 The Loop statement that ends the block.
 </param>
        <summary>
 Represents a Do-Loop block. The Kind property can be used to determine if this
 is a Do While, Do Until, Do Loop While, Do Loop Until, or infinite Do Loop.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoLoopUntilBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoLoopUntilBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoLoopUntilBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoLoopUntilBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoLoopUntilBlock (doStatement As DoStatementSyntax, statements As SyntaxList(Of StatementSyntax), loopStatement As LoopStatementSyntax) As DoLoopBlockSyntax" />
      <MemberSignature Language="F#" Value="static member DoLoopUntilBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoLoopUntilBlock (doStatement, statements, loopStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoLoopBlockSyntax ^ DoLoopUntilBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ doStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ loopStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="doStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="loopStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="doStatement">
 The Do statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <param name="loopStatement">
 The Loop statement that ends the block.
 </param>
        <summary>
 Represents a Do-Loop block. The Kind property can be used to determine if this
 is a Do While, Do Until, Do Loop While, Do Loop Until, or infinite Do Loop.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoLoopWhileBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoLoopWhileBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoLoopWhileBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoLoopWhileBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoLoopWhileBlock (doStatement As DoStatementSyntax, loopStatement As LoopStatementSyntax) As DoLoopBlockSyntax" />
      <MemberSignature Language="F#" Value="static member DoLoopWhileBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoLoopWhileBlock (doStatement, loopStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoLoopBlockSyntax ^ DoLoopWhileBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ doStatement, Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ loopStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="doStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" />
        <Parameter Name="loopStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="doStatement">
 The Do statement that begins the block.
 </param>
        <param name="loopStatement">
 The Loop statement that ends the block.
 </param>
        <summary>
 Represents a Do-Loop block. The Kind property can be used to determine if this
 is a Do While, Do Until, Do Loop While, Do Loop Until, or infinite Do Loop.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoLoopWhileBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoLoopWhileBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoLoopWhileBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoLoopWhileBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoLoopWhileBlock (doStatement As DoStatementSyntax, statements As SyntaxList(Of StatementSyntax), loopStatement As LoopStatementSyntax) As DoLoopBlockSyntax" />
      <MemberSignature Language="F#" Value="static member DoLoopWhileBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoLoopWhileBlock (doStatement, statements, loopStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoLoopBlockSyntax ^ DoLoopWhileBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ doStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ loopStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="doStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="loopStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="doStatement">
 The Do statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <param name="loopStatement">
 The Loop statement that ends the block.
 </param>
        <summary>
 Represents a Do-Loop block. The Kind property can be used to determine if this
 is a Do While, Do Until, Do Loop While, Do Loop Until, or infinite Do Loop.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoStatement (kind As SyntaxKind) As DoStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DoStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoStatement kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ DoStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of DoStatementSyntax.
 One of SimpleDoStatement, DoWhileStatement, DoUntilStatement.
 </param>
        <summary>
 The Do statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoStatement (kind As SyntaxKind, whileOrUntilClause As WhileOrUntilClauseSyntax) As DoStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DoStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoStatement (kind, whileOrUntilClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ DoStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ whileOrUntilClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="whileOrUntilClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of DoStatementSyntax.
 One of SimpleDoStatement, DoWhileStatement, DoUntilStatement.
 </param>
        <param name="whileOrUntilClause">
 The "While expression" or "Until expression" clause of the Do statement, if
 present.
 </param>
        <summary>
 The Do statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken doKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken doKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoStatement (kind As SyntaxKind, doKeyword As SyntaxToken, whileOrUntilClause As WhileOrUntilClauseSyntax) As DoStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DoStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoStatement (kind, doKeyword, whileOrUntilClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ DoStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken doKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ whileOrUntilClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="doKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="whileOrUntilClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of DoStatementSyntax.
 One of SimpleDoStatement, DoWhileStatement, DoUntilStatement.
 </param>
        <param name="doKeyword">
 The "Do" keyword.
 </param>
        <param name="whileOrUntilClause">
 The "While expression" or "Until expression" clause of the Do statement, if
 present.
 </param>
        <summary>
 The Do statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoUntilLoopBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoUntilLoopBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoUntilLoopBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoUntilLoopBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoUntilLoopBlock (doStatement As DoStatementSyntax, loopStatement As LoopStatementSyntax) As DoLoopBlockSyntax" />
      <MemberSignature Language="F#" Value="static member DoUntilLoopBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoUntilLoopBlock (doStatement, loopStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoLoopBlockSyntax ^ DoUntilLoopBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ doStatement, Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ loopStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="doStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" />
        <Parameter Name="loopStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="doStatement">
 The Do statement that begins the block.
 </param>
        <param name="loopStatement">
 The Loop statement that ends the block.
 </param>
        <summary>
 Represents a Do-Loop block. The Kind property can be used to determine if this
 is a Do While, Do Until, Do Loop While, Do Loop Until, or infinite Do Loop.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoUntilLoopBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoUntilLoopBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoUntilLoopBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoUntilLoopBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoUntilLoopBlock (doStatement As DoStatementSyntax, statements As SyntaxList(Of StatementSyntax), loopStatement As LoopStatementSyntax) As DoLoopBlockSyntax" />
      <MemberSignature Language="F#" Value="static member DoUntilLoopBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoUntilLoopBlock (doStatement, statements, loopStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoLoopBlockSyntax ^ DoUntilLoopBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ doStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ loopStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="doStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="loopStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="doStatement">
 The Do statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <param name="loopStatement">
 The Loop statement that ends the block.
 </param>
        <summary>
 Represents a Do-Loop block. The Kind property can be used to determine if this
 is a Do While, Do Until, Do Loop While, Do Loop Until, or infinite Do Loop.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoUntilStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoUntilStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoUntilStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoUntilStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoUntilStatement () As DoStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DoUntilStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoUntilStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ DoUntilStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 The Do statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoUntilStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoUntilStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoUntilStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoUntilStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoUntilStatement (whileOrUntilClause As WhileOrUntilClauseSyntax) As DoStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DoUntilStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoUntilStatement whileOrUntilClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ DoUntilStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ whileOrUntilClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whileOrUntilClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="whileOrUntilClause">
 The "While expression" or "Until expression" clause of the Do statement, if
 present.
 </param>
        <summary>
 The Do statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoUntilStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoUntilStatement (Microsoft.CodeAnalysis.SyntaxToken doKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoUntilStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken doKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoUntilStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoUntilStatement (doKeyword As SyntaxToken, whileOrUntilClause As WhileOrUntilClauseSyntax) As DoStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DoUntilStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoUntilStatement (doKeyword, whileOrUntilClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ DoUntilStatement(Microsoft::CodeAnalysis::SyntaxToken doKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ whileOrUntilClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="doKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="whileOrUntilClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="doKeyword">
 The "Do" keyword.
 </param>
        <param name="whileOrUntilClause">
 The "While expression" or "Until expression" clause of the Do statement, if
 present.
 </param>
        <summary>
 The Do statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoWhileLoopBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoWhileLoopBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoWhileLoopBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoWhileLoopBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoWhileLoopBlock (doStatement As DoStatementSyntax, loopStatement As LoopStatementSyntax) As DoLoopBlockSyntax" />
      <MemberSignature Language="F#" Value="static member DoWhileLoopBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoWhileLoopBlock (doStatement, loopStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoLoopBlockSyntax ^ DoWhileLoopBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ doStatement, Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ loopStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="doStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" />
        <Parameter Name="loopStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="doStatement">
 The Do statement that begins the block.
 </param>
        <param name="loopStatement">
 The Loop statement that ends the block.
 </param>
        <summary>
 Represents a Do-Loop block. The Kind property can be used to determine if this
 is a Do While, Do Until, Do Loop While, Do Loop Until, or infinite Do Loop.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoWhileLoopBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoWhileLoopBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax DoWhileLoopBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoWhileLoopBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoWhileLoopBlock (doStatement As DoStatementSyntax, statements As SyntaxList(Of StatementSyntax), loopStatement As LoopStatementSyntax) As DoLoopBlockSyntax" />
      <MemberSignature Language="F#" Value="static member DoWhileLoopBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoWhileLoopBlock (doStatement, statements, loopStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoLoopBlockSyntax ^ DoWhileLoopBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ doStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ loopStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="doStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="loopStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="doStatement">
 The Do statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <param name="loopStatement">
 The Loop statement that ends the block.
 </param>
        <summary>
 Represents a Do-Loop block. The Kind property can be used to determine if this
 is a Do While, Do Until, Do Loop While, Do Loop Until, or infinite Do Loop.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoWhileStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoWhileStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoWhileStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoWhileStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoWhileStatement () As DoStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DoWhileStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoWhileStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ DoWhileStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 The Do statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoWhileStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoWhileStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoWhileStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoWhileStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoWhileStatement (whileOrUntilClause As WhileOrUntilClauseSyntax) As DoStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DoWhileStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoWhileStatement whileOrUntilClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ DoWhileStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ whileOrUntilClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whileOrUntilClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="whileOrUntilClause">
 The "While expression" or "Until expression" clause of the Do statement, if
 present.
 </param>
        <summary>
 The Do statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoWhileStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoWhileStatement (Microsoft.CodeAnalysis.SyntaxToken doKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax DoWhileStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken doKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoWhileStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DoWhileStatement (doKeyword As SyntaxToken, whileOrUntilClause As WhileOrUntilClauseSyntax) As DoStatementSyntax" />
      <MemberSignature Language="F#" Value="static member DoWhileStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.DoWhileStatement (doKeyword, whileOrUntilClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ DoWhileStatement(Microsoft::CodeAnalysis::SyntaxToken doKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ whileOrUntilClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="doKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="whileOrUntilClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="doKeyword">
 The "Do" keyword.
 </param>
        <param name="whileOrUntilClause">
 The "While expression" or "Until expression" clause of the Do statement, if
 present.
 </param>
        <summary>
 The Do statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElasticCarriageReturn">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticCarriageReturn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia ElasticCarriageReturn" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElasticCarriageReturn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ElasticCarriageReturn As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.ElasticCarriageReturn : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElasticCarriageReturn" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::CodeAnalysis::SyntaxTrivia ElasticCarriageReturn { Microsoft::CodeAnalysis::SyntaxTrivia get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 An elastic trivia with kind EndOfLineTrivia containing a single carriage return character. Elastic trivia
 are used to denote trivia that was Not produced by parsing source text, And are usually Not preserved during
 formatting.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElasticCarriageReturnLineFeed">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticCarriageReturnLineFeed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia ElasticCarriageReturnLineFeed" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElasticCarriageReturnLineFeed" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ElasticCarriageReturnLineFeed As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.ElasticCarriageReturnLineFeed : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElasticCarriageReturnLineFeed" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::CodeAnalysis::SyntaxTrivia ElasticCarriageReturnLineFeed { Microsoft::CodeAnalysis::SyntaxTrivia get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 An elastic trivia with kind EndOfLineTrivia containing both the carriage return And line feed characters.
 Elastic trivia are used to denote trivia that was Not produced by parsing source text, And are usually Not
 preserved during formatting.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElasticEndOfLine">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticEndOfLine (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTrivia ElasticEndOfLine(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElasticEndOfLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElasticEndOfLine (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member ElasticEndOfLine : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElasticEndOfLine text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTrivia ElasticEndOfLine(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text of the end of line. Any text can be specified here, however only carriage return And
 line feed characters are recognized by the parser as end of line.</param>
        <summary>
 Creates a trivia with kind EndOfLineTrivia containing the specified text. Elastic trivia are used to
 denote trivia that was Not produced by parsing source text, And are usually Not preserved during formatting.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElasticLineFeed">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticLineFeed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia ElasticLineFeed" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElasticLineFeed" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ElasticLineFeed As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.ElasticLineFeed : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElasticLineFeed" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::CodeAnalysis::SyntaxTrivia ElasticLineFeed { Microsoft::CodeAnalysis::SyntaxTrivia get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 An elastic trivia with kind EndOfLineTrivia containing a single line feed character. Elastic trivia are used
 to denote trivia that was Not produced by parsing source text, And are usually Not preserved during
 formatting.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElasticMarker">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticMarker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia ElasticMarker" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElasticMarker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ElasticMarker As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.ElasticMarker : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElasticMarker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::CodeAnalysis::SyntaxTrivia ElasticMarker { Microsoft::CodeAnalysis::SyntaxTrivia get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 An elastic trivia with kind WhitespaceTrivia containing no characters. Elastic marker trivia are included
 automatically by factory methods when trivia Is Not specified. Syntax formatting will replace elastic
 markers with appropriate trivia.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElasticSpace">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia ElasticSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElasticSpace" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ElasticSpace As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.ElasticSpace : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElasticSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::CodeAnalysis::SyntaxTrivia ElasticSpace { Microsoft::CodeAnalysis::SyntaxTrivia get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 An elastic trivia with kind WhitespaceTrivia containing a single space character. Elastic trivia are used to
 denote trivia that was Not produced by parsing source text, And are usually Not preserved during formatting.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElasticTab">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticTab { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia ElasticTab" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElasticTab" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ElasticTab As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.ElasticTab : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElasticTab" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::CodeAnalysis::SyntaxTrivia ElasticTab { Microsoft::CodeAnalysis::SyntaxTrivia get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 An elastic trivia with kind WhitespaceTrivia containing a single tab character. Elastic trivia are used to
 denote trivia that was Not produced by parsing source text, And are usually Not preserved during formatting.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElasticWhitespace">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia ElasticWhitespace (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTrivia ElasticWhitespace(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElasticWhitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElasticWhitespace (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member ElasticWhitespace : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElasticWhitespace text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTrivia ElasticWhitespace(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text of the whitespace. Any text can be specified here, however only specific
 whitespace characters are recognized by the parser.</param>
        <summary>
 Creates a trivia with kind WhitespaceTrivia containing the specified text. Elastic trivia are used to
 denote trivia that was Not produced by parsing source text, And are usually Not preserved during formatting.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax ElseBlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax ElseBlock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseBlock" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseBlock () As ElseBlockSyntax" />
      <MemberSignature Language="F#" Value="static member ElseBlock : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseBlock " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseBlockSyntax ^ ElseBlock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "Else ..." block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax ElseBlock (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax ElseBlock(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseBlock(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseBlock (statements As SyntaxList(Of StatementSyntax)) As ElseBlockSyntax" />
      <MemberSignature Language="F#" Value="static member ElseBlock : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseBlock statements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseBlockSyntax ^ ElseBlock(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="statements">
 A list of statements to be executed.
 </param>
        <summary>
 Represents an "Else ..." block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax ElseBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax elseStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax ElseBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax elseStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseBlock (elseStatement As ElseStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As ElseBlockSyntax" />
      <MemberSignature Language="F#" Value="static member ElseBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseBlock (elseStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseBlockSyntax ^ ElseBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseStatementSyntax ^ elseStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elseStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="elseStatement">
 The "Else" statement that begins the "Else" block.
 </param>
        <param name="statements">
 A list of statements to be executed.
 </param>
        <summary>
 Represents an "Else ..." block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseCaseClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax ElseCaseClause ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax ElseCaseClause() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseCaseClause" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseCaseClause () As ElseCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member ElseCaseClause : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseCaseClause " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseCaseClauseSyntax ^ ElseCaseClause();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 The "Else" part in a Case Else statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseCaseClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax ElseCaseClause (Microsoft.CodeAnalysis.SyntaxToken elseKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax ElseCaseClause(valuetype Microsoft.CodeAnalysis.SyntaxToken elseKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseCaseClause(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseCaseClause (elseKeyword As SyntaxToken) As ElseCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member ElseCaseClause : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseCaseClause elseKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseCaseClauseSyntax ^ ElseCaseClause(Microsoft::CodeAnalysis::SyntaxToken elseKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elseKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="elseKeyword">
 The "Else" keyword.
 </param>
        <summary>
 The "Else" part in a Case Else statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax ElseDirectiveTrivia ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax ElseDirectiveTrivia() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseDirectiveTrivia () As ElseDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ElseDirectiveTrivia : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseDirectiveTrivia " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseDirectiveTriviaSyntax ^ ElseDirectiveTrivia();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an #Else pre-processing directive appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax ElseDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken elseKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax ElseDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken elseKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseDirectiveTrivia (hashToken As SyntaxToken, elseKeyword As SyntaxToken) As ElseDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ElseDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseDirectiveTrivia (hashToken, elseKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseDirectiveTriviaSyntax ^ ElseDirectiveTrivia(Microsoft::CodeAnalysis::SyntaxToken hashToken, Microsoft::CodeAnalysis::SyntaxToken elseKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="elseKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="hashToken">
 The "#" token in a preprocessor directive.
 </param>
        <param name="elseKeyword">To be added.</param>
        <summary>
 Represents an #Else pre-processing directive appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseIfBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax ElseIfBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax elseIfStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax ElseIfBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax elseIfStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseIfBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseIfBlock (elseIfStatement As ElseIfStatementSyntax) As ElseIfBlockSyntax" />
      <MemberSignature Language="F#" Value="static member ElseIfBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseIfBlock elseIfStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseIfBlockSyntax ^ ElseIfBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseIfStatementSyntax ^ elseIfStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elseIfStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="elseIfStatement">
 The "ElseIf ... Then" statement the begins the "ElseIf" block.
 </param>
        <summary>
 Represents an "ElseIf ... Then ..." block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseIfBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax ElseIfBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax elseIfStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax ElseIfBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax elseIfStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseIfBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseIfBlock (elseIfStatement As ElseIfStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As ElseIfBlockSyntax" />
      <MemberSignature Language="F#" Value="static member ElseIfBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseIfBlock (elseIfStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseIfBlockSyntax ^ ElseIfBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseIfStatementSyntax ^ elseIfStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elseIfStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="elseIfStatement">
 The "ElseIf ... Then" statement the begins the "ElseIf" block.
 </param>
        <param name="statements">
 A list of statements to be executed if the condition expression of the "ElseIf"
 statement evaluates as true.
 </param>
        <summary>
 Represents an "ElseIf ... Then ..." block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseIfDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax ElseIfDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax ElseIfDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseIfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseIfDirectiveTrivia (ifOrElseIfKeyword As SyntaxToken, condition As ExpressionSyntax) As IfDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ElseIfDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseIfDirectiveTrivia (ifOrElseIfKeyword, condition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::IfDirectiveTriviaSyntax ^ ElseIfDirectiveTrivia(Microsoft::CodeAnalysis::SyntaxToken ifOrElseIfKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifOrElseIfKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="ifOrElseIfKeyword">To be added.</param>
        <param name="condition">To be added.</param>
        <summary>
 Represents the beginning of an #If pre-processing directive appearing in
 source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseIfDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax ElseIfDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken elseKeyword, Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken thenKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax ElseIfDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken elseKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, valuetype Microsoft.CodeAnalysis.SyntaxToken thenKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseIfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseIfDirectiveTrivia (hashToken As SyntaxToken, elseKeyword As SyntaxToken, ifOrElseIfKeyword As SyntaxToken, condition As ExpressionSyntax, thenKeyword As SyntaxToken) As IfDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ElseIfDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseIfDirectiveTrivia (hashToken, elseKeyword, ifOrElseIfKeyword, condition, thenKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::IfDirectiveTriviaSyntax ^ ElseIfDirectiveTrivia(Microsoft::CodeAnalysis::SyntaxToken hashToken, Microsoft::CodeAnalysis::SyntaxToken elseKeyword, Microsoft::CodeAnalysis::SyntaxToken ifOrElseIfKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition, Microsoft::CodeAnalysis::SyntaxToken thenKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="elseKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="ifOrElseIfKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="thenKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="hashToken">
 The "#" token in a preprocessor directive.
 </param>
        <param name="elseKeyword">To be added.</param>
        <param name="ifOrElseIfKeyword">To be added.</param>
        <param name="condition">To be added.</param>
        <param name="thenKeyword">To be added.</param>
        <summary>
 Represents the beginning of an #If pre-processing directive appearing in
 source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseIfStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax ElseIfStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax ElseIfStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseIfStatement (condition As ExpressionSyntax) As ElseIfStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ElseIfStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseIfStatement condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseIfStatementSyntax ^ ElseIfStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="condition">
 The condition expression to be evaluated.
 </param>
        <summary>
 Represents the "ElseIf ... Then" statement that begins an "ElseIf" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseIfStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax ElseIfStatement (Microsoft.CodeAnalysis.SyntaxToken elseIfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken thenKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax ElseIfStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken elseIfKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, valuetype Microsoft.CodeAnalysis.SyntaxToken thenKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseIfStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseIfStatement (elseIfKeyword As SyntaxToken, condition As ExpressionSyntax, thenKeyword As SyntaxToken) As ElseIfStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ElseIfStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseIfStatement (elseIfKeyword, condition, thenKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseIfStatementSyntax ^ ElseIfStatement(Microsoft::CodeAnalysis::SyntaxToken elseIfKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition, Microsoft::CodeAnalysis::SyntaxToken thenKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elseIfKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="thenKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="elseIfKeyword">
 The "ElseIf" keyword.
 </param>
        <param name="condition">
 The condition expression to be evaluated.
 </param>
        <param name="thenKeyword">
 The "Then" keyword.
 </param>
        <summary>
 Represents the "ElseIf ... Then" statement that begins an "ElseIf" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax ElseStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax ElseStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseStatement () As ElseStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ElseStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseStatementSyntax ^ ElseStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents the "Else" statement that begins an "Else" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElseStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax ElseStatement (Microsoft.CodeAnalysis.SyntaxToken elseKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax ElseStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken elseKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElseStatement (elseKeyword As SyntaxToken) As ElseStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ElseStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ElseStatement elseKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseStatementSyntax ^ ElseStatement(Microsoft::CodeAnalysis::SyntaxToken elseKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elseKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="elseKeyword">
 The "Else" keyword.
 </param>
        <summary>
 Represents the "Else" statement that begins an "Else" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax EmptyStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax EmptyStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EmptyStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EmptyStatement () As EmptyStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EmptyStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EmptyStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EmptyStatementSyntax ^ EmptyStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 A class to represent an empty statement. This can occur when a colon is on a
 line without anything else.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax EmptyStatement (Microsoft.CodeAnalysis.SyntaxToken empty);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax EmptyStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken empty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EmptyStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EmptyStatement (empty As SyntaxToken) As EmptyStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EmptyStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EmptyStatement empty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EmptyStatementSyntax ^ EmptyStatement(Microsoft::CodeAnalysis::SyntaxToken empty);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="empty" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="empty">
 An empty token because all non terminals must have a token.
 </param>
        <summary>
 A class to represent an empty statement. This can occur when a colon is on a
 line without anything else.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableWarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax EnableWarningDirectiveTrivia (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax&gt; errorCodes);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax EnableWarningDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax&gt; errorCodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnableWarningDirectiveTrivia(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnableWarningDirectiveTrivia (errorCodes As SeparatedSyntaxList(Of IdentifierNameSyntax)) As EnableWarningDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member EnableWarningDirectiveTrivia : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnableWarningDirectiveTrivia errorCodes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EnableWarningDirectiveTriviaSyntax ^ EnableWarningDirectiveTrivia(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^&gt; errorCodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorCodes" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="errorCodes">To be added.</param>
        <summary>
 Represents #Enable Warning pre-processing directive appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableWarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax EnableWarningDirectiveTrivia (params Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax[] errorCodes);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax EnableWarningDirectiveTrivia(class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax[] errorCodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnableWarningDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnableWarningDirectiveTrivia (ParamArray errorCodes As IdentifierNameSyntax()) As EnableWarningDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member EnableWarningDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnableWarningDirectiveTrivia errorCodes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EnableWarningDirectiveTriviaSyntax ^ EnableWarningDirectiveTrivia(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^&gt; ^ errorCodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorCodes" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="errorCodes">To be added.</param>
        <summary>
 Represents #Enable Warning pre-processing directive appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableWarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax EnableWarningDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken enableKeyword, Microsoft.CodeAnalysis.SyntaxToken warningKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax&gt; errorCodes);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax EnableWarningDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken enableKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken warningKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax&gt; errorCodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnableWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnableWarningDirectiveTrivia (hashToken As SyntaxToken, enableKeyword As SyntaxToken, warningKeyword As SyntaxToken, errorCodes As SeparatedSyntaxList(Of IdentifierNameSyntax)) As EnableWarningDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member EnableWarningDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnableWarningDirectiveTrivia (hashToken, enableKeyword, warningKeyword, errorCodes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EnableWarningDirectiveTriviaSyntax ^ EnableWarningDirectiveTrivia(Microsoft::CodeAnalysis::SyntaxToken hashToken, Microsoft::CodeAnalysis::SyntaxToken enableKeyword, Microsoft::CodeAnalysis::SyntaxToken warningKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^&gt; errorCodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="enableKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="warningKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="errorCodes" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="hashToken">
 The "#" token in a preprocessor directive.
 </param>
        <param name="enableKeyword">To be added.</param>
        <param name="warningKeyword">To be added.</param>
        <param name="errorCodes">To be added.</param>
        <summary>
 Represents #Enable Warning pre-processing directive appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAddHandlerStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndAddHandlerStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndAddHandlerStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndAddHandlerStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndAddHandlerStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndAddHandlerStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndAddHandlerStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndAddHandlerStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAddHandlerStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndAddHandlerStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndAddHandlerStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndAddHandlerStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndAddHandlerStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndAddHandlerStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndAddHandlerStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndAddHandlerStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBlockStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndBlockStatement (kind As SyntaxKind, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndBlockStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndBlockStatement (kind, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndBlockStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 EndBlockStatementSyntax. One of EndIfStatement, EndUsingStatement,
 EndWithStatement, EndSelectStatement, EndStructureStatement, EndEnumStatement,
 EndInterfaceStatement, EndClassStatement, EndModuleStatement,
 EndNamespaceStatement, EndSubStatement, EndFunctionStatement, EndGetStatement,
 EndSetStatement, EndPropertyStatement, EndOperatorStatement, EndEventStatement,
 EndAddHandlerStatement, EndRemoveHandlerStatement, EndRaiseEventStatement,
 EndWhileStatement, EndTryStatement, EndSyncLockStatement.
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBlockStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndBlockStatement (kind As SyntaxKind, endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndBlockStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndBlockStatement (kind, endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndBlockStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 EndBlockStatementSyntax. One of EndIfStatement, EndUsingStatement,
 EndWithStatement, EndSelectStatement, EndStructureStatement, EndEnumStatement,
 EndInterfaceStatement, EndClassStatement, EndModuleStatement,
 EndNamespaceStatement, EndSubStatement, EndFunctionStatement, EndGetStatement,
 EndSetStatement, EndPropertyStatement, EndOperatorStatement, EndEventStatement,
 EndAddHandlerStatement, EndRemoveHandlerStatement, EndRaiseEventStatement,
 EndWhileStatement, EndTryStatement, EndSyncLockStatement.
 </param>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndClassStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndClassStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndClassStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndClassStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndClassStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndClassStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndClassStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndClassStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndClassStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndClassStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndClassStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndClassStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndClassStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndClassStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndClassStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndClassStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndEnumStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndEnumStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndEnumStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndEnumStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndEnumStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndEnumStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndEnumStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndEnumStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndEnumStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndEnumStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndEnumStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndEnumStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndEnumStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndEnumStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndEnumStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndEnumStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndEventStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndEventStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndEventStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndEventStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndEventStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndEventStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndEventStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndEventStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndEventStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndEventStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndEventStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndEventStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndEventStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndEventStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndEventStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndEventStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndExternalSourceDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax EndExternalSourceDirectiveTrivia ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax EndExternalSourceDirectiveTrivia() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndExternalSourceDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndExternalSourceDirectiveTrivia () As EndExternalSourceDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member EndExternalSourceDirectiveTrivia : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndExternalSourceDirectiveTrivia " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndExternalSourceDirectiveTriviaSyntax ^ EndExternalSourceDirectiveTrivia();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an #End ExternalSource pre-processing directive appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndExternalSourceDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax EndExternalSourceDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken externalSourceKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax EndExternalSourceDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken externalSourceKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndExternalSourceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndExternalSourceDirectiveTrivia (hashToken As SyntaxToken, endKeyword As SyntaxToken, externalSourceKeyword As SyntaxToken) As EndExternalSourceDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member EndExternalSourceDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndExternalSourceDirectiveTrivia (hashToken, endKeyword, externalSourceKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndExternalSourceDirectiveTriviaSyntax ^ EndExternalSourceDirectiveTrivia(Microsoft::CodeAnalysis::SyntaxToken hashToken, Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken externalSourceKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="externalSourceKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="hashToken">
 The "#" token in a preprocessor directive.
 </param>
        <param name="endKeyword">To be added.</param>
        <param name="externalSourceKeyword">To be added.</param>
        <summary>
 Represents an #End ExternalSource pre-processing directive appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndFunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndFunctionStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndFunctionStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndFunctionStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndFunctionStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndFunctionStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndFunctionStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndFunctionStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndFunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndFunctionStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndFunctionStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndFunctionStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndFunctionStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndFunctionStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndFunctionStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndFunctionStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndGetStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndGetStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndGetStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndGetStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndGetStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndGetStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndGetStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndGetStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndGetStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndGetStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndGetStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndGetStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndGetStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndGetStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndGetStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndGetStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndIfDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax EndIfDirectiveTrivia ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax EndIfDirectiveTrivia() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndIfDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndIfDirectiveTrivia () As EndIfDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member EndIfDirectiveTrivia : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndIfDirectiveTrivia " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndIfDirectiveTriviaSyntax ^ EndIfDirectiveTrivia();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an #End If pre-processing directive appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndIfDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax EndIfDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken ifKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax EndIfDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken ifKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndIfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndIfDirectiveTrivia (hashToken As SyntaxToken, endKeyword As SyntaxToken, ifKeyword As SyntaxToken) As EndIfDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member EndIfDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndIfDirectiveTrivia (hashToken, endKeyword, ifKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndIfDirectiveTriviaSyntax ^ EndIfDirectiveTrivia(Microsoft::CodeAnalysis::SyntaxToken hashToken, Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken ifKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="ifKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="hashToken">
 The "#" token in a preprocessor directive.
 </param>
        <param name="endKeyword">To be added.</param>
        <param name="ifKeyword">To be added.</param>
        <summary>
 Represents an #End If pre-processing directive appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndIfStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndIfStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndIfStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndIfStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndIfStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndIfStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndIfStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndIfStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndIfStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndIfStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndIfStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndIfStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndIfStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndIfStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndIfStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndIfStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInterfaceStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndInterfaceStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndInterfaceStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndInterfaceStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndInterfaceStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndInterfaceStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndInterfaceStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndInterfaceStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInterfaceStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndInterfaceStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndInterfaceStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndInterfaceStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndInterfaceStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndInterfaceStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndInterfaceStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndInterfaceStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndModuleStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndModuleStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndModuleStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndModuleStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndModuleStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndModuleStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndModuleStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndModuleStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndModuleStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndModuleStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndModuleStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndModuleStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndModuleStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndModuleStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndModuleStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndModuleStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndNamespaceStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndNamespaceStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndNamespaceStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndNamespaceStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndNamespaceStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndNamespaceStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndNamespaceStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndNamespaceStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndNamespaceStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndNamespaceStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndNamespaceStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndNamespaceStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndNamespaceStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndNamespaceStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndNamespaceStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndNamespaceStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOfLine">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia EndOfLine (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTrivia EndOfLine(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndOfLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndOfLine (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member EndOfLine : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndOfLine text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTrivia EndOfLine(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text of the end of line. Any text can be specified here, however only carriage return And
 line feed characters are recognized by the parser as end of line.</param>
        <summary>
 Creates a trivia with kind EndOfLineTrivia containing the specified text. 
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOfLine">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia EndOfLine (string text, bool elastic);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTrivia EndOfLine(string text, bool elastic) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndOfLine(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndOfLine (text As String, elastic As Boolean) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member EndOfLine : string * bool -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndOfLine (text, elastic)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTrivia EndOfLine(System::String ^ text, bool elastic);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use SyntaxFactory.EndOfLine or SyntaxFactory.ElasticEndOfLine")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="elastic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="elastic">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOfLineTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia EndOfLineTrivia (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTrivia EndOfLineTrivia(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndOfLineTrivia(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndOfLineTrivia (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member EndOfLineTrivia : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndOfLineTrivia text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTrivia EndOfLineTrivia(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
 The actual text of this token.
 </param>
        <summary>
 Trivia nodes represents parts of the program text that are not parts of the
 syntactic grammar, such as spaces, newlines, comments, preprocessors
 directives, and disabled code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOperatorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndOperatorStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndOperatorStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndOperatorStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndOperatorStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndOperatorStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndOperatorStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndOperatorStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOperatorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndOperatorStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndOperatorStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndOperatorStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndOperatorStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndOperatorStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndOperatorStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndOperatorStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndPropertyStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndPropertyStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndPropertyStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndPropertyStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndPropertyStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndPropertyStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndPropertyStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndPropertyStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndPropertyStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndPropertyStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndPropertyStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndPropertyStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndPropertyStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndPropertyStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndPropertyStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndPropertyStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndRaiseEventStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndRaiseEventStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndRaiseEventStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndRaiseEventStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndRaiseEventStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndRaiseEventStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndRaiseEventStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndRaiseEventStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndRaiseEventStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndRaiseEventStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndRaiseEventStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndRaiseEventStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndRaiseEventStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndRaiseEventStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndRaiseEventStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndRaiseEventStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndRegionDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax EndRegionDirectiveTrivia ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax EndRegionDirectiveTrivia() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndRegionDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndRegionDirectiveTrivia () As EndRegionDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member EndRegionDirectiveTrivia : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndRegionDirectiveTrivia " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndRegionDirectiveTriviaSyntax ^ EndRegionDirectiveTrivia();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an #End Region directive appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndRegionDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax EndRegionDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken regionKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax EndRegionDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken regionKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndRegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndRegionDirectiveTrivia (hashToken As SyntaxToken, endKeyword As SyntaxToken, regionKeyword As SyntaxToken) As EndRegionDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member EndRegionDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndRegionDirectiveTrivia (hashToken, endKeyword, regionKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndRegionDirectiveTriviaSyntax ^ EndRegionDirectiveTrivia(Microsoft::CodeAnalysis::SyntaxToken hashToken, Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken regionKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="regionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="hashToken">
 The "#" token in a preprocessor directive.
 </param>
        <param name="endKeyword">
 The "End" keyword.
 </param>
        <param name="regionKeyword">
 The "Region" keyword.
 </param>
        <summary>
 Represents an #End Region directive appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndRemoveHandlerStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndRemoveHandlerStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndRemoveHandlerStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndRemoveHandlerStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndRemoveHandlerStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndRemoveHandlerStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndRemoveHandlerStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndRemoveHandlerStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndRemoveHandlerStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndRemoveHandlerStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndRemoveHandlerStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndRemoveHandlerStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndRemoveHandlerStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndRemoveHandlerStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndRemoveHandlerStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndRemoveHandlerStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSelectStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSelectStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSelectStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndSelectStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndSelectStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndSelectStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndSelectStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndSelectStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSelectStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSelectStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSelectStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndSelectStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndSelectStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndSelectStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndSelectStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndSelectStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSetStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSetStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSetStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndSetStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndSetStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndSetStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndSetStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndSetStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSetStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSetStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSetStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndSetStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndSetStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndSetStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndSetStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndSetStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax EndStatement (Microsoft.CodeAnalysis.SyntaxToken stopOrEndKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax EndStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken stopOrEndKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndStatement (stopOrEndKeyword As SyntaxToken) As StopOrEndStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndStatement stopOrEndKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::StopOrEndStatementSyntax ^ EndStatement(Microsoft::CodeAnalysis::SyntaxToken stopOrEndKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stopOrEndKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="stopOrEndKeyword">
 The "Stop" or "End" keyword.
 </param>
        <summary>
 Represents a "Stop" or "End" statement. The Kind can be used to determine which
 kind of statement this is.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndStructureStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndStructureStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndStructureStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndStructureStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndStructureStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndStructureStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndStructureStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndStructureStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndStructureStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndStructureStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndStructureStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndStructureStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndStructureStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndStructureStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndStructureStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndStructureStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSubStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSubStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSubStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndSubStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndSubStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndSubStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndSubStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndSubStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSubStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSubStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSubStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndSubStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndSubStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndSubStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndSubStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndSubStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSyncLockStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSyncLockStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSyncLockStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndSyncLockStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndSyncLockStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndSyncLockStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndSyncLockStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndSyncLockStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSyncLockStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSyncLockStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndSyncLockStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndSyncLockStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndSyncLockStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndSyncLockStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndSyncLockStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndSyncLockStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTryStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndTryStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndTryStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndTryStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndTryStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndTryStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndTryStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndTryStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTryStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndTryStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndTryStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndTryStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndTryStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndTryStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndTryStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndTryStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUsingStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndUsingStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndUsingStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndUsingStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndUsingStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndUsingStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndUsingStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndUsingStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUsingStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndUsingStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndUsingStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndUsingStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndUsingStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndUsingStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndUsingStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndUsingStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWhileStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndWhileStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndWhileStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndWhileStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndWhileStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndWhileStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndWhileStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndWhileStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWhileStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndWhileStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndWhileStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndWhileStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndWhileStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndWhileStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndWhileStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndWhileStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWithStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndWithStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndWithStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndWithStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndWithStatement () As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndWithStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndWithStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndWithStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWithStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndWithStatement (Microsoft.CodeAnalysis.SyntaxToken endKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndWithStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken endKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndWithStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndWithStatement (endKeyword As SyntaxToken, blockKeyword As SyntaxToken) As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EndWithStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EndWithStatement (endKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndWithStatement(Microsoft::CodeAnalysis::SyntaxToken endKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="endKeyword">
 The "End" keyword
 </param>
        <param name="blockKeyword">
 The keyword that ends the block. Must be one of: "If", "Using", "With",
 "Select", "Structure", "Enum", "Interface", "Class", "Module", "Namespace",
 "Sub", "Function", "Get, "Set", "Property", "Operator", "Event", "AddHandler",
 "RemoveHandler", "RaiseEvent", "While", "Try" or "SyncLock".
 </param>
        <summary>
 Represents an "End XXX" statement, where XXX is a single keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax EnumBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax enumStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax EnumBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax enumStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumBlock (enumStatement As EnumStatementSyntax) As EnumBlockSyntax" />
      <MemberSignature Language="F#" Value="static member EnumBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumBlock enumStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumBlockSyntax ^ EnumBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumStatementSyntax ^ enumStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="enumStatement">
 The statement that begins the type or module.
 </param>
        <summary>
 Represents a declaration of an Enum, its contents and the End Enum statement
 that ends it.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax EnumBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax enumStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax EnumBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax enumStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumBlock (enumStatement As EnumStatementSyntax, members As SyntaxList(Of StatementSyntax)) As EnumBlockSyntax" />
      <MemberSignature Language="F#" Value="static member EnumBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumBlock (enumStatement, members)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumBlockSyntax ^ EnumBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumStatementSyntax ^ enumStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="enumStatement">
 The statement that begins the type or module.
 </param>
        <param name="members">
 The declarations contained in the enumeration.
 </param>
        <summary>
 Represents a declaration of an Enum, its contents and the End Enum statement
 that ends it.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax EnumBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax enumStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endEnumStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax EnumBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax enumStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endEnumStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumBlock (enumStatement As EnumStatementSyntax, members As SyntaxList(Of StatementSyntax), endEnumStatement As EndBlockStatementSyntax) As EnumBlockSyntax" />
      <MemberSignature Language="F#" Value="static member EnumBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumBlock (enumStatement, members, endEnumStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumBlockSyntax ^ EnumBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumStatementSyntax ^ enumStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; members, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endEnumStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endEnumStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="enumStatement">
 The statement that begins the type or module.
 </param>
        <param name="members">
 The declarations contained in the enumeration.
 </param>
        <param name="endEnumStatement">
 The End XXX statement that ends the block.
 </param>
        <summary>
 Represents a declaration of an Enum, its contents and the End Enum statement
 that ends it.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumMemberDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax EnumMemberDeclaration (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax EnumMemberDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumMemberDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumMemberDeclaration (identifier As SyntaxToken) As EnumMemberDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member EnumMemberDeclaration : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumMemberDeclaration identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumMemberDeclarationSyntax ^ EnumMemberDeclaration(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>
 Represents a name and value in an EnumDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumMemberDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax EnumMemberDeclaration (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax EnumMemberDeclaration(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumMemberDeclaration(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumMemberDeclaration (identifier As String) As EnumMemberDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member EnumMemberDeclaration : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumMemberDeclaration identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumMemberDeclarationSyntax ^ EnumMemberDeclaration(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>
 Represents a name and value in an EnumDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumMemberDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax EnumMemberDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax EnumMemberDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumMemberDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumMemberDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), identifier As SyntaxToken, initializer As EqualsValueSyntax) As EnumMemberDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member EnumMemberDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumMemberDeclaration (attributeLists, identifier, initializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumMemberDeclarationSyntax ^ EnumMemberDeclaration(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::EqualsValueSyntax ^ initializer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="initializer">
 An optional value for the enum member.
 </param>
        <summary>
 Represents a name and value in an EnumDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax EnumStatement (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax EnumStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumStatement (identifier As SyntaxToken) As EnumStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EnumStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumStatementSyntax ^ EnumStatement(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the enum being declared.
 </param>
        <summary>
 Represents the beginning statement of an Enum declaration. This node always
 appears as the Begin of an EnumBlock with Kind=EnumDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax EnumStatement (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax EnumStatement(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumStatement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumStatement (identifier As String) As EnumStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EnumStatement : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumStatementSyntax ^ EnumStatement(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the enum being declared.
 </param>
        <summary>
 Represents the beginning statement of an Enum declaration. This node always
 appears as the Begin of an EnumBlock with Kind=EnumDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax EnumStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax underlyingType);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax EnumStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax underlyingType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, underlyingType As AsClauseSyntax) As EnumStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EnumStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumStatement (attributeLists, modifiers, identifier, underlyingType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumStatementSyntax ^ EnumStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::AsClauseSyntax ^ underlyingType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="underlyingType" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, an empty list is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned.
 </param>
        <param name="identifier">
 The name of the enum being declared.
 </param>
        <param name="underlyingType">
 Optional "As XXX" clause describing the underlying type of the enumeration. If
 no As clause was specified, Nothing is returned.
 </param>
        <summary>
 Represents the beginning statement of an Enum declaration. This node always
 appears as the Begin of an EnumBlock with Kind=EnumDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax EnumStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken enumKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax underlyingType);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax EnumStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken enumKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax underlyingType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, enumKeyword As SyntaxToken, identifier As SyntaxToken, underlyingType As AsClauseSyntax) As EnumStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EnumStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EnumStatement (attributeLists, modifiers, enumKeyword, identifier, underlyingType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumStatementSyntax ^ EnumStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken enumKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::AsClauseSyntax ^ underlyingType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="enumKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="underlyingType" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, an empty list is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned.
 </param>
        <param name="enumKeyword">
 The "Enum" keyword.
 </param>
        <param name="identifier">
 The name of the enum being declared.
 </param>
        <param name="underlyingType">
 Optional "As XXX" clause describing the underlying type of the enumeration. If
 no As clause was specified, Nothing is returned.
 </param>
        <summary>
 Represents the beginning statement of an Enum declaration. This node always
 appears as the Begin of an EnumBlock with Kind=EnumDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualsExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax EqualsExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax EqualsExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EqualsExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EqualsExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member EqualsExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EqualsExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ EqualsExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualsExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax EqualsExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax EqualsExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EqualsExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EqualsExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member EqualsExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EqualsExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ EqualsExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualsValue">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax EqualsValue (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax EqualsValue(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EqualsValue(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EqualsValue (value As ExpressionSyntax) As EqualsValueSyntax" />
      <MemberSignature Language="F#" Value="static member EqualsValue : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EqualsValue value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EqualsValueSyntax ^ EqualsValue(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="value">
 The expression used as the initial value.
 </param>
        <summary>
 Represents an "= initializer" clause in a declaration for a variable, parameter
 or automatic property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualsValue">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax EqualsValue (Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax EqualsValue(valuetype Microsoft.CodeAnalysis.SyntaxToken equalsToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EqualsValue(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EqualsValue (equalsToken As SyntaxToken, value As ExpressionSyntax) As EqualsValueSyntax" />
      <MemberSignature Language="F#" Value="static member EqualsValue : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EqualsValue (equalsToken, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EqualsValueSyntax ^ EqualsValue(Microsoft::CodeAnalysis::SyntaxToken equalsToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="equalsToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="equalsToken">
 The "=" token.
 </param>
        <param name="value">
 The expression used as the initial value.
 </param>
        <summary>
 Represents an "= initializer" clause in a declaration for a variable, parameter
 or automatic property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EraseStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax EraseStatement (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax EraseStatement(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EraseStatement(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EraseStatement (expressions As SeparatedSyntaxList(Of ExpressionSyntax)) As EraseStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EraseStatement : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EraseStatement expressions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EraseStatementSyntax ^ EraseStatement(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^&gt; expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="expressions">
 A list of expressions denoting the arrays to erase.
 </param>
        <summary>
 Represents an "Erase" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EraseStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax EraseStatement (params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax EraseStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EraseStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EraseStatement (ParamArray expressions As ExpressionSyntax()) As EraseStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EraseStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EraseStatement expressions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EraseStatementSyntax ^ EraseStatement(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^&gt; ^ expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expressions">
 A list of expressions denoting the arrays to erase.
 </param>
        <summary>
 Represents an "Erase" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EraseStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax EraseStatement (Microsoft.CodeAnalysis.SyntaxToken eraseKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax EraseStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken eraseKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EraseStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EraseStatement (eraseKeyword As SyntaxToken, expressions As SeparatedSyntaxList(Of ExpressionSyntax)) As EraseStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EraseStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EraseStatement (eraseKeyword, expressions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EraseStatementSyntax ^ EraseStatement(Microsoft::CodeAnalysis::SyntaxToken eraseKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^&gt; expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eraseKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expressions" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="eraseKeyword">
 The "Erase" keyword.
 </param>
        <param name="expressions">
 A list of expressions denoting the arrays to erase.
 </param>
        <summary>
 Represents an "Erase" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax ErrorStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax errorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax ErrorStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax errorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ErrorStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ErrorStatement (errorNumber As ExpressionSyntax) As ErrorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ErrorStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ErrorStatement errorNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ErrorStatementSyntax ^ ErrorStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ errorNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorNumber" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="errorNumber">
 The expression that represents the error number.
 </param>
        <summary>
 Represents the "Error" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax ErrorStatement (Microsoft.CodeAnalysis.SyntaxToken errorKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax errorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax ErrorStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken errorKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax errorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ErrorStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ErrorStatement (errorKeyword As SyntaxToken, errorNumber As ExpressionSyntax) As ErrorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ErrorStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ErrorStatement (errorKeyword, errorNumber)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ErrorStatementSyntax ^ ErrorStatement(Microsoft::CodeAnalysis::SyntaxToken errorKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ errorNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="errorNumber" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="errorKeyword">
 The "Error" keyword.
 </param>
        <param name="errorNumber">
 The expression that represents the error number.
 </param>
        <summary>
 Represents the "Error" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax EventBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax eventStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; accessors);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax EventBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax eventStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; accessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EventBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EventBlock (eventStatement As EventStatementSyntax, accessors As SyntaxList(Of AccessorBlockSyntax)) As EventBlockSyntax" />
      <MemberSignature Language="F#" Value="static member EventBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EventBlock (eventStatement, accessors)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EventBlockSyntax ^ EventBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::EventStatementSyntax ^ eventStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^&gt; accessors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax" />
        <Parameter Name="accessors" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="eventStatement">
 The event declaration that begins the block.
 </param>
        <param name="accessors">
 The accessor blocks contained in the custom event declaration, between the
 Event statement and the End Event statement.
 </param>
        <summary>
 Represents a custom event declaration: A declaration that has a beginning event
 declaration, some accessor blocks and an end statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax EventBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax eventStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; accessors, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endEventStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax EventBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax eventStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; accessors, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endEventStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EventBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EventBlock (eventStatement As EventStatementSyntax, accessors As SyntaxList(Of AccessorBlockSyntax), endEventStatement As EndBlockStatementSyntax) As EventBlockSyntax" />
      <MemberSignature Language="F#" Value="static member EventBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EventBlock (eventStatement, accessors, endEventStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EventBlockSyntax ^ EventBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::EventStatementSyntax ^ eventStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^&gt; accessors, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endEventStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax" />
        <Parameter Name="accessors" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt;" />
        <Parameter Name="endEventStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="eventStatement">
 The event declaration that begins the block.
 </param>
        <param name="accessors">
 The accessor blocks contained in the custom event declaration, between the
 Event statement and the End Event statement.
 </param>
        <param name="endEventStatement">
 The End Event statement that ends the block.
 </param>
        <summary>
 Represents a custom event declaration: A declaration that has a beginning event
 declaration, some accessor blocks and an end statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax EventStatement (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax EventStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EventStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EventStatement (identifier As SyntaxToken) As EventStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EventStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EventStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EventStatementSyntax ^ EventStatement(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the event being declared.
 </param>
        <summary>
 A statement that declares an event. If the event being declared is a custom
 event, this statement will be the Begin of a PropertyOrEventBlock, and the
 accessors will be part of the Accessors of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax EventStatement (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax EventStatement(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EventStatement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EventStatement (identifier As String) As EventStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EventStatement : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EventStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EventStatementSyntax ^ EventStatement(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the event being declared.
 </param>
        <summary>
 A statement that declares an event. If the event being declared is a custom
 event, this statement will be the Begin of a PropertyOrEventBlock, and the
 accessors will be part of the Accessors of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax EventStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax EventStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EventStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EventStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax, implementsClause As ImplementsClauseSyntax) As EventStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EventStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EventStatement (attributeLists, modifiers, identifier, parameterList, asClause, implementsClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EventStatementSyntax ^ EventStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsClauseSyntax ^ implementsClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
        <Parameter Name="implementsClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="identifier">
 The name of the event being declared.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <param name="implementsClause">
 If present, an Implements clause indicates the interface methods that this
 method implements.
 </param>
        <summary>
 A statement that declares an event. If the event being declared is a custom
 event, this statement will be the Begin of a PropertyOrEventBlock, and the
 accessors will be part of the Accessors of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax EventStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken customKeyword, Microsoft.CodeAnalysis.SyntaxToken eventKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax EventStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken customKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken eventKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EventStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EventStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, customKeyword As SyntaxToken, eventKeyword As SyntaxToken, identifier As SyntaxToken, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax, implementsClause As ImplementsClauseSyntax) As EventStatementSyntax" />
      <MemberSignature Language="F#" Value="static member EventStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.EventStatement (attributeLists, modifiers, customKeyword, eventKeyword, identifier, parameterList, asClause, implementsClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::EventStatementSyntax ^ EventStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken customKeyword, Microsoft::CodeAnalysis::SyntaxToken eventKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsClauseSyntax ^ implementsClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="customKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="eventKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
        <Parameter Name="implementsClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="customKeyword">
 The optional Custom keyword for custom event declarations.
 </param>
        <param name="eventKeyword">
 The "Event" keyword that introduces this event declaration.
 </param>
        <param name="identifier">
 The name of the event being declared.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <param name="implementsClause">
 If present, an Implements clause indicates the interface methods that this
 method implements.
 </param>
        <summary>
 A statement that declares an event. If the event being declared is a custom
 event, this statement will be the Begin of a PropertyOrEventBlock, and the
 accessors will be part of the Accessors of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ExclusiveOrExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ExclusiveOrExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExclusiveOrExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ExclusiveOrExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExclusiveOrExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ ExclusiveOrExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ExclusiveOrExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ExclusiveOrExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExclusiveOrExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ExclusiveOrExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExclusiveOrExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ ExclusiveOrExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitDoStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitDoStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitDoStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitDoStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitDoStatement () As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitDoStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitDoStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitDoStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitDoStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitDoStatement (Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitDoStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken exitKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitDoStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitDoStatement (exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitDoStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitDoStatement (exitKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitDoStatement(Microsoft::CodeAnalysis::SyntaxToken exitKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="exitKeyword">
 The "Exit" keyword.
 </param>
        <param name="blockKeyword">
 The keyword describing the block to exit.
 </param>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitForStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitForStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitForStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitForStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitForStatement () As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitForStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitForStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitForStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitForStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitForStatement (Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitForStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken exitKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitForStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitForStatement (exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitForStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitForStatement (exitKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitForStatement(Microsoft::CodeAnalysis::SyntaxToken exitKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="exitKeyword">
 The "Exit" keyword.
 </param>
        <param name="blockKeyword">
 The keyword describing the block to exit.
 </param>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitFunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitFunctionStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitFunctionStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitFunctionStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitFunctionStatement () As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitFunctionStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitFunctionStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitFunctionStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitFunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitFunctionStatement (Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitFunctionStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken exitKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitFunctionStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitFunctionStatement (exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitFunctionStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitFunctionStatement (exitKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitFunctionStatement(Microsoft::CodeAnalysis::SyntaxToken exitKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="exitKeyword">
 The "Exit" keyword.
 </param>
        <param name="blockKeyword">
 The keyword describing the block to exit.
 </param>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitOperatorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitOperatorStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitOperatorStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitOperatorStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitOperatorStatement () As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitOperatorStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitOperatorStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitOperatorStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitOperatorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitOperatorStatement (Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitOperatorStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken exitKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitOperatorStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitOperatorStatement (exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitOperatorStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitOperatorStatement (exitKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitOperatorStatement(Microsoft::CodeAnalysis::SyntaxToken exitKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="exitKeyword">
 The "Exit" keyword.
 </param>
        <param name="blockKeyword">
 The keyword describing the block to exit.
 </param>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitPropertyStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitPropertyStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitPropertyStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitPropertyStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitPropertyStatement () As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitPropertyStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitPropertyStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitPropertyStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitPropertyStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitPropertyStatement (Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitPropertyStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken exitKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitPropertyStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitPropertyStatement (exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitPropertyStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitPropertyStatement (exitKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitPropertyStatement(Microsoft::CodeAnalysis::SyntaxToken exitKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="exitKeyword">
 The "Exit" keyword.
 </param>
        <param name="blockKeyword">
 The keyword describing the block to exit.
 </param>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitSelectStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitSelectStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitSelectStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitSelectStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitSelectStatement () As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitSelectStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitSelectStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitSelectStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitSelectStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitSelectStatement (Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitSelectStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken exitKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitSelectStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitSelectStatement (exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitSelectStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitSelectStatement (exitKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitSelectStatement(Microsoft::CodeAnalysis::SyntaxToken exitKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="exitKeyword">
 The "Exit" keyword.
 </param>
        <param name="blockKeyword">
 The keyword describing the block to exit.
 </param>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitStatement (kind As SyntaxKind, blockKeyword As SyntaxToken) As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitStatement (kind, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of ExitStatementSyntax.
 One of ExitDoStatement, ExitForStatement, ExitSubStatement,
 ExitFunctionStatement, ExitOperatorStatement, ExitPropertyStatement,
 ExitTryStatement, ExitSelectStatement, ExitWhileStatement.
 </param>
        <param name="blockKeyword">
 The keyword describing the block to exit.
 </param>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken exitKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitStatement (kind As SyntaxKind, exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitStatement (kind, exitKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken exitKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="exitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of ExitStatementSyntax.
 One of ExitDoStatement, ExitForStatement, ExitSubStatement,
 ExitFunctionStatement, ExitOperatorStatement, ExitPropertyStatement,
 ExitTryStatement, ExitSelectStatement, ExitWhileStatement.
 </param>
        <param name="exitKeyword">
 The "Exit" keyword.
 </param>
        <param name="blockKeyword">
 The keyword describing the block to exit.
 </param>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitSubStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitSubStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitSubStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitSubStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitSubStatement () As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitSubStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitSubStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitSubStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitSubStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitSubStatement (Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitSubStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken exitKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitSubStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitSubStatement (exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitSubStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitSubStatement (exitKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitSubStatement(Microsoft::CodeAnalysis::SyntaxToken exitKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="exitKeyword">
 The "Exit" keyword.
 </param>
        <param name="blockKeyword">
 The keyword describing the block to exit.
 </param>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitTryStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitTryStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitTryStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitTryStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitTryStatement () As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitTryStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitTryStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitTryStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitTryStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitTryStatement (Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitTryStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken exitKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitTryStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitTryStatement (exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitTryStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitTryStatement (exitKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitTryStatement(Microsoft::CodeAnalysis::SyntaxToken exitKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="exitKeyword">
 The "Exit" keyword.
 </param>
        <param name="blockKeyword">
 The keyword describing the block to exit.
 </param>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitWhileStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitWhileStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitWhileStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitWhileStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitWhileStatement () As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitWhileStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitWhileStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitWhileStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitWhileStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitWhileStatement (Microsoft.CodeAnalysis.SyntaxToken exitKeyword, Microsoft.CodeAnalysis.SyntaxToken blockKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax ExitWhileStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken exitKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken blockKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitWhileStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExitWhileStatement (exitKeyword As SyntaxToken, blockKeyword As SyntaxToken) As ExitStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExitWhileStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExitWhileStatement (exitKeyword, blockKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ ExitWhileStatement(Microsoft::CodeAnalysis::SyntaxToken exitKeyword, Microsoft::CodeAnalysis::SyntaxToken blockKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exitKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="blockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="exitKeyword">
 The "Exit" keyword.
 </param>
        <param name="blockKeyword">
 The keyword describing the block to exit.
 </param>
        <summary>
 An exit statement. The kind of block being exited can be found by examining the
 Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponentiateAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax ExponentiateAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax ExponentiateAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExponentiateAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExponentiateAssignmentStatement (left As ExpressionSyntax, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExponentiateAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExponentiateAssignmentStatement (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ ExponentiateAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponentiateAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax ExponentiateAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax ExponentiateAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExponentiateAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExponentiateAssignmentStatement (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExponentiateAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExponentiateAssignmentStatement (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ ExponentiateAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="operatorToken">
 The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
 "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponentiateExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ExponentiateExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ExponentiateExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExponentiateExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExponentiateExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ExponentiateExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExponentiateExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ ExponentiateExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponentiateExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ExponentiateExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ExponentiateExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExponentiateExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExponentiateExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ExponentiateExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExponentiateExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ ExponentiateExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpressionRangeVariable">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax ExpressionRangeVariable (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax ExpressionRangeVariable(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExpressionRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExpressionRangeVariable (expression As ExpressionSyntax) As ExpressionRangeVariableSyntax" />
      <MemberSignature Language="F#" Value="static member ExpressionRangeVariable : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExpressionRangeVariable expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^ ExpressionRangeVariable(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression used to initialize the expression variable.
 </param>
        <summary>
 Describes a single variable of the form "[x [As Type] =] expression" for use in
 query expressions.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpressionRangeVariable">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax ExpressionRangeVariable (Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax nameEquals, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax ExpressionRangeVariable(class Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax nameEquals, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExpressionRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExpressionRangeVariable (nameEquals As VariableNameEqualsSyntax, expression As ExpressionSyntax) As ExpressionRangeVariableSyntax" />
      <MemberSignature Language="F#" Value="static member ExpressionRangeVariable : Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExpressionRangeVariable (nameEquals, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^ ExpressionRangeVariable(Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableNameEqualsSyntax ^ nameEquals, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nameEquals" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="nameEquals">
 The optional name and type of the expression range variable. If omitted, the
 name of the expression range variable is inferred from the expression.
 </param>
        <param name="expression">
 The expression used to initialize the expression variable.
 </param>
        <summary>
 Describes a single variable of the form "[x [As Type] =] expression" for use in
 query expressions.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpressionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionStatementSyntax ExpressionStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionStatementSyntax ExpressionStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExpressionStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExpressionStatement (expression As ExpressionSyntax) As ExpressionStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ExpressionStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExpressionStatement expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionStatementSyntax ^ ExpressionStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression.
 </param>
        <summary>
 Represent an expression in a statement context. This may only be a invocation
 or await expression in standard code but may be any expression in VB
 Interactive code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExternalChecksumDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax ExternalChecksumDirectiveTrivia ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax ExternalChecksumDirectiveTrivia() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExternalChecksumDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExternalChecksumDirectiveTrivia () As ExternalChecksumDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ExternalChecksumDirectiveTrivia : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExternalChecksumDirectiveTrivia " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExternalChecksumDirectiveTriviaSyntax ^ ExternalChecksumDirectiveTrivia();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an #ExternalChecksum pre-processing directive appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExternalChecksumDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax ExternalChecksumDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken externalChecksumKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SyntaxToken externalSource, Microsoft.CodeAnalysis.SyntaxToken firstCommaToken, Microsoft.CodeAnalysis.SyntaxToken guid, Microsoft.CodeAnalysis.SyntaxToken secondCommaToken, Microsoft.CodeAnalysis.SyntaxToken checksum, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax ExternalChecksumDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken externalChecksumKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, valuetype Microsoft.CodeAnalysis.SyntaxToken externalSource, valuetype Microsoft.CodeAnalysis.SyntaxToken firstCommaToken, valuetype Microsoft.CodeAnalysis.SyntaxToken guid, valuetype Microsoft.CodeAnalysis.SyntaxToken secondCommaToken, valuetype Microsoft.CodeAnalysis.SyntaxToken checksum, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExternalChecksumDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExternalChecksumDirectiveTrivia (hashToken As SyntaxToken, externalChecksumKeyword As SyntaxToken, openParenToken As SyntaxToken, externalSource As SyntaxToken, firstCommaToken As SyntaxToken, guid As SyntaxToken, secondCommaToken As SyntaxToken, checksum As SyntaxToken, closeParenToken As SyntaxToken) As ExternalChecksumDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ExternalChecksumDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExternalChecksumDirectiveTrivia (hashToken, externalChecksumKeyword, openParenToken, externalSource, firstCommaToken, guid, secondCommaToken, checksum, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExternalChecksumDirectiveTriviaSyntax ^ ExternalChecksumDirectiveTrivia(Microsoft::CodeAnalysis::SyntaxToken hashToken, Microsoft::CodeAnalysis::SyntaxToken externalChecksumKeyword, Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::SyntaxToken externalSource, Microsoft::CodeAnalysis::SyntaxToken firstCommaToken, Microsoft::CodeAnalysis::SyntaxToken guid, Microsoft::CodeAnalysis::SyntaxToken secondCommaToken, Microsoft::CodeAnalysis::SyntaxToken checksum, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="externalChecksumKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="externalSource" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="firstCommaToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="guid" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="secondCommaToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="checksum" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="hashToken">
 The "#" token in a preprocessor directive.
 </param>
        <param name="externalChecksumKeyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="externalSource">To be added.</param>
        <param name="firstCommaToken">To be added.</param>
        <param name="guid">To be added.</param>
        <param name="secondCommaToken">To be added.</param>
        <param name="checksum">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>
 Represents an #ExternalChecksum pre-processing directive appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExternalSourceDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax ExternalSourceDirectiveTrivia ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax ExternalSourceDirectiveTrivia() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExternalSourceDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExternalSourceDirectiveTrivia () As ExternalSourceDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ExternalSourceDirectiveTrivia : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExternalSourceDirectiveTrivia " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExternalSourceDirectiveTriviaSyntax ^ ExternalSourceDirectiveTrivia();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents the beginning of a #ExternalSource pre-processing directive
 appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExternalSourceDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax ExternalSourceDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken externalSourceKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SyntaxToken externalSource, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.SyntaxToken lineStart, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax ExternalSourceDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken externalSourceKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, valuetype Microsoft.CodeAnalysis.SyntaxToken externalSource, valuetype Microsoft.CodeAnalysis.SyntaxToken commaToken, valuetype Microsoft.CodeAnalysis.SyntaxToken lineStart, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExternalSourceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExternalSourceDirectiveTrivia (hashToken As SyntaxToken, externalSourceKeyword As SyntaxToken, openParenToken As SyntaxToken, externalSource As SyntaxToken, commaToken As SyntaxToken, lineStart As SyntaxToken, closeParenToken As SyntaxToken) As ExternalSourceDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ExternalSourceDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ExternalSourceDirectiveTrivia (hashToken, externalSourceKeyword, openParenToken, externalSource, commaToken, lineStart, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExternalSourceDirectiveTriviaSyntax ^ ExternalSourceDirectiveTrivia(Microsoft::CodeAnalysis::SyntaxToken hashToken, Microsoft::CodeAnalysis::SyntaxToken externalSourceKeyword, Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::SyntaxToken externalSource, Microsoft::CodeAnalysis::SyntaxToken commaToken, Microsoft::CodeAnalysis::SyntaxToken lineStart, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="externalSourceKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="externalSource" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="commaToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="lineStart" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="hashToken">
 The "#" token in a preprocessor directive.
 </param>
        <param name="externalSourceKeyword">To be added.</param>
        <param name="openParenToken">To be added.</param>
        <param name="externalSource">To be added.</param>
        <param name="commaToken">To be added.</param>
        <param name="lineStart">To be added.</param>
        <param name="closeParenToken">To be added.</param>
        <summary>
 Represents the beginning of a #ExternalSource pre-processing directive
 appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FalseLiteralExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax FalseLiteralExpression (Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax FalseLiteralExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FalseLiteralExpression(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FalseLiteralExpression (token As SyntaxToken) As LiteralExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member FalseLiteralExpression : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FalseLiteralExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ FalseLiteralExpression(Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="token">
 The token that represents the literal. The Kind property determines what type
 this property returns: Kind=IntegerLiteral ==&gt; Returns IntegerLiteralToken.
 Kind=CharacterLiteral ==&gt; Returns CharacterLiteralToken. Kind=DecimalLiteral
 ==&gt; Returns DecimalLiteralToken Kind=FloatingLiteral ==&gt; Returns
 FloatingLiteralToken Kind=DateLiteral ==&gt; Returns DateLiteralToken
 Kind=StringLiteral ==&gt; Returns StringLiteralToken Kind=BooleanLiteral ==&gt;
 Returns Keyword (with it's kind being TrueKeyword or FalseKeyword)
 Kind=NothingLiteral ==&gt; Returns Keyword (with it's kind being
 NothingKeyword)
 </param>
        <summary>
 Represents a literal. The kind of literal is determined by the Kind property:
 IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
 FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
 determined by casting the associated Token to the correct type and getting the
 value from the token.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax FieldDeclaration (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt; declarators);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax FieldDeclaration(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt; declarators) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FieldDeclaration (declarators As SeparatedSyntaxList(Of VariableDeclaratorSyntax)) As FieldDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member FieldDeclaration : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FieldDeclaration declarators" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::FieldDeclarationSyntax ^ FieldDeclaration(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableDeclaratorSyntax ^&gt; declarators);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declarators" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="declarators">
 The list of variable declarator. Each declarator specifies one or more variable
 names along with a type and/or initializer.
 </param>
        <summary>
 Represents the declaration of one or more variables or constants, either as
 local variables or as class/structure members. In the case of a constant, it is
 represented by having "Const" in the Modifiers (although technically "Const" is
 not a modifier, it is represented as one in the parse trees.)
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax FieldDeclaration (params Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax[] declarators);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax FieldDeclaration(class Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax[] declarators) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FieldDeclaration (ParamArray declarators As VariableDeclaratorSyntax()) As FieldDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member FieldDeclaration : Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FieldDeclaration declarators" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::FieldDeclarationSyntax ^ FieldDeclaration(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableDeclaratorSyntax ^&gt; ^ declarators);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declarators" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="declarators">
 The list of variable declarator. Each declarator specifies one or more variable
 names along with a type and/or initializer.
 </param>
        <summary>
 Represents the declaration of one or more variables or constants, either as
 local variables or as class/structure members. In the case of a constant, it is
 represented by having "Const" in the Modifiers (although technically "Const" is
 not a modifier, it is represented as one in the parse trees.)
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax FieldDeclaration (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt; declarators);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax FieldDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt; declarators) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FieldDeclaration (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, declarators As SeparatedSyntaxList(Of VariableDeclaratorSyntax)) As FieldDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member FieldDeclaration : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FieldDeclaration (attributeLists, modifiers, declarators)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::FieldDeclarationSyntax ^ FieldDeclaration(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableDeclaratorSyntax ^&gt; declarators);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="declarators" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, an empty list is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned.
 </param>
        <param name="declarators">
 The list of variable declarator. Each declarator specifies one or more variable
 names along with a type and/or initializer.
 </param>
        <summary>
 Represents the declaration of one or more variables or constants, either as
 local variables or as class/structure members. In the case of a constant, it is
 represented by having "Const" in the Modifiers (although technically "Const" is
 not a modifier, it is represented as one in the parse trees.)
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinallyBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax FinallyBlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax FinallyBlock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FinallyBlock" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FinallyBlock () As FinallyBlockSyntax" />
      <MemberSignature Language="F#" Value="static member FinallyBlock : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FinallyBlock " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::FinallyBlockSyntax ^ FinallyBlock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a "Finally ..." block of a "Try" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinallyBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax FinallyBlock (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax FinallyBlock(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FinallyBlock(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FinallyBlock (statements As SyntaxList(Of StatementSyntax)) As FinallyBlockSyntax" />
      <MemberSignature Language="F#" Value="static member FinallyBlock : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FinallyBlock statements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::FinallyBlockSyntax ^ FinallyBlock(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="statements">
 A list of statements to be executed.
 </param>
        <summary>
 Represents a "Finally ..." block of a "Try" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinallyBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax FinallyBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax finallyStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax FinallyBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax finallyStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FinallyBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FinallyBlock (finallyStatement As FinallyStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As FinallyBlockSyntax" />
      <MemberSignature Language="F#" Value="static member FinallyBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FinallyBlock (finallyStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::FinallyBlockSyntax ^ FinallyBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::FinallyStatementSyntax ^ finallyStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finallyStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="finallyStatement">
 The "Finally" statement that begins the "Finally" block.
 </param>
        <param name="statements">
 A list of statements to be executed.
 </param>
        <summary>
 Represents a "Finally ..." block of a "Try" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinallyStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax FinallyStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax FinallyStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FinallyStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FinallyStatement () As FinallyStatementSyntax" />
      <MemberSignature Language="F#" Value="static member FinallyStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FinallyStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::FinallyStatementSyntax ^ FinallyStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents the "Finally" statement that begins a "Finally" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinallyStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax FinallyStatement (Microsoft.CodeAnalysis.SyntaxToken finallyKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax FinallyStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken finallyKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FinallyStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FinallyStatement (finallyKeyword As SyntaxToken) As FinallyStatementSyntax" />
      <MemberSignature Language="F#" Value="static member FinallyStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FinallyStatement finallyKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::FinallyStatementSyntax ^ FinallyStatement(Microsoft::CodeAnalysis::SyntaxToken finallyKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finallyKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="finallyKeyword">
 The "Finally" keyword.
 </param>
        <summary>
 Represents the "Finally" statement that begins a "Finally" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FloatingLiteralToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken FloatingLiteralToken (string text, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeSuffix, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken FloatingLiteralToken(string text, valuetype Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeSuffix, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FloatingLiteralToken(System.String,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FloatingLiteralToken (text As String, typeSuffix As TypeCharacter, value As Double) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member FloatingLiteralToken : string * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter * double -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FloatingLiteralToken (text, typeSuffix, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken FloatingLiteralToken(System::String ^ text, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeCharacter typeSuffix, double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="typeSuffix" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="typeSuffix">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FloatingLiteralToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken FloatingLiteralToken (Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeSuffix, double value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken FloatingLiteralToken(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, valuetype Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeSuffix, float64 value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FloatingLiteralToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter,System.Double,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FloatingLiteralToken (leadingTrivia As SyntaxTriviaList, text As String, typeSuffix As TypeCharacter, value As Double, trailingTrivia As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member FloatingLiteralToken : Microsoft.CodeAnalysis.SyntaxTriviaList * string * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter * double * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FloatingLiteralToken (leadingTrivia, text, typeSuffix, value, trailingTrivia)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken FloatingLiteralToken(Microsoft::CodeAnalysis::SyntaxTriviaList leadingTrivia, System::String ^ text, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeCharacter typeSuffix, double value, Microsoft::CodeAnalysis::SyntaxTriviaList trailingTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leadingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="typeSuffix" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="trailingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leadingTrivia">To be added.</param>
        <param name="text">To be added.</param>
        <param name="typeSuffix">To be added.</param>
        <param name="value">To be added.</param>
        <param name="trailingTrivia">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax ForBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax forStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax ForBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax forStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForBlock (forStatement As ForStatementSyntax) As ForBlockSyntax" />
      <MemberSignature Language="F#" Value="static member ForBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForBlock forStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ForBlockSyntax ^ ForBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStatementSyntax ^ forStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="forStatement">
 The For statement that begins the block.
 </param>
        <summary>
 Represents a For block, including the introducing statement, the body and the
 "Next" (which can be omitted if a containing For has a Next with multiple
 variables).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax ForBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax forStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax nextStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax ForBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax forStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax nextStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForBlock (forStatement As ForStatementSyntax, statements As SyntaxList(Of StatementSyntax), nextStatement As NextStatementSyntax) As ForBlockSyntax" />
      <MemberSignature Language="F#" Value="static member ForBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForBlock (forStatement, statements, nextStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ForBlockSyntax ^ ForBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStatementSyntax ^ forStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax ^ nextStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="nextStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="forStatement">
 The For statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the For or For Each loop. This might be an empty
 list.
 </param>
        <param name="nextStatement">
 The Next statement that ends the block. If two For or For Each statements are
 ended by a single Next statement, the inner For will not have a Next statement.
 </param>
        <summary>
 Represents a For block, including the introducing statement, the body and the
 "Next" (which can be omitted if a containing For has a Next with multiple
 variables).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEachBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax ForEachBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax forEachStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax ForEachBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax forEachStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForEachBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEachBlock (forEachStatement As ForEachStatementSyntax) As ForEachBlockSyntax" />
      <MemberSignature Language="F#" Value="static member ForEachBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForEachBlock forEachStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ForEachBlockSyntax ^ ForEachBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForEachStatementSyntax ^ forEachStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forEachStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="forEachStatement">
 The For Each statement that begins the block.
 </param>
        <summary>
 Represents a For Each block, including the introducing statement, the body and
 the "Next" (which can be omitted if a containing For has a Next with multiple
 variables).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEachBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax ForEachBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax forEachStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax nextStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax ForEachBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax forEachStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax nextStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForEachBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEachBlock (forEachStatement As ForEachStatementSyntax, statements As SyntaxList(Of StatementSyntax), nextStatement As NextStatementSyntax) As ForEachBlockSyntax" />
      <MemberSignature Language="F#" Value="static member ForEachBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForEachBlock (forEachStatement, statements, nextStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ForEachBlockSyntax ^ ForEachBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForEachStatementSyntax ^ forEachStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax ^ nextStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forEachStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="nextStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="forEachStatement">
 The For Each statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the For or For Each loop. This might be an empty
 list.
 </param>
        <param name="nextStatement">
 The Next statement that ends the block. If two For or For Each statements are
 ended by a single Next statement, the inner For will not have a Next statement.
 </param>
        <summary>
 Represents a For Each block, including the introducing statement, the body and
 the "Next" (which can be omitted if a containing For has a Next with multiple
 variables).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEachStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax ForEachStatement (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax ForEachStatement(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEachStatement (controlVariable As VisualBasicSyntaxNode, expression As ExpressionSyntax) As ForEachStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ForEachStatement : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForEachStatement (controlVariable, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ForEachStatementSyntax ^ ForEachStatement(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxNode ^ controlVariable, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlVariable" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="controlVariable">
 If the For or For Each statement is of a form that does not declare a new loop
 control variable, this is the expression that denotes the loop control
 variable. If this loop is of a form that does declare a new control variable,
 this is a VariableDeclarator that has the variable being declared.
 </param>
        <param name="expression">
 The expression denoting the collection to iterate over.
 </param>
        <summary>
 The For Each statement that begins a For Each-Next block. This statement always
 occurs as the Begin of a ForBlock, and the body of the For Each-Next is the
 Body of that ForBlock. Most of the time, the End of that ForBlock is the
 corresponding Next statement. However, multiple nested For statements are ended
 by a single Next statement with multiple variables, then the inner For
 statements will have End set to Nothing, and the Next statement is the End of
 the outermost For statement that is being ended.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEachStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax ForEachStatement (Microsoft.CodeAnalysis.SyntaxToken forKeyword, Microsoft.CodeAnalysis.SyntaxToken eachKeyword, Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable, Microsoft.CodeAnalysis.SyntaxToken inKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax ForEachStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken forKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken eachKeyword, class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable, valuetype Microsoft.CodeAnalysis.SyntaxToken inKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEachStatement (forKeyword As SyntaxToken, eachKeyword As SyntaxToken, controlVariable As VisualBasicSyntaxNode, inKeyword As SyntaxToken, expression As ExpressionSyntax) As ForEachStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ForEachStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForEachStatement (forKeyword, eachKeyword, controlVariable, inKeyword, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ForEachStatementSyntax ^ ForEachStatement(Microsoft::CodeAnalysis::SyntaxToken forKeyword, Microsoft::CodeAnalysis::SyntaxToken eachKeyword, Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxNode ^ controlVariable, Microsoft::CodeAnalysis::SyntaxToken inKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="eachKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="controlVariable" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode" />
        <Parameter Name="inKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="forKeyword">
 The "For" keyword.
 </param>
        <param name="eachKeyword">
 The "Each" keyword.
 </param>
        <param name="controlVariable">
 If the For or For Each statement is of a form that does not declare a new loop
 control variable, this is the expression that denotes the loop control
 variable. If this loop is of a form that does declare a new control variable,
 this is a VariableDeclarator that has the variable being declared.
 </param>
        <param name="inKeyword">
 The "In" keyword.
 </param>
        <param name="expression">
 The expression denoting the collection to iterate over.
 </param>
        <summary>
 The For Each statement that begins a For Each-Next block. This statement always
 occurs as the Begin of a ForBlock, and the body of the For Each-Next is the
 Body of that ForBlock. Most of the time, the End of that ForBlock is the
 corresponding Next statement. However, multiple nested For statements are ended
 by a single Next statement with multiple variables, then the inner For
 statements will have End set to Nothing, and the Next statement is the End of
 the outermost For statement that is being ended.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax ForStatement (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax fromValue, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax toValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax ForStatement(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax fromValue, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax toValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForStatement (controlVariable As VisualBasicSyntaxNode, fromValue As ExpressionSyntax, toValue As ExpressionSyntax) As ForStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ForStatement : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForStatement (controlVariable, fromValue, toValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStatementSyntax ^ ForStatement(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxNode ^ controlVariable, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ fromValue, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ toValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlVariable" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode" />
        <Parameter Name="fromValue" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="toValue" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="controlVariable">
 If the For or For Each statement is of a form that does not declare a new loop
 control variable, this is the expression that denotes the loop control
 variable. If this loop is of a form that does declare a new control variable,
 this is a VariableDeclarator that has the variable being declared.
 </param>
        <param name="fromValue">
 The expression denoting the initial value of the iteration.
 </param>
        <param name="toValue">
 The expression denoting the final value of the iteration.
 </param>
        <summary>
 The For statement that begins a For-Next block. This statement always occurs as
 the Begin of a ForBlock. Most of the time, the End of that ForBlock is the
 corresponding Next statement. However, multiple nested For statements are ended
 by a single Next statement with multiple variables, then the inner For
 statements will have End set to Nothing, and the Next statement is the End of
 the outermost For statement that is being ended.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax ForStatement (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax fromValue, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax toValue, Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax stepClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax ForStatement(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax fromValue, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax toValue, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax stepClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForStatement (controlVariable As VisualBasicSyntaxNode, fromValue As ExpressionSyntax, toValue As ExpressionSyntax, stepClause As ForStepClauseSyntax) As ForStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ForStatement : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForStatement (controlVariable, fromValue, toValue, stepClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStatementSyntax ^ ForStatement(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxNode ^ controlVariable, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ fromValue, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ toValue, Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStepClauseSyntax ^ stepClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlVariable" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode" />
        <Parameter Name="fromValue" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="toValue" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="stepClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="controlVariable">
 If the For or For Each statement is of a form that does not declare a new loop
 control variable, this is the expression that denotes the loop control
 variable. If this loop is of a form that does declare a new control variable,
 this is a VariableDeclarator that has the variable being declared.
 </param>
        <param name="fromValue">
 The expression denoting the initial value of the iteration.
 </param>
        <param name="toValue">
 The expression denoting the final value of the iteration.
 </param>
        <param name="stepClause">
 The optional Step clause.
 </param>
        <summary>
 The For statement that begins a For-Next block. This statement always occurs as
 the Begin of a ForBlock. Most of the time, the End of that ForBlock is the
 corresponding Next statement. However, multiple nested For statements are ended
 by a single Next statement with multiple variables, then the inner For
 statements will have End set to Nothing, and the Next statement is the End of
 the outermost For statement that is being ended.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax ForStatement (Microsoft.CodeAnalysis.SyntaxToken forKeyword, Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax fromValue, Microsoft.CodeAnalysis.SyntaxToken toKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax toValue, Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax stepClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax ForStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken forKeyword, class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode controlVariable, valuetype Microsoft.CodeAnalysis.SyntaxToken equalsToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax fromValue, valuetype Microsoft.CodeAnalysis.SyntaxToken toKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax toValue, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax stepClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForStatement (forKeyword As SyntaxToken, controlVariable As VisualBasicSyntaxNode, equalsToken As SyntaxToken, fromValue As ExpressionSyntax, toKeyword As SyntaxToken, toValue As ExpressionSyntax, stepClause As ForStepClauseSyntax) As ForStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ForStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForStatement (forKeyword, controlVariable, equalsToken, fromValue, toKeyword, toValue, stepClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStatementSyntax ^ ForStatement(Microsoft::CodeAnalysis::SyntaxToken forKeyword, Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxNode ^ controlVariable, Microsoft::CodeAnalysis::SyntaxToken equalsToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ fromValue, Microsoft::CodeAnalysis::SyntaxToken toKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ toValue, Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStepClauseSyntax ^ stepClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="controlVariable" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode" />
        <Parameter Name="equalsToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="fromValue" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="toKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="toValue" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="stepClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="forKeyword">
 The "For" keyword.
 </param>
        <param name="controlVariable">
 If the For or For Each statement is of a form that does not declare a new loop
 control variable, this is the expression that denotes the loop control
 variable. If this loop is of a form that does declare a new control variable,
 this is a VariableDeclarator that has the variable being declared.
 </param>
        <param name="equalsToken">
 The "=" token.
 </param>
        <param name="fromValue">
 The expression denoting the initial value of the iteration.
 </param>
        <param name="toKeyword">
 The "To" keyword.
 </param>
        <param name="toValue">
 The expression denoting the final value of the iteration.
 </param>
        <param name="stepClause">
 The optional Step clause.
 </param>
        <summary>
 The For statement that begins a For-Next block. This statement always occurs as
 the Begin of a ForBlock. Most of the time, the End of that ForBlock is the
 corresponding Next statement. However, multiple nested For statements are ended
 by a single Next statement with multiple variables, then the inner For
 statements will have End set to Nothing, and the Next statement is the End of
 the outermost For statement that is being ended.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForStepClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax ForStepClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax stepValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax ForStepClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax stepValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForStepClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForStepClause (stepValue As ExpressionSyntax) As ForStepClauseSyntax" />
      <MemberSignature Language="F#" Value="static member ForStepClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForStepClause stepValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStepClauseSyntax ^ ForStepClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ stepValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stepValue" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="stepValue">
 The expression denoting the step increment.
 </param>
        <summary>
 The Step clause in a For Statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForStepClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax ForStepClause (Microsoft.CodeAnalysis.SyntaxToken stepKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax stepValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax ForStepClause(valuetype Microsoft.CodeAnalysis.SyntaxToken stepKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax stepValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForStepClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForStepClause (stepKeyword As SyntaxToken, stepValue As ExpressionSyntax) As ForStepClauseSyntax" />
      <MemberSignature Language="F#" Value="static member ForStepClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ForStepClause (stepKeyword, stepValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStepClauseSyntax ^ ForStepClause(Microsoft::CodeAnalysis::SyntaxToken stepKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ stepValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stepKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="stepValue" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="stepKeyword">
 The "Step" keyword.
 </param>
        <param name="stepValue">
 The expression denoting the step increment.
 </param>
        <summary>
 The Step clause in a For Statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax FromClause (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax FromClause(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromClause (variables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax)) As FromClauseSyntax" />
      <MemberSignature Language="F#" Value="static member FromClause : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FromClause variables" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::FromClauseSyntax ^ FromClause(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^&gt; variables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">
 The list of collection variables declared by this From operator.
 </param>
        <summary>
 Represents a "From" query operator. If this is the beginning of a query, the
 Source will be Nothing. Otherwise, the Source will be the part of the query to
 the left of the From.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax FromClause (params Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax[] variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax FromClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax[] variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromClause (ParamArray variables As CollectionRangeVariableSyntax()) As FromClauseSyntax" />
      <MemberSignature Language="F#" Value="static member FromClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FromClause variables" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::FromClauseSyntax ^ FromClause(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^&gt; ^ variables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables">
 The list of collection variables declared by this From operator.
 </param>
        <summary>
 Represents a "From" query operator. If this is the beginning of a query, the
 Source will be Nothing. Otherwise, the Source will be the part of the query to
 the left of the From.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax FromClause (Microsoft.CodeAnalysis.SyntaxToken fromKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax FromClause(valuetype Microsoft.CodeAnalysis.SyntaxToken fromKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromClause (fromKeyword As SyntaxToken, variables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax)) As FromClauseSyntax" />
      <MemberSignature Language="F#" Value="static member FromClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FromClause (fromKeyword, variables)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::FromClauseSyntax ^ FromClause(Microsoft::CodeAnalysis::SyntaxToken fromKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^&gt; variables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="fromKeyword">
 The "From" keyword.
 </param>
        <param name="variables">
 The list of collection variables declared by this From operator.
 </param>
        <summary>
 Represents a "From" query operator. If this is the beginning of a query, the
 Source will be Nothing. Otherwise, the Source will be the part of the query to
 the left of the From.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionAggregation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax FunctionAggregation (Microsoft.CodeAnalysis.SyntaxToken functionName);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax FunctionAggregation(valuetype Microsoft.CodeAnalysis.SyntaxToken functionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionAggregation(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FunctionAggregation (functionName As SyntaxToken) As FunctionAggregationSyntax" />
      <MemberSignature Language="F#" Value="static member FunctionAggregation : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionAggregation functionName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::FunctionAggregationSyntax ^ FunctionAggregation(Microsoft::CodeAnalysis::SyntaxToken functionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="functionName">
 The name of the aggregation function.
 </param>
        <summary>
 Represents an invocation of an Aggregation function in the aggregation range
 variable declaration of a Group By, Group Join or Aggregate query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionAggregation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax FunctionAggregation (string functionName);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax FunctionAggregation(string functionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionAggregation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FunctionAggregation (functionName As String) As FunctionAggregationSyntax" />
      <MemberSignature Language="F#" Value="static member FunctionAggregation : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionAggregation functionName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::FunctionAggregationSyntax ^ FunctionAggregation(System::String ^ functionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="functionName">
 The name of the aggregation function.
 </param>
        <summary>
 Represents an invocation of an Aggregation function in the aggregation range
 variable declaration of a Group By, Group Join or Aggregate query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionAggregation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax FunctionAggregation (Microsoft.CodeAnalysis.SyntaxToken functionName, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax FunctionAggregation(valuetype Microsoft.CodeAnalysis.SyntaxToken functionName, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionAggregation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FunctionAggregation (functionName As SyntaxToken, argument As ExpressionSyntax) As FunctionAggregationSyntax" />
      <MemberSignature Language="F#" Value="static member FunctionAggregation : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionAggregation (functionName, argument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::FunctionAggregationSyntax ^ FunctionAggregation(Microsoft::CodeAnalysis::SyntaxToken functionName, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="argument" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="functionName">
 The name of the aggregation function.
 </param>
        <param name="argument">
 The argument to the aggregation function.
 </param>
        <summary>
 Represents an invocation of an Aggregation function in the aggregation range
 variable declaration of a Group By, Group Join or Aggregate query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionAggregation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax FunctionAggregation (Microsoft.CodeAnalysis.SyntaxToken functionName, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax argument, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax FunctionAggregation(valuetype Microsoft.CodeAnalysis.SyntaxToken functionName, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax argument, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionAggregation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FunctionAggregation (functionName As SyntaxToken, openParenToken As SyntaxToken, argument As ExpressionSyntax, closeParenToken As SyntaxToken) As FunctionAggregationSyntax" />
      <MemberSignature Language="F#" Value="static member FunctionAggregation : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionAggregation (functionName, openParenToken, argument, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::FunctionAggregationSyntax ^ FunctionAggregation(Microsoft::CodeAnalysis::SyntaxToken functionName, Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ argument, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="argument" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="functionName">
 The name of the aggregation function.
 </param>
        <param name="openParenToken">
 The "(" token if present.
 </param>
        <param name="argument">
 The argument to the aggregation function.
 </param>
        <param name="closeParenToken">
 The ")" token, if present.
 </param>
        <summary>
 Represents an invocation of an Aggregation function in the aggregation range
 variable declaration of a Group By, Group Join or Aggregate query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax FunctionBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax FunctionBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FunctionBlock (subOrFunctionStatement As MethodStatementSyntax) As MethodBlockSyntax" />
      <MemberSignature Language="F#" Value="static member FunctionBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionBlock subOrFunctionStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodBlockSyntax ^ FunctionBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ subOrFunctionStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subOrFunctionStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="subOrFunctionStatement">
 The "Sub" or "Function" statement that begins the block.
 </param>
        <summary>
 Represents a Function or Sub block declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax FunctionBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax FunctionBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FunctionBlock (subOrFunctionStatement As MethodStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As MethodBlockSyntax" />
      <MemberSignature Language="F#" Value="static member FunctionBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionBlock (subOrFunctionStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodBlockSyntax ^ FunctionBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ subOrFunctionStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subOrFunctionStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="subOrFunctionStatement">
 The "Sub" or "Function" statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <summary>
 Represents a Function or Sub block declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax FunctionBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax FunctionBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FunctionBlock (subOrFunctionStatement As MethodStatementSyntax, statements As SyntaxList(Of StatementSyntax), endSubOrFunctionStatement As EndBlockStatementSyntax) As MethodBlockSyntax" />
      <MemberSignature Language="F#" Value="static member FunctionBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionBlock (subOrFunctionStatement, statements, endSubOrFunctionStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodBlockSyntax ^ FunctionBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ subOrFunctionStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endSubOrFunctionStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subOrFunctionStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endSubOrFunctionStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="subOrFunctionStatement">
 The "Sub" or "Function" statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <param name="endSubOrFunctionStatement">
 The "End Sub" or "End Function" statement that ends the block.
 </param>
        <summary>
 Represents a Function or Sub block declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionLambdaHeader">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax FunctionLambdaHeader ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax FunctionLambdaHeader() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionLambdaHeader" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FunctionLambdaHeader () As LambdaHeaderSyntax" />
      <MemberSignature Language="F#" Value="static member FunctionLambdaHeader : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionLambdaHeader " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ FunctionLambdaHeader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents the header part of a lambda expression
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionLambdaHeader">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax FunctionLambdaHeader (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax FunctionLambdaHeader(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionLambdaHeader(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FunctionLambdaHeader (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As LambdaHeaderSyntax" />
      <MemberSignature Language="F#" Value="static member FunctionLambdaHeader : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionLambdaHeader (attributeLists, modifiers, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ FunctionLambdaHeader(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 Represents the header part of a lambda expression
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionLambdaHeader">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax FunctionLambdaHeader (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax FunctionLambdaHeader(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionLambdaHeader(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FunctionLambdaHeader (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, subOrFunctionKeyword As SyntaxToken, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As LambdaHeaderSyntax" />
      <MemberSignature Language="F#" Value="static member FunctionLambdaHeader : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionLambdaHeader (attributeLists, modifiers, subOrFunctionKeyword, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ FunctionLambdaHeader(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword that introduces this lambda expression.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 Represents the header part of a lambda expression
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax FunctionStatement (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax FunctionStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FunctionStatement (identifier As SyntaxToken) As MethodStatementSyntax" />
      <MemberSignature Language="F#" Value="static member FunctionStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ FunctionStatement(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <summary>
 The statement that declares a Sub or Function. If this method has a body, this
 statement will be the Begin of a BlockStatement with
 Kind=MethodDeclarationBlock, and the body of the method will be the Body of
 that BlockStatement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax FunctionStatement (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax FunctionStatement(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionStatement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FunctionStatement (identifier As String) As MethodStatementSyntax" />
      <MemberSignature Language="F#" Value="static member FunctionStatement : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ FunctionStatement(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <summary>
 The statement that declares a Sub or Function. If this method has a body, this
 statement will be the Begin of a BlockStatement with
 Kind=MethodDeclarationBlock, and the body of the method will be the Body of
 that BlockStatement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax FunctionStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax handlesClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax FunctionStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax handlesClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FunctionStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax, handlesClause As HandlesClauseSyntax, implementsClause As ImplementsClauseSyntax) As MethodStatementSyntax" />
      <MemberSignature Language="F#" Value="static member FunctionStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionStatement (attributeLists, modifiers, identifier, typeParameterList, parameterList, asClause, handlesClause, implementsClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ FunctionStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseSyntax ^ handlesClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsClauseSyntax ^ implementsClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
        <Parameter Name="handlesClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax" />
        <Parameter Name="implementsClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic type parameters for this method.
 If no generic type parameters were present, Nothing is returned.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <param name="handlesClause">
 If present, a Handles clause indicated the events that this method handles.
 </param>
        <param name="implementsClause">
 If present, an Implements clause indicated the interface methods that this
 method implements.
 </param>
        <summary>
 The statement that declares a Sub or Function. If this method has a body, this
 statement will be the Begin of a BlockStatement with
 Kind=MethodDeclarationBlock, and the body of the method will be the Body of
 that BlockStatement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax FunctionStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax handlesClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax FunctionStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax handlesClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FunctionStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, subOrFunctionKeyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax, handlesClause As HandlesClauseSyntax, implementsClause As ImplementsClauseSyntax) As MethodStatementSyntax" />
      <MemberSignature Language="F#" Value="static member FunctionStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.FunctionStatement (attributeLists, modifiers, subOrFunctionKeyword, identifier, typeParameterList, parameterList, asClause, handlesClause, implementsClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ FunctionStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseSyntax ^ handlesClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsClauseSyntax ^ implementsClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
        <Parameter Name="handlesClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax" />
        <Parameter Name="implementsClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword that introduces this method declaration.
 </param>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic type parameters for this method.
 If no generic type parameters were present, Nothing is returned.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <param name="handlesClause">
 If present, a Handles clause indicated the events that this method handles.
 </param>
        <param name="implementsClause">
 If present, an Implements clause indicated the interface methods that this
 method implements.
 </param>
        <summary>
 The statement that declares a Sub or Function. If this method has a body, this
 statement will be the Begin of a BlockStatement with
 Kind=MethodDeclarationBlock, and the body of the method will be the Body of
 that BlockStatement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax GenericName (Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax typeArgumentList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax GenericName(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax typeArgumentList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GenericName(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericName (identifier As SyntaxToken, typeArgumentList As TypeArgumentListSyntax) As GenericNameSyntax" />
      <MemberSignature Language="F#" Value="static member GenericName : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GenericName (identifier, typeArgumentList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::GenericNameSyntax ^ GenericName(Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeArgumentListSyntax ^ typeArgumentList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeArgumentList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The identifier in the name.
 </param>
        <param name="typeArgumentList">
 The generic argument list.
 </param>
        <summary>
 Represents a simple type name with one or more generic arguments, such as "X(Of
 Y, Z).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax GenericName (string identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax typeArgumentList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax GenericName(string identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax typeArgumentList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GenericName(System.String,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenericName (identifier As String, typeArgumentList As TypeArgumentListSyntax) As GenericNameSyntax" />
      <MemberSignature Language="F#" Value="static member GenericName : string * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GenericName (identifier, typeArgumentList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::GenericNameSyntax ^ GenericName(System::String ^ identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeArgumentListSyntax ^ typeArgumentList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="typeArgumentList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The identifier in the name.
 </param>
        <param name="typeArgumentList">
 The generic argument list.
 </param>
        <summary>
 Represents a simple type name with one or more generic arguments, such as "X(Of
 Y, Z).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax GetAccessorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax GetAccessorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAccessorBlock (accessorStatement As AccessorStatementSyntax) As AccessorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member GetAccessorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetAccessorBlock accessorStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ GetAccessorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ accessorStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="accessorStatement">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" statement that
 begins the accessor block.
 </param>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax GetAccessorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax GetAccessorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAccessorBlock (accessorStatement As AccessorStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As AccessorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member GetAccessorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetAccessorBlock (accessorStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ GetAccessorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ accessorStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="accessorStatement">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" statement that
 begins the accessor block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax GetAccessorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax GetAccessorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAccessorBlock (accessorStatement As AccessorStatementSyntax, statements As SyntaxList(Of StatementSyntax), endAccessorStatement As EndBlockStatementSyntax) As AccessorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member GetAccessorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetAccessorBlock (accessorStatement, statements, endAccessorStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ GetAccessorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ accessorStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endAccessorStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endAccessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="accessorStatement">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" statement that
 begins the accessor block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <param name="endAccessorStatement">
 The "End Get", "End Set", "End AddHandler", "End RemoveHandler", or "End
 RaiseEvent" statement that ends the accessor block.
 </param>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax GetAccessorStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax GetAccessorStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetAccessorStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAccessorStatement () As AccessorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member GetAccessorStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetAccessorStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ GetAccessorStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax GetAccessorStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax GetAccessorStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetAccessorStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAccessorStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, parameterList As ParameterListSyntax) As AccessorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member GetAccessorStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetAccessorStatement (attributeLists, modifiers, parameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ GetAccessorStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax GetAccessorStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax GetAccessorStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetAccessorStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAccessorStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, accessorKeyword As SyntaxToken, parameterList As ParameterListSyntax) As AccessorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member GetAccessorStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetAccessorStatement (attributeLists, modifiers, accessorKeyword, parameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ GetAccessorStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken accessorKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="accessorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="accessorKeyword">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" keyword that
 introduces this accessor declaration.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStandaloneExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax GetStandaloneExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax GetStandaloneExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetStandaloneExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetStandaloneExpression (node As ExpressionSyntax) As ExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member GetStandaloneExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetStandaloneExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ GetStandaloneExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary> 
 Names on the right of qualified names and member access expressions are not stand-alone expressions.
 This method returns the appropriate parent of name syntax nodes that are on right of these constructs.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax GetTypeExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax GetTypeExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetTypeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeExpression (type As TypeSyntax) As GetTypeExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member GetTypeExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetTypeExpression type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::GetTypeExpressionSyntax ^ GetTypeExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">
 The type to get the Type object for. This can be an open generic type.
 </param>
        <summary>
 Represents a GetType expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax GetTypeExpression (Microsoft.CodeAnalysis.SyntaxToken getTypeKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax GetTypeExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken getTypeKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetTypeExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeExpression (getTypeKeyword As SyntaxToken, openParenToken As SyntaxToken, type As TypeSyntax, closeParenToken As SyntaxToken) As GetTypeExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member GetTypeExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetTypeExpression (getTypeKeyword, openParenToken, type, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::GetTypeExpressionSyntax ^ GetTypeExpression(Microsoft::CodeAnalysis::SyntaxToken getTypeKeyword, Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getTypeKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="getTypeKeyword">
 The "GetType" keyword.
 </param>
        <param name="openParenToken">
 The "(" token.
 </param>
        <param name="type">
 The type to get the Type object for. This can be an open generic type.
 </param>
        <param name="closeParenToken">
 The ")" token.
 </param>
        <summary>
 Represents a GetType expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlNamespaceExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax GetXmlNamespaceExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax GetXmlNamespaceExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetXmlNamespaceExpression" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetXmlNamespaceExpression () As GetXmlNamespaceExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member GetXmlNamespaceExpression : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetXmlNamespaceExpression " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::GetXmlNamespaceExpressionSyntax ^ GetXmlNamespaceExpression();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a GetXmlNamespace expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlNamespaceExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax GetXmlNamespaceExpression (Microsoft.CodeAnalysis.SyntaxToken getXmlNamespaceKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax GetXmlNamespaceExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken getXmlNamespaceKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetXmlNamespaceExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetXmlNamespaceExpression (getXmlNamespaceKeyword As SyntaxToken, openParenToken As SyntaxToken, name As XmlPrefixNameSyntax, closeParenToken As SyntaxToken) As GetXmlNamespaceExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member GetXmlNamespaceExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GetXmlNamespaceExpression (getXmlNamespaceKeyword, openParenToken, name, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::GetXmlNamespaceExpressionSyntax ^ GetXmlNamespaceExpression(Microsoft::CodeAnalysis::SyntaxToken getXmlNamespaceKeyword, Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlPrefixNameSyntax ^ name, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getXmlNamespaceKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="getXmlNamespaceKeyword">
 The "GetXmlNamespace" keyword.
 </param>
        <param name="openParenToken">
 The "(" token.
 </param>
        <param name="name">
 The Xml namespace name being referenced.
 </param>
        <param name="closeParenToken">
 The ")" token.
 </param>
        <summary>
 Represents a GetXmlNamespace expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax GlobalName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax GlobalName() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GlobalName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GlobalName () As GlobalNameSyntax" />
      <MemberSignature Language="F#" Value="static member GlobalName : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GlobalName " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::GlobalNameSyntax ^ GlobalName();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a name in the global namespace.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax GlobalName (Microsoft.CodeAnalysis.SyntaxToken globalKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax GlobalName(valuetype Microsoft.CodeAnalysis.SyntaxToken globalKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GlobalName(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GlobalName (globalKeyword As SyntaxToken) As GlobalNameSyntax" />
      <MemberSignature Language="F#" Value="static member GlobalName : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GlobalName globalKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::GlobalNameSyntax ^ GlobalName(Microsoft::CodeAnalysis::SyntaxToken globalKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="globalKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="globalKeyword">
 The "Global" keyword.
 </param>
        <summary>
 Represents a name in the global namespace.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax GoToStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax GoToStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GoToStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToStatement (label As LabelSyntax) As GoToStatementSyntax" />
      <MemberSignature Language="F#" Value="static member GoToStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GoToStatement label" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::GoToStatementSyntax ^ GoToStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="label">
 The name of the label. If the label is a line number, wraps an IntegerLiteral
 that is the line number, otherwise, wraps an Identifier.
 </param>
        <summary>
 Represents a "GoTo" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax GoToStatement (Microsoft.CodeAnalysis.SyntaxToken goToKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax GoToStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken goToKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GoToStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToStatement (goToKeyword As SyntaxToken, label As LabelSyntax) As GoToStatementSyntax" />
      <MemberSignature Language="F#" Value="static member GoToStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GoToStatement (goToKeyword, label)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::GoToStatementSyntax ^ GoToStatement(Microsoft::CodeAnalysis::SyntaxToken goToKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="goToKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="label" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="goToKeyword">
 The "GoTo" keyword.
 </param>
        <param name="label">
 The name of the label. If the label is a line number, wraps an IntegerLiteral
 that is the line number, otherwise, wraps an Identifier.
 </param>
        <summary>
 Represents a "GoTo" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax GreaterThanExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax GreaterThanExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GreaterThanExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member GreaterThanExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GreaterThanExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ GreaterThanExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax GreaterThanExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax GreaterThanExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GreaterThanExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member GreaterThanExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GreaterThanExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ GreaterThanExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqualExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax GreaterThanOrEqualExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax GreaterThanOrEqualExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GreaterThanOrEqualExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqualExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqualExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GreaterThanOrEqualExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ GreaterThanOrEqualExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqualExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax GreaterThanOrEqualExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax GreaterThanOrEqualExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GreaterThanOrEqualExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqualExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqualExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GreaterThanOrEqualExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ GreaterThanOrEqualExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupAggregation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax GroupAggregation ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax GroupAggregation() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GroupAggregation" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GroupAggregation () As GroupAggregationSyntax" />
      <MemberSignature Language="F#" Value="static member GroupAggregation : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GroupAggregation " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::GroupAggregationSyntax ^ GroupAggregation();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents the use of "Group" as the aggregation function in the in the
 aggregation range variable declaration of a Group By or Group Join query
 operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupAggregation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax GroupAggregation (Microsoft.CodeAnalysis.SyntaxToken groupKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax GroupAggregation(valuetype Microsoft.CodeAnalysis.SyntaxToken groupKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GroupAggregation(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GroupAggregation (groupKeyword As SyntaxToken) As GroupAggregationSyntax" />
      <MemberSignature Language="F#" Value="static member GroupAggregation : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GroupAggregation groupKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::GroupAggregationSyntax ^ GroupAggregation(Microsoft::CodeAnalysis::SyntaxToken groupKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="groupKeyword">
 The "Group" keyword.
 </param>
        <summary>
 Represents the use of "Group" as the aggregation function in the in the
 aggregation range variable declaration of a Group By or Group Join query
 operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax GroupByClause (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; keys, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; aggregationVariables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax GroupByClause(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; keys, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; aggregationVariables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GroupByClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax},Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GroupByClause (keys As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax), aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As GroupByClauseSyntax" />
      <MemberSignature Language="F#" Value="static member GroupByClause : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GroupByClause (keys, aggregationVariables)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::GroupByClauseSyntax ^ GroupByClause(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^&gt; keys, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregationRangeVariableSyntax ^&gt; aggregationVariables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt;" />
        <Parameter Name="aggregationVariables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="keys">
 The key values being used for grouping.
 </param>
        <param name="aggregationVariables">
 The list of new variables that calculate aggregations.
 </param>
        <summary>
 Represents the "Group By" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax GroupByClause (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; items, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; keys, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; aggregationVariables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax GroupByClause(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; items, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; keys, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; aggregationVariables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GroupByClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax},Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax},Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GroupByClause (items As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax), keys As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax), aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As GroupByClauseSyntax" />
      <MemberSignature Language="F#" Value="static member GroupByClause : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GroupByClause (items, keys, aggregationVariables)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::GroupByClauseSyntax ^ GroupByClause(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^&gt; items, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^&gt; keys, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregationRangeVariableSyntax ^&gt; aggregationVariables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt;" />
        <Parameter Name="keys" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt;" />
        <Parameter Name="aggregationVariables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
 The optional list of variables being grouped; the contents of the Group clause.
 If none were specified, an empty list is returned.
 </param>
        <param name="keys">
 The key values being used for grouping.
 </param>
        <param name="aggregationVariables">
 The list of new variables that calculate aggregations.
 </param>
        <summary>
 Represents the "Group By" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax GroupByClause (Microsoft.CodeAnalysis.SyntaxToken groupKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; items, Microsoft.CodeAnalysis.SyntaxToken byKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; keys, Microsoft.CodeAnalysis.SyntaxToken intoKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; aggregationVariables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax GroupByClause(valuetype Microsoft.CodeAnalysis.SyntaxToken groupKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; items, valuetype Microsoft.CodeAnalysis.SyntaxToken byKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; keys, valuetype Microsoft.CodeAnalysis.SyntaxToken intoKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; aggregationVariables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GroupByClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GroupByClause (groupKeyword As SyntaxToken, items As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax), byKeyword As SyntaxToken, keys As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax), intoKeyword As SyntaxToken, aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As GroupByClauseSyntax" />
      <MemberSignature Language="F#" Value="static member GroupByClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GroupByClause (groupKeyword, items, byKeyword, keys, intoKeyword, aggregationVariables)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::GroupByClauseSyntax ^ GroupByClause(Microsoft::CodeAnalysis::SyntaxToken groupKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^&gt; items, Microsoft::CodeAnalysis::SyntaxToken byKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^&gt; keys, Microsoft::CodeAnalysis::SyntaxToken intoKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregationRangeVariableSyntax ^&gt; aggregationVariables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt;" />
        <Parameter Name="byKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="keys" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt;" />
        <Parameter Name="intoKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="aggregationVariables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="groupKeyword">
 The "Group" keyword.
 </param>
        <param name="items">
 The optional list of variables being grouped; the contents of the Group clause.
 If none were specified, an empty list is returned.
 </param>
        <param name="byKeyword">
 The "By" keyword.
 </param>
        <param name="keys">
 The key values being used for grouping.
 </param>
        <param name="intoKeyword">To be added.</param>
        <param name="aggregationVariables">
 The list of new variables that calculate aggregations.
 </param>
        <summary>
 Represents the "Group By" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupJoinClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax GroupJoinClause (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; joinedVariables, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; joinConditions, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; aggregationVariables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax GroupJoinClause(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; joinedVariables, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; joinConditions, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; aggregationVariables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GroupJoinClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax},Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax},Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GroupJoinClause (joinedVariables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), joinConditions As SeparatedSyntaxList(Of JoinConditionSyntax), aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As GroupJoinClauseSyntax" />
      <MemberSignature Language="F#" Value="static member GroupJoinClause : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GroupJoinClause (joinedVariables, joinConditions, aggregationVariables)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::GroupJoinClauseSyntax ^ GroupJoinClause(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^&gt; joinedVariables, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinConditionSyntax ^&gt; joinConditions, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregationRangeVariableSyntax ^&gt; aggregationVariables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinedVariables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt;" />
        <Parameter Name="joinConditions" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt;" />
        <Parameter Name="aggregationVariables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="joinedVariables">
 Defines the collection range variables being joined to.
 </param>
        <param name="joinConditions">
 The conditions indicating what expressions to compare during the join. Each
 condition is a JoinCondition, and the separators are "And" keywords.
 </param>
        <param name="aggregationVariables">
 The list of new variables that calculate aggregations.
 </param>
        <summary>
 Represents the "Group Join" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupJoinClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax GroupJoinClause (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; joinedVariables, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt; additionalJoins, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; joinConditions, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; aggregationVariables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax GroupJoinClause(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; joinedVariables, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt; additionalJoins, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; joinConditions, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; aggregationVariables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GroupJoinClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax},Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax},Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GroupJoinClause (joinedVariables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), additionalJoins As SyntaxList(Of JoinClauseSyntax), joinConditions As SeparatedSyntaxList(Of JoinConditionSyntax), aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As GroupJoinClauseSyntax" />
      <MemberSignature Language="F#" Value="static member GroupJoinClause : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt; * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GroupJoinClause (joinedVariables, additionalJoins, joinConditions, aggregationVariables)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::GroupJoinClauseSyntax ^ GroupJoinClause(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^&gt; joinedVariables, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinClauseSyntax ^&gt; additionalJoins, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinConditionSyntax ^&gt; joinConditions, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregationRangeVariableSyntax ^&gt; aggregationVariables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinedVariables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt;" />
        <Parameter Name="additionalJoins" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt;" />
        <Parameter Name="joinConditions" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt;" />
        <Parameter Name="aggregationVariables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="joinedVariables">
 Defines the collection range variables being joined to.
 </param>
        <param name="additionalJoins">
 An additional Join or Group Join query operator.
 </param>
        <param name="joinConditions">
 The conditions indicating what expressions to compare during the join. Each
 condition is a JoinCondition, and the separators are "And" keywords.
 </param>
        <param name="aggregationVariables">
 The list of new variables that calculate aggregations.
 </param>
        <summary>
 Represents the "Group Join" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupJoinClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax GroupJoinClause (Microsoft.CodeAnalysis.SyntaxToken groupKeyword, Microsoft.CodeAnalysis.SyntaxToken joinKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; joinedVariables, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt; additionalJoins, Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; joinConditions, Microsoft.CodeAnalysis.SyntaxToken intoKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; aggregationVariables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax GroupJoinClause(valuetype Microsoft.CodeAnalysis.SyntaxToken groupKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken joinKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; joinedVariables, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt; additionalJoins, valuetype Microsoft.CodeAnalysis.SyntaxToken onKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; joinConditions, valuetype Microsoft.CodeAnalysis.SyntaxToken intoKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; aggregationVariables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GroupJoinClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GroupJoinClause (groupKeyword As SyntaxToken, joinKeyword As SyntaxToken, joinedVariables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), additionalJoins As SyntaxList(Of JoinClauseSyntax), onKeyword As SyntaxToken, joinConditions As SeparatedSyntaxList(Of JoinConditionSyntax), intoKeyword As SyntaxToken, aggregationVariables As SeparatedSyntaxList(Of AggregationRangeVariableSyntax)) As GroupJoinClauseSyntax" />
      <MemberSignature Language="F#" Value="static member GroupJoinClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.GroupJoinClause (groupKeyword, joinKeyword, joinedVariables, additionalJoins, onKeyword, joinConditions, intoKeyword, aggregationVariables)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::GroupJoinClauseSyntax ^ GroupJoinClause(Microsoft::CodeAnalysis::SyntaxToken groupKeyword, Microsoft::CodeAnalysis::SyntaxToken joinKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^&gt; joinedVariables, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinClauseSyntax ^&gt; additionalJoins, Microsoft::CodeAnalysis::SyntaxToken onKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinConditionSyntax ^&gt; joinConditions, Microsoft::CodeAnalysis::SyntaxToken intoKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregationRangeVariableSyntax ^&gt; aggregationVariables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="joinKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="joinedVariables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt;" />
        <Parameter Name="additionalJoins" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt;" />
        <Parameter Name="onKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="joinConditions" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt;" />
        <Parameter Name="intoKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="aggregationVariables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="groupKeyword">
 The "Group" keyword.
 </param>
        <param name="joinKeyword">
 The "Join" keyword.
 </param>
        <param name="joinedVariables">
 Defines the collection range variables being joined to.
 </param>
        <param name="additionalJoins">
 An additional Join or Group Join query operator.
 </param>
        <param name="onKeyword">
 The "On" keyword.
 </param>
        <param name="joinConditions">
 The conditions indicating what expressions to compare during the join. Each
 condition is a JoinCondition, and the separators are "And" keywords.
 </param>
        <param name="intoKeyword">
 The "Into" keyword.
 </param>
        <param name="aggregationVariables">
 The list of new variables that calculate aggregations.
 </param>
        <summary>
 Represents the "Group Join" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandlesClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax HandlesClause (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax&gt; events);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax HandlesClause(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax&gt; events) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.HandlesClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HandlesClause (events As SeparatedSyntaxList(Of HandlesClauseItemSyntax)) As HandlesClauseSyntax" />
      <MemberSignature Language="F#" Value="static member HandlesClause : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.HandlesClause events" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseSyntax ^ HandlesClause(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseItemSyntax ^&gt; events);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="events">
 The list of event members being handled.
 </param>
        <summary>
 Represents the "Handles ..." clause on a method declaration that describes
 which events this method handles.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandlesClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax HandlesClause (params Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax[] events);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax HandlesClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax[] events) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.HandlesClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HandlesClause (ParamArray events As HandlesClauseItemSyntax()) As HandlesClauseSyntax" />
      <MemberSignature Language="F#" Value="static member HandlesClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.HandlesClause events" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseSyntax ^ HandlesClause(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseItemSyntax ^&gt; ^ events);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="events">
 The list of event members being handled.
 </param>
        <summary>
 Represents the "Handles ..." clause on a method declaration that describes
 which events this method handles.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandlesClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax HandlesClause (Microsoft.CodeAnalysis.SyntaxToken handlesKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax&gt; events);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax HandlesClause(valuetype Microsoft.CodeAnalysis.SyntaxToken handlesKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax&gt; events) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.HandlesClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HandlesClause (handlesKeyword As SyntaxToken, events As SeparatedSyntaxList(Of HandlesClauseItemSyntax)) As HandlesClauseSyntax" />
      <MemberSignature Language="F#" Value="static member HandlesClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.HandlesClause (handlesKeyword, events)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseSyntax ^ HandlesClause(Microsoft::CodeAnalysis::SyntaxToken handlesKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseItemSyntax ^&gt; events);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handlesKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="events" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="handlesKeyword">
 The "Handles" keyword.
 </param>
        <param name="events">
 The list of event members being handled.
 </param>
        <summary>
 Represents the "Handles ..." clause on a method declaration that describes
 which events this method handles.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandlesClauseItem">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax HandlesClauseItem (Microsoft.CodeAnalysis.VisualBasic.Syntax.EventContainerSyntax eventContainer, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax eventMember);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax HandlesClauseItem(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventContainerSyntax eventContainer, class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax eventMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.HandlesClauseItem(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventContainerSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HandlesClauseItem (eventContainer As EventContainerSyntax, eventMember As IdentifierNameSyntax) As HandlesClauseItemSyntax" />
      <MemberSignature Language="F#" Value="static member HandlesClauseItem : Microsoft.CodeAnalysis.VisualBasic.Syntax.EventContainerSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.HandlesClauseItem (eventContainer, eventMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseItemSyntax ^ HandlesClauseItem(Microsoft::CodeAnalysis::VisualBasic::Syntax::EventContainerSyntax ^ eventContainer, Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ eventMember);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventContainer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EventContainerSyntax" />
        <Parameter Name="eventMember" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
      </Parameters>
      <Docs>
        <param name="eventContainer">
 The container of the event. This can either be a simple identifier (identifying
 a members of the containing type) or one of the special keywords "Me", "MyBase"
 or "MyClass".
 </param>
        <param name="eventMember">
 The event being handled. This must be a simple identifier.
 </param>
        <summary>
 Represents a single handled event in a "Handles ..." clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandlesClauseItem">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax HandlesClauseItem (Microsoft.CodeAnalysis.VisualBasic.Syntax.EventContainerSyntax eventContainer, Microsoft.CodeAnalysis.SyntaxToken dotToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax eventMember);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax HandlesClauseItem(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventContainerSyntax eventContainer, valuetype Microsoft.CodeAnalysis.SyntaxToken dotToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax eventMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.HandlesClauseItem(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventContainerSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HandlesClauseItem (eventContainer As EventContainerSyntax, dotToken As SyntaxToken, eventMember As IdentifierNameSyntax) As HandlesClauseItemSyntax" />
      <MemberSignature Language="F#" Value="static member HandlesClauseItem : Microsoft.CodeAnalysis.VisualBasic.Syntax.EventContainerSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.HandlesClauseItem (eventContainer, dotToken, eventMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseItemSyntax ^ HandlesClauseItem(Microsoft::CodeAnalysis::VisualBasic::Syntax::EventContainerSyntax ^ eventContainer, Microsoft::CodeAnalysis::SyntaxToken dotToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ eventMember);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventContainer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EventContainerSyntax" />
        <Parameter Name="dotToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="eventMember" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
      </Parameters>
      <Docs>
        <param name="eventContainer">
 The container of the event. This can either be a simple identifier (identifying
 a members of the containing type) or one of the special keywords "Me", "MyBase"
 or "MyClass".
 </param>
        <param name="dotToken">
 The "." token.
 </param>
        <param name="eventMember">
 The event being handled. This must be a simple identifier.
 </param>
        <summary>
 Represents a single handled event in a "Handles ..." clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Identifier (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Identifier(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Identifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Identifier (text As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Identifier : string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Identifier text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Identifier(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Identifier (Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Identifier(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Identifier (leadingTrivia As SyntaxTriviaList, text As String, trailingTrivia As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Identifier : Microsoft.CodeAnalysis.SyntaxTriviaList * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Identifier (leadingTrivia, text, trailingTrivia)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Identifier(Microsoft::CodeAnalysis::SyntaxTriviaList leadingTrivia, System::String ^ text, Microsoft::CodeAnalysis::SyntaxTriviaList trailingTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leadingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="trailingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leadingTrivia">To be added.</param>
        <param name="text">To be added.</param>
        <param name="trailingTrivia">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Identifier (string text, bool isBracketed, string identifierText, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeCharacter);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Identifier(string text, bool isBracketed, string identifierText, valuetype Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeCharacter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Identifier(System.String,System.Boolean,System.String,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter)" />
      <MemberSignature Language="F#" Value="static member Identifier : string * bool * string * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Identifier (text, isBracketed, identifierText, typeCharacter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Identifier(System::String ^ text, bool isBracketed, System::String ^ identifierText, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeCharacter typeCharacter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="isBracketed" Type="System.Boolean" />
        <Parameter Name="identifierText" Type="System.String" />
        <Parameter Name="typeCharacter" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="isBracketed">To be added.</param>
        <param name="identifierText">To be added.</param>
        <param name="typeCharacter">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Identifier (Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, bool isBracketed, string identifierText, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeCharacter, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Identifier(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, bool isBracketed, string identifierText, valuetype Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeCharacter, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Identifier(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Boolean,System.String,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="F#" Value="static member Identifier : Microsoft.CodeAnalysis.SyntaxTriviaList * string * bool * string * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Identifier (leadingTrivia, text, isBracketed, identifierText, typeCharacter, trailingTrivia)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Identifier(Microsoft::CodeAnalysis::SyntaxTriviaList leadingTrivia, System::String ^ text, bool isBracketed, System::String ^ identifierText, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeCharacter typeCharacter, Microsoft::CodeAnalysis::SyntaxTriviaList trailingTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leadingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="isBracketed" Type="System.Boolean" />
        <Parameter Name="identifierText" Type="System.String" />
        <Parameter Name="typeCharacter" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter" />
        <Parameter Name="trailingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leadingTrivia">To be added.</param>
        <param name="text">To be added.</param>
        <param name="isBracketed">To be added.</param>
        <param name="identifierText">To be added.</param>
        <param name="typeCharacter">To be added.</param>
        <param name="trailingTrivia">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IdentifierLabel">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax IdentifierLabel (Microsoft.CodeAnalysis.SyntaxToken labelToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax IdentifierLabel(valuetype Microsoft.CodeAnalysis.SyntaxToken labelToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IdentifierLabel(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IdentifierLabel (labelToken As SyntaxToken) As LabelSyntax" />
      <MemberSignature Language="F#" Value="static member IdentifierLabel : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IdentifierLabel labelToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ IdentifierLabel(Microsoft::CodeAnalysis::SyntaxToken labelToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="labelToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="labelToken">
 The label name (identifier), line number (integer literal), or next keyword
 token.
 </param>
        <summary>
 A label for a GoTo, Resume, or On Error statement. An identifier, line number,
 or next keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IdentifierLabel">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax IdentifierLabel (string labelToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax IdentifierLabel(string labelToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IdentifierLabel(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IdentifierLabel (labelToken As String) As LabelSyntax" />
      <MemberSignature Language="F#" Value="static member IdentifierLabel : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IdentifierLabel labelToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ IdentifierLabel(System::String ^ labelToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="labelToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="labelToken">
 The label name (identifier), line number (integer literal), or next keyword
 token.
 </param>
        <summary>
 A label for a GoTo, Resume, or On Error statement. An identifier, line number,
 or next keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IdentifierName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax IdentifierName (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax IdentifierName(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IdentifierName(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IdentifierName (identifier As SyntaxToken) As IdentifierNameSyntax" />
      <MemberSignature Language="F#" Value="static member IdentifierName : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IdentifierName identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ IdentifierName(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The identifier in the name.
 </param>
        <summary>
 Represents a type name consisting of a single identifier (which might include
 brackets or a type character).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IdentifierName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax IdentifierName (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax IdentifierName(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IdentifierName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IdentifierName (identifier As String) As IdentifierNameSyntax" />
      <MemberSignature Language="F#" Value="static member IdentifierName : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IdentifierName identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ IdentifierName(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The identifier in the name.
 </param>
        <summary>
 Represents a type name consisting of a single identifier (which might include
 brackets or a type character).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IfDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax IfDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax IfDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfDirectiveTrivia (ifOrElseIfKeyword As SyntaxToken, condition As ExpressionSyntax) As IfDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member IfDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IfDirectiveTrivia (ifOrElseIfKeyword, condition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::IfDirectiveTriviaSyntax ^ IfDirectiveTrivia(Microsoft::CodeAnalysis::SyntaxToken ifOrElseIfKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifOrElseIfKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="ifOrElseIfKeyword">To be added.</param>
        <param name="condition">To be added.</param>
        <summary>
 Represents the beginning of an #If pre-processing directive appearing in
 source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IfDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax IfDirectiveTrivia (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax IfDirectiveTrivia(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfDirectiveTrivia (kind As SyntaxKind, ifOrElseIfKeyword As SyntaxToken, condition As ExpressionSyntax) As IfDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member IfDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IfDirectiveTrivia (kind, ifOrElseIfKeyword, condition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::IfDirectiveTriviaSyntax ^ IfDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken ifOrElseIfKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="ifOrElseIfKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 IfDirectiveTriviaSyntax. One of IfDirectiveTrivia, ElseIfDirectiveTrivia.
 </param>
        <param name="ifOrElseIfKeyword">To be added.</param>
        <param name="condition">To be added.</param>
        <summary>
 Represents the beginning of an #If pre-processing directive appearing in
 source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IfDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax IfDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken elseKeyword, Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken thenKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax IfDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken elseKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, valuetype Microsoft.CodeAnalysis.SyntaxToken thenKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfDirectiveTrivia (hashToken As SyntaxToken, elseKeyword As SyntaxToken, ifOrElseIfKeyword As SyntaxToken, condition As ExpressionSyntax, thenKeyword As SyntaxToken) As IfDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member IfDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IfDirectiveTrivia (hashToken, elseKeyword, ifOrElseIfKeyword, condition, thenKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::IfDirectiveTriviaSyntax ^ IfDirectiveTrivia(Microsoft::CodeAnalysis::SyntaxToken hashToken, Microsoft::CodeAnalysis::SyntaxToken elseKeyword, Microsoft::CodeAnalysis::SyntaxToken ifOrElseIfKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition, Microsoft::CodeAnalysis::SyntaxToken thenKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="elseKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="ifOrElseIfKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="thenKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="hashToken">
 The "#" token in a preprocessor directive.
 </param>
        <param name="elseKeyword">To be added.</param>
        <param name="ifOrElseIfKeyword">To be added.</param>
        <param name="condition">To be added.</param>
        <param name="thenKeyword">To be added.</param>
        <summary>
 Represents the beginning of an #If pre-processing directive appearing in
 source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IfDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax IfDirectiveTrivia (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken elseKeyword, Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken thenKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax IfDirectiveTrivia(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken elseKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken ifOrElseIfKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, valuetype Microsoft.CodeAnalysis.SyntaxToken thenKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfDirectiveTrivia (kind As SyntaxKind, hashToken As SyntaxToken, elseKeyword As SyntaxToken, ifOrElseIfKeyword As SyntaxToken, condition As ExpressionSyntax, thenKeyword As SyntaxToken) As IfDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member IfDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IfDirectiveTrivia (kind, hashToken, elseKeyword, ifOrElseIfKeyword, condition, thenKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::IfDirectiveTriviaSyntax ^ IfDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken hashToken, Microsoft::CodeAnalysis::SyntaxToken elseKeyword, Microsoft::CodeAnalysis::SyntaxToken ifOrElseIfKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition, Microsoft::CodeAnalysis::SyntaxToken thenKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="elseKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="ifOrElseIfKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="thenKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 IfDirectiveTriviaSyntax. One of IfDirectiveTrivia, ElseIfDirectiveTrivia.
 </param>
        <param name="hashToken">
 The "#" token in a preprocessor directive.
 </param>
        <param name="elseKeyword">To be added.</param>
        <param name="ifOrElseIfKeyword">To be added.</param>
        <param name="condition">To be added.</param>
        <param name="thenKeyword">To be added.</param>
        <summary>
 Represents the beginning of an #If pre-processing directive appearing in
 source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IfStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax IfStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax IfStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfStatement (condition As ExpressionSyntax) As IfStatementSyntax" />
      <MemberSignature Language="F#" Value="static member IfStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IfStatement condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::IfStatementSyntax ^ IfStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="condition">
 The condition expression to be evaluated.
 </param>
        <summary>
 Represents the "If ... Then" statement that begins a multi-line "If" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IfStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax IfStatement (Microsoft.CodeAnalysis.SyntaxToken ifKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken thenKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax IfStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken ifKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, valuetype Microsoft.CodeAnalysis.SyntaxToken thenKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfStatement (ifKeyword As SyntaxToken, condition As ExpressionSyntax, thenKeyword As SyntaxToken) As IfStatementSyntax" />
      <MemberSignature Language="F#" Value="static member IfStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IfStatement (ifKeyword, condition, thenKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::IfStatementSyntax ^ IfStatement(Microsoft::CodeAnalysis::SyntaxToken ifKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition, Microsoft::CodeAnalysis::SyntaxToken thenKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="thenKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="ifKeyword">
 The "If" keyword.
 </param>
        <param name="condition">
 The condition expression to be evaluated.
 </param>
        <param name="thenKeyword">
 The "Then" keyword.
 </param>
        <summary>
 Represents the "If ... Then" statement that begins a multi-line "If" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImplementsClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax ImplementsClause (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax&gt; interfaceMembers);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax ImplementsClause(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax&gt; interfaceMembers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImplementsClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImplementsClause (interfaceMembers As SeparatedSyntaxList(Of QualifiedNameSyntax)) As ImplementsClauseSyntax" />
      <MemberSignature Language="F#" Value="static member ImplementsClause : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImplementsClause interfaceMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsClauseSyntax ^ ImplementsClause(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::QualifiedNameSyntax ^&gt; interfaceMembers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceMembers" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="interfaceMembers">
 The list of interface members being implemented.
 </param>
        <summary>
 Represents the "Implements ..." clause on a type member, which describes which
 interface members this member implements.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImplementsClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax ImplementsClause (params Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax[] interfaceMembers);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax ImplementsClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax[] interfaceMembers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImplementsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImplementsClause (ParamArray interfaceMembers As QualifiedNameSyntax()) As ImplementsClauseSyntax" />
      <MemberSignature Language="F#" Value="static member ImplementsClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImplementsClause interfaceMembers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsClauseSyntax ^ ImplementsClause(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::QualifiedNameSyntax ^&gt; ^ interfaceMembers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceMembers" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="interfaceMembers">
 The list of interface members being implemented.
 </param>
        <summary>
 Represents the "Implements ..." clause on a type member, which describes which
 interface members this member implements.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImplementsClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax ImplementsClause (Microsoft.CodeAnalysis.SyntaxToken implementsKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax&gt; interfaceMembers);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax ImplementsClause(valuetype Microsoft.CodeAnalysis.SyntaxToken implementsKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax&gt; interfaceMembers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImplementsClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImplementsClause (implementsKeyword As SyntaxToken, interfaceMembers As SeparatedSyntaxList(Of QualifiedNameSyntax)) As ImplementsClauseSyntax" />
      <MemberSignature Language="F#" Value="static member ImplementsClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImplementsClause (implementsKeyword, interfaceMembers)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsClauseSyntax ^ ImplementsClause(Microsoft::CodeAnalysis::SyntaxToken implementsKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::QualifiedNameSyntax ^&gt; interfaceMembers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implementsKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="interfaceMembers" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="implementsKeyword">
 The "Implements" keyword.
 </param>
        <param name="interfaceMembers">
 The list of interface members being implemented.
 </param>
        <summary>
 Represents the "Implements ..." clause on a type member, which describes which
 interface members this member implements.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImplementsStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax ImplementsStatement (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt; types);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax ImplementsStatement(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImplementsStatement(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImplementsStatement (types As SeparatedSyntaxList(Of TypeSyntax)) As ImplementsStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ImplementsStatement : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImplementsStatement types" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^ ImplementsStatement(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^&gt; types);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="types">
 A list of the types being implemented.
 </param>
        <summary>
 Represents an Implements statement in a Class or Structure.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImplementsStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax ImplementsStatement (params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax ImplementsStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImplementsStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImplementsStatement (ParamArray types As TypeSyntax()) As ImplementsStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ImplementsStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImplementsStatement types" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^ ImplementsStatement(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^&gt; ^ types);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="types">
 A list of the types being implemented.
 </param>
        <summary>
 Represents an Implements statement in a Class or Structure.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImplementsStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax ImplementsStatement (Microsoft.CodeAnalysis.SyntaxToken implementsKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt; types);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax ImplementsStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken implementsKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImplementsStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImplementsStatement (implementsKeyword As SyntaxToken, types As SeparatedSyntaxList(Of TypeSyntax)) As ImplementsStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ImplementsStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImplementsStatement (implementsKeyword, types)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^ ImplementsStatement(Microsoft::CodeAnalysis::SyntaxToken implementsKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^&gt; types);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implementsKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="types" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="implementsKeyword">
 The "Implements" keyword.
 </param>
        <param name="types">
 A list of the types being implemented.
 </param>
        <summary>
 Represents an Implements statement in a Class or Structure.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportAliasClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax ImportAliasClause (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax ImportAliasClause(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImportAliasClause(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportAliasClause (identifier As SyntaxToken) As ImportAliasClauseSyntax" />
      <MemberSignature Language="F#" Value="static member ImportAliasClause : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImportAliasClause identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportAliasClauseSyntax ^ ImportAliasClause(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The identifier being introduced.
 </param>
        <summary>
 Represents an alias identifier followed by an "=" token in an Imports clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportAliasClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax ImportAliasClause (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax ImportAliasClause(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImportAliasClause(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportAliasClause (identifier As String) As ImportAliasClauseSyntax" />
      <MemberSignature Language="F#" Value="static member ImportAliasClause : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImportAliasClause identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportAliasClauseSyntax ^ ImportAliasClause(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The identifier being introduced.
 </param>
        <summary>
 Represents an alias identifier followed by an "=" token in an Imports clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportAliasClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax ImportAliasClause (Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken equalsToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax ImportAliasClause(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, valuetype Microsoft.CodeAnalysis.SyntaxToken equalsToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImportAliasClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportAliasClause (identifier As SyntaxToken, equalsToken As SyntaxToken) As ImportAliasClauseSyntax" />
      <MemberSignature Language="F#" Value="static member ImportAliasClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImportAliasClause (identifier, equalsToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportAliasClauseSyntax ^ ImportAliasClause(Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::SyntaxToken equalsToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="equalsToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The identifier being introduced.
 </param>
        <param name="equalsToken">
 The "=" token.
 </param>
        <summary>
 Represents an alias identifier followed by an "=" token in an Imports clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportsStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax ImportsStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax ImportsStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImportsStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportsStatement () As ImportsStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ImportsStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImportsStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportsStatementSyntax ^ ImportsStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an Imports statement, which has one or more imports clauses.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportsStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax ImportsStatement (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax&gt; importsClauses);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax ImportsStatement(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax&gt; importsClauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImportsStatement(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportsStatement (importsClauses As SeparatedSyntaxList(Of ImportsClauseSyntax)) As ImportsStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ImportsStatement : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImportsStatement importsClauses" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportsStatementSyntax ^ ImportsStatement(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportsClauseSyntax ^&gt; importsClauses);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importsClauses" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="importsClauses">
 A list of one or more import clauses. Each clause is either an alias, namespace
 or XML namespace import.
 </param>
        <summary>
 Represents an Imports statement, which has one or more imports clauses.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportsStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax ImportsStatement (Microsoft.CodeAnalysis.SyntaxToken importsKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax&gt; importsClauses);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax ImportsStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken importsKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax&gt; importsClauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImportsStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImportsStatement (importsKeyword As SyntaxToken, importsClauses As SeparatedSyntaxList(Of ImportsClauseSyntax)) As ImportsStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ImportsStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ImportsStatement (importsKeyword, importsClauses)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportsStatementSyntax ^ ImportsStatement(Microsoft::CodeAnalysis::SyntaxToken importsKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportsClauseSyntax ^&gt; importsClauses);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importsKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="importsClauses" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="importsKeyword">
 The "Imports" keyword.
 </param>
        <param name="importsClauses">
 A list of one or more import clauses. Each clause is either an alias, namespace
 or XML namespace import.
 </param>
        <summary>
 Represents an Imports statement, which has one or more imports clauses.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncompleteMember">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax IncompleteMember ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax IncompleteMember() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IncompleteMember" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IncompleteMember () As IncompleteMemberSyntax" />
      <MemberSignature Language="F#" Value="static member IncompleteMember : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IncompleteMember " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::IncompleteMemberSyntax ^ IncompleteMember();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents the beginning of a declaration. However, not enough syntax is
 detected to classify this as a field, method, property or event. This is node
 always represents a syntax error.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncompleteMember">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax IncompleteMember (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken missingIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax IncompleteMember(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken missingIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IncompleteMember(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IncompleteMember (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, missingIdentifier As SyntaxToken) As IncompleteMemberSyntax" />
      <MemberSignature Language="F#" Value="static member IncompleteMember : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IncompleteMember (attributeLists, modifiers, missingIdentifier)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::IncompleteMemberSyntax ^ IncompleteMember(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken missingIdentifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="missingIdentifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, an empty list is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned.
 </param>
        <param name="missingIdentifier">
 The missing identifier token for this incomplete member. Should only be used to
 have a location for error reporting.
 </param>
        <summary>
 Represents the beginning of a declaration. However, not enough syntax is
 detected to classify this as a field, method, property or event. This is node
 always represents a syntax error.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InferredFieldInitializer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax InferredFieldInitializer (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax InferredFieldInitializer(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InferredFieldInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InferredFieldInitializer (expression As ExpressionSyntax) As InferredFieldInitializerSyntax" />
      <MemberSignature Language="F#" Value="static member InferredFieldInitializer : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InferredFieldInitializer expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InferredFieldInitializerSyntax ^ InferredFieldInitializer(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The value being assigned.
 </param>
        <summary>
 Represent a field initializer in a With {...} initializer where the field name
 is inferred from the initializer expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InferredFieldInitializer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax InferredFieldInitializer (Microsoft.CodeAnalysis.SyntaxToken keyKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax InferredFieldInitializer(valuetype Microsoft.CodeAnalysis.SyntaxToken keyKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InferredFieldInitializer(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InferredFieldInitializer (keyKeyword As SyntaxToken, expression As ExpressionSyntax) As InferredFieldInitializerSyntax" />
      <MemberSignature Language="F#" Value="static member InferredFieldInitializer : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InferredFieldInitializer (keyKeyword, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InferredFieldInitializerSyntax ^ InferredFieldInitializer(Microsoft::CodeAnalysis::SyntaxToken keyKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="keyKeyword">
 The optional "Key" keyword.
 </param>
        <param name="expression">
 The value being assigned.
 </param>
        <summary>
 Represent a field initializer in a With {...} initializer where the field name
 is inferred from the initializer expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InheritsStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax InheritsStatement (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt; types);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax InheritsStatement(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InheritsStatement(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InheritsStatement (types As SeparatedSyntaxList(Of TypeSyntax)) As InheritsStatementSyntax" />
      <MemberSignature Language="F#" Value="static member InheritsStatement : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InheritsStatement types" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^ InheritsStatement(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^&gt; types);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="types">
 A list of the types being inherited.
 </param>
        <summary>
 Represents an Inherits statement in a Class, Structure or Interface.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InheritsStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax InheritsStatement (params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax InheritsStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InheritsStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InheritsStatement (ParamArray types As TypeSyntax()) As InheritsStatementSyntax" />
      <MemberSignature Language="F#" Value="static member InheritsStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InheritsStatement types" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^ InheritsStatement(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^&gt; ^ types);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="types">
 A list of the types being inherited.
 </param>
        <summary>
 Represents an Inherits statement in a Class, Structure or Interface.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InheritsStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax InheritsStatement (Microsoft.CodeAnalysis.SyntaxToken inheritsKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt; types);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax InheritsStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken inheritsKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InheritsStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InheritsStatement (inheritsKeyword As SyntaxToken, types As SeparatedSyntaxList(Of TypeSyntax)) As InheritsStatementSyntax" />
      <MemberSignature Language="F#" Value="static member InheritsStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InheritsStatement (inheritsKeyword, types)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^ InheritsStatement(Microsoft::CodeAnalysis::SyntaxToken inheritsKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^&gt; types);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inheritsKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="types" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="inheritsKeyword">
 The "Inherits" keyword.
 </param>
        <param name="types">
 A list of the types being inherited.
 </param>
        <summary>
 Represents an Inherits statement in a Class, Structure or Interface.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IntegerDivideAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax IntegerDivideAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax IntegerDivideAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IntegerDivideAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IntegerDivideAssignmentStatement (left As ExpressionSyntax, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member IntegerDivideAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IntegerDivideAssignmentStatement (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ IntegerDivideAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IntegerDivideAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax IntegerDivideAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax IntegerDivideAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IntegerDivideAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IntegerDivideAssignmentStatement (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member IntegerDivideAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IntegerDivideAssignmentStatement (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ IntegerDivideAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="operatorToken">
 The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
 "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IntegerDivideExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax IntegerDivideExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax IntegerDivideExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IntegerDivideExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IntegerDivideExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member IntegerDivideExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IntegerDivideExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ IntegerDivideExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IntegerDivideExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax IntegerDivideExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax IntegerDivideExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IntegerDivideExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IntegerDivideExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member IntegerDivideExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IntegerDivideExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ IntegerDivideExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IntegerLiteralToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken IntegerLiteralToken (string text, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralBase base, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeSuffix, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken IntegerLiteralToken(string text, valuetype Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralBase base, valuetype Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeSuffix, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IntegerLiteralToken(System.String,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralBase,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IntegerLiteralToken (text As String, base As LiteralBase, typeSuffix As TypeCharacter, value As ULong) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member IntegerLiteralToken : string * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralBase * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter * uint64 -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IntegerLiteralToken (text, base, typeSuffix, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken IntegerLiteralToken(System::String ^ text, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralBase base, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeCharacter typeSuffix, System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="base" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralBase" />
        <Parameter Name="typeSuffix" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="base">To be added.</param>
        <param name="typeSuffix">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IntegerLiteralToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken IntegerLiteralToken (Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralBase base, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeSuffix, ulong value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken IntegerLiteralToken(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, valuetype Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralBase base, valuetype Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter typeSuffix, unsigned int64 value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IntegerLiteralToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralBase,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter,System.UInt64,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IntegerLiteralToken (leadingTrivia As SyntaxTriviaList, text As String, base As LiteralBase, typeSuffix As TypeCharacter, value As ULong, trailingTrivia As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member IntegerLiteralToken : Microsoft.CodeAnalysis.SyntaxTriviaList * string * Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralBase * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter * uint64 * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IntegerLiteralToken (leadingTrivia, text, base, typeSuffix, value, trailingTrivia)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken IntegerLiteralToken(Microsoft::CodeAnalysis::SyntaxTriviaList leadingTrivia, System::String ^ text, Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralBase base, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeCharacter typeSuffix, System::UInt64 value, Microsoft::CodeAnalysis::SyntaxTriviaList trailingTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leadingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="base" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralBase" />
        <Parameter Name="typeSuffix" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="trailingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leadingTrivia">To be added.</param>
        <param name="text">To be added.</param>
        <param name="base">To be added.</param>
        <param name="typeSuffix">To be added.</param>
        <param name="value">To be added.</param>
        <param name="trailingTrivia">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterfaceBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax InterfaceBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax interfaceStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax InterfaceBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax interfaceStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterfaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterfaceBlock (interfaceStatement As InterfaceStatementSyntax) As InterfaceBlockSyntax" />
      <MemberSignature Language="F#" Value="static member InterfaceBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterfaceBlock interfaceStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterfaceBlockSyntax ^ InterfaceBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterfaceStatementSyntax ^ interfaceStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="interfaceStatement">
 The "Interface" statement that begins the block.
 </param>
        <summary>
 Represents a declaration of a Interface, its contents and the End statement
 that ends it.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterfaceBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax InterfaceBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax interfaceStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax InterfaceBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax interfaceStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterfaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterfaceBlock (interfaceStatement As InterfaceStatementSyntax, inherits As SyntaxList(Of InheritsStatementSyntax), implements As SyntaxList(Of ImplementsStatementSyntax), members As SyntaxList(Of StatementSyntax)) As InterfaceBlockSyntax" />
      <MemberSignature Language="F#" Value="static member InterfaceBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterfaceBlock (interfaceStatement, inherits, implements, members)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterfaceBlockSyntax ^ InterfaceBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterfaceStatementSyntax ^ interfaceStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^&gt; inherits, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^&gt; implements, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax" />
        <Parameter Name="inherits" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt;" />
        <Parameter Name="implements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="interfaceStatement">
 The "Interface" statement that begins the block.
 </param>
        <param name="inherits">
 A list of the Inherits declarations for the type.
 </param>
        <param name="implements">
 A list of the Implements declarations for the type.
 </param>
        <param name="members">
 The declarations contained in the type or module.
 </param>
        <summary>
 Represents a declaration of a Interface, its contents and the End statement
 that ends it.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterfaceBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax InterfaceBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax interfaceStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endInterfaceStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax InterfaceBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax interfaceStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endInterfaceStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterfaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterfaceBlock (interfaceStatement As InterfaceStatementSyntax, inherits As SyntaxList(Of InheritsStatementSyntax), implements As SyntaxList(Of ImplementsStatementSyntax), members As SyntaxList(Of StatementSyntax), endInterfaceStatement As EndBlockStatementSyntax) As InterfaceBlockSyntax" />
      <MemberSignature Language="F#" Value="static member InterfaceBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterfaceBlock (interfaceStatement, inherits, implements, members, endInterfaceStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterfaceBlockSyntax ^ InterfaceBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterfaceStatementSyntax ^ interfaceStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^&gt; inherits, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^&gt; implements, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; members, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endInterfaceStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax" />
        <Parameter Name="inherits" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt;" />
        <Parameter Name="implements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endInterfaceStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="interfaceStatement">
 The "Interface" statement that begins the block.
 </param>
        <param name="inherits">
 A list of the Inherits declarations for the type.
 </param>
        <param name="implements">
 A list of the Implements declarations for the type.
 </param>
        <param name="members">
 The declarations contained in the type or module.
 </param>
        <param name="endInterfaceStatement">
 The "End Interface" statement that ends the block.
 </param>
        <summary>
 Represents a declaration of a Interface, its contents and the End statement
 that ends it.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterfaceStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax InterfaceStatement (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax InterfaceStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterfaceStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterfaceStatement (identifier As SyntaxToken) As InterfaceStatementSyntax" />
      <MemberSignature Language="F#" Value="static member InterfaceStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterfaceStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterfaceStatementSyntax ^ InterfaceStatement(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the type being declared.
 </param>
        <summary>
 Represents the beginning statement of a Interface declaration. This node always
 appears as the Begin of a TypeBlock with Kind=InterfaceDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterfaceStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax InterfaceStatement (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax InterfaceStatement(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterfaceStatement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterfaceStatement (identifier As String) As InterfaceStatementSyntax" />
      <MemberSignature Language="F#" Value="static member InterfaceStatement : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterfaceStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterfaceStatementSyntax ^ InterfaceStatement(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the type being declared.
 </param>
        <summary>
 Represents the beginning statement of a Interface declaration. This node always
 appears as the Begin of a TypeBlock with Kind=InterfaceDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterfaceStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax InterfaceStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax InterfaceStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterfaceStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterfaceStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As InterfaceStatementSyntax" />
      <MemberSignature Language="F#" Value="static member InterfaceStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterfaceStatement (attributeLists, modifiers, identifier, typeParameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterfaceStatementSyntax ^ InterfaceStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, an empty list is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned.
 </param>
        <param name="identifier">
 The name of the type being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic parameters for this type. If no
 generic parameters were present, Nothing is returned.
 </param>
        <summary>
 Represents the beginning statement of a Interface declaration. This node always
 appears as the Begin of a TypeBlock with Kind=InterfaceDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterfaceStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax InterfaceStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken interfaceKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax InterfaceStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken interfaceKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterfaceStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterfaceStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, interfaceKeyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As InterfaceStatementSyntax" />
      <MemberSignature Language="F#" Value="static member InterfaceStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterfaceStatement (attributeLists, modifiers, interfaceKeyword, identifier, typeParameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterfaceStatementSyntax ^ InterfaceStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken interfaceKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="interfaceKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, an empty list is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned.
 </param>
        <param name="interfaceKeyword">
 The "Interface" keyword.
 </param>
        <param name="identifier">
 The name of the type being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic parameters for this type. If no
 generic parameters were present, Nothing is returned.
 </param>
        <summary>
 Represents the beginning statement of a Interface declaration. This node always
 appears as the Begin of a TypeBlock with Kind=InterfaceDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolatedStringExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax InterpolatedStringExpression (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax&gt; contents);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax InterpolatedStringExpression(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax&gt; contents) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolatedStringExpression (contents As SyntaxList(Of InterpolatedStringContentSyntax)) As InterpolatedStringExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member InterpolatedStringExpression : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolatedStringExpression contents" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolatedStringExpressionSyntax ^ InterpolatedStringExpression(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolatedStringContentSyntax ^&gt; contents);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contents" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="contents">
 The contents of the interpolated string.
 </param>
        <summary>
 Represents an interpolated string expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolatedStringExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax InterpolatedStringExpression (params Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax[] contents);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax InterpolatedStringExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax[] contents) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolatedStringExpression (ParamArray contents As InterpolatedStringContentSyntax()) As InterpolatedStringExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member InterpolatedStringExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolatedStringExpression contents" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolatedStringExpressionSyntax ^ InterpolatedStringExpression(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolatedStringContentSyntax ^&gt; ^ contents);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contents" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="contents">
 The contents of the interpolated string.
 </param>
        <summary>
 Represents an interpolated string expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolatedStringExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax InterpolatedStringExpression (Microsoft.CodeAnalysis.SyntaxToken dollarSignDoubleQuoteToken, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax&gt; contents, Microsoft.CodeAnalysis.SyntaxToken doubleQuoteToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax InterpolatedStringExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken dollarSignDoubleQuoteToken, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax&gt; contents, valuetype Microsoft.CodeAnalysis.SyntaxToken doubleQuoteToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolatedStringExpression (dollarSignDoubleQuoteToken As SyntaxToken, contents As SyntaxList(Of InterpolatedStringContentSyntax), doubleQuoteToken As SyntaxToken) As InterpolatedStringExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member InterpolatedStringExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolatedStringExpression (dollarSignDoubleQuoteToken, contents, doubleQuoteToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolatedStringExpressionSyntax ^ InterpolatedStringExpression(Microsoft::CodeAnalysis::SyntaxToken dollarSignDoubleQuoteToken, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolatedStringContentSyntax ^&gt; contents, Microsoft::CodeAnalysis::SyntaxToken doubleQuoteToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dollarSignDoubleQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="contents" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringContentSyntax&gt;" />
        <Parameter Name="doubleQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="dollarSignDoubleQuoteToken">
 The opening '$"', '$“', or '$”' token.
 </param>
        <param name="contents">
 The contents of the interpolated string.
 </param>
        <param name="doubleQuoteToken">
 The closing '"', '”', or '“' token.
 </param>
        <summary>
 Represents an interpolated string expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolatedStringText">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax InterpolatedStringText ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax InterpolatedStringText() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolatedStringText" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolatedStringText () As InterpolatedStringTextSyntax" />
      <MemberSignature Language="F#" Value="static member InterpolatedStringText : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolatedStringText " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolatedStringTextSyntax ^ InterpolatedStringText();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents literal text content in an interpolated string.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolatedStringText">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax InterpolatedStringText (Microsoft.CodeAnalysis.SyntaxToken textToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax InterpolatedStringText(valuetype Microsoft.CodeAnalysis.SyntaxToken textToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolatedStringText(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolatedStringText (textToken As SyntaxToken) As InterpolatedStringTextSyntax" />
      <MemberSignature Language="F#" Value="static member InterpolatedStringText : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolatedStringText textToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolatedStringTextSyntax ^ InterpolatedStringText(Microsoft::CodeAnalysis::SyntaxToken textToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="textToken">
 The text token.
 </param>
        <summary>
 Represents literal text content in an interpolated string.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolatedStringTextToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken InterpolatedStringTextToken (string text, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken InterpolatedStringTextToken(string text, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolatedStringTextToken(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolatedStringTextToken (text As String, value As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member InterpolatedStringTextToken : string * string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolatedStringTextToken (text, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken InterpolatedStringTextToken(System::String ^ text, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="value">To be added.</param>
        <summary>
 Represents literal character data in interpolated string expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolatedStringTextToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken InterpolatedStringTextToken (Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken InterpolatedStringTextToken(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, string value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolatedStringTextToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolatedStringTextToken (leadingTrivia As SyntaxTriviaList, text As String, value As String, trailingTrivia As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member InterpolatedStringTextToken : Microsoft.CodeAnalysis.SyntaxTriviaList * string * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolatedStringTextToken (leadingTrivia, text, value, trailingTrivia)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken InterpolatedStringTextToken(Microsoft::CodeAnalysis::SyntaxTriviaList leadingTrivia, System::String ^ text, System::String ^ value, Microsoft::CodeAnalysis::SyntaxTriviaList trailingTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leadingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="trailingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leadingTrivia">To be added.</param>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="value">To be added.</param>
        <param name="trailingTrivia">To be added.</param>
        <summary>
 Represents literal character data in interpolated string expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Interpolation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax Interpolation (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax Interpolation(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Interpolation (expression As ExpressionSyntax) As InterpolationSyntax" />
      <MemberSignature Language="F#" Value="static member Interpolation : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Interpolation expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationSyntax ^ Interpolation(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression whose formatted value should be embedded in the resultant
 string.
 </param>
        <summary>
 Represents an interpolation of an expression in an interpolated string
 expression e.g. '{expression[,alignment][:formatString]}'.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Interpolation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax Interpolation (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax alignmentClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax Interpolation(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax alignmentClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Interpolation (expression As ExpressionSyntax, alignmentClause As InterpolationAlignmentClauseSyntax) As InterpolationSyntax" />
      <MemberSignature Language="F#" Value="static member Interpolation : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Interpolation (expression, alignmentClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationSyntax ^ Interpolation(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationAlignmentClauseSyntax ^ alignmentClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="alignmentClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression whose formatted value should be embedded in the resultant
 string.
 </param>
        <param name="alignmentClause">
 Optional. The alignment clause ',alignment' of the embedded expression.
 </param>
        <summary>
 Represents an interpolation of an expression in an interpolated string
 expression e.g. '{expression[,alignment][:formatString]}'.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Interpolation">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax Interpolation (Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax alignmentClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax formatClause, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax Interpolation(valuetype Microsoft.CodeAnalysis.SyntaxToken openBraceToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax alignmentClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax formatClause, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Interpolation (openBraceToken As SyntaxToken, expression As ExpressionSyntax, alignmentClause As InterpolationAlignmentClauseSyntax, formatClause As InterpolationFormatClauseSyntax, closeBraceToken As SyntaxToken) As InterpolationSyntax" />
      <MemberSignature Language="F#" Value="static member Interpolation : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Interpolation (openBraceToken, expression, alignmentClause, formatClause, closeBraceToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationSyntax ^ Interpolation(Microsoft::CodeAnalysis::SyntaxToken openBraceToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationAlignmentClauseSyntax ^ alignmentClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationFormatClauseSyntax ^ formatClause, Microsoft::CodeAnalysis::SyntaxToken closeBraceToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="alignmentClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax" />
        <Parameter Name="formatClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax" />
        <Parameter Name="closeBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openBraceToken">
 The opening curly brace '{' token.
 </param>
        <param name="expression">
 The expression whose formatted value should be embedded in the resultant
 string.
 </param>
        <param name="alignmentClause">
 Optional. The alignment clause ',alignment' of the embedded expression.
 </param>
        <param name="formatClause">
 Optional. The format string clause ':formatString' of the embedded expression.
 </param>
        <param name="closeBraceToken">
 The closing curly brace '}' token of the embedded expression.
 </param>
        <summary>
 Represents an interpolation of an expression in an interpolated string
 expression e.g. '{expression[,alignment][:formatString]}'.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationAlignmentClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax InterpolationAlignmentClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax InterpolationAlignmentClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolationAlignmentClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolationAlignmentClause (value As ExpressionSyntax) As InterpolationAlignmentClauseSyntax" />
      <MemberSignature Language="F#" Value="static member InterpolationAlignmentClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolationAlignmentClause value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationAlignmentClauseSyntax ^ InterpolationAlignmentClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="value">
 An expression representing the alignment of the interpolated expression.
 </param>
        <summary>
 Represents an alignment clause ',alignment' of an interpolated string embedded
 expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationAlignmentClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax InterpolationAlignmentClause (Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax InterpolationAlignmentClause(valuetype Microsoft.CodeAnalysis.SyntaxToken commaToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolationAlignmentClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolationAlignmentClause (commaToken As SyntaxToken, value As ExpressionSyntax) As InterpolationAlignmentClauseSyntax" />
      <MemberSignature Language="F#" Value="static member InterpolationAlignmentClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolationAlignmentClause (commaToken, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationAlignmentClauseSyntax ^ InterpolationAlignmentClause(Microsoft::CodeAnalysis::SyntaxToken commaToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commaToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="commaToken">
 The comma ',' token.
 </param>
        <param name="value">
 An expression representing the alignment of the interpolated expression.
 </param>
        <summary>
 Represents an alignment clause ',alignment' of an interpolated string embedded
 expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationFormatClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax InterpolationFormatClause ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax InterpolationFormatClause() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolationFormatClause" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolationFormatClause () As InterpolationFormatClauseSyntax" />
      <MemberSignature Language="F#" Value="static member InterpolationFormatClause : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolationFormatClause " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationFormatClauseSyntax ^ InterpolationFormatClause();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a format string clause ':formatString' of an interpolated string
 embedded expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationFormatClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax InterpolationFormatClause (Microsoft.CodeAnalysis.SyntaxToken colonToken, Microsoft.CodeAnalysis.SyntaxToken formatStringToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax InterpolationFormatClause(valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken, valuetype Microsoft.CodeAnalysis.SyntaxToken formatStringToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolationFormatClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterpolationFormatClause (colonToken As SyntaxToken, formatStringToken As SyntaxToken) As InterpolationFormatClauseSyntax" />
      <MemberSignature Language="F#" Value="static member InterpolationFormatClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InterpolationFormatClause (colonToken, formatStringToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationFormatClauseSyntax ^ InterpolationFormatClause(Microsoft::CodeAnalysis::SyntaxToken colonToken, Microsoft::CodeAnalysis::SyntaxToken formatStringToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="formatStringToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="colonToken">
 The ':' token.
 </param>
        <param name="formatStringToken">
 The format string.
 </param>
        <summary>
 Represents a format string clause ':formatString' of an interpolated string
 embedded expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvocationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax InvocationExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax InvocationExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InvocationExpression" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InvocationExpression () As InvocationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member InvocationExpression : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InvocationExpression " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InvocationExpressionSyntax ^ InvocationExpression();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an invocation expression consisting of an invocation target and an
 optional argument list or an array, parameterized property or object default
 property index.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvocationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax InvocationExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax InvocationExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InvocationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InvocationExpression (expression As ExpressionSyntax) As InvocationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member InvocationExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InvocationExpression expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InvocationExpressionSyntax ^ InvocationExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvocationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax InvocationExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax InvocationExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InvocationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InvocationExpression (expression As ExpressionSyntax, argumentList As ArgumentListSyntax) As InvocationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member InvocationExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.InvocationExpression (expression, argumentList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::InvocationExpressionSyntax ^ InvocationExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ argumentList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The target of the call or index expression.
 </param>
        <param name="argumentList">
 The argument list.
 </param>
        <summary>
 Represents an invocation expression consisting of an invocation target and an
 optional argument list or an array, parameterized property or object default
 property index.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax IsExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax IsExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IsExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member IsExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IsExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ IsExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax IsExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax IsExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IsExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member IsExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IsExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ IsExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax IsNotExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax IsNotExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IsNotExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNotExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member IsNotExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IsNotExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ IsNotExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax IsNotExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax IsNotExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IsNotExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNotExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member IsNotExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.IsNotExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ IsNotExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JoinCondition">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax JoinCondition (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax JoinCondition(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.JoinCondition(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function JoinCondition (left As ExpressionSyntax, right As ExpressionSyntax) As JoinConditionSyntax" />
      <MemberSignature Language="F#" Value="static member JoinCondition : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.JoinCondition (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinConditionSyntax ^ JoinCondition(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left expression in the Join condition.
 </param>
        <param name="right">
 The right expression in the Join condition.
 </param>
        <summary>
 Represents the "expression Equals expression" condition in a Join.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JoinCondition">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax JoinCondition (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken equalsKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax JoinCondition(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken equalsKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.JoinCondition(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function JoinCondition (left As ExpressionSyntax, equalsKeyword As SyntaxToken, right As ExpressionSyntax) As JoinConditionSyntax" />
      <MemberSignature Language="F#" Value="static member JoinCondition : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.JoinCondition (left, equalsKeyword, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinConditionSyntax ^ JoinCondition(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken equalsKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="equalsKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left expression in the Join condition.
 </param>
        <param name="equalsKeyword">
 The "Equals" keyword.
 </param>
        <param name="right">
 The right expression in the Join condition.
 </param>
        <summary>
 Represents the "expression Equals expression" condition in a Join.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeywordEventContainer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.KeywordEventContainerSyntax KeywordEventContainer (Microsoft.CodeAnalysis.SyntaxToken keyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.KeywordEventContainerSyntax KeywordEventContainer(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.KeywordEventContainer(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function KeywordEventContainer (keyword As SyntaxToken) As KeywordEventContainerSyntax" />
      <MemberSignature Language="F#" Value="static member KeywordEventContainer : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.KeywordEventContainerSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.KeywordEventContainer keyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::KeywordEventContainerSyntax ^ KeywordEventContainer(Microsoft::CodeAnalysis::SyntaxToken keyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.KeywordEventContainerSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">
 The container of the event. This can be one of the special keywords: "Me",
 "MyBase" or "MyClass".
 </param>
        <summary>
 Represents event container specified through special keywords "Me", "MyBase" or
 "MyClass"..
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax Label (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken labelToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax Label(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken labelToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Label(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (kind As SyntaxKind, labelToken As SyntaxToken) As LabelSyntax" />
      <MemberSignature Language="F#" Value="static member Label : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Label (kind, labelToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ Label(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken labelToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="labelToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of LabelSyntax. One of
 IdentifierLabel, NumericLabel, NextLabel.
 </param>
        <param name="labelToken">
 The label name (identifier), line number (integer literal), or next keyword
 token.
 </param>
        <summary>
 A label for a GoTo, Resume, or On Error statement. An identifier, line number,
 or next keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax Label (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, string labelToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax Label(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, string labelToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Label(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (kind As SyntaxKind, labelToken As String) As LabelSyntax" />
      <MemberSignature Language="F#" Value="static member Label : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Label (kind, labelToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ Label(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, System::String ^ labelToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="labelToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of LabelSyntax. One of
 IdentifierLabel, NumericLabel, NextLabel.
 </param>
        <param name="labelToken">
 The label name (identifier), line number (integer literal), or next keyword
 token.
 </param>
        <summary>
 A label for a GoTo, Resume, or On Error statement. An identifier, line number,
 or next keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LabelStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax LabelStatement (Microsoft.CodeAnalysis.SyntaxToken labelToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax LabelStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken labelToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LabelStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LabelStatement (labelToken As SyntaxToken) As LabelStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LabelStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LabelStatement labelToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelStatementSyntax ^ LabelStatement(Microsoft::CodeAnalysis::SyntaxToken labelToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="labelToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="labelToken">
 The name of the label. If the label is a line number, returns an IntegerLiteral
 that is the line number, otherwise, returns an Identifier.
 </param>
        <summary>
 Represents a label statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LabelStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax LabelStatement (string labelToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax LabelStatement(string labelToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LabelStatement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LabelStatement (labelToken As String) As LabelStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LabelStatement : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LabelStatement labelToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelStatementSyntax ^ LabelStatement(System::String ^ labelToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="labelToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="labelToken">
 The name of the label. If the label is a line number, returns an IntegerLiteral
 that is the line number, otherwise, returns an Identifier.
 </param>
        <summary>
 Represents a label statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LabelStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax LabelStatement (Microsoft.CodeAnalysis.SyntaxToken labelToken, Microsoft.CodeAnalysis.SyntaxToken colonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax LabelStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken labelToken, valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LabelStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LabelStatement (labelToken As SyntaxToken, colonToken As SyntaxToken) As LabelStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LabelStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LabelStatement (labelToken, colonToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelStatementSyntax ^ LabelStatement(Microsoft::CodeAnalysis::SyntaxToken labelToken, Microsoft::CodeAnalysis::SyntaxToken colonToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="labelToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="labelToken">
 The name of the label. If the label is a line number, returns an IntegerLiteral
 that is the line number, otherwise, returns an Identifier.
 </param>
        <param name="colonToken">
 The ":" token of the label statement.
 </param>
        <summary>
 Represents a label statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LambdaHeader">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax LambdaHeader (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax LambdaHeader(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LambdaHeader(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LambdaHeader (kind As SyntaxKind, subOrFunctionKeyword As SyntaxToken) As LambdaHeaderSyntax" />
      <MemberSignature Language="F#" Value="static member LambdaHeader : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LambdaHeader (kind, subOrFunctionKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ LambdaHeader(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of LambdaHeaderSyntax.
 One of SubLambdaHeader, FunctionLambdaHeader.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword that introduces this lambda expression.
 </param>
        <summary>
 Represents the header part of a lambda expression
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LambdaHeader">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax LambdaHeader (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax LambdaHeader(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LambdaHeader(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LambdaHeader (kind As SyntaxKind, attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, subOrFunctionKeyword As SyntaxToken, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As LambdaHeaderSyntax" />
      <MemberSignature Language="F#" Value="static member LambdaHeader : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LambdaHeader (kind, attributeLists, modifiers, subOrFunctionKeyword, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ LambdaHeader(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of LambdaHeaderSyntax.
 One of SubLambdaHeader, FunctionLambdaHeader.
 </param>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword that introduces this lambda expression.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 Represents the header part of a lambda expression
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax LeftShiftAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax LeftShiftAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LeftShiftAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssignmentStatement (left As ExpressionSyntax, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LeftShiftAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LeftShiftAssignmentStatement (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ LeftShiftAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax LeftShiftAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax LeftShiftAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LeftShiftAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssignmentStatement (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LeftShiftAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LeftShiftAssignmentStatement (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ LeftShiftAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="operatorToken">
 The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
 "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LeftShiftExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LeftShiftExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LeftShiftExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member LeftShiftExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LeftShiftExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ LeftShiftExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LeftShiftExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LeftShiftExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LeftShiftExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member LeftShiftExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LeftShiftExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ LeftShiftExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LessThanExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LessThanExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LessThanExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member LessThanExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LessThanExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ LessThanExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LessThanExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LessThanExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LessThanExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member LessThanExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LessThanExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ LessThanExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqualExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LessThanOrEqualExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LessThanOrEqualExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LessThanOrEqualExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqualExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqualExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LessThanOrEqualExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ LessThanOrEqualExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqualExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LessThanOrEqualExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LessThanOrEqualExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LessThanOrEqualExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqualExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqualExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LessThanOrEqualExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ LessThanOrEqualExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LetClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax LetClause (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax LetClause(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LetClause (variables As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)) As LetClauseSyntax" />
      <MemberSignature Language="F#" Value="static member LetClause : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LetClause variables" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LetClauseSyntax ^ LetClause(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^&gt; variables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">
 The list of expression range variable being defined by the Let operator.
 </param>
        <summary>
 Represents a "Let" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LetClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax LetClause (params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[] variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax LetClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[] variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LetClause (ParamArray variables As ExpressionRangeVariableSyntax()) As LetClauseSyntax" />
      <MemberSignature Language="F#" Value="static member LetClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LetClause variables" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LetClauseSyntax ^ LetClause(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^&gt; ^ variables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables">
 The list of expression range variable being defined by the Let operator.
 </param>
        <summary>
 Represents a "Let" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LetClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax LetClause (Microsoft.CodeAnalysis.SyntaxToken letKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax LetClause(valuetype Microsoft.CodeAnalysis.SyntaxToken letKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LetClause (letKeyword As SyntaxToken, variables As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)) As LetClauseSyntax" />
      <MemberSignature Language="F#" Value="static member LetClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LetClause (letKeyword, variables)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LetClauseSyntax ^ LetClause(Microsoft::CodeAnalysis::SyntaxToken letKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^&gt; variables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="letKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="letKeyword">
 The "Let" keyword.
 </param>
        <param name="variables">
 The list of expression range variable being defined by the Let operator.
 </param>
        <summary>
 Represents a "Let" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LikeExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LikeExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LikeExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LikeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LikeExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member LikeExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LikeExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ LikeExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LikeExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LikeExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax LikeExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LikeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LikeExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member LikeExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LikeExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ LikeExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineContinuationTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia LineContinuationTrivia (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTrivia LineContinuationTrivia(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LineContinuationTrivia(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LineContinuationTrivia (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member LineContinuationTrivia : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LineContinuationTrivia text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTrivia LineContinuationTrivia(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
 The actual text of this token.
 </param>
        <summary>
 Trivia nodes represents parts of the program text that are not parts of the
 syntactic grammar, such as spaces, newlines, comments, preprocessors
 directives, and disabled code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineFeed">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia LineFeed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia LineFeed" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LineFeed" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LineFeed As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.LineFeed : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LineFeed" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::CodeAnalysis::SyntaxTrivia LineFeed { Microsoft::CodeAnalysis::SyntaxTrivia get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 A trivia with kind EndOfLineTrivia containing a single line feed character.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="List&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; List&lt;TNode&gt; () where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!!TNode&gt; List&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.List``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function List(Of TNode As SyntaxNode) () As SyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member List : unit -&gt; Microsoft.CodeAnalysis.SyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.List " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNode&gt;&#xA; where TNode : Microsoft::CodeAnalysis::SyntaxNode static Microsoft::CodeAnalysis::SyntaxList&lt;TNode&gt; List();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        <summary>
 Creates an empty list of syntax nodes.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="List&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; List&lt;TNode&gt; (System.Collections.Generic.IEnumerable&lt;TNode&gt; nodes) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!!TNode&gt; List&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TNode&gt; nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.List``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function List(Of TNode As SyntaxNode) (nodes As IEnumerable(Of TNode)) As SyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member List : seq&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; -&gt; Microsoft.CodeAnalysis.SyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.List nodes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNode&gt;&#xA; where TNode : Microsoft::CodeAnalysis::SyntaxNode static Microsoft::CodeAnalysis::SyntaxList&lt;TNode&gt; List(System::Collections::Generic::IEnumerable&lt;TNode&gt; ^ nodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        <param name="nodes">A sequence of element nodes.</param>
        <summary>
 Creates a list of syntax nodes.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (value As Char) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : char -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The character value to be represented by the returned token.</param>
        <summary> Creates a token with kind CharacterLiteralToken from a character value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (value As Decimal) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : decimal -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The decimal value to be represented by the returned token.</param>
        <summary> Creates a token with kind DecimalLiteralToken from a decimal value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (value As Double) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : double -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The 8-byte floating point value to be represented by the returned token.</param>
        <summary> Creates a token with kind FloatingLiteralToken from an 8-byte floating point value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (value As Integer) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : int -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 4-byte signed integer value to be represented by the returned token.</param>
        <summary> Creates a token with kind IntegerLiteralToken from a 4-byte signed integer value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (value As Long) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : int64 -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 8-byte signed integer value to be represented by the returned token.</param>
        <summary> Creates a token with kind IntegerLiteralToken from an 8-byte signed integer value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (value As Single) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : single -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The 4-byte floating point value to be represented by the returned token.</param>
        <summary> Creates a token with kind FloatingLiteralToken from a 4-byte floating point value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (value As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The string value to be represented by the returned token.</param>
        <summary> Creates a token with kind StringLiteralToken from a string value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (value As UInteger) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : uint32 -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 4-byte unsigned integer value to be represented by the returned token.</param>
        <summary> Creates a token with kind IntegerLiteralToken from a 4-byte unsigned integer
 value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (value As ULong) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : uint64 -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 8-byte unsigned integer value to be represented by the returned token.</param>
        <summary> Creates a token with kind IntegerLiteralToken from an 8-byte unsigned integer value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string text, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (text As String, value As Char) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string * char -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal (text, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ text, char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal, including quotes and escape sequences.</param>
        <param name="value">The character value to be represented by the returned token.</param>
        <summary> Creates a token with kind CharacterLiteralToken from the text and corresponding character value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string text, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (text As String, value As Decimal) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string * decimal -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal (text, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ text, System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The decimal value to be represented by the returned token.</param>
        <summary> Creates a token with kind DecimalLiteralToken from the text and corresponding decimal value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string text, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (text As String, value As Double) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string * double -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal (text, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ text, double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 8-byte floating point value to be represented by the returned token.</param>
        <summary> Creates a token with kind FloatingLiteralToken from the text and corresponding 8-byte floating point value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string text, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (text As String, value As Integer) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string * int -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal (text, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ text, int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 4-byte signed integer value to be represented by the returned token.</param>
        <summary> Creates a token with kind IntegerLiteralToken from the text and corresponding 4-byte signed integer value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string text, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (text As String, value As Long) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string * int64 -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal (text, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ text, long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 8-byte signed integer value to be represented by the returned token.</param>
        <summary> Creates a token with kind IntegerLiteralToken from the text and corresponding 8-byte signed integer value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string text, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (text As String, value As Single) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string * single -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal (text, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ text, float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 4-byte floating point value to be represented by the returned token.</param>
        <summary> Creates a token with kind FloatingLiteralToken from the text and corresponding 4-byte floating point value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string text, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (text As String, value As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string * string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal (text, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ text, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal, including quotes and escape sequences.</param>
        <param name="value">The string value to be represented by the returned token.</param>
        <summary> Creates a token with kind StringLiteralToken from the text and corresponding string value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string text, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (text As String, value As UInteger) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string * uint32 -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal (text, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ text, System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 4-byte unsigned integer value to be represented by the returned token.</param>
        <summary> Creates a token with kind IntegerLiteralToken from the text and corresponding 4-byte unsigned integer value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (string text, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(string text, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(System.String,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (text As String, value As ULong) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : string * uint64 -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal (text, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(System::String ^ text, System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 8-byte unsigned integer value to be represented by the returned token.</param>
        <summary> Creates a token with kind IntegerLiteralToken from the text and corresponding 8-byte unsigned integer value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, char value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, char value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Char,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As Char, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * char * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal (leading, text, value, trailing)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(Microsoft::CodeAnalysis::SyntaxTriviaList leading, System::String ^ text, char value, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal, including quotes and escape sequences.</param>
        <param name="value">The character value to be represented by the returned token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary> Creates a token with kind CharacterLiteralToken from the text and corresponding character value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, decimal value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, valuetype System.Decimal value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Decimal,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As Decimal, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * decimal * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal (leading, text, value, trailing)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(Microsoft::CodeAnalysis::SyntaxTriviaList leading, System::String ^ text, System::Decimal value, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The decimal value to be represented by the returned token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary> Creates a token with kind DecimalLiteralToken from the text and corresponding decimal value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, double value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, float64 value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Double,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As Double, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * double * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal (leading, text, value, trailing)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(Microsoft::CodeAnalysis::SyntaxTriviaList leading, System::String ^ text, double value, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 8-byte floating point value to be represented by the returned token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary> Creates a token with kind FloatingLiteralToken from the text and corresponding 8-byte floating point value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, int value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, int32 value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int32,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As Integer, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * int * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal (leading, text, value, trailing)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(Microsoft::CodeAnalysis::SyntaxTriviaList leading, System::String ^ text, int value, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 4-byte signed integer value to be represented by the returned token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary> Creates a token with kind IntegerLiteralToken from the text and corresponding 4-byte signed integer value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, long value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, int64 value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Int64,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As Long, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * int64 * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal (leading, text, value, trailing)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(Microsoft::CodeAnalysis::SyntaxTriviaList leading, System::String ^ text, long value, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 8-byte signed integer value to be represented by the returned token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary> Creates a token with kind IntegerLiteralToken from the text and corresponding 8-byte signed integer value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, float value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, float32 value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.Single,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As Single, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * single * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal (leading, text, value, trailing)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(Microsoft::CodeAnalysis::SyntaxTriviaList leading, System::String ^ text, float value, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 4-byte floating point value to be represented by the returned token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary> Creates a token with kind FloatingLiteralToken from the text and corresponding 4-byte floating point value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, string value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As String, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal (leading, text, value, trailing)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(Microsoft::CodeAnalysis::SyntaxTriviaList leading, System::String ^ text, System::String ^ value, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal, including quotes and escape sequences.</param>
        <param name="value">The string value to be represented by the returned token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary> Creates a token with kind StringLiteralToken from the text and corresponding string value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, uint value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, unsigned int32 value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt32,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As UInteger, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * uint32 * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal (leading, text, value, trailing)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(Microsoft::CodeAnalysis::SyntaxTriviaList leading, System::String ^ text, System::UInt32 value, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 4-byte unsigned integer value to be represented by the returned token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary> Creates a token with kind IntegerLiteralToken from the text and corresponding 4-byte unsigned integer value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Literal (Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, ulong value, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Literal(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, string text, unsigned int64 value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.UInt64,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Literal (leading As SyntaxTriviaList, text As String, value As ULong, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Literal : Microsoft.CodeAnalysis.SyntaxTriviaList * string * uint64 * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Literal (leading, text, value, trailing)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken Literal(Microsoft::CodeAnalysis::SyntaxTriviaList leading, System::String ^ text, System::UInt64 value, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The 8-byte unsigned integer value to be represented by the returned token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary> Creates a token with kind IntegerLiteralToken from the text and corresponding 8-byte unsigned integer value. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LiteralExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax LiteralExpression (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax LiteralExpression(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LiteralExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LiteralExpression (kind As SyntaxKind, token As SyntaxToken) As LiteralExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member LiteralExpression : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LiteralExpression (kind, token)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ LiteralExpression(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 LiteralExpressionSyntax. One of CharacterLiteralExpression,
 TrueLiteralExpression, FalseLiteralExpression, NumericLiteralExpression,
 DateLiteralExpression, StringLiteralExpression, NothingLiteralExpression.
 </param>
        <param name="token">
 The token that represents the literal. The Kind property determines what type
 this property returns: Kind=IntegerLiteral ==&gt; Returns IntegerLiteralToken.
 Kind=CharacterLiteral ==&gt; Returns CharacterLiteralToken. Kind=DecimalLiteral
 ==&gt; Returns DecimalLiteralToken Kind=FloatingLiteral ==&gt; Returns
 FloatingLiteralToken Kind=DateLiteral ==&gt; Returns DateLiteralToken
 Kind=StringLiteral ==&gt; Returns StringLiteralToken Kind=BooleanLiteral ==&gt;
 Returns Keyword (with it's kind being TrueKeyword or FalseKeyword)
 Kind=NothingLiteral ==&gt; Returns Keyword (with it's kind being
 NothingKeyword)
 </param>
        <summary>
 Represents a literal. The kind of literal is determined by the Kind property:
 IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
 FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
 determined by casting the associated Token to the correct type and getting the
 value from the token.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDeclarationStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax LocalDeclarationStatement (Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt; declarators);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax LocalDeclarationStatement(valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt; declarators) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LocalDeclarationStatement (modifiers As SyntaxTokenList, declarators As SeparatedSyntaxList(Of VariableDeclaratorSyntax)) As LocalDeclarationStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LocalDeclarationStatement : Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LocalDeclarationStatement (modifiers, declarators)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LocalDeclarationStatementSyntax ^ LocalDeclarationStatement(Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableDeclaratorSyntax ^&gt; declarators);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="declarators" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="modifiers">
 The modifier token (Static, Dim or Const) that introduces this local variable
 declaration.
 </param>
        <param name="declarators">
 The list of variable declarator. Each declarator specifies one or more variable
 names along with a type and/or initializer.
 </param>
        <summary>
 Represents the declaration of one or more local variables or constants.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoopStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoopStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoopStatement (kind As SyntaxKind) As LoopStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LoopStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoopStatement kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ LoopStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of LoopStatementSyntax.
 One of SimpleLoopStatement, LoopWhileStatement, LoopUntilStatement.
 </param>
        <summary>
 The Loop statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoopStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoopStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoopStatement (kind As SyntaxKind, whileOrUntilClause As WhileOrUntilClauseSyntax) As LoopStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LoopStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoopStatement (kind, whileOrUntilClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ LoopStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ whileOrUntilClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="whileOrUntilClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of LoopStatementSyntax.
 One of SimpleLoopStatement, LoopWhileStatement, LoopUntilStatement.
 </param>
        <param name="whileOrUntilClause">
 The "While expression" or "Until expression" clause of the Loop statement, if
 present.
 </param>
        <summary>
 The Loop statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoopStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken loopKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken loopKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoopStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoopStatement (kind As SyntaxKind, loopKeyword As SyntaxToken, whileOrUntilClause As WhileOrUntilClauseSyntax) As LoopStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LoopStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoopStatement (kind, loopKeyword, whileOrUntilClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ LoopStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken loopKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ whileOrUntilClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="loopKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="whileOrUntilClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of LoopStatementSyntax.
 One of SimpleLoopStatement, LoopWhileStatement, LoopUntilStatement.
 </param>
        <param name="loopKeyword">
 The "Loop" keyword.
 </param>
        <param name="whileOrUntilClause">
 The "While expression" or "Until expression" clause of the Loop statement, if
 present.
 </param>
        <summary>
 The Loop statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoopUntilStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopUntilStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopUntilStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoopUntilStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoopUntilStatement () As LoopStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LoopUntilStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoopUntilStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ LoopUntilStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 The Loop statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoopUntilStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopUntilStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopUntilStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoopUntilStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoopUntilStatement (whileOrUntilClause As WhileOrUntilClauseSyntax) As LoopStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LoopUntilStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoopUntilStatement whileOrUntilClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ LoopUntilStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ whileOrUntilClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whileOrUntilClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="whileOrUntilClause">
 The "While expression" or "Until expression" clause of the Loop statement, if
 present.
 </param>
        <summary>
 The Loop statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoopUntilStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopUntilStatement (Microsoft.CodeAnalysis.SyntaxToken loopKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopUntilStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken loopKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoopUntilStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoopUntilStatement (loopKeyword As SyntaxToken, whileOrUntilClause As WhileOrUntilClauseSyntax) As LoopStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LoopUntilStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoopUntilStatement (loopKeyword, whileOrUntilClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ LoopUntilStatement(Microsoft::CodeAnalysis::SyntaxToken loopKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ whileOrUntilClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loopKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="whileOrUntilClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="loopKeyword">
 The "Loop" keyword.
 </param>
        <param name="whileOrUntilClause">
 The "While expression" or "Until expression" clause of the Loop statement, if
 present.
 </param>
        <summary>
 The Loop statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoopWhileStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopWhileStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopWhileStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoopWhileStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoopWhileStatement () As LoopStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LoopWhileStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoopWhileStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ LoopWhileStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 The Loop statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoopWhileStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopWhileStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopWhileStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoopWhileStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoopWhileStatement (whileOrUntilClause As WhileOrUntilClauseSyntax) As LoopStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LoopWhileStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoopWhileStatement whileOrUntilClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ LoopWhileStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ whileOrUntilClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whileOrUntilClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="whileOrUntilClause">
 The "While expression" or "Until expression" clause of the Loop statement, if
 present.
 </param>
        <summary>
 The Loop statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoopWhileStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopWhileStatement (Microsoft.CodeAnalysis.SyntaxToken loopKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax LoopWhileStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken loopKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoopWhileStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoopWhileStatement (loopKeyword As SyntaxToken, whileOrUntilClause As WhileOrUntilClauseSyntax) As LoopStatementSyntax" />
      <MemberSignature Language="F#" Value="static member LoopWhileStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.LoopWhileStatement (loopKeyword, whileOrUntilClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ LoopWhileStatement(Microsoft::CodeAnalysis::SyntaxToken loopKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ whileOrUntilClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loopKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="whileOrUntilClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="loopKeyword">
 The "Loop" keyword.
 </param>
        <param name="whileOrUntilClause">
 The "While expression" or "Until expression" clause of the Loop statement, if
 present.
 </param>
        <summary>
 The Loop statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax MeExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax MeExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MeExpression" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MeExpression () As MeExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MeExpression : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MeExpression " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MeExpressionSyntax ^ MeExpression();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Identifies the special instance "Me"
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax MeExpression (Microsoft.CodeAnalysis.SyntaxToken keyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax MeExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MeExpression(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MeExpression (keyword As SyntaxToken) As MeExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MeExpression : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MeExpression keyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MeExpressionSyntax ^ MeExpression(Microsoft::CodeAnalysis::SyntaxToken keyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">
 The "Me", "MyClass" or "MyBase" keyword.
 </param>
        <summary>
 Identifies the special instance "Me"
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax MemberAccessExpression (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax MemberAccessExpression(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberAccessExpression (kind As SyntaxKind, operatorToken As SyntaxToken, name As SimpleNameSyntax) As MemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MemberAccessExpression : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MemberAccessExpression (kind, operatorToken, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MemberAccessExpressionSyntax ^ MemberAccessExpression(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleNameSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 MemberAccessExpressionSyntax. One of SimpleMemberAccessExpression,
 DictionaryAccessExpression.
 </param>
        <param name="operatorToken">
 The "." or "!" token.
 </param>
        <param name="name">
 The identifier after the "." or "!" token.
 </param>
        <summary>
 Represents member access (.name) or dictionary access (!name). The Kind
 property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax MemberAccessExpression (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax MemberAccessExpression(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberAccessExpression (kind As SyntaxKind, expression As ExpressionSyntax, operatorToken As SyntaxToken, name As SimpleNameSyntax) As MemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MemberAccessExpression : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MemberAccessExpression (kind, expression, operatorToken, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MemberAccessExpressionSyntax ^ MemberAccessExpression(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleNameSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 MemberAccessExpressionSyntax. One of SimpleMemberAccessExpression,
 DictionaryAccessExpression.
 </param>
        <param name="expression">
 The expression on the left-hand-side of the "." or "!" token.
 </param>
        <param name="operatorToken">
 The "." or "!" token.
 </param>
        <param name="name">
 The identifier after the "." or "!" token.
 </param>
        <summary>
 Represents member access (.name) or dictionary access (!name). The Kind
 property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax MethodBlock (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax MethodBlock(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MethodBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MethodBlock (kind As SyntaxKind, subOrFunctionStatement As MethodStatementSyntax, endSubOrFunctionStatement As EndBlockStatementSyntax) As MethodBlockSyntax" />
      <MemberSignature Language="F#" Value="static member MethodBlock : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MethodBlock (kind, subOrFunctionStatement, endSubOrFunctionStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodBlockSyntax ^ MethodBlock(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ subOrFunctionStatement, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endSubOrFunctionStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="subOrFunctionStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" />
        <Parameter Name="endSubOrFunctionStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of MethodBlockSyntax.
 One of SubBlock, FunctionBlock.
 </param>
        <param name="subOrFunctionStatement">
 The "Sub" or "Function" statement that begins the block.
 </param>
        <param name="endSubOrFunctionStatement">
 The "End Sub" or "End Function" statement that ends the block.
 </param>
        <summary>
 Represents a Function or Sub block declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax MethodBlock (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax MethodBlock(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MethodBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MethodBlock (kind As SyntaxKind, subOrFunctionStatement As MethodStatementSyntax, statements As SyntaxList(Of StatementSyntax), endSubOrFunctionStatement As EndBlockStatementSyntax) As MethodBlockSyntax" />
      <MemberSignature Language="F#" Value="static member MethodBlock : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MethodBlock (kind, subOrFunctionStatement, statements, endSubOrFunctionStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodBlockSyntax ^ MethodBlock(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ subOrFunctionStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endSubOrFunctionStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="subOrFunctionStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endSubOrFunctionStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of MethodBlockSyntax.
 One of SubBlock, FunctionBlock.
 </param>
        <param name="subOrFunctionStatement">
 The "Sub" or "Function" statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <param name="endSubOrFunctionStatement">
 The "End Sub" or "End Function" statement that ends the block.
 </param>
        <summary>
 Represents a Function or Sub block declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax MethodStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax MethodStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MethodStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MethodStatement (kind As SyntaxKind, subOrFunctionKeyword As SyntaxToken, identifier As SyntaxToken) As MethodStatementSyntax" />
      <MemberSignature Language="F#" Value="static member MethodStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MethodStatement (kind, subOrFunctionKeyword, identifier)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ MethodStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 MethodStatementSyntax. One of SubStatement, FunctionStatement.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword that introduces this method declaration.
 </param>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <summary>
 The statement that declares a Sub or Function. If this method has a body, this
 statement will be the Begin of a BlockStatement with
 Kind=MethodDeclarationBlock, and the body of the method will be the Body of
 that BlockStatement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax MethodStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax MethodStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MethodStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MethodStatement (kind As SyntaxKind, subOrFunctionKeyword As SyntaxToken, identifier As String) As MethodStatementSyntax" />
      <MemberSignature Language="F#" Value="static member MethodStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MethodStatement (kind, subOrFunctionKeyword, identifier)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ MethodStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 MethodStatementSyntax. One of SubStatement, FunctionStatement.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword that introduces this method declaration.
 </param>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <summary>
 The statement that declares a Sub or Function. If this method has a body, this
 statement will be the Begin of a BlockStatement with
 Kind=MethodDeclarationBlock, and the body of the method will be the Body of
 that BlockStatement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax MethodStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax handlesClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax MethodStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax handlesClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MethodStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MethodStatement (kind As SyntaxKind, attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, subOrFunctionKeyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax, handlesClause As HandlesClauseSyntax, implementsClause As ImplementsClauseSyntax) As MethodStatementSyntax" />
      <MemberSignature Language="F#" Value="static member MethodStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MethodStatement (kind, attributeLists, modifiers, subOrFunctionKeyword, identifier, typeParameterList, parameterList, asClause, handlesClause, implementsClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ MethodStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseSyntax ^ handlesClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsClauseSyntax ^ implementsClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
        <Parameter Name="handlesClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax" />
        <Parameter Name="implementsClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 MethodStatementSyntax. One of SubStatement, FunctionStatement.
 </param>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword that introduces this method declaration.
 </param>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic type parameters for this method.
 If no generic type parameters were present, Nothing is returned.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <param name="handlesClause">
 If present, a Handles clause indicated the events that this method handles.
 </param>
        <param name="implementsClause">
 If present, an Implements clause indicated the interface methods that this
 method implements.
 </param>
        <summary>
 The statement that declares a Sub or Function. If this method has a body, this
 statement will be the Begin of a BlockStatement with
 Kind=MethodDeclarationBlock, and the body of the method will be the Body of
 that BlockStatement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MidAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax MidAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax MidAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MidAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MidAssignmentStatement (left As ExpressionSyntax, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member MidAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MidAssignmentStatement (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ MidAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MidAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax MidAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax MidAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MidAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MidAssignmentStatement (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member MidAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MidAssignmentStatement (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ MidAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="operatorToken">
 The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
 "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MidExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax MidExpression (Microsoft.CodeAnalysis.SyntaxToken mid, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax MidExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken mid, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MidExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MidExpression (mid As SyntaxToken, argumentList As ArgumentListSyntax) As MidExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MidExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MidExpression (mid, argumentList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MidExpressionSyntax ^ MidExpression(Microsoft::CodeAnalysis::SyntaxToken mid, Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ argumentList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mid" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="mid">
 The "Mid" possibly followed by a type character.
 </param>
        <param name="argumentList">
 The argument list.
 </param>
        <summary>
 Represents a left-hand side of a MidAssignment statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MidExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax MidExpression (string mid, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax MidExpression(string mid, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MidExpression(System.String,Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MidExpression (mid As String, argumentList As ArgumentListSyntax) As MidExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MidExpression : string * Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MidExpression (mid, argumentList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MidExpressionSyntax ^ MidExpression(System::String ^ mid, Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ argumentList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mid" Type="System.String" />
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="mid">
 The "Mid" possibly followed by a type character.
 </param>
        <param name="argumentList">
 The argument list.
 </param>
        <summary>
 Represents a left-hand side of a MidAssignment statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifiedIdentifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax ModifiedIdentifier (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax ModifiedIdentifier(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModifiedIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModifiedIdentifier (identifier As SyntaxToken) As ModifiedIdentifierSyntax" />
      <MemberSignature Language="F#" Value="static member ModifiedIdentifier : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModifiedIdentifier identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ModifiedIdentifierSyntax ^ ModifiedIdentifier(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The identifier that names the item being declared.
 </param>
        <summary>
 Represents an identifier with optional "?" or "()" or "(,,,)" modifiers, as
 used in parameter declarations and variable declarations.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifiedIdentifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax ModifiedIdentifier (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax ModifiedIdentifier(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModifiedIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModifiedIdentifier (identifier As String) As ModifiedIdentifierSyntax" />
      <MemberSignature Language="F#" Value="static member ModifiedIdentifier : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModifiedIdentifier identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ModifiedIdentifierSyntax ^ ModifiedIdentifier(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The identifier that names the item being declared.
 </param>
        <summary>
 Represents an identifier with optional "?" or "()" or "(,,,)" modifiers, as
 used in parameter declarations and variable declarations.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifiedIdentifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax ModifiedIdentifier (Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax ModifiedIdentifier(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModifiedIdentifier(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModifiedIdentifier (identifier As SyntaxToken, arrayBounds As ArgumentListSyntax) As ModifiedIdentifierSyntax" />
      <MemberSignature Language="F#" Value="static member ModifiedIdentifier : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModifiedIdentifier (identifier, arrayBounds)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ModifiedIdentifierSyntax ^ ModifiedIdentifier(Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ arrayBounds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="arrayBounds" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The identifier that names the item being declared.
 </param>
        <param name="arrayBounds">
 The optional array bounds, such as "(4)" or "(0 to 5, 0 To 6)".
 </param>
        <summary>
 Represents an identifier with optional "?" or "()" or "(,,,)" modifiers, as
 used in parameter declarations and variable declarations.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifiedIdentifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax ModifiedIdentifier (Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.SyntaxToken nullable, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax&gt; arrayRankSpecifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax ModifiedIdentifier(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, valuetype Microsoft.CodeAnalysis.SyntaxToken nullable, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax&gt; arrayRankSpecifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModifiedIdentifier(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModifiedIdentifier (identifier As SyntaxToken, nullable As SyntaxToken, arrayBounds As ArgumentListSyntax, arrayRankSpecifiers As SyntaxList(Of ArrayRankSpecifierSyntax)) As ModifiedIdentifierSyntax" />
      <MemberSignature Language="F#" Value="static member ModifiedIdentifier : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModifiedIdentifier (identifier, nullable, arrayBounds, arrayRankSpecifiers)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ModifiedIdentifierSyntax ^ ModifiedIdentifier(Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::SyntaxToken nullable, Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ arrayBounds, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayRankSpecifierSyntax ^&gt; arrayRankSpecifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="nullable" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="arrayBounds" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" />
        <Parameter Name="arrayRankSpecifiers" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The identifier that names the item being declared.
 </param>
        <param name="nullable">
 The "?" token that indicates a nullable type.
 </param>
        <param name="arrayBounds">
 The optional array bounds, such as "(4)" or "(0 to 5, 0 To 6)".
 </param>
        <param name="arrayRankSpecifiers">
 A list of array modifiers for the type. If no array modifiers were present, an
 empty list is returned.
 </param>
        <summary>
 Represents an identifier with optional "?" or "()" or "(,,,)" modifiers, as
 used in parameter declarations and variable declarations.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax ModuleBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax moduleStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax ModuleBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax moduleStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModuleBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuleBlock (moduleStatement As ModuleStatementSyntax) As ModuleBlockSyntax" />
      <MemberSignature Language="F#" Value="static member ModuleBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModuleBlock moduleStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleBlockSyntax ^ ModuleBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleStatementSyntax ^ moduleStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="moduleStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="moduleStatement">
 The "Module" statement that begins the block.
 </param>
        <summary>
 Represents a declaration of Module, its contents and the End statement that
 ends it.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax ModuleBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax moduleStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax ModuleBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax moduleStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModuleBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuleBlock (moduleStatement As ModuleStatementSyntax, inherits As SyntaxList(Of InheritsStatementSyntax), implements As SyntaxList(Of ImplementsStatementSyntax), members As SyntaxList(Of StatementSyntax)) As ModuleBlockSyntax" />
      <MemberSignature Language="F#" Value="static member ModuleBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModuleBlock (moduleStatement, inherits, implements, members)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleBlockSyntax ^ ModuleBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleStatementSyntax ^ moduleStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^&gt; inherits, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^&gt; implements, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="moduleStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax" />
        <Parameter Name="inherits" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt;" />
        <Parameter Name="implements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="moduleStatement">
 The "Module" statement that begins the block.
 </param>
        <param name="inherits">
 A list of the Inherits declarations for the type.
 </param>
        <param name="implements">
 A list of the Implements declarations for the type.
 </param>
        <param name="members">
 The declarations contained in the type or module.
 </param>
        <summary>
 Represents a declaration of Module, its contents and the End statement that
 ends it.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax ModuleBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax moduleStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endModuleStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax ModuleBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax moduleStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endModuleStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModuleBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuleBlock (moduleStatement As ModuleStatementSyntax, inherits As SyntaxList(Of InheritsStatementSyntax), implements As SyntaxList(Of ImplementsStatementSyntax), members As SyntaxList(Of StatementSyntax), endModuleStatement As EndBlockStatementSyntax) As ModuleBlockSyntax" />
      <MemberSignature Language="F#" Value="static member ModuleBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModuleBlock (moduleStatement, inherits, implements, members, endModuleStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleBlockSyntax ^ ModuleBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleStatementSyntax ^ moduleStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^&gt; inherits, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^&gt; implements, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; members, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endModuleStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="moduleStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax" />
        <Parameter Name="inherits" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt;" />
        <Parameter Name="implements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endModuleStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="moduleStatement">
 The "Module" statement that begins the block.
 </param>
        <param name="inherits">
 A list of the Inherits declarations for the type.
 </param>
        <param name="implements">
 A list of the Implements declarations for the type.
 </param>
        <param name="members">
 The declarations contained in the type or module.
 </param>
        <param name="endModuleStatement">
 The "End Module" statement that ends the block.
 </param>
        <summary>
 Represents a declaration of Module, its contents and the End statement that
 ends it.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax ModuleStatement (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax ModuleStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModuleStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuleStatement (identifier As SyntaxToken) As ModuleStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ModuleStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModuleStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleStatementSyntax ^ ModuleStatement(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the type being declared.
 </param>
        <summary>
 Represents the beginning statement of a Module declaration. This node always
 appears as the Begin of a TypeBlock with Kind=ModuleDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax ModuleStatement (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax ModuleStatement(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModuleStatement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuleStatement (identifier As String) As ModuleStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ModuleStatement : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModuleStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleStatementSyntax ^ ModuleStatement(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the type being declared.
 </param>
        <summary>
 Represents the beginning statement of a Module declaration. This node always
 appears as the Begin of a TypeBlock with Kind=ModuleDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax ModuleStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax ModuleStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModuleStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuleStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As ModuleStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ModuleStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModuleStatement (attributeLists, modifiers, identifier, typeParameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleStatementSyntax ^ ModuleStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, an empty list is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned.
 </param>
        <param name="identifier">
 The name of the type being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic parameters for this type. If no
 generic parameters were present, Nothing is returned.
 </param>
        <summary>
 Represents the beginning statement of a Module declaration. This node always
 appears as the Begin of a TypeBlock with Kind=ModuleDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax ModuleStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken moduleKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax ModuleStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken moduleKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModuleStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuleStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, moduleKeyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As ModuleStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ModuleStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModuleStatement (attributeLists, modifiers, moduleKeyword, identifier, typeParameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleStatementSyntax ^ ModuleStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken moduleKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="moduleKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, an empty list is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned.
 </param>
        <param name="moduleKeyword">
 The "Module" keyword.
 </param>
        <param name="identifier">
 The name of the type being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic parameters for this type. If no
 generic parameters were present, Nothing is returned.
 </param>
        <summary>
 Represents the beginning statement of a Module declaration. This node always
 appears as the Begin of a TypeBlock with Kind=ModuleDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ModuloExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ModuloExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModuloExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ModuloExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModuloExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ ModuloExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ModuloExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax ModuloExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModuloExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ModuloExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ModuloExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ ModuloExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiLineFunctionLambdaExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax MultiLineFunctionLambdaExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax MultiLineFunctionLambdaExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiLineFunctionLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiLineFunctionLambdaExpression (subOrFunctionHeader As LambdaHeaderSyntax, endSubOrFunctionStatement As EndBlockStatementSyntax) As MultiLineLambdaExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MultiLineFunctionLambdaExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiLineFunctionLambdaExpression (subOrFunctionHeader, endSubOrFunctionStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MultiLineLambdaExpressionSyntax ^ MultiLineFunctionLambdaExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ subOrFunctionHeader, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endSubOrFunctionStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subOrFunctionHeader" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax" />
        <Parameter Name="endSubOrFunctionStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="subOrFunctionHeader">
 The header part of the lambda that includes the "Sub" or "Function" keyword,
 the argument list and return type.
 </param>
        <param name="endSubOrFunctionStatement">
 Returns the "End Sub" or "End Function" statement if this is a multi-line
 lambda.
 </param>
        <summary>
 Represents a multi-line lambda expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiLineFunctionLambdaExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax MultiLineFunctionLambdaExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax MultiLineFunctionLambdaExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiLineFunctionLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiLineFunctionLambdaExpression (subOrFunctionHeader As LambdaHeaderSyntax, statements As SyntaxList(Of StatementSyntax), endSubOrFunctionStatement As EndBlockStatementSyntax) As MultiLineLambdaExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MultiLineFunctionLambdaExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiLineFunctionLambdaExpression (subOrFunctionHeader, statements, endSubOrFunctionStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MultiLineLambdaExpressionSyntax ^ MultiLineFunctionLambdaExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ subOrFunctionHeader, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endSubOrFunctionStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subOrFunctionHeader" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endSubOrFunctionStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="subOrFunctionHeader">
 The header part of the lambda that includes the "Sub" or "Function" keyword,
 the argument list and return type.
 </param>
        <param name="statements">
 The body of the lambda. Depending on the kind of lambda, this is either a
 StatementBody (multi-line lambda), Statement (single-line Sub lambda) or
 Expression (single-line Function). This might be an empty list.
 </param>
        <param name="endSubOrFunctionStatement">
 Returns the "End Sub" or "End Function" statement if this is a multi-line
 lambda.
 </param>
        <summary>
 Represents a multi-line lambda expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiLineIfBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax MultiLineIfBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax ifStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax MultiLineIfBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax ifStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiLineIfBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiLineIfBlock (ifStatement As IfStatementSyntax) As MultiLineIfBlockSyntax" />
      <MemberSignature Language="F#" Value="static member MultiLineIfBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiLineIfBlock ifStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MultiLineIfBlockSyntax ^ MultiLineIfBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::IfStatementSyntax ^ ifStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="ifStatement">
 The "If" statement that begins the "If" block.
 </param>
        <summary>
 Represents a multi-line "If ... Then ... ElseIf ... Then ... Else ... End If"
 block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiLineIfBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax MultiLineIfBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax ifStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax&gt; elseIfBlocks, Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax elseBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax MultiLineIfBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax ifStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax&gt; elseIfBlocks, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax elseBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiLineIfBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiLineIfBlock (ifStatement As IfStatementSyntax, statements As SyntaxList(Of StatementSyntax), elseIfBlocks As SyntaxList(Of ElseIfBlockSyntax), elseBlock As ElseBlockSyntax) As MultiLineIfBlockSyntax" />
      <MemberSignature Language="F#" Value="static member MultiLineIfBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiLineIfBlock (ifStatement, statements, elseIfBlocks, elseBlock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MultiLineIfBlockSyntax ^ MultiLineIfBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::IfStatementSyntax ^ ifStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseIfBlockSyntax ^&gt; elseIfBlocks, Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseBlockSyntax ^ elseBlock);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="elseIfBlocks" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax&gt;" />
        <Parameter Name="elseBlock" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="ifStatement">
 The "If" statement that begins the "If" block.
 </param>
        <param name="statements">
 A list of statements to be executed if the condition expression evaluates as
 true.
 </param>
        <param name="elseIfBlocks">
 A list of "ElseIf" blocks to be evaluated, in order, if the condition
 expression of the "If" statement evaluates as false.
 </param>
        <param name="elseBlock">
 An "Else" block to be executed if the condition expression of the "If"
 statement and all "ElseIf" blocks evaluate as false.
 </param>
        <summary>
 Represents a multi-line "If ... Then ... ElseIf ... Then ... Else ... End If"
 block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiLineIfBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax MultiLineIfBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax ifStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax&gt; elseIfBlocks, Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax elseBlock, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endIfStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax MultiLineIfBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax ifStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax&gt; elseIfBlocks, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax elseBlock, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endIfStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiLineIfBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiLineIfBlock (ifStatement As IfStatementSyntax, statements As SyntaxList(Of StatementSyntax), elseIfBlocks As SyntaxList(Of ElseIfBlockSyntax), elseBlock As ElseBlockSyntax, endIfStatement As EndBlockStatementSyntax) As MultiLineIfBlockSyntax" />
      <MemberSignature Language="F#" Value="static member MultiLineIfBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiLineIfBlock (ifStatement, statements, elseIfBlocks, elseBlock, endIfStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MultiLineIfBlockSyntax ^ MultiLineIfBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::IfStatementSyntax ^ ifStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseIfBlockSyntax ^&gt; elseIfBlocks, Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseBlockSyntax ^ elseBlock, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endIfStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="elseIfBlocks" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax&gt;" />
        <Parameter Name="elseBlock" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax" />
        <Parameter Name="endIfStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="ifStatement">
 The "If" statement that begins the "If" block.
 </param>
        <param name="statements">
 A list of statements to be executed if the condition expression evaluates as
 true.
 </param>
        <param name="elseIfBlocks">
 A list of "ElseIf" blocks to be evaluated, in order, if the condition
 expression of the "If" statement evaluates as false.
 </param>
        <param name="elseBlock">
 An "Else" block to be executed if the condition expression of the "If"
 statement and all "ElseIf" blocks evaluate as false.
 </param>
        <param name="endIfStatement">
 Then "End If" statement.
 </param>
        <summary>
 Represents a multi-line "If ... Then ... ElseIf ... Then ... Else ... End If"
 block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiLineLambdaExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax MultiLineLambdaExpression (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax MultiLineLambdaExpression(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiLineLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiLineLambdaExpression (kind As SyntaxKind, subOrFunctionHeader As LambdaHeaderSyntax, endSubOrFunctionStatement As EndBlockStatementSyntax) As MultiLineLambdaExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MultiLineLambdaExpression : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiLineLambdaExpression (kind, subOrFunctionHeader, endSubOrFunctionStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MultiLineLambdaExpressionSyntax ^ MultiLineLambdaExpression(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ subOrFunctionHeader, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endSubOrFunctionStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="subOrFunctionHeader" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax" />
        <Parameter Name="endSubOrFunctionStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 MultiLineLambdaExpressionSyntax. One of MultiLineFunctionLambdaExpression,
 MultiLineSubLambdaExpression.
 </param>
        <param name="subOrFunctionHeader">
 The header part of the lambda that includes the "Sub" or "Function" keyword,
 the argument list and return type.
 </param>
        <param name="endSubOrFunctionStatement">
 Returns the "End Sub" or "End Function" statement if this is a multi-line
 lambda.
 </param>
        <summary>
 Represents a multi-line lambda expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiLineLambdaExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax MultiLineLambdaExpression (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax MultiLineLambdaExpression(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiLineLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiLineLambdaExpression (kind As SyntaxKind, subOrFunctionHeader As LambdaHeaderSyntax, statements As SyntaxList(Of StatementSyntax), endSubOrFunctionStatement As EndBlockStatementSyntax) As MultiLineLambdaExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MultiLineLambdaExpression : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiLineLambdaExpression (kind, subOrFunctionHeader, statements, endSubOrFunctionStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MultiLineLambdaExpressionSyntax ^ MultiLineLambdaExpression(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ subOrFunctionHeader, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endSubOrFunctionStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="subOrFunctionHeader" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endSubOrFunctionStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 MultiLineLambdaExpressionSyntax. One of MultiLineFunctionLambdaExpression,
 MultiLineSubLambdaExpression.
 </param>
        <param name="subOrFunctionHeader">
 The header part of the lambda that includes the "Sub" or "Function" keyword,
 the argument list and return type.
 </param>
        <param name="statements">
 The body of the lambda. Depending on the kind of lambda, this is either a
 StatementBody (multi-line lambda), Statement (single-line Sub lambda) or
 Expression (single-line Function). This might be an empty list.
 </param>
        <param name="endSubOrFunctionStatement">
 Returns the "End Sub" or "End Function" statement if this is a multi-line
 lambda.
 </param>
        <summary>
 Represents a multi-line lambda expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiLineSubLambdaExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax MultiLineSubLambdaExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax MultiLineSubLambdaExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiLineSubLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiLineSubLambdaExpression (subOrFunctionHeader As LambdaHeaderSyntax, endSubOrFunctionStatement As EndBlockStatementSyntax) As MultiLineLambdaExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MultiLineSubLambdaExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiLineSubLambdaExpression (subOrFunctionHeader, endSubOrFunctionStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MultiLineLambdaExpressionSyntax ^ MultiLineSubLambdaExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ subOrFunctionHeader, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endSubOrFunctionStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subOrFunctionHeader" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax" />
        <Parameter Name="endSubOrFunctionStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="subOrFunctionHeader">
 The header part of the lambda that includes the "Sub" or "Function" keyword,
 the argument list and return type.
 </param>
        <param name="endSubOrFunctionStatement">
 Returns the "End Sub" or "End Function" statement if this is a multi-line
 lambda.
 </param>
        <summary>
 Represents a multi-line lambda expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiLineSubLambdaExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax MultiLineSubLambdaExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax MultiLineSubLambdaExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiLineSubLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiLineSubLambdaExpression (subOrFunctionHeader As LambdaHeaderSyntax, statements As SyntaxList(Of StatementSyntax), endSubOrFunctionStatement As EndBlockStatementSyntax) As MultiLineLambdaExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MultiLineSubLambdaExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiLineSubLambdaExpression (subOrFunctionHeader, statements, endSubOrFunctionStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MultiLineLambdaExpressionSyntax ^ MultiLineSubLambdaExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ subOrFunctionHeader, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endSubOrFunctionStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subOrFunctionHeader" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endSubOrFunctionStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="subOrFunctionHeader">
 The header part of the lambda that includes the "Sub" or "Function" keyword,
 the argument list and return type.
 </param>
        <param name="statements">
 The body of the lambda. Depending on the kind of lambda, this is either a
 StatementBody (multi-line lambda), Statement (single-line Sub lambda) or
 Expression (single-line Function). This might be an empty list.
 </param>
        <param name="endSubOrFunctionStatement">
 Returns the "End Sub" or "End Function" statement if this is a multi-line
 lambda.
 </param>
        <summary>
 Represents a multi-line lambda expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax MultiplyAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax MultiplyAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiplyAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignmentStatement (left As ExpressionSyntax, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member MultiplyAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiplyAssignmentStatement (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ MultiplyAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax MultiplyAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax MultiplyAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiplyAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignmentStatement (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member MultiplyAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiplyAssignmentStatement (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ MultiplyAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="operatorToken">
 The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
 "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax MultiplyExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax MultiplyExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiplyExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MultiplyExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiplyExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ MultiplyExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax MultiplyExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax MultiplyExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiplyExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MultiplyExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MultiplyExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ MultiplyExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MyBaseExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax MyBaseExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax MyBaseExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MyBaseExpression" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MyBaseExpression () As MyBaseExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MyBaseExpression : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MyBaseExpression " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MyBaseExpressionSyntax ^ MyBaseExpression();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Identifies the special instance "MyBase"
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MyBaseExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax MyBaseExpression (Microsoft.CodeAnalysis.SyntaxToken keyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax MyBaseExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MyBaseExpression(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MyBaseExpression (keyword As SyntaxToken) As MyBaseExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MyBaseExpression : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MyBaseExpression keyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MyBaseExpressionSyntax ^ MyBaseExpression(Microsoft::CodeAnalysis::SyntaxToken keyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">
 The "Me", "MyClass" or "MyBase" keyword.
 </param>
        <summary>
 Identifies the special instance "MyBase"
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MyClassExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax MyClassExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax MyClassExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MyClassExpression" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MyClassExpression () As MyClassExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MyClassExpression : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MyClassExpression " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MyClassExpressionSyntax ^ MyClassExpression();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Identifies the special instance "MyClass"
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MyClassExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax MyClassExpression (Microsoft.CodeAnalysis.SyntaxToken keyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax MyClassExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MyClassExpression(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MyClassExpression (keyword As SyntaxToken) As MyClassExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member MyClassExpression : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.MyClassExpression keyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MyClassExpressionSyntax ^ MyClassExpression(Microsoft::CodeAnalysis::SyntaxToken keyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">
 The "Me", "MyClass" or "MyBase" keyword.
 </param>
        <summary>
 Identifies the special instance "MyClass"
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameColonEquals">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax NameColonEquals (Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax NameColonEquals(class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NameColonEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NameColonEquals (name As IdentifierNameSyntax) As NameColonEqualsSyntax" />
      <MemberSignature Language="F#" Value="static member NameColonEquals : Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NameColonEquals name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NameColonEqualsSyntax ^ NameColonEquals(Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">
 The name used to identify the named argument.
 </param>
        <summary>
 Represents an identifier name followed by a ":=" token in a named argument.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameColonEquals">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax NameColonEquals (Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken colonEqualsToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax NameColonEquals(class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken colonEqualsToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NameColonEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NameColonEquals (name As IdentifierNameSyntax, colonEqualsToken As SyntaxToken) As NameColonEqualsSyntax" />
      <MemberSignature Language="F#" Value="static member NameColonEquals : Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NameColonEquals (name, colonEqualsToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NameColonEqualsSyntax ^ NameColonEquals(Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ name, Microsoft::CodeAnalysis::SyntaxToken colonEqualsToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
        <Parameter Name="colonEqualsToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="name">
 The name used to identify the named argument.
 </param>
        <param name="colonEqualsToken">
 The ":=" token.
 </param>
        <summary>
 Represents an identifier name followed by a ":=" token in a named argument.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamedFieldInitializer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax NamedFieldInitializer (Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax NamedFieldInitializer(class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamedFieldInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NamedFieldInitializer (name As IdentifierNameSyntax, expression As ExpressionSyntax) As NamedFieldInitializerSyntax" />
      <MemberSignature Language="F#" Value="static member NamedFieldInitializer : Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamedFieldInitializer (name, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NamedFieldInitializerSyntax ^ NamedFieldInitializer(Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ name, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="name">
 The name of the field being initialized.
 </param>
        <param name="expression">
 The value being assigned to the field.
 </param>
        <summary>
 Represent a named field initializer in a With {...} initializer, such as ".x =
 expr".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamedFieldInitializer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax NamedFieldInitializer (Microsoft.CodeAnalysis.SyntaxToken keyKeyword, Microsoft.CodeAnalysis.SyntaxToken dotToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax NamedFieldInitializer(valuetype Microsoft.CodeAnalysis.SyntaxToken keyKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken dotToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken equalsToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamedFieldInitializer(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NamedFieldInitializer (keyKeyword As SyntaxToken, dotToken As SyntaxToken, name As IdentifierNameSyntax, equalsToken As SyntaxToken, expression As ExpressionSyntax) As NamedFieldInitializerSyntax" />
      <MemberSignature Language="F#" Value="static member NamedFieldInitializer : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamedFieldInitializer (keyKeyword, dotToken, name, equalsToken, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NamedFieldInitializerSyntax ^ NamedFieldInitializer(Microsoft::CodeAnalysis::SyntaxToken keyKeyword, Microsoft::CodeAnalysis::SyntaxToken dotToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ name, Microsoft::CodeAnalysis::SyntaxToken equalsToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="dotToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
        <Parameter Name="equalsToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="keyKeyword">
 The optional "Key" keyword.
 </param>
        <param name="dotToken">
 The "." token.
 </param>
        <param name="name">
 The name of the field being initialized.
 </param>
        <param name="equalsToken">
 The "=" token.
 </param>
        <param name="expression">
 The value being assigned to the field.
 </param>
        <summary>
 Represent a named field initializer in a With {...} initializer, such as ".x =
 expr".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamedTupleElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedTupleElementSyntax NamedTupleElement (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedTupleElementSyntax NamedTupleElement(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamedTupleElement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NamedTupleElement (identifier As SyntaxToken) As NamedTupleElementSyntax" />
      <MemberSignature Language="F#" Value="static member NamedTupleElement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedTupleElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamedTupleElement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NamedTupleElementSyntax ^ NamedTupleElement(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedTupleElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the element.
 </param>
        <summary>
 Represents a single declaration of a tuple element supplying element name and
 optionally a type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamedTupleElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedTupleElementSyntax NamedTupleElement (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedTupleElementSyntax NamedTupleElement(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamedTupleElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NamedTupleElement (identifier As String) As NamedTupleElementSyntax" />
      <MemberSignature Language="F#" Value="static member NamedTupleElement : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedTupleElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamedTupleElement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NamedTupleElementSyntax ^ NamedTupleElement(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedTupleElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the element.
 </param>
        <summary>
 Represents a single declaration of a tuple element supplying element name and
 optionally a type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamedTupleElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedTupleElementSyntax NamedTupleElement (Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedTupleElementSyntax NamedTupleElement(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamedTupleElement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NamedTupleElement (identifier As SyntaxToken, asClause As SimpleAsClauseSyntax) As NamedTupleElementSyntax" />
      <MemberSignature Language="F#" Value="static member NamedTupleElement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedTupleElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamedTupleElement (identifier, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NamedTupleElementSyntax ^ NamedTupleElement(Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedTupleElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the element.
 </param>
        <param name="asClause">
 A simple "As" clause specifying the type of the tuple element.
 </param>
        <summary>
 Represents a single declaration of a tuple element supplying element name and
 optionally a type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameOfExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax NameOfExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax NameOfExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NameOfExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NameOfExpression (argument As ExpressionSyntax) As NameOfExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member NameOfExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NameOfExpression argument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NameOfExpressionSyntax ^ NameOfExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="argument">
 The argument.
 </param>
        <summary>
 Represents a NameOf expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameOfExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax NameOfExpression (Microsoft.CodeAnalysis.SyntaxToken nameOfKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax argument, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax NameOfExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken nameOfKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax argument, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NameOfExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NameOfExpression (nameOfKeyword As SyntaxToken, openParenToken As SyntaxToken, argument As ExpressionSyntax, closeParenToken As SyntaxToken) As NameOfExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member NameOfExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NameOfExpression (nameOfKeyword, openParenToken, argument, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NameOfExpressionSyntax ^ NameOfExpression(Microsoft::CodeAnalysis::SyntaxToken nameOfKeyword, Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ argument, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nameOfKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="argument" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="nameOfKeyword">
 The "NameOf" keyword.
 </param>
        <param name="openParenToken">
 The "(" token.
 </param>
        <param name="argument">
 The argument.
 </param>
        <param name="closeParenToken">
 The ")" token.
 </param>
        <summary>
 Represents a NameOf expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax NamespaceBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax namespaceStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax NamespaceBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax namespaceStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamespaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NamespaceBlock (namespaceStatement As NamespaceStatementSyntax) As NamespaceBlockSyntax" />
      <MemberSignature Language="F#" Value="static member NamespaceBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamespaceBlock namespaceStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NamespaceBlockSyntax ^ NamespaceBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::NamespaceStatementSyntax ^ namespaceStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="namespaceStatement">
 The statement that begins the NamespaceBlock.
 </param>
        <summary>
 Represents a Namespace statement, its contents and the End Namespace statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax NamespaceBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax namespaceStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax NamespaceBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax namespaceStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamespaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NamespaceBlock (namespaceStatement As NamespaceStatementSyntax, members As SyntaxList(Of StatementSyntax)) As NamespaceBlockSyntax" />
      <MemberSignature Language="F#" Value="static member NamespaceBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamespaceBlock (namespaceStatement, members)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NamespaceBlockSyntax ^ NamespaceBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::NamespaceStatementSyntax ^ namespaceStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="namespaceStatement">
 The statement that begins the NamespaceBlock.
 </param>
        <param name="members">
 The declarations contained in the namespace statement.
 </param>
        <summary>
 Represents a Namespace statement, its contents and the End Namespace statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax NamespaceBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax namespaceStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endNamespaceStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax NamespaceBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax namespaceStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endNamespaceStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamespaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NamespaceBlock (namespaceStatement As NamespaceStatementSyntax, members As SyntaxList(Of StatementSyntax), endNamespaceStatement As EndBlockStatementSyntax) As NamespaceBlockSyntax" />
      <MemberSignature Language="F#" Value="static member NamespaceBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamespaceBlock (namespaceStatement, members, endNamespaceStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NamespaceBlockSyntax ^ NamespaceBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::NamespaceStatementSyntax ^ namespaceStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; members, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endNamespaceStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endNamespaceStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="namespaceStatement">
 The statement that begins the NamespaceBlock.
 </param>
        <param name="members">
 The declarations contained in the namespace statement.
 </param>
        <param name="endNamespaceStatement">
 The End Namespace statement that ends the block.
 </param>
        <summary>
 Represents a Namespace statement, its contents and the End Namespace statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax NamespaceStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax NamespaceStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamespaceStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NamespaceStatement (name As NameSyntax) As NamespaceStatementSyntax" />
      <MemberSignature Language="F#" Value="static member NamespaceStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamespaceStatement name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NamespaceStatementSyntax ^ NamespaceStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::NameSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">
 A (possibly dotted) name denoting the namespace being declared.
 </param>
        <summary>
 Represents the beginning statement of a namespace declaration. This node always
 appears as the Begin of a BlockStatement with Kind=NamespaceBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax NamespaceStatement (Microsoft.CodeAnalysis.SyntaxToken namespaceKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax NamespaceStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken namespaceKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamespaceStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NamespaceStatement (namespaceKeyword As SyntaxToken, name As NameSyntax) As NamespaceStatementSyntax" />
      <MemberSignature Language="F#" Value="static member NamespaceStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NamespaceStatement (namespaceKeyword, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NamespaceStatementSyntax ^ NamespaceStatement(Microsoft::CodeAnalysis::SyntaxToken namespaceKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::NameSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax" />
      </Parameters>
      <Docs>
        <param name="namespaceKeyword">
 The "Namespace" keyword.
 </param>
        <param name="name">
 A (possibly dotted) name denoting the namespace being declared.
 </param>
        <summary>
 Represents the beginning statement of a namespace declaration. This node always
 appears as the Begin of a BlockStatement with Kind=NamespaceBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax NewConstraint (Microsoft.CodeAnalysis.SyntaxToken constraintKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax NewConstraint(valuetype Microsoft.CodeAnalysis.SyntaxToken constraintKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NewConstraint(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NewConstraint (constraintKeyword As SyntaxToken) As SpecialConstraintSyntax" />
      <MemberSignature Language="F#" Value="static member NewConstraint : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NewConstraint constraintKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SpecialConstraintSyntax ^ NewConstraint(Microsoft::CodeAnalysis::SyntaxToken constraintKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constraintKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="constraintKeyword">
 The "New", "Class" or "Structure" keyword that denotes the kind of special
 constraint.
 </param>
        <summary>
 One of the special type parameter constraints: New, Class or Structure. Which
 kind of special constraint it is can be obtained from the Kind property and is
 one of: NewConstraint, ReferenceConstraint or ValueConstraint.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextLabel">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax NextLabel ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax NextLabel() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NextLabel" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NextLabel () As LabelSyntax" />
      <MemberSignature Language="F#" Value="static member NextLabel : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NextLabel " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ NextLabel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 A label for a GoTo, Resume, or On Error statement. An identifier, line number,
 or next keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextLabel">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax NextLabel (Microsoft.CodeAnalysis.SyntaxToken labelToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax NextLabel(valuetype Microsoft.CodeAnalysis.SyntaxToken labelToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NextLabel(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NextLabel (labelToken As SyntaxToken) As LabelSyntax" />
      <MemberSignature Language="F#" Value="static member NextLabel : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NextLabel labelToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ NextLabel(Microsoft::CodeAnalysis::SyntaxToken labelToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="labelToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="labelToken">
 The label name (identifier), line number (integer literal), or next keyword
 token.
 </param>
        <summary>
 A label for a GoTo, Resume, or On Error statement. An identifier, line number,
 or next keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax NextStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax NextStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NextStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NextStatement () As NextStatementSyntax" />
      <MemberSignature Language="F#" Value="static member NextStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NextStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax ^ NextStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 The Next statement that ends a For-Next or For Each-Next block. This statement
 always occurs as the End of a ForBlock (with Kind=ForBlock or ForEachBlock),
 and the body of the For-Next is the Body of that ForBlock. The Begin of that
 ForBlock has the corresponding For or For Each statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax NextStatement (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt; controlVariables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax NextStatement(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt; controlVariables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NextStatement(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NextStatement (controlVariables As SeparatedSyntaxList(Of ExpressionSyntax)) As NextStatementSyntax" />
      <MemberSignature Language="F#" Value="static member NextStatement : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NextStatement controlVariables" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax ^ NextStatement(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^&gt; controlVariables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlVariables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="controlVariables">
 The variables in the Next statement, if present
 </param>
        <summary>
 The Next statement that ends a For-Next or For Each-Next block. This statement
 always occurs as the End of a ForBlock (with Kind=ForBlock or ForEachBlock),
 and the body of the For-Next is the Body of that ForBlock. The Begin of that
 ForBlock has the corresponding For or For Each statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax NextStatement (Microsoft.CodeAnalysis.SyntaxToken nextKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt; controlVariables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax NextStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken nextKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt; controlVariables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NextStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NextStatement (nextKeyword As SyntaxToken, controlVariables As SeparatedSyntaxList(Of ExpressionSyntax)) As NextStatementSyntax" />
      <MemberSignature Language="F#" Value="static member NextStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NextStatement (nextKeyword, controlVariables)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax ^ NextStatement(Microsoft::CodeAnalysis::SyntaxToken nextKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^&gt; controlVariables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nextKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="controlVariables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="nextKeyword">
 The "Next" keyword.
 </param>
        <param name="controlVariables">
 The variables in the Next statement, if present
 </param>
        <summary>
 The Next statement that ends a For-Next or For Each-Next block. This statement
 always occurs as the End of a ForBlock (with Kind=ForBlock or ForEachBlock),
 and the body of the For-Next is the Body of that ForBlock. The Begin of that
 ForBlock has the corresponding For or For Each statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeOrTokenList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxNodeOrTokenList NodeOrTokenList ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxNodeOrTokenList NodeOrTokenList() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NodeOrTokenList" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NodeOrTokenList () As SyntaxNodeOrTokenList" />
      <MemberSignature Language="F#" Value="static member NodeOrTokenList : unit -&gt; Microsoft.CodeAnalysis.SyntaxNodeOrTokenList" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NodeOrTokenList " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxNodeOrTokenList NodeOrTokenList();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNodeOrTokenList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Creates an empty <see cref="T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList" />.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeOrTokenList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxNodeOrTokenList NodeOrTokenList (params Microsoft.CodeAnalysis.SyntaxNodeOrToken[] nodesAndTokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxNodeOrTokenList NodeOrTokenList(valuetype Microsoft.CodeAnalysis.SyntaxNodeOrToken[] nodesAndTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NodeOrTokenList(Microsoft.CodeAnalysis.SyntaxNodeOrToken[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NodeOrTokenList (ParamArray nodesAndTokens As SyntaxNodeOrToken()) As SyntaxNodeOrTokenList" />
      <MemberSignature Language="F#" Value="static member NodeOrTokenList : Microsoft.CodeAnalysis.SyntaxNodeOrToken[] -&gt; Microsoft.CodeAnalysis.SyntaxNodeOrTokenList" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NodeOrTokenList nodesAndTokens" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxNodeOrTokenList NodeOrTokenList(... cli::array &lt;Microsoft::CodeAnalysis::SyntaxNodeOrToken&gt; ^ nodesAndTokens);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNodeOrTokenList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodesAndTokens" Type="Microsoft.CodeAnalysis.SyntaxNodeOrToken[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="nodesAndTokens">An array of nodes and tokens.</param>
        <summary>
 Creates a <see cref="T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList" /> from one or more nodes and tokens.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeOrTokenList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxNodeOrTokenList NodeOrTokenList (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt; nodesAndTokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxNodeOrTokenList NodeOrTokenList(class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt; nodesAndTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NodeOrTokenList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NodeOrTokenList (nodesAndTokens As IEnumerable(Of SyntaxNodeOrToken)) As SyntaxNodeOrTokenList" />
      <MemberSignature Language="F#" Value="static member NodeOrTokenList : seq&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt; -&gt; Microsoft.CodeAnalysis.SyntaxNodeOrTokenList" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NodeOrTokenList nodesAndTokens" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxNodeOrTokenList NodeOrTokenList(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNodeOrToken&gt; ^ nodesAndTokens);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNodeOrTokenList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodesAndTokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt;" />
      </Parameters>
      <Docs>
        <param name="nodesAndTokens">A sequence of nodes and tokens.</param>
        <summary>
 Creates a <see cref="T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList" /> from a sequence of nodes and tokens.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotEqualsExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax NotEqualsExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax NotEqualsExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NotEqualsExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotEqualsExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member NotEqualsExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NotEqualsExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ NotEqualsExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotEqualsExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax NotEqualsExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax NotEqualsExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NotEqualsExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotEqualsExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member NotEqualsExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NotEqualsExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ NotEqualsExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax NotExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax NotExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NotExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotExpression (operand As ExpressionSyntax) As UnaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member NotExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NotExpression operand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::UnaryExpressionSyntax ^ NotExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ operand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="operand">
 The expression being operated on.
 </param>
        <summary>
 Describes a unary operator: Plus, Negate, Not or AddressOf.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax NotExpression (Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax NotExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NotExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotExpression (operatorToken As SyntaxToken, operand As ExpressionSyntax) As UnaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member NotExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NotExpression (operatorToken, operand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::UnaryExpressionSyntax ^ NotExpression(Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ operand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operand" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="operatorToken">
 The token that is the operator.
 </param>
        <param name="operand">
 The expression being operated on.
 </param>
        <summary>
 Describes a unary operator: Plus, Negate, Not or AddressOf.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NothingLiteralExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax NothingLiteralExpression (Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax NothingLiteralExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NothingLiteralExpression(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NothingLiteralExpression (token As SyntaxToken) As LiteralExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member NothingLiteralExpression : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NothingLiteralExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ NothingLiteralExpression(Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="token">
 The token that represents the literal. The Kind property determines what type
 this property returns: Kind=IntegerLiteral ==&gt; Returns IntegerLiteralToken.
 Kind=CharacterLiteral ==&gt; Returns CharacterLiteralToken. Kind=DecimalLiteral
 ==&gt; Returns DecimalLiteralToken Kind=FloatingLiteral ==&gt; Returns
 FloatingLiteralToken Kind=DateLiteral ==&gt; Returns DateLiteralToken
 Kind=StringLiteral ==&gt; Returns StringLiteralToken Kind=BooleanLiteral ==&gt;
 Returns Keyword (with it's kind being TrueKeyword or FalseKeyword)
 Kind=NothingLiteral ==&gt; Returns Keyword (with it's kind being
 NothingKeyword)
 </param>
        <summary>
 Represents a literal. The kind of literal is determined by the Kind property:
 IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
 FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
 determined by casting the associated Token to the correct type and getting the
 value from the token.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NullableType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax NullableType (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax elementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax NullableType(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax elementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NullableType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NullableType (elementType As TypeSyntax) As NullableTypeSyntax" />
      <MemberSignature Language="F#" Value="static member NullableType : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NullableType elementType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NullableTypeSyntax ^ NullableType(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ elementType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="elementType">
 The kind of type that is this type is a nullable of. Cannot be an array type or
 a nullable type.
 </param>
        <summary>
 A type name that represents a nullable type, such as "Integer?".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NullableType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax NullableType (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax elementType, Microsoft.CodeAnalysis.SyntaxToken questionMarkToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax NullableType(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax elementType, valuetype Microsoft.CodeAnalysis.SyntaxToken questionMarkToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NullableType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NullableType (elementType As TypeSyntax, questionMarkToken As SyntaxToken) As NullableTypeSyntax" />
      <MemberSignature Language="F#" Value="static member NullableType : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NullableType (elementType, questionMarkToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::NullableTypeSyntax ^ NullableType(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ elementType, Microsoft::CodeAnalysis::SyntaxToken questionMarkToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
        <Parameter Name="questionMarkToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="elementType">
 The kind of type that is this type is a nullable of. Cannot be an array type or
 a nullable type.
 </param>
        <param name="questionMarkToken">
 The "?" token.
 </param>
        <summary>
 A type name that represents a nullable type, such as "Integer?".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumericLabel">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax NumericLabel ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax NumericLabel() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NumericLabel" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NumericLabel () As LabelSyntax" />
      <MemberSignature Language="F#" Value="static member NumericLabel : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NumericLabel " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ NumericLabel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 A label for a GoTo, Resume, or On Error statement. An identifier, line number,
 or next keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumericLabel">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax NumericLabel (Microsoft.CodeAnalysis.SyntaxToken labelToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax NumericLabel(valuetype Microsoft.CodeAnalysis.SyntaxToken labelToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NumericLabel(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NumericLabel (labelToken As SyntaxToken) As LabelSyntax" />
      <MemberSignature Language="F#" Value="static member NumericLabel : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NumericLabel labelToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ NumericLabel(Microsoft::CodeAnalysis::SyntaxToken labelToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="labelToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="labelToken">
 The label name (identifier), line number (integer literal), or next keyword
 token.
 </param>
        <summary>
 A label for a GoTo, Resume, or On Error statement. An identifier, line number,
 or next keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumericLiteralExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax NumericLiteralExpression (Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax NumericLiteralExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NumericLiteralExpression(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NumericLiteralExpression (token As SyntaxToken) As LiteralExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member NumericLiteralExpression : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.NumericLiteralExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ NumericLiteralExpression(Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="token">
 The token that represents the literal. The Kind property determines what type
 this property returns: Kind=IntegerLiteral ==&gt; Returns IntegerLiteralToken.
 Kind=CharacterLiteral ==&gt; Returns CharacterLiteralToken. Kind=DecimalLiteral
 ==&gt; Returns DecimalLiteralToken Kind=FloatingLiteral ==&gt; Returns
 FloatingLiteralToken Kind=DateLiteral ==&gt; Returns DateLiteralToken
 Kind=StringLiteral ==&gt; Returns StringLiteralToken Kind=BooleanLiteral ==&gt;
 Returns Keyword (with it's kind being TrueKeyword or FalseKeyword)
 Kind=NothingLiteral ==&gt; Returns Keyword (with it's kind being
 NothingKeyword)
 </param>
        <summary>
 Represents a literal. The kind of literal is determined by the Kind property:
 IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
 FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
 determined by casting the associated Token to the correct type and getting the
 value from the token.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectCollectionInitializer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax ObjectCollectionInitializer (Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax ObjectCollectionInitializer(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ObjectCollectionInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ObjectCollectionInitializer (initializer As CollectionInitializerSyntax) As ObjectCollectionInitializerSyntax" />
      <MemberSignature Language="F#" Value="static member ObjectCollectionInitializer : Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ObjectCollectionInitializer initializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectCollectionInitializerSyntax ^ ObjectCollectionInitializer(Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionInitializerSyntax ^ initializer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax" />
      </Parameters>
      <Docs>
        <param name="initializer">
 The initializer including the braces.
 </param>
        <summary>
 Represents a "From {...} clause used to initialize a new collection object's
 elements.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectCollectionInitializer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax ObjectCollectionInitializer (Microsoft.CodeAnalysis.SyntaxToken fromKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax ObjectCollectionInitializer(valuetype Microsoft.CodeAnalysis.SyntaxToken fromKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ObjectCollectionInitializer(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ObjectCollectionInitializer (fromKeyword As SyntaxToken, initializer As CollectionInitializerSyntax) As ObjectCollectionInitializerSyntax" />
      <MemberSignature Language="F#" Value="static member ObjectCollectionInitializer : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ObjectCollectionInitializer (fromKeyword, initializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectCollectionInitializerSyntax ^ ObjectCollectionInitializer(Microsoft::CodeAnalysis::SyntaxToken fromKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionInitializerSyntax ^ initializer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax" />
      </Parameters>
      <Docs>
        <param name="fromKeyword">
 The "From" keyword.
 </param>
        <param name="initializer">
 The initializer including the braces.
 </param>
        <summary>
 Represents a "From {...} clause used to initialize a new collection object's
 elements.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax ObjectCreationExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax ObjectCreationExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ObjectCreationExpression (type As TypeSyntax) As ObjectCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ObjectCreationExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ObjectCreationExpression type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectCreationExpressionSyntax ^ ObjectCreationExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">
 The type of the object being initialized.
 </param>
        <summary>
 Represents a New expression that creates a new non-array object, possibly with
 a "With" or "From" clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax ObjectCreationExpression (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationInitializerSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax ObjectCreationExpression(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationInitializerSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationInitializerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ObjectCreationExpression (attributeLists As SyntaxList(Of AttributeListSyntax), type As TypeSyntax, argumentList As ArgumentListSyntax, initializer As ObjectCreationInitializerSyntax) As ObjectCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ObjectCreationExpression : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationInitializerSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ObjectCreationExpression (attributeLists, type, argumentList, initializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectCreationExpressionSyntax ^ ObjectCreationExpression(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type, Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ argumentList, Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectCreationInitializerSyntax ^ initializer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationInitializerSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on the type. If no attributes were specified, an
 empty list is returned.
 </param>
        <param name="type">
 The type of the object being initialized.
 </param>
        <param name="argumentList">
 The argument list, if present. If no argument list was supplied, Nothing is
 returned.
 </param>
        <param name="initializer">
 An optional From or With clause to initialize the new object.
 </param>
        <summary>
 Represents a New expression that creates a new non-array object, possibly with
 a "With" or "From" clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectCreationExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax ObjectCreationExpression (Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationInitializerSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax ObjectCreationExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken newKeyword, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationInitializerSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationInitializerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ObjectCreationExpression (newKeyword As SyntaxToken, attributeLists As SyntaxList(Of AttributeListSyntax), type As TypeSyntax, argumentList As ArgumentListSyntax, initializer As ObjectCreationInitializerSyntax) As ObjectCreationExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ObjectCreationExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationInitializerSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ObjectCreationExpression (newKeyword, attributeLists, type, argumentList, initializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectCreationExpressionSyntax ^ ObjectCreationExpression(Microsoft::CodeAnalysis::SyntaxToken newKeyword, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type, Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ argumentList, Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectCreationInitializerSyntax ^ initializer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationInitializerSyntax" />
      </Parameters>
      <Docs>
        <param name="newKeyword">
 The "New" keyword.
 </param>
        <param name="attributeLists">
 A list of all attribute lists on the type. If no attributes were specified, an
 empty list is returned.
 </param>
        <param name="type">
 The type of the object being initialized.
 </param>
        <param name="argumentList">
 The argument list, if present. If no argument list was supplied, Nothing is
 returned.
 </param>
        <param name="initializer">
 An optional From or With clause to initialize the new object.
 </param>
        <summary>
 Represents a New expression that creates a new non-array object, possibly with
 a "With" or "From" clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectMemberInitializer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax ObjectMemberInitializer (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax ObjectMemberInitializer(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ObjectMemberInitializer(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ObjectMemberInitializer (initializers As SeparatedSyntaxList(Of FieldInitializerSyntax)) As ObjectMemberInitializerSyntax" />
      <MemberSignature Language="F#" Value="static member ObjectMemberInitializer : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ObjectMemberInitializer initializers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectMemberInitializerSyntax ^ ObjectMemberInitializer(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::FieldInitializerSyntax ^&gt; initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializers" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="initializers">
 The comma-separated list of field initializers.
 </param>
        <summary>
 Represents a "With {...} clause used to initialize a new object's members.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectMemberInitializer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax ObjectMemberInitializer (params Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax ObjectMemberInitializer(class Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ObjectMemberInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ObjectMemberInitializer (ParamArray initializers As FieldInitializerSyntax()) As ObjectMemberInitializerSyntax" />
      <MemberSignature Language="F#" Value="static member ObjectMemberInitializer : Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ObjectMemberInitializer initializers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectMemberInitializerSyntax ^ ObjectMemberInitializer(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::FieldInitializerSyntax ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializers" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="initializers">
 The comma-separated list of field initializers.
 </param>
        <summary>
 Represents a "With {...} clause used to initialize a new object's members.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectMemberInitializer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax ObjectMemberInitializer (Microsoft.CodeAnalysis.SyntaxToken withKeyword, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax&gt; initializers, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax ObjectMemberInitializer(valuetype Microsoft.CodeAnalysis.SyntaxToken withKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openBraceToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax&gt; initializers, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ObjectMemberInitializer(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ObjectMemberInitializer (withKeyword As SyntaxToken, openBraceToken As SyntaxToken, initializers As SeparatedSyntaxList(Of FieldInitializerSyntax), closeBraceToken As SyntaxToken) As ObjectMemberInitializerSyntax" />
      <MemberSignature Language="F#" Value="static member ObjectMemberInitializer : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ObjectMemberInitializer (withKeyword, openBraceToken, initializers, closeBraceToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectMemberInitializerSyntax ^ ObjectMemberInitializer(Microsoft::CodeAnalysis::SyntaxToken withKeyword, Microsoft::CodeAnalysis::SyntaxToken openBraceToken, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::FieldInitializerSyntax ^&gt; initializers, Microsoft::CodeAnalysis::SyntaxToken closeBraceToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="withKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="initializers" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax&gt;" />
        <Parameter Name="closeBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="withKeyword">
 The "With" keyword.
 </param>
        <param name="openBraceToken">
 The "{" token.
 </param>
        <param name="initializers">
 The comma-separated list of field initializers.
 </param>
        <param name="closeBraceToken">
 The "}" token.
 </param>
        <summary>
 Represents a "With {...} clause used to initialize a new object's members.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OmittedArgument">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax OmittedArgument ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax OmittedArgument() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OmittedArgument" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OmittedArgument () As OmittedArgumentSyntax" />
      <MemberSignature Language="F#" Value="static member OmittedArgument : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OmittedArgument " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OmittedArgumentSyntax ^ OmittedArgument();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an omitted argument in an argument list. An omitted argument is not
 considered a syntax error but a valid case when no argument is required.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OmittedArgument">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax OmittedArgument (Microsoft.CodeAnalysis.SyntaxToken empty);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax OmittedArgument(valuetype Microsoft.CodeAnalysis.SyntaxToken empty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OmittedArgument(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OmittedArgument (empty As SyntaxToken) As OmittedArgumentSyntax" />
      <MemberSignature Language="F#" Value="static member OmittedArgument : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OmittedArgument empty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OmittedArgumentSyntax ^ OmittedArgument(Microsoft::CodeAnalysis::SyntaxToken empty);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="empty" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="empty">
 An empty token because all non terminals must have a token.
 </param>
        <summary>
 Represents an omitted argument in an argument list. An omitted argument is not
 considered a syntax error but a valid case when no argument is required.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnErrorGoToLabelStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToLabelStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToLabelStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorGoToLabelStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OnErrorGoToLabelStatement (label As LabelSyntax) As OnErrorGoToStatementSyntax" />
      <MemberSignature Language="F#" Value="static member OnErrorGoToLabelStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorGoToLabelStatement label" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OnErrorGoToStatementSyntax ^ OnErrorGoToLabelStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="label">
 The name of the label. If the label is a line number, 0 or -1, wraps an
 IntegerLiteralToken that is the line number, otherwise, wraps an Identifier.
 </param>
        <summary>
 Represents an OnError Goto statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnErrorGoToLabelStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToLabelStatement (Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.SyntaxToken errorKeyword, Microsoft.CodeAnalysis.SyntaxToken goToKeyword, Microsoft.CodeAnalysis.SyntaxToken minus, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToLabelStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken onKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken errorKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken goToKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken minus, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorGoToLabelStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OnErrorGoToLabelStatement (onKeyword As SyntaxToken, errorKeyword As SyntaxToken, goToKeyword As SyntaxToken, minus As SyntaxToken, label As LabelSyntax) As OnErrorGoToStatementSyntax" />
      <MemberSignature Language="F#" Value="static member OnErrorGoToLabelStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorGoToLabelStatement (onKeyword, errorKeyword, goToKeyword, minus, label)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OnErrorGoToStatementSyntax ^ OnErrorGoToLabelStatement(Microsoft::CodeAnalysis::SyntaxToken onKeyword, Microsoft::CodeAnalysis::SyntaxToken errorKeyword, Microsoft::CodeAnalysis::SyntaxToken goToKeyword, Microsoft::CodeAnalysis::SyntaxToken minus, Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="errorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="goToKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="minus" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="label" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="onKeyword">
 The "On" keyword
 </param>
        <param name="errorKeyword">
 The "Error" keyword.
 </param>
        <param name="goToKeyword">
 The "GoTo" keyword
 </param>
        <param name="minus">
 An optional minus for On Error Goto -1
 </param>
        <param name="label">
 The name of the label. If the label is a line number, 0 or -1, wraps an
 IntegerLiteralToken that is the line number, otherwise, wraps an Identifier.
 </param>
        <summary>
 Represents an OnError Goto statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnErrorGoToMinusOneStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToMinusOneStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToMinusOneStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorGoToMinusOneStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OnErrorGoToMinusOneStatement (label As LabelSyntax) As OnErrorGoToStatementSyntax" />
      <MemberSignature Language="F#" Value="static member OnErrorGoToMinusOneStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorGoToMinusOneStatement label" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OnErrorGoToStatementSyntax ^ OnErrorGoToMinusOneStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="label">
 The name of the label. If the label is a line number, 0 or -1, wraps an
 IntegerLiteralToken that is the line number, otherwise, wraps an Identifier.
 </param>
        <summary>
 Represents an OnError Goto statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnErrorGoToMinusOneStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToMinusOneStatement (Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.SyntaxToken errorKeyword, Microsoft.CodeAnalysis.SyntaxToken goToKeyword, Microsoft.CodeAnalysis.SyntaxToken minus, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToMinusOneStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken onKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken errorKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken goToKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken minus, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorGoToMinusOneStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OnErrorGoToMinusOneStatement (onKeyword As SyntaxToken, errorKeyword As SyntaxToken, goToKeyword As SyntaxToken, minus As SyntaxToken, label As LabelSyntax) As OnErrorGoToStatementSyntax" />
      <MemberSignature Language="F#" Value="static member OnErrorGoToMinusOneStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorGoToMinusOneStatement (onKeyword, errorKeyword, goToKeyword, minus, label)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OnErrorGoToStatementSyntax ^ OnErrorGoToMinusOneStatement(Microsoft::CodeAnalysis::SyntaxToken onKeyword, Microsoft::CodeAnalysis::SyntaxToken errorKeyword, Microsoft::CodeAnalysis::SyntaxToken goToKeyword, Microsoft::CodeAnalysis::SyntaxToken minus, Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="errorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="goToKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="minus" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="label" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="onKeyword">
 The "On" keyword
 </param>
        <param name="errorKeyword">
 The "Error" keyword.
 </param>
        <param name="goToKeyword">
 The "GoTo" keyword
 </param>
        <param name="minus">
 An optional minus for On Error Goto -1
 </param>
        <param name="label">
 The name of the label. If the label is a line number, 0 or -1, wraps an
 IntegerLiteralToken that is the line number, otherwise, wraps an Identifier.
 </param>
        <summary>
 Represents an OnError Goto statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnErrorGoToStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorGoToStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OnErrorGoToStatement (kind As SyntaxKind, label As LabelSyntax) As OnErrorGoToStatementSyntax" />
      <MemberSignature Language="F#" Value="static member OnErrorGoToStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorGoToStatement (kind, label)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OnErrorGoToStatementSyntax ^ OnErrorGoToStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="label" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 OnErrorGoToStatementSyntax. One of OnErrorGoToZeroStatement,
 OnErrorGoToMinusOneStatement, OnErrorGoToLabelStatement.
 </param>
        <param name="label">
 The name of the label. If the label is a line number, 0 or -1, wraps an
 IntegerLiteralToken that is the line number, otherwise, wraps an Identifier.
 </param>
        <summary>
 Represents an OnError Goto statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnErrorGoToStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.SyntaxToken errorKeyword, Microsoft.CodeAnalysis.SyntaxToken goToKeyword, Microsoft.CodeAnalysis.SyntaxToken minus, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken onKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken errorKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken goToKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken minus, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorGoToStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OnErrorGoToStatement (kind As SyntaxKind, onKeyword As SyntaxToken, errorKeyword As SyntaxToken, goToKeyword As SyntaxToken, minus As SyntaxToken, label As LabelSyntax) As OnErrorGoToStatementSyntax" />
      <MemberSignature Language="F#" Value="static member OnErrorGoToStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorGoToStatement (kind, onKeyword, errorKeyword, goToKeyword, minus, label)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OnErrorGoToStatementSyntax ^ OnErrorGoToStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken onKeyword, Microsoft::CodeAnalysis::SyntaxToken errorKeyword, Microsoft::CodeAnalysis::SyntaxToken goToKeyword, Microsoft::CodeAnalysis::SyntaxToken minus, Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="onKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="errorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="goToKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="minus" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="label" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 OnErrorGoToStatementSyntax. One of OnErrorGoToZeroStatement,
 OnErrorGoToMinusOneStatement, OnErrorGoToLabelStatement.
 </param>
        <param name="onKeyword">
 The "On" keyword
 </param>
        <param name="errorKeyword">
 The "Error" keyword.
 </param>
        <param name="goToKeyword">
 The "GoTo" keyword
 </param>
        <param name="minus">
 An optional minus for On Error Goto -1
 </param>
        <param name="label">
 The name of the label. If the label is a line number, 0 or -1, wraps an
 IntegerLiteralToken that is the line number, otherwise, wraps an Identifier.
 </param>
        <summary>
 Represents an OnError Goto statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnErrorGoToZeroStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToZeroStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToZeroStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorGoToZeroStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OnErrorGoToZeroStatement (label As LabelSyntax) As OnErrorGoToStatementSyntax" />
      <MemberSignature Language="F#" Value="static member OnErrorGoToZeroStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorGoToZeroStatement label" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OnErrorGoToStatementSyntax ^ OnErrorGoToZeroStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="label">
 The name of the label. If the label is a line number, 0 or -1, wraps an
 IntegerLiteralToken that is the line number, otherwise, wraps an Identifier.
 </param>
        <summary>
 Represents an OnError Goto statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnErrorGoToZeroStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToZeroStatement (Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.SyntaxToken errorKeyword, Microsoft.CodeAnalysis.SyntaxToken goToKeyword, Microsoft.CodeAnalysis.SyntaxToken minus, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax OnErrorGoToZeroStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken onKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken errorKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken goToKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken minus, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorGoToZeroStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OnErrorGoToZeroStatement (onKeyword As SyntaxToken, errorKeyword As SyntaxToken, goToKeyword As SyntaxToken, minus As SyntaxToken, label As LabelSyntax) As OnErrorGoToStatementSyntax" />
      <MemberSignature Language="F#" Value="static member OnErrorGoToZeroStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorGoToZeroStatement (onKeyword, errorKeyword, goToKeyword, minus, label)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OnErrorGoToStatementSyntax ^ OnErrorGoToZeroStatement(Microsoft::CodeAnalysis::SyntaxToken onKeyword, Microsoft::CodeAnalysis::SyntaxToken errorKeyword, Microsoft::CodeAnalysis::SyntaxToken goToKeyword, Microsoft::CodeAnalysis::SyntaxToken minus, Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="errorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="goToKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="minus" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="label" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="onKeyword">
 The "On" keyword
 </param>
        <param name="errorKeyword">
 The "Error" keyword.
 </param>
        <param name="goToKeyword">
 The "GoTo" keyword
 </param>
        <param name="minus">
 An optional minus for On Error Goto -1
 </param>
        <param name="label">
 The name of the label. If the label is a line number, 0 or -1, wraps an
 IntegerLiteralToken that is the line number, otherwise, wraps an Identifier.
 </param>
        <summary>
 Represents an OnError Goto statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnErrorResumeNextStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax OnErrorResumeNextStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax OnErrorResumeNextStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorResumeNextStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OnErrorResumeNextStatement () As OnErrorResumeNextStatementSyntax" />
      <MemberSignature Language="F#" Value="static member OnErrorResumeNextStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorResumeNextStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OnErrorResumeNextStatementSyntax ^ OnErrorResumeNextStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an OnError Resume Next statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnErrorResumeNextStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax OnErrorResumeNextStatement (Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.SyntaxToken errorKeyword, Microsoft.CodeAnalysis.SyntaxToken resumeKeyword, Microsoft.CodeAnalysis.SyntaxToken nextKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax OnErrorResumeNextStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken onKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken errorKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken resumeKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken nextKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorResumeNextStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OnErrorResumeNextStatement (onKeyword As SyntaxToken, errorKeyword As SyntaxToken, resumeKeyword As SyntaxToken, nextKeyword As SyntaxToken) As OnErrorResumeNextStatementSyntax" />
      <MemberSignature Language="F#" Value="static member OnErrorResumeNextStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OnErrorResumeNextStatement (onKeyword, errorKeyword, resumeKeyword, nextKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OnErrorResumeNextStatementSyntax ^ OnErrorResumeNextStatement(Microsoft::CodeAnalysis::SyntaxToken onKeyword, Microsoft::CodeAnalysis::SyntaxToken errorKeyword, Microsoft::CodeAnalysis::SyntaxToken resumeKeyword, Microsoft::CodeAnalysis::SyntaxToken nextKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="errorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="resumeKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="nextKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="onKeyword">
 The "On" keyword
 </param>
        <param name="errorKeyword">
 The "Error" keyword.
 </param>
        <param name="resumeKeyword">
 The "Resume" keyword.
 </param>
        <param name="nextKeyword">
 The "Next"
 </param>
        <summary>
 Represents an OnError Resume Next statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperatorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax OperatorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax operatorStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax OperatorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax operatorStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OperatorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OperatorBlock (operatorStatement As OperatorStatementSyntax) As OperatorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member OperatorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OperatorBlock operatorStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OperatorBlockSyntax ^ OperatorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::OperatorStatementSyntax ^ operatorStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="operatorStatement">
 The "Operator" statement that begins the block.
 </param>
        <summary>
 Represents an Operator block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperatorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax OperatorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax operatorStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax OperatorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax operatorStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OperatorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OperatorBlock (operatorStatement As OperatorStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As OperatorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member OperatorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OperatorBlock (operatorStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OperatorBlockSyntax ^ OperatorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::OperatorStatementSyntax ^ operatorStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="operatorStatement">
 The "Operator" statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <summary>
 Represents an Operator block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperatorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax OperatorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax operatorStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endOperatorStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax OperatorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax operatorStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endOperatorStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OperatorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OperatorBlock (operatorStatement As OperatorStatementSyntax, statements As SyntaxList(Of StatementSyntax), endOperatorStatement As EndBlockStatementSyntax) As OperatorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member OperatorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OperatorBlock (operatorStatement, statements, endOperatorStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OperatorBlockSyntax ^ OperatorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::OperatorStatementSyntax ^ operatorStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endOperatorStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endOperatorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="operatorStatement">
 The "Operator" statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <param name="endOperatorStatement">
 The "End Operator" statement that ends the block declaration.
 </param>
        <summary>
 Represents an Operator block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperatorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax OperatorStatement (Microsoft.CodeAnalysis.SyntaxToken operatorToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax OperatorStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OperatorStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OperatorStatement (operatorToken As SyntaxToken) As OperatorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member OperatorStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OperatorStatement operatorToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OperatorStatementSyntax ^ OperatorStatement(Microsoft::CodeAnalysis::SyntaxToken operatorToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="operatorToken">
 The operator being defined.
 </param>
        <summary>
 A statement that declares an operator. If this operator has a body, this
 statement will be the Begin of a BlockStatement with
 Kind=MethodDeclarationBlock, and the body of the method will be the Body of
 that BlockStatement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperatorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax OperatorStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax OperatorStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OperatorStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OperatorStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, operatorToken As SyntaxToken, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As OperatorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member OperatorStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OperatorStatement (attributeLists, modifiers, operatorToken, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OperatorStatementSyntax ^ OperatorStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="operatorToken">
 The operator being defined.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 A statement that declares an operator. If this operator has a body, this
 statement will be the Begin of a BlockStatement with
 Kind=MethodDeclarationBlock, and the body of the method will be the Body of
 that BlockStatement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperatorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax OperatorStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax OperatorStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OperatorStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OperatorStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, operatorKeyword As SyntaxToken, operatorToken As SyntaxToken, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As OperatorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member OperatorStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OperatorStatement (attributeLists, modifiers, operatorKeyword, operatorToken, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OperatorStatementSyntax ^ OperatorStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken operatorKeyword, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="operatorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="operatorKeyword">
 The "Operator" keyword that introduces this operator declaration.
 </param>
        <param name="operatorToken">
 The operator being defined.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 A statement that declares an operator. If this operator has a body, this
 statement will be the Begin of a BlockStatement with
 Kind=MethodDeclarationBlock, and the body of the method will be the Body of
 that BlockStatement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax OptionStatement (Microsoft.CodeAnalysis.SyntaxToken nameKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax OptionStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken nameKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OptionStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OptionStatement (nameKeyword As SyntaxToken) As OptionStatementSyntax" />
      <MemberSignature Language="F#" Value="static member OptionStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OptionStatement nameKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OptionStatementSyntax ^ OptionStatement(Microsoft::CodeAnalysis::SyntaxToken nameKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nameKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="nameKeyword">
 The keyword that identifies the option being set: Explicit, Strict, Compare or
 Infer.
 </param>
        <summary>
 Represents an Option statement, such as "Option Strict On".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax OptionStatement (Microsoft.CodeAnalysis.SyntaxToken nameKeyword, Microsoft.CodeAnalysis.SyntaxToken valueKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax OptionStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken nameKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken valueKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OptionStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OptionStatement (nameKeyword As SyntaxToken, valueKeyword As SyntaxToken) As OptionStatementSyntax" />
      <MemberSignature Language="F#" Value="static member OptionStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OptionStatement (nameKeyword, valueKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OptionStatementSyntax ^ OptionStatement(Microsoft::CodeAnalysis::SyntaxToken nameKeyword, Microsoft::CodeAnalysis::SyntaxToken valueKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nameKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="valueKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="nameKeyword">
 The keyword that identifies the option being set: Explicit, Strict, Compare or
 Infer.
 </param>
        <param name="valueKeyword">
 The keyword that identifiers the value being set for the option: On, Off, Text
 or Binary.
 </param>
        <summary>
 Represents an Option statement, such as "Option Strict On".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax OptionStatement (Microsoft.CodeAnalysis.SyntaxToken optionKeyword, Microsoft.CodeAnalysis.SyntaxToken nameKeyword, Microsoft.CodeAnalysis.SyntaxToken valueKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax OptionStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken optionKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken nameKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken valueKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OptionStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OptionStatement (optionKeyword As SyntaxToken, nameKeyword As SyntaxToken, valueKeyword As SyntaxToken) As OptionStatementSyntax" />
      <MemberSignature Language="F#" Value="static member OptionStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OptionStatement (optionKeyword, nameKeyword, valueKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OptionStatementSyntax ^ OptionStatement(Microsoft::CodeAnalysis::SyntaxToken optionKeyword, Microsoft::CodeAnalysis::SyntaxToken nameKeyword, Microsoft::CodeAnalysis::SyntaxToken valueKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="nameKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="valueKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="optionKeyword">
 The "Option" keyword.
 </param>
        <param name="nameKeyword">
 The keyword that identifies the option being set: Explicit, Strict, Compare or
 Infer.
 </param>
        <param name="valueKeyword">
 The keyword that identifiers the value being set for the option: On, Off, Text
 or Binary.
 </param>
        <summary>
 Represents an Option statement, such as "Option Strict On".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax OrderByClause (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax&gt; orderings);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax OrderByClause(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax&gt; orderings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OrderByClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrderByClause (orderings As SeparatedSyntaxList(Of OrderingSyntax)) As OrderByClauseSyntax" />
      <MemberSignature Language="F#" Value="static member OrderByClause : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OrderByClause orderings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OrderByClauseSyntax ^ OrderByClause(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::OrderingSyntax ^&gt; orderings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderings" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="orderings">
 The list of OrderExpression's to sort by.
 </param>
        <summary>
 Represents the "Order By" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax OrderByClause (params Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax[] orderings);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax OrderByClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax[] orderings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OrderByClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrderByClause (ParamArray orderings As OrderingSyntax()) As OrderByClauseSyntax" />
      <MemberSignature Language="F#" Value="static member OrderByClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OrderByClause orderings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OrderByClauseSyntax ^ OrderByClause(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::OrderingSyntax ^&gt; ^ orderings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderings" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="orderings">
 The list of OrderExpression's to sort by.
 </param>
        <summary>
 Represents the "Order By" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax OrderByClause (Microsoft.CodeAnalysis.SyntaxToken orderKeyword, Microsoft.CodeAnalysis.SyntaxToken byKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax&gt; orderings);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax OrderByClause(valuetype Microsoft.CodeAnalysis.SyntaxToken orderKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken byKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax&gt; orderings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OrderByClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrderByClause (orderKeyword As SyntaxToken, byKeyword As SyntaxToken, orderings As SeparatedSyntaxList(Of OrderingSyntax)) As OrderByClauseSyntax" />
      <MemberSignature Language="F#" Value="static member OrderByClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OrderByClause (orderKeyword, byKeyword, orderings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OrderByClauseSyntax ^ OrderByClause(Microsoft::CodeAnalysis::SyntaxToken orderKeyword, Microsoft::CodeAnalysis::SyntaxToken byKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::OrderingSyntax ^&gt; orderings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="byKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="orderings" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="orderKeyword">
 The "Order" keyword
 </param>
        <param name="byKeyword">
 The "By" keyword.
 </param>
        <param name="orderings">
 The list of OrderExpression's to sort by.
 </param>
        <summary>
 Represents the "Order By" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordering">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax Ordering (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax Ordering(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Ordering(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ordering (kind As SyntaxKind, expression As ExpressionSyntax) As OrderingSyntax" />
      <MemberSignature Language="F#" Value="static member Ordering : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Ordering (kind, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OrderingSyntax ^ Ordering(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of OrderingSyntax. One
 of AscendingOrdering, DescendingOrdering.
 </param>
        <param name="expression">
 The expression to sort by.
 </param>
        <summary>
 An expression to order by, plus an optional ordering. The Kind indicates
 whether to order in ascending or descending order.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordering">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax Ordering (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken ascendingOrDescendingKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax Ordering(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken ascendingOrDescendingKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Ordering(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ordering (kind As SyntaxKind, expression As ExpressionSyntax, ascendingOrDescendingKeyword As SyntaxToken) As OrderingSyntax" />
      <MemberSignature Language="F#" Value="static member Ordering : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Ordering (kind, expression, ascendingOrDescendingKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::OrderingSyntax ^ Ordering(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SyntaxToken ascendingOrDescendingKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="ascendingOrDescendingKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of OrderingSyntax. One
 of AscendingOrdering, DescendingOrdering.
 </param>
        <param name="expression">
 The expression to sort by.
 </param>
        <param name="ascendingOrDescendingKeyword">
 The "Ascending" or "Descending" keyword, if present. To determine whether to
 sort in ascending or descending order, checking the Kind property is easier.
 </param>
        <summary>
 An expression to order by, plus an optional ordering. The Kind indicates
 whether to order in ascending or descending order.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrElseExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax OrElseExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax OrElseExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OrElseExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrElseExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member OrElseExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OrElseExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ OrElseExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrElseExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax OrElseExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax OrElseExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OrElseExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrElseExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member OrElseExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OrElseExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ OrElseExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax OrExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax OrExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OrExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member OrExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OrExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ OrExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax OrExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax OrExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OrExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member OrExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.OrExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ OrExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax Parameter (Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax Parameter(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Parameter(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parameter (identifier As ModifiedIdentifierSyntax) As ParameterSyntax" />
      <MemberSignature Language="F#" Value="static member Parameter : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Parameter identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterSyntax ^ Parameter(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModifiedIdentifierSyntax ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the parameter, including any "?" or "()" modifiers.
 </param>
        <summary>
 Represent a parameter to a method, property, constructor, etc.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax Parameter (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax default);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax Parameter(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax default) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Parameter(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parameter (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As ModifiedIdentifierSyntax, asClause As SimpleAsClauseSyntax, default As EqualsValueSyntax) As ParameterSyntax" />
      <MemberSignature Language="F#" Value="static member Parameter : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Parameter (attributeLists, modifiers, identifier, asClause, default)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterSyntax ^ Parameter(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::VisualBasic::Syntax::ModifiedIdentifierSyntax ^ identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::EqualsValueSyntax ^ default);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
        <Parameter Name="default" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this parameter. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of the modifier tokens "ByVal", "ByRef", "Optional" or "ParamArray" that
 modify this parameter.
 </param>
        <param name="identifier">
 The name of the parameter, including any "?" or "()" modifiers.
 </param>
        <param name="asClause">
 If present, the "As type-name" clause describing the type of the parameter. If
 no As clause is present, Nothing is returned.
 </param>
        <param name="default">
 If present, an initializer with the default value of the parameter. If no
 default value is present, Nothing is returned.
 </param>
        <summary>
 Represent a parameter to a method, property, constructor, etc.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParameterList" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParameterList () As ParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member ParameterList : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParameterList " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ ParameterList();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents the parameter list in a method declaration.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParameterList (parameters As SeparatedSyntaxList(Of ParameterSyntax)) As ParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member ParameterList : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParameterList parameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ ParameterList(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterSyntax ^&gt; parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="parameters">
 The list of parameters. If no parameter list was present, Nothing is returned.
 </param>
        <summary>
 Represents the parameter list in a method declaration.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax&gt; parameters, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParameterList(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax&gt; parameters, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParameterList (openParenToken As SyntaxToken, parameters As SeparatedSyntaxList(Of ParameterSyntax), closeParenToken As SyntaxToken) As ParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member ParameterList : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParameterList (openParenToken, parameters, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ ParameterList(Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterSyntax ^&gt; parameters, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax&gt;" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openParenToken">
 The "(" token that introduces the parameter list. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="parameters">
 The list of parameters. If no parameter list was present, Nothing is returned.
 </param>
        <param name="closeParenToken">
 The ")" token that concludes the parameter list. If no parameter list was
 present, Nothing is returned.
 </param>
        <summary>
 Represents the parameter list in a method declaration.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParenthesizedExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax ParenthesizedExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax ParenthesizedExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParenthesizedExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParenthesizedExpression (expression As ExpressionSyntax) As ParenthesizedExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ParenthesizedExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParenthesizedExpression expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ParenthesizedExpressionSyntax ^ ParenthesizedExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression inside the parentheses.
 </param>
        <summary>
 Represents a parenthesized expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParenthesizedExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax ParenthesizedExpression (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax ParenthesizedExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParenthesizedExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParenthesizedExpression (openParenToken As SyntaxToken, expression As ExpressionSyntax, closeParenToken As SyntaxToken) As ParenthesizedExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ParenthesizedExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParenthesizedExpression (openParenToken, expression, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ParenthesizedExpressionSyntax ^ ParenthesizedExpression(Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openParenToken">
 The "(" token
 </param>
        <param name="expression">
 The expression inside the parentheses.
 </param>
        <param name="closeParenToken">
 The ")" token
 </param>
        <summary>
 Represents a parenthesized expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseArgumentList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ParseArgumentList (string text, int offset = 0, bool consumeFullText = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ParseArgumentList(string text, int32 offset, bool consumeFullText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseArgumentList(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseArgumentList (text As String, Optional offset As Integer = 0, Optional consumeFullText As Boolean = true) As ArgumentListSyntax" />
      <MemberSignature Language="F#" Value="static member ParseArgumentList : string * int * bool -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseArgumentList (text, offset, consumeFullText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="consumeFullText" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The input string</param>
        <param name="offset">The starting offset in the string</param>
        <param name="consumeFullText">To be added.</param>
        <summary>
 Parse an argument list.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseCompilationUnit">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax ParseCompilationUnit (string text, int offset = 0, Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax ParseCompilationUnit(string text, int32 offset, class Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseCompilationUnit(System.String,System.Int32,Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseCompilationUnit (text As String, Optional offset As Integer = 0, Optional options As VisualBasicParseOptions = null) As CompilationUnitSyntax" />
      <MemberSignature Language="F#" Value="static member ParseCompilationUnit : string * int * Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseCompilationUnit (text, offset, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions" />
      </Parameters>
      <Docs>
        <param name="text">The input string</param>
        <param name="offset">The starting offset in the string</param>
        <param name="options">To be added.</param>
        <summary>
 Parse a compilation unit (a single source file).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExecutableStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax ParseExecutableStatement (string text, int offset = 0, bool consumeFullText = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax ParseExecutableStatement(string text, int32 offset, bool consumeFullText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseExecutableStatement(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExecutableStatement (text As String, Optional offset As Integer = 0, Optional consumeFullText As Boolean = true) As StatementSyntax" />
      <MemberSignature Language="F#" Value="static member ParseExecutableStatement : string * int * bool -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseExecutableStatement (text, offset, consumeFullText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="consumeFullText" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The input string</param>
        <param name="offset">The starting offset in the string</param>
        <param name="consumeFullText">To be added.</param>
        <summary>
 Parse an executable statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax ParseExpression (string text, int offset = 0, bool consumeFullText = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax ParseExpression(string text, int32 offset, bool consumeFullText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseExpression(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExpression (text As String, Optional offset As Integer = 0, Optional consumeFullText As Boolean = true) As ExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member ParseExpression : string * int * bool -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseExpression (text, offset, consumeFullText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="consumeFullText" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The input string</param>
        <param name="offset">The starting offset in the string</param>
        <param name="consumeFullText">To be added.</param>
        <summary>
 Parse an expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseLeadingTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTriviaList ParseLeadingTrivia (string text, int offset = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTriviaList ParseLeadingTrivia(string text, int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseLeadingTrivia(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseLeadingTrivia (text As String, Optional offset As Integer = 0) As SyntaxTriviaList" />
      <MemberSignature Language="F#" Value="static member ParseLeadingTrivia : string * int -&gt; Microsoft.CodeAnalysis.SyntaxTriviaList" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseLeadingTrivia (text, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTriviaList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The input string</param>
        <param name="offset">The starting offset in the string</param>
        <summary>
Parse the input for leading trivia.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax ParseName (string text, int offset = 0, bool consumeFullText = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax ParseName(string text, int32 offset, bool consumeFullText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseName(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseName (text As String, Optional offset As Integer = 0, Optional consumeFullText As Boolean = true) As NameSyntax" />
      <MemberSignature Language="F#" Value="static member ParseName : string * int * bool -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseName (text, offset, consumeFullText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="consumeFullText" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The input string</param>
        <param name="offset">The starting offset in the string</param>
        <param name="consumeFullText">To be added.</param>
        <summary>
 Parse a name.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParseParameterList (string text, int offset = 0, bool consumeFullText = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax ParseParameterList(string text, int32 offset, bool consumeFullText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseParameterList(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseParameterList (text As String, Optional offset As Integer = 0, Optional consumeFullText As Boolean = true) As ParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member ParseParameterList : string * int * bool -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseParameterList (text, offset, consumeFullText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="consumeFullText" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The input string</param>
        <param name="offset">The starting offset in the string</param>
        <param name="consumeFullText">To be added.</param>
        <summary>
 Parse a parameter list.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseSyntaxTree">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTree ParseSyntaxTree (Microsoft.CodeAnalysis.Text.SourceText text, Microsoft.CodeAnalysis.ParseOptions options = null, string path = &quot;&quot;, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.SyntaxTree ParseSyntaxTree(class Microsoft.CodeAnalysis.Text.SourceText text, class Microsoft.CodeAnalysis.ParseOptions options, string path, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseSyntaxTree(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.ParseOptions,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ParseSyntaxTree : Microsoft.CodeAnalysis.Text.SourceText * Microsoft.CodeAnalysis.ParseOptions * string * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.SyntaxTree" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseSyntaxTree (text, options, path, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTree</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Microsoft.CodeAnalysis.Text.SourceText" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.ParseOptions" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="options">To be added.</param>
        <param name="path">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Produces a syntax tree by parsing the source text.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseSyntaxTree">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTree ParseSyntaxTree (string text, Microsoft.CodeAnalysis.ParseOptions options = null, string path = &quot;&quot;, System.Text.Encoding encoding = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.SyntaxTree ParseSyntaxTree(string text, class Microsoft.CodeAnalysis.ParseOptions options, string path, class System.Text.Encoding encoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseSyntaxTree(System.String,Microsoft.CodeAnalysis.ParseOptions,System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ParseSyntaxTree : string * Microsoft.CodeAnalysis.ParseOptions * string * System.Text.Encoding * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.SyntaxTree" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseSyntaxTree (text, options, path, encoding, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTree</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.ParseOptions" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="options">To be added.</param>
        <param name="path">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Produces a syntax tree by parsing the source text.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken ParseToken (string text, int offset = 0, bool startStatement = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken ParseToken(string text, int32 offset, bool startStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseToken(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseToken (text As String, Optional offset As Integer = 0, Optional startStatement As Boolean = false) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member ParseToken : string * int * bool -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseToken (text, offset, startStatement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="startStatement" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The input string</param>
        <param name="offset">The starting offset in the string</param>
        <param name="startStatement">Scan using rules for the start of a statement</param>
        <summary>
 Parse one token.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseTokens">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; ParseTokens (string text, int offset = 0, int initialTokenPosition = 0, Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; ParseTokens(string text, int32 offset, int32 initialTokenPosition, class Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseTokens(System.String,System.Int32,System.Int32,Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Iterator Function ParseTokens (text As String, Optional offset As Integer = 0, Optional initialTokenPosition As Integer = 0, Optional options As VisualBasicParseOptions = null) As IEnumerable(Of SyntaxToken)" />
      <MemberSignature Language="F#" Value="static member ParseTokens : string * int * int * Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions -&gt; seq&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseTokens (text, offset, initialTokenPosition, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory/VB$StateMachine_1128_ParseTokens))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="initialTokenPosition" Type="System.Int32" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions" />
      </Parameters>
      <Docs>
        <param name="text">The input string</param>
        <param name="offset">The starting offset in the string</param>
        <param name="initialTokenPosition">The position of the first token</param>
        <param name="options">To be added.</param>
        <summary>
 Parse tokens in the input.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseTrailingTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTriviaList ParseTrailingTrivia (string text, int offset = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTriviaList ParseTrailingTrivia(string text, int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseTrailingTrivia(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseTrailingTrivia (text As String, Optional offset As Integer = 0) As SyntaxTriviaList" />
      <MemberSignature Language="F#" Value="static member ParseTrailingTrivia : string * int -&gt; Microsoft.CodeAnalysis.SyntaxTriviaList" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseTrailingTrivia (text, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTriviaList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The input string</param>
        <param name="offset">The starting offset in the string</param>
        <summary>
 Parse the input for trailing trivia.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseTypeName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax ParseTypeName (string text, int offset = 0, bool consumeFullText = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax ParseTypeName(string text, int32 offset, bool consumeFullText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseTypeName(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseTypeName (text As String, Optional offset As Integer = 0, Optional consumeFullText As Boolean = true) As TypeSyntax" />
      <MemberSignature Language="F#" Value="static member ParseTypeName : string * int * bool -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ParseTypeName (text, offset, consumeFullText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="consumeFullText" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The input string</param>
        <param name="offset">The starting offset in the string</param>
        <param name="consumeFullText">To be added.</param>
        <summary>
 Parse a type name.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PartitionClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax PartitionClause (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax count);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax PartitionClause(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PartitionClause(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PartitionClause (kind As SyntaxKind, skipOrTakeKeyword As SyntaxToken, count As ExpressionSyntax) As PartitionClauseSyntax" />
      <MemberSignature Language="F#" Value="static member PartitionClause : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PartitionClause (kind, skipOrTakeKeyword, count)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PartitionClauseSyntax ^ PartitionClause(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken skipOrTakeKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="skipOrTakeKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="count" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 PartitionClauseSyntax. One of SkipClause, TakeClause.
 </param>
        <param name="skipOrTakeKeyword">
 The "Skip" or "Take" keyword.
 </param>
        <param name="count">
 Represents the expression with the number of items to take or skip.
 </param>
        <summary>
 Represents a "Skip" or "Take" query operator. The Kind property tells which.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PartitionWhileClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax PartitionWhileClause (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax PartitionWhileClause(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PartitionWhileClause(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PartitionWhileClause (kind As SyntaxKind, skipOrTakeKeyword As SyntaxToken, condition As ExpressionSyntax) As PartitionWhileClauseSyntax" />
      <MemberSignature Language="F#" Value="static member PartitionWhileClause : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PartitionWhileClause (kind, skipOrTakeKeyword, condition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PartitionWhileClauseSyntax ^ PartitionWhileClause(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken skipOrTakeKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="skipOrTakeKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 PartitionWhileClauseSyntax. One of SkipWhileClause, TakeWhileClause.
 </param>
        <param name="skipOrTakeKeyword">
 The "Skip" or "Take" keyword.
 </param>
        <param name="condition">
 The boolean expression used for partitioning.
 </param>
        <summary>
 Represents a "Skip While" or "Take While" query operator. The Kind property
 tells which.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PartitionWhileClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax PartitionWhileClause (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, Microsoft.CodeAnalysis.SyntaxToken whileKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax PartitionWhileClause(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken whileKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PartitionWhileClause(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PartitionWhileClause (kind As SyntaxKind, skipOrTakeKeyword As SyntaxToken, whileKeyword As SyntaxToken, condition As ExpressionSyntax) As PartitionWhileClauseSyntax" />
      <MemberSignature Language="F#" Value="static member PartitionWhileClause : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PartitionWhileClause (kind, skipOrTakeKeyword, whileKeyword, condition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PartitionWhileClauseSyntax ^ PartitionWhileClause(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken skipOrTakeKeyword, Microsoft::CodeAnalysis::SyntaxToken whileKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="skipOrTakeKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="whileKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 PartitionWhileClauseSyntax. One of SkipWhileClause, TakeWhileClause.
 </param>
        <param name="skipOrTakeKeyword">
 The "Skip" or "Take" keyword.
 </param>
        <param name="whileKeyword">
 The "While" keyword.
 </param>
        <param name="condition">
 The boolean expression used for partitioning.
 </param>
        <summary>
 Represents a "Skip While" or "Take While" query operator. The Kind property
 tells which.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PredefinedCastExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax PredefinedCastExpression (Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax PredefinedCastExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PredefinedCastExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PredefinedCastExpression (keyword As SyntaxToken, expression As ExpressionSyntax) As PredefinedCastExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member PredefinedCastExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PredefinedCastExpression (keyword, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PredefinedCastExpressionSyntax ^ PredefinedCastExpression(Microsoft::CodeAnalysis::SyntaxToken keyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="keyword">
 The keyword that was used in the cast operation.
 </param>
        <param name="expression">
 The expression being cast.
 </param>
        <summary>
 Represents a cast to a pre-defined type using a pre-defined cast expression,
 such as CInt or CLng.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PredefinedCastExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax PredefinedCastExpression (Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax PredefinedCastExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PredefinedCastExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PredefinedCastExpression (keyword As SyntaxToken, openParenToken As SyntaxToken, expression As ExpressionSyntax, closeParenToken As SyntaxToken) As PredefinedCastExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member PredefinedCastExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PredefinedCastExpression (keyword, openParenToken, expression, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PredefinedCastExpressionSyntax ^ PredefinedCastExpression(Microsoft::CodeAnalysis::SyntaxToken keyword, Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">
 The keyword that was used in the cast operation.
 </param>
        <param name="openParenToken">
 The "(" token.
 </param>
        <param name="expression">
 The expression being cast.
 </param>
        <param name="closeParenToken">
 The ")" token.
 </param>
        <summary>
 Represents a cast to a pre-defined type using a pre-defined cast expression,
 such as CInt or CLng.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PredefinedType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedTypeSyntax PredefinedType (Microsoft.CodeAnalysis.SyntaxToken keyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedTypeSyntax PredefinedType(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PredefinedType(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PredefinedType (keyword As SyntaxToken) As PredefinedTypeSyntax" />
      <MemberSignature Language="F#" Value="static member PredefinedType : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedTypeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PredefinedType keyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PredefinedTypeSyntax ^ PredefinedType(Microsoft::CodeAnalysis::SyntaxToken keyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">
 The keyword that was used to describe the built-in type.
 </param>
        <summary>
 Represents an occurrence of a Visual Basic built-in type such as Integer or
 String in source code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax PrintStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax PrintStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PrintStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PrintStatement (expression As ExpressionSyntax) As PrintStatementSyntax" />
      <MemberSignature Language="F#" Value="static member PrintStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PrintStatement expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PrintStatementSyntax ^ PrintStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression whose value is being output.
 </param>
        <summary>
 Represent a "? expression" "Print" statement in VB Interactive code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax PrintStatement (Microsoft.CodeAnalysis.SyntaxToken questionToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax PrintStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken questionToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PrintStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PrintStatement (questionToken As SyntaxToken, expression As ExpressionSyntax) As PrintStatementSyntax" />
      <MemberSignature Language="F#" Value="static member PrintStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PrintStatement (questionToken, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PrintStatementSyntax ^ PrintStatement(Microsoft::CodeAnalysis::SyntaxToken questionToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="questionToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="questionToken">
 "?" token.
 </param>
        <param name="expression">
 The expression whose value is being output.
 </param>
        <summary>
 Represent a "? expression" "Print" statement in VB Interactive code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax PropertyBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax propertyStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; accessors);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax PropertyBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax propertyStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; accessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PropertyBlock (propertyStatement As PropertyStatementSyntax, accessors As SyntaxList(Of AccessorBlockSyntax)) As PropertyBlockSyntax" />
      <MemberSignature Language="F#" Value="static member PropertyBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyBlock (propertyStatement, accessors)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PropertyBlockSyntax ^ PropertyBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::PropertyStatementSyntax ^ propertyStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^&gt; accessors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax" />
        <Parameter Name="accessors" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyStatement">
 The property declaration that begins the block.
 </param>
        <param name="accessors">
 The accessor blocks contained in the property, between the Property and the End
 Property statements.
 </param>
        <summary>
 Represents a block property declaration: A declaration that has a beginning
 declaration, some get or set accessor blocks and an end statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax PropertyBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax propertyStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; accessors, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endPropertyStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax PropertyBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax propertyStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; accessors, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endPropertyStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PropertyBlock (propertyStatement As PropertyStatementSyntax, accessors As SyntaxList(Of AccessorBlockSyntax), endPropertyStatement As EndBlockStatementSyntax) As PropertyBlockSyntax" />
      <MemberSignature Language="F#" Value="static member PropertyBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyBlock (propertyStatement, accessors, endPropertyStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PropertyBlockSyntax ^ PropertyBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::PropertyStatementSyntax ^ propertyStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^&gt; accessors, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endPropertyStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax" />
        <Parameter Name="accessors" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt;" />
        <Parameter Name="endPropertyStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="propertyStatement">
 The property declaration that begins the block.
 </param>
        <param name="accessors">
 The accessor blocks contained in the property, between the Property and the End
 Property statements.
 </param>
        <param name="endPropertyStatement">
 The End Property statement that ends the block.
 </param>
        <summary>
 Represents a block property declaration: A declaration that has a beginning
 declaration, some get or set accessor blocks and an end statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax PropertyStatement (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax PropertyStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PropertyStatement (identifier As SyntaxToken) As PropertyStatementSyntax" />
      <MemberSignature Language="F#" Value="static member PropertyStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PropertyStatementSyntax ^ PropertyStatement(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the property being declared.
 </param>
        <summary>
 Statement that declares a property. If this property has accessors declared,
 this statement will be the Begin of a BlockNode, and the accessors will be the
 Body of that node. Auto properties are property declarations without a
 PropertyBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax PropertyStatement (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax PropertyStatement(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PropertyStatement (identifier As String) As PropertyStatementSyntax" />
      <MemberSignature Language="F#" Value="static member PropertyStatement : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PropertyStatementSyntax ^ PropertyStatement(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the property being declared.
 </param>
        <summary>
 Statement that declares a property. If this property has accessors declared,
 this statement will be the Begin of a BlockNode, and the accessors will be the
 Body of that node. Auto properties are property declarations without a
 PropertyBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax PropertyStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax PropertyStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PropertyStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, initializer As EqualsValueSyntax, implementsClause As ImplementsClauseSyntax) As PropertyStatementSyntax" />
      <MemberSignature Language="F#" Value="static member PropertyStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement (attributeLists, modifiers, identifier, parameterList, asClause, initializer, implementsClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PropertyStatementSyntax ^ PropertyStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::AsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::EqualsValueSyntax ^ initializer, Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsClauseSyntax ^ implementsClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax" />
        <Parameter Name="implementsClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="identifier">
 The name of the property being declared.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <param name="initializer">
 If present, an "= initial-value" clause describing the initial value of the
 property.
 </param>
        <param name="implementsClause">
 If present, an Implements clause indicated the interface methods that this
 method implements.
 </param>
        <summary>
 Statement that declares a property. If this property has accessors declared,
 this statement will be the Begin of a BlockNode, and the accessors will be the
 Body of that node. Auto properties are property declarations without a
 PropertyBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax PropertyStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken propertyKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax PropertyStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken propertyKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PropertyStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, propertyKeyword As SyntaxToken, identifier As SyntaxToken, parameterList As ParameterListSyntax, asClause As AsClauseSyntax, initializer As EqualsValueSyntax, implementsClause As ImplementsClauseSyntax) As PropertyStatementSyntax" />
      <MemberSignature Language="F#" Value="static member PropertyStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.PropertyStatement (attributeLists, modifiers, propertyKeyword, identifier, parameterList, asClause, initializer, implementsClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PropertyStatementSyntax ^ PropertyStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken propertyKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::AsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::EqualsValueSyntax ^ initializer, Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsClauseSyntax ^ implementsClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="propertyKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax" />
        <Parameter Name="implementsClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="propertyKeyword">
 The "Property" keyword that introduces this property declaration.
 </param>
        <param name="identifier">
 The name of the property being declared.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <param name="initializer">
 If present, an "= initial-value" clause describing the initial value of the
 property.
 </param>
        <param name="implementsClause">
 If present, an Implements clause indicated the interface methods that this
 method implements.
 </param>
        <summary>
 Statement that declares a property. If this property has accessors declared,
 this statement will be the Begin of a BlockNode, and the accessors will be the
 Body of that node. Auto properties are property declarations without a
 PropertyBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QualifiedCrefOperatorReference">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax QualifiedCrefOperatorReference (Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax QualifiedCrefOperatorReference(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.QualifiedCrefOperatorReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QualifiedCrefOperatorReference (left As NameSyntax, right As CrefOperatorReferenceSyntax) As QualifiedCrefOperatorReferenceSyntax" />
      <MemberSignature Language="F#" Value="static member QualifiedCrefOperatorReference : Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.QualifiedCrefOperatorReference (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::QualifiedCrefOperatorReferenceSyntax ^ QualifiedCrefOperatorReference(Microsoft::CodeAnalysis::VisualBasic::Syntax::NameSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefOperatorReferenceSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QualifiedCrefOperatorReference">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax QualifiedCrefOperatorReference (Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax left, Microsoft.CodeAnalysis.SyntaxToken dotToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax QualifiedCrefOperatorReference(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken dotToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.QualifiedCrefOperatorReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QualifiedCrefOperatorReference (left As NameSyntax, dotToken As SyntaxToken, right As CrefOperatorReferenceSyntax) As QualifiedCrefOperatorReferenceSyntax" />
      <MemberSignature Language="F#" Value="static member QualifiedCrefOperatorReference : Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.QualifiedCrefOperatorReference (left, dotToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::QualifiedCrefOperatorReferenceSyntax ^ QualifiedCrefOperatorReference(Microsoft::CodeAnalysis::VisualBasic::Syntax::NameSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken dotToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefOperatorReferenceSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax" />
        <Parameter Name="dotToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="dotToken">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QualifiedName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax QualifiedName (Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax QualifiedName(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.QualifiedName(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QualifiedName (left As NameSyntax, right As SimpleNameSyntax) As QualifiedNameSyntax" />
      <MemberSignature Language="F#" Value="static member QualifiedName : Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.QualifiedName (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::QualifiedNameSyntax ^ QualifiedName(Microsoft::CodeAnalysis::VisualBasic::Syntax::NameSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleNameSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The part of the name that appears to the left of the dot. This can itself be
 any name.
 </param>
        <param name="right">
 The part of the name that appears to the right of the dot. This must be a
 simple identifier.
 </param>
        <summary>
 Represents a qualified type name, for example X.Y or X(Of Z).Y.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QualifiedName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax QualifiedName (Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax left, Microsoft.CodeAnalysis.SyntaxToken dotToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax QualifiedName(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken dotToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.QualifiedName(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QualifiedName (left As NameSyntax, dotToken As SyntaxToken, right As SimpleNameSyntax) As QualifiedNameSyntax" />
      <MemberSignature Language="F#" Value="static member QualifiedName : Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.QualifiedName (left, dotToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::QualifiedNameSyntax ^ QualifiedName(Microsoft::CodeAnalysis::VisualBasic::Syntax::NameSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken dotToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleNameSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax" />
        <Parameter Name="dotToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The part of the name that appears to the left of the dot. This can itself be
 any name.
 </param>
        <param name="dotToken">
 The "." token that separates the names.
 </param>
        <param name="right">
 The part of the name that appears to the right of the dot. This must be a
 simple identifier.
 </param>
        <summary>
 Represents a qualified type name, for example X.Y or X(Of Z).Y.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax QueryExpression (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax&gt; clauses);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax QueryExpression(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax&gt; clauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.QueryExpression(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueryExpression (clauses As SyntaxList(Of QueryClauseSyntax)) As QueryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member QueryExpression : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.QueryExpression clauses" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::QueryExpressionSyntax ^ QueryExpression(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::QueryClauseSyntax ^&gt; clauses);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clauses" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="clauses">
 A list of all the query operators in this query expression. This list always
 contains at least one operator.
 </param>
        <summary>
 This class represents a query expression. A query expression is composed of one
 or more query operators in a row. The first query operator must be a From or
 Aggregate.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax QueryExpression (params Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax[] clauses);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax QueryExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax[] clauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.QueryExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueryExpression (ParamArray clauses As QueryClauseSyntax()) As QueryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member QueryExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.QueryExpression clauses" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::QueryExpressionSyntax ^ QueryExpression(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::QueryClauseSyntax ^&gt; ^ clauses);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clauses" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="clauses">
 A list of all the query operators in this query expression. This list always
 contains at least one operator.
 </param>
        <summary>
 This class represents a query expression. A query expression is composed of one
 or more query operators in a row. The first query operator must be a From or
 Aggregate.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEventAccessorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax RaiseEventAccessorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax RaiseEventAccessorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RaiseEventAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RaiseEventAccessorBlock (accessorStatement As AccessorStatementSyntax) As AccessorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member RaiseEventAccessorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RaiseEventAccessorBlock accessorStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ RaiseEventAccessorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ accessorStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="accessorStatement">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" statement that
 begins the accessor block.
 </param>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEventAccessorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax RaiseEventAccessorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax RaiseEventAccessorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RaiseEventAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RaiseEventAccessorBlock (accessorStatement As AccessorStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As AccessorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member RaiseEventAccessorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RaiseEventAccessorBlock (accessorStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ RaiseEventAccessorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ accessorStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="accessorStatement">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" statement that
 begins the accessor block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEventAccessorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax RaiseEventAccessorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax RaiseEventAccessorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RaiseEventAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RaiseEventAccessorBlock (accessorStatement As AccessorStatementSyntax, statements As SyntaxList(Of StatementSyntax), endAccessorStatement As EndBlockStatementSyntax) As AccessorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member RaiseEventAccessorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RaiseEventAccessorBlock (accessorStatement, statements, endAccessorStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ RaiseEventAccessorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ accessorStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endAccessorStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endAccessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="accessorStatement">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" statement that
 begins the accessor block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <param name="endAccessorStatement">
 The "End Get", "End Set", "End AddHandler", "End RemoveHandler", or "End
 RaiseEvent" statement that ends the accessor block.
 </param>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEventAccessorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax RaiseEventAccessorStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax RaiseEventAccessorStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RaiseEventAccessorStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RaiseEventAccessorStatement () As AccessorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member RaiseEventAccessorStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RaiseEventAccessorStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ RaiseEventAccessorStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEventAccessorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax RaiseEventAccessorStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax RaiseEventAccessorStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RaiseEventAccessorStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RaiseEventAccessorStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, parameterList As ParameterListSyntax) As AccessorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member RaiseEventAccessorStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RaiseEventAccessorStatement (attributeLists, modifiers, parameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ RaiseEventAccessorStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEventAccessorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax RaiseEventAccessorStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax RaiseEventAccessorStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RaiseEventAccessorStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RaiseEventAccessorStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, accessorKeyword As SyntaxToken, parameterList As ParameterListSyntax) As AccessorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member RaiseEventAccessorStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RaiseEventAccessorStatement (attributeLists, modifiers, accessorKeyword, parameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ RaiseEventAccessorStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken accessorKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="accessorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="accessorKeyword">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" keyword that
 introduces this accessor declaration.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEventStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax RaiseEventStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax RaiseEventStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RaiseEventStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RaiseEventStatement (name As IdentifierNameSyntax) As RaiseEventStatementSyntax" />
      <MemberSignature Language="F#" Value="static member RaiseEventStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RaiseEventStatement name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RaiseEventStatementSyntax ^ RaiseEventStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">
 The name of the event being raised.
 </param>
        <summary>
 Represent a RaiseEvent statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEventStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax RaiseEventStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax RaiseEventStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RaiseEventStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RaiseEventStatement (name As IdentifierNameSyntax, argumentList As ArgumentListSyntax) As RaiseEventStatementSyntax" />
      <MemberSignature Language="F#" Value="static member RaiseEventStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RaiseEventStatement (name, argumentList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RaiseEventStatementSyntax ^ RaiseEventStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ name, Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ argumentList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="name">
 The name of the event being raised.
 </param>
        <param name="argumentList">
 The argument list, if present.
 </param>
        <summary>
 Represent a RaiseEvent statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEventStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax RaiseEventStatement (Microsoft.CodeAnalysis.SyntaxToken raiseEventKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax RaiseEventStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken raiseEventKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax name, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RaiseEventStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RaiseEventStatement (raiseEventKeyword As SyntaxToken, name As IdentifierNameSyntax, argumentList As ArgumentListSyntax) As RaiseEventStatementSyntax" />
      <MemberSignature Language="F#" Value="static member RaiseEventStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RaiseEventStatement (raiseEventKeyword, name, argumentList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RaiseEventStatementSyntax ^ RaiseEventStatement(Microsoft::CodeAnalysis::SyntaxToken raiseEventKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ name, Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ argumentList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="raiseEventKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="raiseEventKeyword">
 The "RaiseEvent" keyword
 </param>
        <param name="name">
 The name of the event being raised.
 </param>
        <param name="argumentList">
 The argument list, if present.
 </param>
        <summary>
 Represent a RaiseEvent statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeArgument">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax RangeArgument (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax lowerBound, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax upperBound);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax RangeArgument(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax lowerBound, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax upperBound) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RangeArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeArgument (lowerBound As ExpressionSyntax, upperBound As ExpressionSyntax) As RangeArgumentSyntax" />
      <MemberSignature Language="F#" Value="static member RangeArgument : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RangeArgument (lowerBound, upperBound)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RangeArgumentSyntax ^ RangeArgument(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ lowerBound, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ upperBound);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowerBound" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="upperBound" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="lowerBound">
 The lower bound of the range. This is typically the integer constant zero.
 </param>
        <param name="upperBound">
 The upper bound of the range.
 </param>
        <summary>
 Represents a range argument, such as "0 to 5", used in array bounds. The
 "Value" property represents the upper bound of the range.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeArgument">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax RangeArgument (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax lowerBound, Microsoft.CodeAnalysis.SyntaxToken toKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax upperBound);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax RangeArgument(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax lowerBound, valuetype Microsoft.CodeAnalysis.SyntaxToken toKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax upperBound) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RangeArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeArgument (lowerBound As ExpressionSyntax, toKeyword As SyntaxToken, upperBound As ExpressionSyntax) As RangeArgumentSyntax" />
      <MemberSignature Language="F#" Value="static member RangeArgument : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RangeArgument (lowerBound, toKeyword, upperBound)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RangeArgumentSyntax ^ RangeArgument(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ lowerBound, Microsoft::CodeAnalysis::SyntaxToken toKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ upperBound);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowerBound" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="toKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="upperBound" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="lowerBound">
 The lower bound of the range. This is typically the integer constant zero.
 </param>
        <param name="toKeyword">
 The "To" keyword.
 </param>
        <param name="upperBound">
 The upper bound of the range.
 </param>
        <summary>
 Represents a range argument, such as "0 to 5", used in array bounds. The
 "Value" property represents the upper bound of the range.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeCaseClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax RangeCaseClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax lowerBound, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax upperBound);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax RangeCaseClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax lowerBound, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax upperBound) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RangeCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeCaseClause (lowerBound As ExpressionSyntax, upperBound As ExpressionSyntax) As RangeCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member RangeCaseClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RangeCaseClause (lowerBound, upperBound)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RangeCaseClauseSyntax ^ RangeCaseClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ lowerBound, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ upperBound);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowerBound" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="upperBound" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="lowerBound">
 The lower bound of the range.
 </param>
        <param name="upperBound">
 The upper bound of the range.
 </param>
        <summary>
 Represents a range "expression To expression" in a Case.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeCaseClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax RangeCaseClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax lowerBound, Microsoft.CodeAnalysis.SyntaxToken toKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax upperBound);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax RangeCaseClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax lowerBound, valuetype Microsoft.CodeAnalysis.SyntaxToken toKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax upperBound) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RangeCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RangeCaseClause (lowerBound As ExpressionSyntax, toKeyword As SyntaxToken, upperBound As ExpressionSyntax) As RangeCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member RangeCaseClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RangeCaseClause (lowerBound, toKeyword, upperBound)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RangeCaseClauseSyntax ^ RangeCaseClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ lowerBound, Microsoft::CodeAnalysis::SyntaxToken toKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ upperBound);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowerBound" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="toKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="upperBound" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="lowerBound">
 The lower bound of the range.
 </param>
        <param name="toKeyword">
 The "To" keyword
 </param>
        <param name="upperBound">
 The upper bound of the range.
 </param>
        <summary>
 Represents a range "expression To expression" in a Case.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RedimClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax RedimClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax RedimClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax arrayBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RedimClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RedimClause (expression As ExpressionSyntax, arrayBounds As ArgumentListSyntax) As RedimClauseSyntax" />
      <MemberSignature Language="F#" Value="static member RedimClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RedimClause (expression, arrayBounds)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RedimClauseSyntax ^ RedimClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ arrayBounds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="arrayBounds" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The target of the ReDim statement.
 </param>
        <param name="arrayBounds">
 The ArraySizeInitializationModifier.
 </param>
        <summary>
 Represents a ReDim statement clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReDimPreserveStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimPreserveStatement (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt; clauses);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimPreserveStatement(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt; clauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReDimPreserveStatement(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReDimPreserveStatement (clauses As SeparatedSyntaxList(Of RedimClauseSyntax)) As ReDimStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ReDimPreserveStatement : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReDimPreserveStatement clauses" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ReDimStatementSyntax ^ ReDimPreserveStatement(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::RedimClauseSyntax ^&gt; clauses);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clauses" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="clauses">
 The list of ReDim clauses.
 </param>
        <summary>
 Represents a ReDim statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReDimPreserveStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimPreserveStatement (params Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[] clauses);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimPreserveStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[] clauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReDimPreserveStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReDimPreserveStatement (ParamArray clauses As RedimClauseSyntax()) As ReDimStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ReDimPreserveStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReDimPreserveStatement clauses" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ReDimStatementSyntax ^ ReDimPreserveStatement(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::RedimClauseSyntax ^&gt; ^ clauses);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clauses" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="clauses">
 The list of ReDim clauses.
 </param>
        <summary>
 Represents a ReDim statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReDimPreserveStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimPreserveStatement (Microsoft.CodeAnalysis.SyntaxToken reDimKeyword, Microsoft.CodeAnalysis.SyntaxToken preserveKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt; clauses);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimPreserveStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken reDimKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken preserveKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt; clauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReDimPreserveStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReDimPreserveStatement (reDimKeyword As SyntaxToken, preserveKeyword As SyntaxToken, clauses As SeparatedSyntaxList(Of RedimClauseSyntax)) As ReDimStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ReDimPreserveStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReDimPreserveStatement (reDimKeyword, preserveKeyword, clauses)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ReDimStatementSyntax ^ ReDimPreserveStatement(Microsoft::CodeAnalysis::SyntaxToken reDimKeyword, Microsoft::CodeAnalysis::SyntaxToken preserveKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::RedimClauseSyntax ^&gt; clauses);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reDimKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="preserveKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="clauses" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="reDimKeyword">
 The "ReDim" keyword.
 </param>
        <param name="preserveKeyword">
 Returns Nothing if Kind=ReDim, returns the "Preserve" keyword if
 Kind=RedimPreserve.
 </param>
        <param name="clauses">
 The list of ReDim clauses.
 </param>
        <summary>
 Represents a ReDim statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReDimStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimStatement (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt; clauses);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimStatement(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt; clauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReDimStatement(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReDimStatement (clauses As SeparatedSyntaxList(Of RedimClauseSyntax)) As ReDimStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ReDimStatement : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReDimStatement clauses" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ReDimStatementSyntax ^ ReDimStatement(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::RedimClauseSyntax ^&gt; clauses);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clauses" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="clauses">
 The list of ReDim clauses.
 </param>
        <summary>
 Represents a ReDim statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReDimStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimStatement (params Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[] clauses);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[] clauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReDimStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReDimStatement (ParamArray clauses As RedimClauseSyntax()) As ReDimStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ReDimStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReDimStatement clauses" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ReDimStatementSyntax ^ ReDimStatement(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::RedimClauseSyntax ^&gt; ^ clauses);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clauses" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="clauses">
 The list of ReDim clauses.
 </param>
        <summary>
 Represents a ReDim statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReDimStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt; clauses);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt; clauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReDimStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReDimStatement (kind As SyntaxKind, clauses As SeparatedSyntaxList(Of RedimClauseSyntax)) As ReDimStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ReDimStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReDimStatement (kind, clauses)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ReDimStatementSyntax ^ ReDimStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::RedimClauseSyntax ^&gt; clauses);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="clauses" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 ReDimStatementSyntax. One of ReDimStatement, ReDimPreserveStatement.
 </param>
        <param name="clauses">
 The list of ReDim clauses.
 </param>
        <summary>
 Represents a ReDim statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReDimStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, params Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[] clauses);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[] clauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReDimStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReDimStatement (kind As SyntaxKind, ParamArray clauses As RedimClauseSyntax()) As ReDimStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ReDimStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReDimStatement (kind, clauses)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ReDimStatementSyntax ^ ReDimStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, ... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::RedimClauseSyntax ^&gt; ^ clauses);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="clauses" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 ReDimStatementSyntax. One of ReDimStatement, ReDimPreserveStatement.
 </param>
        <param name="clauses">
 The list of ReDim clauses.
 </param>
        <summary>
 Represents a ReDim statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReDimStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimStatement (Microsoft.CodeAnalysis.SyntaxToken reDimKeyword, Microsoft.CodeAnalysis.SyntaxToken preserveKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt; clauses);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken reDimKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken preserveKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt; clauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReDimStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReDimStatement (reDimKeyword As SyntaxToken, preserveKeyword As SyntaxToken, clauses As SeparatedSyntaxList(Of RedimClauseSyntax)) As ReDimStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ReDimStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReDimStatement (reDimKeyword, preserveKeyword, clauses)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ReDimStatementSyntax ^ ReDimStatement(Microsoft::CodeAnalysis::SyntaxToken reDimKeyword, Microsoft::CodeAnalysis::SyntaxToken preserveKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::RedimClauseSyntax ^&gt; clauses);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reDimKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="preserveKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="clauses" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="reDimKeyword">
 The "ReDim" keyword.
 </param>
        <param name="preserveKeyword">
 Returns Nothing if Kind=ReDim, returns the "Preserve" keyword if
 Kind=RedimPreserve.
 </param>
        <param name="clauses">
 The list of ReDim clauses.
 </param>
        <summary>
 Represents a ReDim statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReDimStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken reDimKeyword, Microsoft.CodeAnalysis.SyntaxToken preserveKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt; clauses);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax ReDimStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken reDimKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken preserveKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt; clauses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReDimStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReDimStatement (kind As SyntaxKind, reDimKeyword As SyntaxToken, preserveKeyword As SyntaxToken, clauses As SeparatedSyntaxList(Of RedimClauseSyntax)) As ReDimStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ReDimStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReDimStatement (kind, reDimKeyword, preserveKeyword, clauses)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ReDimStatementSyntax ^ ReDimStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken reDimKeyword, Microsoft::CodeAnalysis::SyntaxToken preserveKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::RedimClauseSyntax ^&gt; clauses);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="reDimKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="preserveKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="clauses" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 ReDimStatementSyntax. One of ReDimStatement, ReDimPreserveStatement.
 </param>
        <param name="reDimKeyword">
 The "ReDim" keyword.
 </param>
        <param name="preserveKeyword">
 Returns Nothing if Kind=ReDim, returns the "Preserve" keyword if
 Kind=RedimPreserve.
 </param>
        <param name="clauses">
 The list of ReDim clauses.
 </param>
        <summary>
 Represents a ReDim statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax ReferenceDirectiveTrivia ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax ReferenceDirectiveTrivia() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReferenceDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceDirectiveTrivia () As ReferenceDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ReferenceDirectiveTrivia : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReferenceDirectiveTrivia " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ReferenceDirectiveTriviaSyntax ^ ReferenceDirectiveTrivia();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an #r directive appearing in scripts.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax ReferenceDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken referenceKeyword, Microsoft.CodeAnalysis.SyntaxToken file);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax ReferenceDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken referenceKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReferenceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceDirectiveTrivia (hashToken As SyntaxToken, referenceKeyword As SyntaxToken, file As SyntaxToken) As ReferenceDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member ReferenceDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReferenceDirectiveTrivia (hashToken, referenceKeyword, file)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ReferenceDirectiveTriviaSyntax ^ ReferenceDirectiveTrivia(Microsoft::CodeAnalysis::SyntaxToken hashToken, Microsoft::CodeAnalysis::SyntaxToken referenceKeyword, Microsoft::CodeAnalysis::SyntaxToken file);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="referenceKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="file" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="hashToken">
 The "#" token in a preprocessor directive.
 </param>
        <param name="referenceKeyword">To be added.</param>
        <param name="file">To be added.</param>
        <summary>
 Represents an #r directive appearing in scripts.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegionDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax RegionDirectiveTrivia ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax RegionDirectiveTrivia() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RegionDirectiveTrivia" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegionDirectiveTrivia () As RegionDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member RegionDirectiveTrivia : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RegionDirectiveTrivia " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RegionDirectiveTriviaSyntax ^ RegionDirectiveTrivia();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents the beginning of a #Region directive appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegionDirectiveTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax RegionDirectiveTrivia (Microsoft.CodeAnalysis.SyntaxToken hashToken, Microsoft.CodeAnalysis.SyntaxToken regionKeyword, Microsoft.CodeAnalysis.SyntaxToken name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax RegionDirectiveTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken hashToken, valuetype Microsoft.CodeAnalysis.SyntaxToken regionKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegionDirectiveTrivia (hashToken As SyntaxToken, regionKeyword As SyntaxToken, name As SyntaxToken) As RegionDirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member RegionDirectiveTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RegionDirectiveTrivia (hashToken, regionKeyword, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RegionDirectiveTriviaSyntax ^ RegionDirectiveTrivia(Microsoft::CodeAnalysis::SyntaxToken hashToken, Microsoft::CodeAnalysis::SyntaxToken regionKeyword, Microsoft::CodeAnalysis::SyntaxToken name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="regionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="hashToken">
 The "#" token in a preprocessor directive.
 </param>
        <param name="regionKeyword">
 The "Region" keyword.
 </param>
        <param name="name">
 The label of the code region being defined.
 </param>
        <summary>
 Represents the beginning of a #Region directive appearing in source.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RelationalCaseClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax RelationalCaseClause (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax RelationalCaseClause(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RelationalCaseClause(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RelationalCaseClause (kind As SyntaxKind, operatorToken As SyntaxToken, value As ExpressionSyntax) As RelationalCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member RelationalCaseClause : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RelationalCaseClause (kind, operatorToken, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RelationalCaseClauseSyntax ^ RelationalCaseClause(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 RelationalCaseClauseSyntax. One of CaseEqualsClause, CaseNotEqualsClause,
 CaseLessThanClause, CaseLessThanOrEqualClause, CaseGreaterThanOrEqualClause,
 CaseGreaterThanClause.
 </param>
        <param name="operatorToken">
 The operator in the relational clause. One of "=", "&lt;", "&gt;", "&lt;=" or
 "&gt;=".
 </param>
        <param name="value">
 The expression that denotes the value being tested against.
 </param>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RelationalCaseClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax RelationalCaseClause (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken isKeyword, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax RelationalCaseClause(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken isKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RelationalCaseClause(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RelationalCaseClause (kind As SyntaxKind, isKeyword As SyntaxToken, operatorToken As SyntaxToken, value As ExpressionSyntax) As RelationalCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member RelationalCaseClause : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RelationalCaseClause (kind, isKeyword, operatorToken, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::RelationalCaseClauseSyntax ^ RelationalCaseClause(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken isKeyword, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="isKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 RelationalCaseClauseSyntax. One of CaseEqualsClause, CaseNotEqualsClause,
 CaseLessThanClause, CaseLessThanOrEqualClause, CaseGreaterThanOrEqualClause,
 CaseGreaterThanClause.
 </param>
        <param name="isKeyword">
 The "Is" keyword, if present.
 </param>
        <param name="operatorToken">
 The operator in the relational clause. One of "=", "&lt;", "&gt;", "&lt;=" or
 "&gt;=".
 </param>
        <param name="value">
 The expression that denotes the value being tested against.
 </param>
        <summary>
 Represents a relation clause in a Case statement, such as "Is &gt; expression".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandlerAccessorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax RemoveHandlerAccessorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax RemoveHandlerAccessorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RemoveHandlerAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveHandlerAccessorBlock (accessorStatement As AccessorStatementSyntax) As AccessorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member RemoveHandlerAccessorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RemoveHandlerAccessorBlock accessorStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ RemoveHandlerAccessorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ accessorStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="accessorStatement">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" statement that
 begins the accessor block.
 </param>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandlerAccessorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax RemoveHandlerAccessorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax RemoveHandlerAccessorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RemoveHandlerAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveHandlerAccessorBlock (accessorStatement As AccessorStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As AccessorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member RemoveHandlerAccessorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RemoveHandlerAccessorBlock (accessorStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ RemoveHandlerAccessorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ accessorStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="accessorStatement">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" statement that
 begins the accessor block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandlerAccessorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax RemoveHandlerAccessorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax RemoveHandlerAccessorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RemoveHandlerAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveHandlerAccessorBlock (accessorStatement As AccessorStatementSyntax, statements As SyntaxList(Of StatementSyntax), endAccessorStatement As EndBlockStatementSyntax) As AccessorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member RemoveHandlerAccessorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RemoveHandlerAccessorBlock (accessorStatement, statements, endAccessorStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ RemoveHandlerAccessorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ accessorStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endAccessorStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endAccessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="accessorStatement">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" statement that
 begins the accessor block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <param name="endAccessorStatement">
 The "End Get", "End Set", "End AddHandler", "End RemoveHandler", or "End
 RaiseEvent" statement that ends the accessor block.
 </param>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandlerAccessorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax RemoveHandlerAccessorStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax RemoveHandlerAccessorStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RemoveHandlerAccessorStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveHandlerAccessorStatement () As AccessorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member RemoveHandlerAccessorStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RemoveHandlerAccessorStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ RemoveHandlerAccessorStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandlerAccessorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax RemoveHandlerAccessorStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax RemoveHandlerAccessorStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RemoveHandlerAccessorStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveHandlerAccessorStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, parameterList As ParameterListSyntax) As AccessorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member RemoveHandlerAccessorStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RemoveHandlerAccessorStatement (attributeLists, modifiers, parameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ RemoveHandlerAccessorStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandlerAccessorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax RemoveHandlerAccessorStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax RemoveHandlerAccessorStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RemoveHandlerAccessorStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveHandlerAccessorStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, accessorKeyword As SyntaxToken, parameterList As ParameterListSyntax) As AccessorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member RemoveHandlerAccessorStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RemoveHandlerAccessorStatement (attributeLists, modifiers, accessorKeyword, parameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ RemoveHandlerAccessorStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken accessorKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="accessorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="accessorKeyword">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" keyword that
 introduces this accessor declaration.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandlerStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax RemoveHandlerStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax RemoveHandlerStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RemoveHandlerStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveHandlerStatement (eventExpression As ExpressionSyntax, delegateExpression As ExpressionSyntax) As AddRemoveHandlerStatementSyntax" />
      <MemberSignature Language="F#" Value="static member RemoveHandlerStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RemoveHandlerStatement (eventExpression, delegateExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AddRemoveHandlerStatementSyntax ^ RemoveHandlerStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ eventExpression, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ delegateExpression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="delegateExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="eventExpression">
 The event being accessed.
 </param>
        <param name="delegateExpression">
 The delegate being added or removed.
 </param>
        <summary>
 Represents an AddHandler or RemoveHandler statement. The Kind property
 determines which one.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandlerStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax RemoveHandlerStatement (Microsoft.CodeAnalysis.SyntaxToken addHandlerOrRemoveHandlerKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax RemoveHandlerStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken addHandlerOrRemoveHandlerKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax eventExpression, valuetype Microsoft.CodeAnalysis.SyntaxToken commaToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax delegateExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RemoveHandlerStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveHandlerStatement (addHandlerOrRemoveHandlerKeyword As SyntaxToken, eventExpression As ExpressionSyntax, commaToken As SyntaxToken, delegateExpression As ExpressionSyntax) As AddRemoveHandlerStatementSyntax" />
      <MemberSignature Language="F#" Value="static member RemoveHandlerStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RemoveHandlerStatement (addHandlerOrRemoveHandlerKeyword, eventExpression, commaToken, delegateExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AddRemoveHandlerStatementSyntax ^ RemoveHandlerStatement(Microsoft::CodeAnalysis::SyntaxToken addHandlerOrRemoveHandlerKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ eventExpression, Microsoft::CodeAnalysis::SyntaxToken commaToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ delegateExpression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addHandlerOrRemoveHandlerKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="eventExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="commaToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="delegateExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="addHandlerOrRemoveHandlerKeyword">
 The "AddHandler" or "RemoveHandler" keyword.
 </param>
        <param name="eventExpression">
 The event being accessed.
 </param>
        <param name="commaToken">
 The "," token.
 </param>
        <param name="delegateExpression">
 The delegate being added or removed.
 </param>
        <summary>
 Represents an AddHandler or RemoveHandler statement. The Kind property
 determines which one.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeLabelStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeLabelStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeLabelStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeLabelStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ResumeLabelStatement () As ResumeStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ResumeLabelStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeLabelStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ResumeStatementSyntax ^ ResumeLabelStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a "Resume" statement. The Kind property can be used to determine if
 this is a "Resume", "Resume Next" or "Resume label" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeLabelStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeLabelStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeLabelStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeLabelStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ResumeLabelStatement (label As LabelSyntax) As ResumeStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ResumeLabelStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeLabelStatement label" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ResumeStatementSyntax ^ ResumeLabelStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="label">
 The label. The value of this depends on the Kind. If Kind=Resume, returns
 Nothing. If Kind=ResumeNext, wraps the keyword "Next", If Kind=ResumeLabel,
 wraps an Identifier or IntegerLiteralToken with the label or line number.
 </param>
        <summary>
 Represents a "Resume" statement. The Kind property can be used to determine if
 this is a "Resume", "Resume Next" or "Resume label" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeLabelStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeLabelStatement (Microsoft.CodeAnalysis.SyntaxToken resumeKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeLabelStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken resumeKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeLabelStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ResumeLabelStatement (resumeKeyword As SyntaxToken, label As LabelSyntax) As ResumeStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ResumeLabelStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeLabelStatement (resumeKeyword, label)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ResumeStatementSyntax ^ ResumeLabelStatement(Microsoft::CodeAnalysis::SyntaxToken resumeKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resumeKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="label" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="resumeKeyword">
 The "Resume" keyword.
 </param>
        <param name="label">
 The label. The value of this depends on the Kind. If Kind=Resume, returns
 Nothing. If Kind=ResumeNext, wraps the keyword "Next", If Kind=ResumeLabel,
 wraps an Identifier or IntegerLiteralToken with the label or line number.
 </param>
        <summary>
 Represents a "Resume" statement. The Kind property can be used to determine if
 this is a "Resume", "Resume Next" or "Resume label" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeNextStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeNextStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeNextStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeNextStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ResumeNextStatement () As ResumeStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ResumeNextStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeNextStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ResumeStatementSyntax ^ ResumeNextStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a "Resume" statement. The Kind property can be used to determine if
 this is a "Resume", "Resume Next" or "Resume label" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeNextStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeNextStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeNextStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeNextStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ResumeNextStatement (label As LabelSyntax) As ResumeStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ResumeNextStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeNextStatement label" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ResumeStatementSyntax ^ ResumeNextStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="label">
 The label. The value of this depends on the Kind. If Kind=Resume, returns
 Nothing. If Kind=ResumeNext, wraps the keyword "Next", If Kind=ResumeLabel,
 wraps an Identifier or IntegerLiteralToken with the label or line number.
 </param>
        <summary>
 Represents a "Resume" statement. The Kind property can be used to determine if
 this is a "Resume", "Resume Next" or "Resume label" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeNextStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeNextStatement (Microsoft.CodeAnalysis.SyntaxToken resumeKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeNextStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken resumeKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeNextStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ResumeNextStatement (resumeKeyword As SyntaxToken, label As LabelSyntax) As ResumeStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ResumeNextStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeNextStatement (resumeKeyword, label)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ResumeStatementSyntax ^ ResumeNextStatement(Microsoft::CodeAnalysis::SyntaxToken resumeKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resumeKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="label" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="resumeKeyword">
 The "Resume" keyword.
 </param>
        <param name="label">
 The label. The value of this depends on the Kind. If Kind=Resume, returns
 Nothing. If Kind=ResumeNext, wraps the keyword "Next", If Kind=ResumeLabel,
 wraps an Identifier or IntegerLiteralToken with the label or line number.
 </param>
        <summary>
 Represents a "Resume" statement. The Kind property can be used to determine if
 this is a "Resume", "Resume Next" or "Resume label" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ResumeStatement () As ResumeStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ResumeStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ResumeStatementSyntax ^ ResumeStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a "Resume" statement. The Kind property can be used to determine if
 this is a "Resume", "Resume Next" or "Resume label" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ResumeStatement (label As LabelSyntax) As ResumeStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ResumeStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeStatement label" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ResumeStatementSyntax ^ ResumeStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="label">
 The label. The value of this depends on the Kind. If Kind=Resume, returns
 Nothing. If Kind=ResumeNext, wraps the keyword "Next", If Kind=ResumeLabel,
 wraps an Identifier or IntegerLiteralToken with the label or line number.
 </param>
        <summary>
 Represents a "Resume" statement. The Kind property can be used to determine if
 this is a "Resume", "Resume Next" or "Resume label" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ResumeStatement (kind As SyntaxKind) As ResumeStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ResumeStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeStatement kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ResumeStatementSyntax ^ ResumeStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 ResumeStatementSyntax. One of ResumeStatement, ResumeLabelStatement,
 ResumeNextStatement.
 </param>
        <summary>
 Represents a "Resume" statement. The Kind property can be used to determine if
 this is a "Resume", "Resume Next" or "Resume label" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeStatement (Microsoft.CodeAnalysis.SyntaxToken resumeKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken resumeKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ResumeStatement (resumeKeyword As SyntaxToken, label As LabelSyntax) As ResumeStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ResumeStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeStatement (resumeKeyword, label)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ResumeStatementSyntax ^ ResumeStatement(Microsoft::CodeAnalysis::SyntaxToken resumeKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resumeKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="label" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="resumeKeyword">
 The "Resume" keyword.
 </param>
        <param name="label">
 The label. The value of this depends on the Kind. If Kind=Resume, returns
 Nothing. If Kind=ResumeNext, wraps the keyword "Next", If Kind=ResumeLabel,
 wraps an Identifier or IntegerLiteralToken with the label or line number.
 </param>
        <summary>
 Represents a "Resume" statement. The Kind property can be used to determine if
 this is a "Resume", "Resume Next" or "Resume label" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ResumeStatement (kind As SyntaxKind, label As LabelSyntax) As ResumeStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ResumeStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeStatement (kind, label)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ResumeStatementSyntax ^ ResumeStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="label" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 ResumeStatementSyntax. One of ResumeStatement, ResumeLabelStatement,
 ResumeNextStatement.
 </param>
        <param name="label">
 The label. The value of this depends on the Kind. If Kind=Resume, returns
 Nothing. If Kind=ResumeNext, wraps the keyword "Next", If Kind=ResumeLabel,
 wraps an Identifier or IntegerLiteralToken with the label or line number.
 </param>
        <summary>
 Represents a "Resume" statement. The Kind property can be used to determine if
 this is a "Resume", "Resume Next" or "Resume label" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken resumeKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax ResumeStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken resumeKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax label) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ResumeStatement (kind As SyntaxKind, resumeKeyword As SyntaxToken, label As LabelSyntax) As ResumeStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ResumeStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ResumeStatement (kind, resumeKeyword, label)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ResumeStatementSyntax ^ ResumeStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken resumeKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="resumeKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="label" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 ResumeStatementSyntax. One of ResumeStatement, ResumeLabelStatement,
 ResumeNextStatement.
 </param>
        <param name="resumeKeyword">
 The "Resume" keyword.
 </param>
        <param name="label">
 The label. The value of this depends on the Kind. If Kind=Resume, returns
 Nothing. If Kind=ResumeNext, wraps the keyword "Next", If Kind=ResumeLabel,
 wraps an Identifier or IntegerLiteralToken with the label or line number.
 </param>
        <summary>
 Represents a "Resume" statement. The Kind property can be used to determine if
 this is a "Resume", "Resume Next" or "Resume label" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax ReturnStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax ReturnStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReturnStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReturnStatement () As ReturnStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ReturnStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReturnStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ReturnStatementSyntax ^ ReturnStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a "Return" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax ReturnStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax ReturnStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReturnStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReturnStatement (expression As ExpressionSyntax) As ReturnStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ReturnStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReturnStatement expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ReturnStatementSyntax ^ ReturnStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression being returned, if present.
 </param>
        <summary>
 Represents a "Return" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax ReturnStatement (Microsoft.CodeAnalysis.SyntaxToken returnKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax ReturnStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken returnKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReturnStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReturnStatement (returnKeyword As SyntaxToken, expression As ExpressionSyntax) As ReturnStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ReturnStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ReturnStatement (returnKeyword, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ReturnStatementSyntax ^ ReturnStatement(Microsoft::CodeAnalysis::SyntaxToken returnKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="returnKeyword">
 The "Return" keyword.
 </param>
        <param name="expression">
 The expression being returned, if present.
 </param>
        <summary>
 Represents a "Return" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax RightShiftAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax RightShiftAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RightShiftAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssignmentStatement (left As ExpressionSyntax, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member RightShiftAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RightShiftAssignmentStatement (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ RightShiftAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax RightShiftAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax RightShiftAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RightShiftAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssignmentStatement (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member RightShiftAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RightShiftAssignmentStatement (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ RightShiftAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="operatorToken">
 The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
 "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax RightShiftExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax RightShiftExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RightShiftExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member RightShiftExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RightShiftExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ RightShiftExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax RightShiftExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax RightShiftExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RightShiftExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member RightShiftExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.RightShiftExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ RightShiftExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax SelectBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax selectStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax SelectBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax selectStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SelectBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SelectBlock (selectStatement As SelectStatementSyntax) As SelectBlockSyntax" />
      <MemberSignature Language="F#" Value="static member SelectBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SelectBlock selectStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectBlockSyntax ^ SelectBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectStatementSyntax ^ selectStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="selectStatement">
 The Select Case statement that begins the block.
 </param>
        <summary>
 Represents a Select Case block, including the Select Case that begins it, the
 contains Case blocks and the End Select.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax SelectBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax selectStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax&gt; caseBlocks);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax SelectBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax selectStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax&gt; caseBlocks) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SelectBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SelectBlock (selectStatement As SelectStatementSyntax, caseBlocks As SyntaxList(Of CaseBlockSyntax)) As SelectBlockSyntax" />
      <MemberSignature Language="F#" Value="static member SelectBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SelectBlock (selectStatement, caseBlocks)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectBlockSyntax ^ SelectBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectStatementSyntax ^ selectStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseBlockSyntax ^&gt; caseBlocks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax" />
        <Parameter Name="caseBlocks" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="selectStatement">
 The Select Case statement that begins the block.
 </param>
        <param name="caseBlocks">
 A list of the contained Case blocks.
 </param>
        <summary>
 Represents a Select Case block, including the Select Case that begins it, the
 contains Case blocks and the End Select.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax SelectBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax selectStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax&gt; caseBlocks, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSelectStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax SelectBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax selectStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax&gt; caseBlocks, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSelectStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SelectBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SelectBlock (selectStatement As SelectStatementSyntax, caseBlocks As SyntaxList(Of CaseBlockSyntax), endSelectStatement As EndBlockStatementSyntax) As SelectBlockSyntax" />
      <MemberSignature Language="F#" Value="static member SelectBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SelectBlock (selectStatement, caseBlocks, endSelectStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectBlockSyntax ^ SelectBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectStatementSyntax ^ selectStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseBlockSyntax ^&gt; caseBlocks, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endSelectStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax" />
        <Parameter Name="caseBlocks" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax&gt;" />
        <Parameter Name="endSelectStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="selectStatement">
 The Select Case statement that begins the block.
 </param>
        <param name="caseBlocks">
 A list of the contained Case blocks.
 </param>
        <param name="endSelectStatement">
 The End Select statement that ends the block.
 </param>
        <summary>
 Represents a Select Case block, including the Select Case that begins it, the
 contains Case blocks and the End Select.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax SelectClause (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax SelectClause(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SelectClause (variables As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)) As SelectClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SelectClause : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SelectClause variables" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectClauseSyntax ^ SelectClause(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^&gt; variables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">
 The list of expression range variables being defined by the Select query
 operator.
 </param>
        <summary>
 Represents the "Select" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax SelectClause (params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[] variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax SelectClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[] variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SelectClause (ParamArray variables As ExpressionRangeVariableSyntax()) As SelectClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SelectClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SelectClause variables" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectClauseSyntax ^ SelectClause(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^&gt; ^ variables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables">
 The list of expression range variables being defined by the Select query
 operator.
 </param>
        <summary>
 Represents the "Select" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax SelectClause (Microsoft.CodeAnalysis.SyntaxToken selectKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax SelectClause(valuetype Microsoft.CodeAnalysis.SyntaxToken selectKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SelectClause (selectKeyword As SyntaxToken, variables As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)) As SelectClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SelectClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SelectClause (selectKeyword, variables)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectClauseSyntax ^ SelectClause(Microsoft::CodeAnalysis::SyntaxToken selectKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^&gt; variables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="selectKeyword">
 The "Select" keyword.
 </param>
        <param name="variables">
 The list of expression range variables being defined by the Select query
 operator.
 </param>
        <summary>
 Represents the "Select" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax SelectStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax SelectStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SelectStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SelectStatement (expression As ExpressionSyntax) As SelectStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SelectStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SelectStatement expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectStatementSyntax ^ SelectStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The value that branching is based on.
 </param>
        <summary>
 Represents a Select Case statement. This statement always occurs as the Begin
 of a SelectBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax SelectStatement (Microsoft.CodeAnalysis.SyntaxToken selectKeyword, Microsoft.CodeAnalysis.SyntaxToken caseKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax SelectStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken selectKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken caseKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SelectStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SelectStatement (selectKeyword As SyntaxToken, caseKeyword As SyntaxToken, expression As ExpressionSyntax) As SelectStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SelectStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SelectStatement (selectKeyword, caseKeyword, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectStatementSyntax ^ SelectStatement(Microsoft::CodeAnalysis::SyntaxToken selectKeyword, Microsoft::CodeAnalysis::SyntaxToken caseKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="caseKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="selectKeyword">
 The "Select" keyword.
 </param>
        <param name="caseKeyword">
 The "Case" keyword, if present.
 </param>
        <param name="expression">
 The value that branching is based on.
 </param>
        <summary>
 Represents a Select Case statement. This statement always occurs as the Begin
 of a SelectBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatedList&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; SeparatedList&lt;TNode&gt; () where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; SeparatedList&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SeparatedList``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SeparatedList(Of TNode As SyntaxNode) () As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member SeparatedList : unit -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SeparatedList " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNode&gt;&#xA; where TNode : Microsoft::CodeAnalysis::SyntaxNode static Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; SeparatedList();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        <summary>
 Creates an empty separated list.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatedList&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; SeparatedList&lt;TNode&gt; (Microsoft.CodeAnalysis.SyntaxNodeOrTokenList nodesAndTokens) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; SeparatedList&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(valuetype Microsoft.CodeAnalysis.SyntaxNodeOrTokenList nodesAndTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SeparatedList``1(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SeparatedList(Of TNode As SyntaxNode) (nodesAndTokens As SyntaxNodeOrTokenList) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member SeparatedList : Microsoft.CodeAnalysis.SyntaxNodeOrTokenList -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SeparatedList nodesAndTokens" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNode&gt;&#xA; where TNode : Microsoft::CodeAnalysis::SyntaxNode static Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; SeparatedList(Microsoft::CodeAnalysis::SyntaxNodeOrTokenList nodesAndTokens);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="nodesAndTokens" Type="Microsoft.CodeAnalysis.SyntaxNodeOrTokenList" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        <param name="nodesAndTokens">An alternating list of nodes and tokens.</param>
        <summary>
 Creates a separated list from a <see cref="T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList" />.
 The <see cref="T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList" /> must start with a node and alternate between nodes and separator tokens.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatedList&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; SeparatedList&lt;TNode&gt; (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt; nodesAndTokens) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; SeparatedList&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt; nodesAndTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SeparatedList(Of TNode As SyntaxNode) (nodesAndTokens As IEnumerable(Of SyntaxNodeOrToken)) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member SeparatedList : seq&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt; -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SeparatedList nodesAndTokens" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNode&gt;&#xA; where TNode : Microsoft::CodeAnalysis::SyntaxNode static Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; SeparatedList(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxNodeOrToken&gt; ^ nodesAndTokens);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="nodesAndTokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxNodeOrToken&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        <param name="nodesAndTokens">A alternating sequence of nodes and tokens.</param>
        <summary>
 Creates a separated list from a sequence of nodes or tokens.
 The sequence must start with a node and alternate between nodes and separator tokens.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatedList&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; SeparatedList&lt;TNode&gt; (System.Collections.Generic.IEnumerable&lt;TNode&gt; nodes) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; SeparatedList&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TNode&gt; nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SeparatedList(Of TNode As SyntaxNode) (nodes As IEnumerable(Of TNode)) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member SeparatedList : seq&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SeparatedList nodes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNode&gt;&#xA; where TNode : Microsoft::CodeAnalysis::SyntaxNode static Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; SeparatedList(System::Collections::Generic::IEnumerable&lt;TNode&gt; ^ nodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        <param name="nodes">A sequence of syntax nodes.</param>
        <summary>
 Creates a separated list of nodes from a sequence of nodes, synthesizing comma separators in between.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatedList&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; SeparatedList&lt;TNode&gt; (System.Collections.Generic.IEnumerable&lt;TNode&gt; nodes, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; separators) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; SeparatedList&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TNode&gt; nodes, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; separators) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SeparatedList(Of TNode As SyntaxNode) (nodes As IEnumerable(Of TNode), separators As IEnumerable(Of SyntaxToken)) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member SeparatedList : seq&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * seq&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SeparatedList (nodes, separators)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNode&gt;&#xA; where TNode : Microsoft::CodeAnalysis::SyntaxNode static Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; SeparatedList(System::Collections::Generic::IEnumerable&lt;TNode&gt; ^ nodes, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxToken&gt; ^ separators);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;TNode&gt;" />
        <Parameter Name="separators" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        <param name="nodes">A sequence of syntax nodes.</param>
        <param name="separators">A sequence of token to be interleaved between the nodes. The number of tokens must
 be one less than the number of nodes.</param>
        <summary>
 Creates a separated list of nodes from a sequence of nodes and a sequence of separator tokens.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax SetAccessorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax SetAccessorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SetAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetAccessorBlock (accessorStatement As AccessorStatementSyntax) As AccessorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member SetAccessorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SetAccessorBlock accessorStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ SetAccessorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ accessorStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="accessorStatement">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" statement that
 begins the accessor block.
 </param>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax SetAccessorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax SetAccessorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SetAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetAccessorBlock (accessorStatement As AccessorStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As AccessorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member SetAccessorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SetAccessorBlock (accessorStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ SetAccessorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ accessorStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="accessorStatement">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" statement that
 begins the accessor block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessorBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax SetAccessorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax SetAccessorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax accessorStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endAccessorStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SetAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetAccessorBlock (accessorStatement As AccessorStatementSyntax, statements As SyntaxList(Of StatementSyntax), endAccessorStatement As EndBlockStatementSyntax) As AccessorBlockSyntax" />
      <MemberSignature Language="F#" Value="static member SetAccessorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SetAccessorBlock (accessorStatement, statements, endAccessorStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ SetAccessorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ accessorStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endAccessorStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endAccessorStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="accessorStatement">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" statement that
 begins the accessor block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <param name="endAccessorStatement">
 The "End Get", "End Set", "End AddHandler", "End RemoveHandler", or "End
 RaiseEvent" statement that ends the accessor block.
 </param>
        <summary>
 Represents an accessor block member declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 Examples include property accessors and custom event accessors.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax SetAccessorStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax SetAccessorStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SetAccessorStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetAccessorStatement () As AccessorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SetAccessorStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SetAccessorStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ SetAccessorStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax SetAccessorStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax SetAccessorStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SetAccessorStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetAccessorStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, parameterList As ParameterListSyntax) As AccessorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SetAccessorStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SetAccessorStatement (attributeLists, modifiers, parameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ SetAccessorStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessorStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax SetAccessorStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax SetAccessorStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken accessorKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SetAccessorStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetAccessorStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, accessorKeyword As SyntaxToken, parameterList As ParameterListSyntax) As AccessorStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SetAccessorStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SetAccessorStatement (attributeLists, modifiers, accessorKeyword, parameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ SetAccessorStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken accessorKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="accessorKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="accessorKeyword">
 The "Get", "Set", "AddHandler", "RemoveHandler", or "RaiseEvent" keyword that
 introduces this accessor declaration.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <summary>
 Represents a Get or Set accessor on a property declaration or an AddHandler,
 RemoveHandler or RaiseEvent accessor on a custom event declaration. The Kind of
 the node determines what kind of accessor this is. This statement is always the
 Begin of a BlockNode, and the body of the accessor is the Body of that node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleArgument">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax SimpleArgument (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax SimpleArgument(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleArgument (expression As ExpressionSyntax) As SimpleArgumentSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleArgument : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleArgument expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleArgumentSyntax ^ SimpleArgument(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression that is the argument.
 </param>
        <summary>
 Represents an argument that is just an optional argument name and an
 expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleArgument">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax SimpleArgument (Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax nameColonEquals, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax SimpleArgument(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax nameColonEquals, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleArgument (nameColonEquals As NameColonEqualsSyntax, expression As ExpressionSyntax) As SimpleArgumentSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleArgument : Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleArgument (nameColonEquals, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleArgumentSyntax ^ SimpleArgument(Microsoft::CodeAnalysis::VisualBasic::Syntax::NameColonEqualsSyntax ^ nameColonEquals, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nameColonEquals" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="nameColonEquals">
 The optional name and ":=" prefix of a named argument.
 </param>
        <param name="expression">
 The expression that is the argument.
 </param>
        <summary>
 Represents an argument that is just an optional argument name and an
 expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleAsClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax SimpleAsClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax SimpleAsClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleAsClause (type As TypeSyntax) As SimpleAsClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleAsClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleAsClause type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ SimpleAsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">
 The type-name part of the As clause.
 </param>
        <summary>
 Represents an "As {type-name}" clause that does not have an initializer or
 "New". The type has optional attributes associated with it, although attributes
 are not permitted in all possible places where this node occurs.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleAsClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax SimpleAsClause (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax SimpleAsClause(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleAsClause(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleAsClause (attributeLists As SyntaxList(Of AttributeListSyntax), type As TypeSyntax) As SimpleAsClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleAsClause : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleAsClause (attributeLists, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ SimpleAsClause(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on the type. If no attributes were specified, an
 empty list is returned.
 </param>
        <param name="type">
 The type-name part of the As clause.
 </param>
        <summary>
 Represents an "As {type-name}" clause that does not have an initializer or
 "New". The type has optional attributes associated with it, although attributes
 are not permitted in all possible places where this node occurs.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleAsClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax SimpleAsClause (Microsoft.CodeAnalysis.SyntaxToken asKeyword, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax SimpleAsClause(valuetype Microsoft.CodeAnalysis.SyntaxToken asKeyword, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleAsClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleAsClause (asKeyword As SyntaxToken, attributeLists As SyntaxList(Of AttributeListSyntax), type As TypeSyntax) As SimpleAsClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleAsClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleAsClause (asKeyword, attributeLists, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ SimpleAsClause(Microsoft::CodeAnalysis::SyntaxToken asKeyword, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="asKeyword">
 The "As" keyword.
 </param>
        <param name="attributeLists">
 A list of all attribute lists on the type. If no attributes were specified, an
 empty list is returned.
 </param>
        <param name="type">
 The type-name part of the As clause.
 </param>
        <summary>
 Represents an "As {type-name}" clause that does not have an initializer or
 "New". The type has optional attributes associated with it, although attributes
 are not permitted in all possible places where this node occurs.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax SimpleAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax SimpleAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleAssignmentStatement (left As ExpressionSyntax, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleAssignmentStatement (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ SimpleAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax SimpleAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax SimpleAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleAssignmentStatement (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleAssignmentStatement (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ SimpleAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="operatorToken">
 The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
 "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleCaseClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleCaseClauseSyntax SimpleCaseClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleCaseClauseSyntax SimpleCaseClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleCaseClause (value As ExpressionSyntax) As SimpleCaseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleCaseClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleCaseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleCaseClause value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleCaseClauseSyntax ^ SimpleCaseClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleCaseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="value">
 The expression that denotes the value being tested against.
 </param>
        <summary>
 Represents a single value in a Case.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleDoLoopBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax SimpleDoLoopBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax SimpleDoLoopBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleDoLoopBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleDoLoopBlock (doStatement As DoStatementSyntax, loopStatement As LoopStatementSyntax) As DoLoopBlockSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleDoLoopBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleDoLoopBlock (doStatement, loopStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoLoopBlockSyntax ^ SimpleDoLoopBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ doStatement, Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ loopStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="doStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" />
        <Parameter Name="loopStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="doStatement">
 The Do statement that begins the block.
 </param>
        <param name="loopStatement">
 The Loop statement that ends the block.
 </param>
        <summary>
 Represents a Do-Loop block. The Kind property can be used to determine if this
 is a Do While, Do Until, Do Loop While, Do Loop Until, or infinite Do Loop.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleDoLoopBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax SimpleDoLoopBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax SimpleDoLoopBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax doStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax loopStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleDoLoopBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleDoLoopBlock (doStatement As DoStatementSyntax, statements As SyntaxList(Of StatementSyntax), loopStatement As LoopStatementSyntax) As DoLoopBlockSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleDoLoopBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleDoLoopBlock (doStatement, statements, loopStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoLoopBlockSyntax ^ SimpleDoLoopBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ doStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ loopStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="doStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="loopStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="doStatement">
 The Do statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <param name="loopStatement">
 The Loop statement that ends the block.
 </param>
        <summary>
 Represents a Do-Loop block. The Kind property can be used to determine if this
 is a Do While, Do Until, Do Loop While, Do Loop Until, or infinite Do Loop.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleDoStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax SimpleDoStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax SimpleDoStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleDoStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleDoStatement () As DoStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleDoStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleDoStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ SimpleDoStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 The Do statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleDoStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax SimpleDoStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax SimpleDoStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleDoStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleDoStatement (whileOrUntilClause As WhileOrUntilClauseSyntax) As DoStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleDoStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleDoStatement whileOrUntilClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ SimpleDoStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ whileOrUntilClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whileOrUntilClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="whileOrUntilClause">
 The "While expression" or "Until expression" clause of the Do statement, if
 present.
 </param>
        <summary>
 The Do statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleDoStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax SimpleDoStatement (Microsoft.CodeAnalysis.SyntaxToken doKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax SimpleDoStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken doKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleDoStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleDoStatement (doKeyword As SyntaxToken, whileOrUntilClause As WhileOrUntilClauseSyntax) As DoStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleDoStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleDoStatement (doKeyword, whileOrUntilClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ SimpleDoStatement(Microsoft::CodeAnalysis::SyntaxToken doKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ whileOrUntilClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="doKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="whileOrUntilClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="doKeyword">
 The "Do" keyword.
 </param>
        <param name="whileOrUntilClause">
 The "While expression" or "Until expression" clause of the Do statement, if
 present.
 </param>
        <summary>
 The Do statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleImportsClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax SimpleImportsClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax SimpleImportsClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleImportsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleImportsClause (name As NameSyntax) As SimpleImportsClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleImportsClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleImportsClause name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleImportsClauseSyntax ^ SimpleImportsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::NameSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">
 The namespace or type being imported.
 </param>
        <summary>
 Represents the clause of an Imports statement that imports all members of a
 type or namespace or aliases a type or namespace.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleImportsClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax SimpleImportsClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax alias, Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax SimpleImportsClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax alias, class Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleImportsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleImportsClause (alias As ImportAliasClauseSyntax, name As NameSyntax) As SimpleImportsClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleImportsClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleImportsClause (alias, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleImportsClauseSyntax ^ SimpleImportsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportAliasClauseSyntax ^ alias, Microsoft::CodeAnalysis::VisualBasic::Syntax::NameSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alias" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NameSyntax" />
      </Parameters>
      <Docs>
        <param name="alias">
 An optional alias for the namespace or type being imported.
 </param>
        <param name="name">
 The namespace or type being imported.
 </param>
        <summary>
 Represents the clause of an Imports statement that imports all members of a
 type or namespace or aliases a type or namespace.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleJoinClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax SimpleJoinClause (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; joinedVariables, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; joinConditions);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax SimpleJoinClause(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; joinedVariables, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; joinConditions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleJoinClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax},Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleJoinClause (joinedVariables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), joinConditions As SeparatedSyntaxList(Of JoinConditionSyntax)) As SimpleJoinClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleJoinClause : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleJoinClause (joinedVariables, joinConditions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleJoinClauseSyntax ^ SimpleJoinClause(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^&gt; joinedVariables, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinConditionSyntax ^&gt; joinConditions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinedVariables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt;" />
        <Parameter Name="joinConditions" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="joinedVariables">
 Defines the collection range variables being joined to.
 </param>
        <param name="joinConditions">
 The conditions indicating what expressions to compare during the join. Each
 condition is a JoinCondition, and the separators are "And" keywords.
 </param>
        <summary>
 Represents a Join query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleJoinClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax SimpleJoinClause (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; joinedVariables, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt; additionalJoins, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; joinConditions);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax SimpleJoinClause(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; joinedVariables, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt; additionalJoins, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; joinConditions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleJoinClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax},Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleJoinClause (joinedVariables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), additionalJoins As SyntaxList(Of JoinClauseSyntax), joinConditions As SeparatedSyntaxList(Of JoinConditionSyntax)) As SimpleJoinClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleJoinClause : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt; * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleJoinClause (joinedVariables, additionalJoins, joinConditions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleJoinClauseSyntax ^ SimpleJoinClause(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^&gt; joinedVariables, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinClauseSyntax ^&gt; additionalJoins, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinConditionSyntax ^&gt; joinConditions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinedVariables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt;" />
        <Parameter Name="additionalJoins" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt;" />
        <Parameter Name="joinConditions" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="joinedVariables">
 Defines the collection range variables being joined to.
 </param>
        <param name="additionalJoins">
 An additional Join or Group Join query operator.
 </param>
        <param name="joinConditions">
 The conditions indicating what expressions to compare during the join. Each
 condition is a JoinCondition, and the separators are "And" keywords.
 </param>
        <summary>
 Represents a Join query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleJoinClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax SimpleJoinClause (Microsoft.CodeAnalysis.SyntaxToken joinKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; joinedVariables, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt; additionalJoins, Microsoft.CodeAnalysis.SyntaxToken onKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; joinConditions);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax SimpleJoinClause(valuetype Microsoft.CodeAnalysis.SyntaxToken joinKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; joinedVariables, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt; additionalJoins, valuetype Microsoft.CodeAnalysis.SyntaxToken onKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; joinConditions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleJoinClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleJoinClause (joinKeyword As SyntaxToken, joinedVariables As SeparatedSyntaxList(Of CollectionRangeVariableSyntax), additionalJoins As SyntaxList(Of JoinClauseSyntax), onKeyword As SyntaxToken, joinConditions As SeparatedSyntaxList(Of JoinConditionSyntax)) As SimpleJoinClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleJoinClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleJoinClause (joinKeyword, joinedVariables, additionalJoins, onKeyword, joinConditions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleJoinClauseSyntax ^ SimpleJoinClause(Microsoft::CodeAnalysis::SyntaxToken joinKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^&gt; joinedVariables, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinClauseSyntax ^&gt; additionalJoins, Microsoft::CodeAnalysis::SyntaxToken onKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinConditionSyntax ^&gt; joinConditions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="joinedVariables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax&gt;" />
        <Parameter Name="additionalJoins" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax&gt;" />
        <Parameter Name="onKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="joinConditions" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="joinKeyword">
 The "Join" keyword.
 </param>
        <param name="joinedVariables">
 Defines the collection range variables being joined to.
 </param>
        <param name="additionalJoins">
 An additional Join or Group Join query operator.
 </param>
        <param name="onKeyword">
 The "On" keyword.
 </param>
        <param name="joinConditions">
 The conditions indicating what expressions to compare during the join. Each
 condition is a JoinCondition, and the separators are "And" keywords.
 </param>
        <summary>
 Represents a Join query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleLoopStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax SimpleLoopStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax SimpleLoopStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleLoopStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleLoopStatement () As LoopStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleLoopStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleLoopStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ SimpleLoopStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 The Loop statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleLoopStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax SimpleLoopStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax SimpleLoopStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleLoopStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleLoopStatement (whileOrUntilClause As WhileOrUntilClauseSyntax) As LoopStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleLoopStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleLoopStatement whileOrUntilClause" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ SimpleLoopStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ whileOrUntilClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whileOrUntilClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="whileOrUntilClause">
 The "While expression" or "Until expression" clause of the Loop statement, if
 present.
 </param>
        <summary>
 The Loop statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleLoopStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax SimpleLoopStatement (Microsoft.CodeAnalysis.SyntaxToken loopKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax SimpleLoopStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken loopKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax whileOrUntilClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleLoopStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleLoopStatement (loopKeyword As SyntaxToken, whileOrUntilClause As WhileOrUntilClauseSyntax) As LoopStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleLoopStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleLoopStatement (loopKeyword, whileOrUntilClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ SimpleLoopStatement(Microsoft::CodeAnalysis::SyntaxToken loopKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ whileOrUntilClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loopKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="whileOrUntilClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="loopKeyword">
 The "Loop" keyword.
 </param>
        <param name="whileOrUntilClause">
 The "While expression" or "Until expression" clause of the Loop statement, if
 present.
 </param>
        <summary>
 The Loop statement that begins a Do-Loop block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleMemberAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax SimpleMemberAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax SimpleMemberAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleMemberAccessExpression (name As SimpleNameSyntax) As MemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleMemberAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleMemberAccessExpression name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MemberAccessExpressionSyntax ^ SimpleMemberAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleNameSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">
 The identifier after the "." or "!" token.
 </param>
        <summary>
 Represents member access (.name) or dictionary access (!name). The Kind
 property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleMemberAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax SimpleMemberAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax SimpleMemberAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleMemberAccessExpression (expression As ExpressionSyntax, name As SimpleNameSyntax) As MemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleMemberAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleMemberAccessExpression (expression, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MemberAccessExpressionSyntax ^ SimpleMemberAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleNameSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression on the left-hand-side of the "." or "!" token.
 </param>
        <param name="name">
 The identifier after the "." or "!" token.
 </param>
        <summary>
 Represents member access (.name) or dictionary access (!name). The Kind
 property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleMemberAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax SimpleMemberAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax SimpleMemberAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SimpleMemberAccessExpression (expression As ExpressionSyntax, operatorToken As SyntaxToken, name As SimpleNameSyntax) As MemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member SimpleMemberAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SimpleMemberAccessExpression (expression, operatorToken, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MemberAccessExpressionSyntax ^ SimpleMemberAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleNameSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression on the left-hand-side of the "." or "!" token.
 </param>
        <param name="operatorToken">
 The "." or "!" token.
 </param>
        <param name="name">
 The identifier after the "." or "!" token.
 </param>
        <summary>
 Represents member access (.name) or dictionary access (!name). The Kind
 property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleLineElseClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax SingleLineElseClause ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax SingleLineElseClause() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingleLineElseClause" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SingleLineElseClause () As SingleLineElseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SingleLineElseClause : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingleLineElseClause " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineElseClauseSyntax ^ SingleLineElseClause();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents the "Else ..." clause of a single-line "If" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleLineElseClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax SingleLineElseClause (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax SingleLineElseClause(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingleLineElseClause(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SingleLineElseClause (statements As SyntaxList(Of StatementSyntax)) As SingleLineElseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SingleLineElseClause : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingleLineElseClause statements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineElseClauseSyntax ^ SingleLineElseClause(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="statements">
 A list of statements to be executed. Multiple statements must be separated by
 colons.
 </param>
        <summary>
 Represents the "Else ..." clause of a single-line "If" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleLineElseClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax SingleLineElseClause (Microsoft.CodeAnalysis.SyntaxToken elseKeyword, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax SingleLineElseClause(valuetype Microsoft.CodeAnalysis.SyntaxToken elseKeyword, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingleLineElseClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SingleLineElseClause (elseKeyword As SyntaxToken, statements As SyntaxList(Of StatementSyntax)) As SingleLineElseClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SingleLineElseClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingleLineElseClause (elseKeyword, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineElseClauseSyntax ^ SingleLineElseClause(Microsoft::CodeAnalysis::SyntaxToken elseKeyword, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elseKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="elseKeyword">
 The "Else" keyword.
 </param>
        <param name="statements">
 A list of statements to be executed. Multiple statements must be separated by
 colons.
 </param>
        <summary>
 Represents the "Else ..." clause of a single-line "If" statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleLineFunctionLambdaExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax SingleLineFunctionLambdaExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode body);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax SingleLineFunctionLambdaExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingleLineFunctionLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax,Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SingleLineFunctionLambdaExpression (subOrFunctionHeader As LambdaHeaderSyntax, body As VisualBasicSyntaxNode) As SingleLineLambdaExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member SingleLineFunctionLambdaExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax * Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingleLineFunctionLambdaExpression (subOrFunctionHeader, body)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineLambdaExpressionSyntax ^ SingleLineFunctionLambdaExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ subOrFunctionHeader, Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxNode ^ body);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subOrFunctionHeader" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode" />
      </Parameters>
      <Docs>
        <param name="subOrFunctionHeader">
 The header part of the lambda that includes the "Sub" or "Function" keyword,
 the argument list and return type.
 </param>
        <param name="body">
 The body of the lambda. Depending on the kind of lambda, this is either a
 Statement (single-line Sub lambda) or Expression (single-line Function).
 </param>
        <summary>
 Represents a single line lambda expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleLineIfStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax SingleLineIfStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax SingleLineIfStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingleLineIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SingleLineIfStatement (condition As ExpressionSyntax) As SingleLineIfStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SingleLineIfStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingleLineIfStatement condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineIfStatementSyntax ^ SingleLineIfStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="condition">
 The condition expression to be evaluated.
 </param>
        <summary>
 Represents a single-line "If ... Then ... Else ..." statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleLineIfStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax SingleLineIfStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax elseClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax SingleLineIfStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax elseClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingleLineIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SingleLineIfStatement (condition As ExpressionSyntax, statements As SyntaxList(Of StatementSyntax), elseClause As SingleLineElseClauseSyntax) As SingleLineIfStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SingleLineIfStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingleLineIfStatement (condition, statements, elseClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineIfStatementSyntax ^ SingleLineIfStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineElseClauseSyntax ^ elseClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="elseClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="condition">
 The condition expression to be evaluated.
 </param>
        <param name="statements">
 A list of statements to be executed if the condition expression evaluates as
 true. Multiple statements must be separated by colons.
 </param>
        <param name="elseClause">
 An "Else" clause to be executed if the condition expression evaluates as false.
 </param>
        <summary>
 Represents a single-line "If ... Then ... Else ..." statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleLineIfStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax SingleLineIfStatement (Microsoft.CodeAnalysis.SyntaxToken ifKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken thenKeyword, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax elseClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax SingleLineIfStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken ifKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, valuetype Microsoft.CodeAnalysis.SyntaxToken thenKeyword, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax elseClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingleLineIfStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SingleLineIfStatement (ifKeyword As SyntaxToken, condition As ExpressionSyntax, thenKeyword As SyntaxToken, statements As SyntaxList(Of StatementSyntax), elseClause As SingleLineElseClauseSyntax) As SingleLineIfStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SingleLineIfStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingleLineIfStatement (ifKeyword, condition, thenKeyword, statements, elseClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineIfStatementSyntax ^ SingleLineIfStatement(Microsoft::CodeAnalysis::SyntaxToken ifKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition, Microsoft::CodeAnalysis::SyntaxToken thenKeyword, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineElseClauseSyntax ^ elseClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="thenKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="elseClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="ifKeyword">
 The "If" keyword.
 </param>
        <param name="condition">
 The condition expression to be evaluated.
 </param>
        <param name="thenKeyword">
 The "Then" keyword.
 </param>
        <param name="statements">
 A list of statements to be executed if the condition expression evaluates as
 true. Multiple statements must be separated by colons.
 </param>
        <param name="elseClause">
 An "Else" clause to be executed if the condition expression evaluates as false.
 </param>
        <summary>
 Represents a single-line "If ... Then ... Else ..." statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleLineLambdaExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax SingleLineLambdaExpression (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode body);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax SingleLineLambdaExpression(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingleLineLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax,Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SingleLineLambdaExpression (kind As SyntaxKind, subOrFunctionHeader As LambdaHeaderSyntax, body As VisualBasicSyntaxNode) As SingleLineLambdaExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member SingleLineLambdaExpression : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax * Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingleLineLambdaExpression (kind, subOrFunctionHeader, body)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineLambdaExpressionSyntax ^ SingleLineLambdaExpression(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ subOrFunctionHeader, Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxNode ^ body);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="subOrFunctionHeader" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 SingleLineLambdaExpressionSyntax. One of SingleLineFunctionLambdaExpression,
 SingleLineSubLambdaExpression.
 </param>
        <param name="subOrFunctionHeader">
 The header part of the lambda that includes the "Sub" or "Function" keyword,
 the argument list and return type.
 </param>
        <param name="body">
 The body of the lambda. Depending on the kind of lambda, this is either a
 Statement (single-line Sub lambda) or Expression (single-line Function).
 </param>
        <summary>
 Represents a single line lambda expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleLineSubLambdaExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax SingleLineSubLambdaExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode body);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax SingleLineSubLambdaExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax subOrFunctionHeader, class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingleLineSubLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax,Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SingleLineSubLambdaExpression (subOrFunctionHeader As LambdaHeaderSyntax, body As VisualBasicSyntaxNode) As SingleLineLambdaExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member SingleLineSubLambdaExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax * Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingleLineSubLambdaExpression (subOrFunctionHeader, body)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineLambdaExpressionSyntax ^ SingleLineSubLambdaExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ subOrFunctionHeader, Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxNode ^ body);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subOrFunctionHeader" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax" />
        <Parameter Name="body" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode" />
      </Parameters>
      <Docs>
        <param name="subOrFunctionHeader">
 The header part of the lambda that includes the "Sub" or "Function" keyword,
 the argument list and return type.
 </param>
        <param name="body">
 The body of the lambda. Depending on the kind of lambda, this is either a
 Statement (single-line Sub lambda) or Expression (single-line Function).
 </param>
        <summary>
 Represents a single line lambda expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingletonList&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; SingletonList&lt;TNode&gt; (TNode node) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!!TNode&gt; SingletonList&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(!!TNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingletonList``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SingletonList(Of TNode As SyntaxNode) (node As TNode) As SyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member SingletonList : 'Node -&gt; Microsoft.CodeAnalysis.SyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingletonList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNode&gt;&#xA; where TNode : Microsoft::CodeAnalysis::SyntaxNode static Microsoft::CodeAnalysis::SyntaxList&lt;TNode&gt; SingletonList(TNode node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="TNode" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        <param name="node">The single element node.</param>
        <summary>
 Creates a singleton list of syntax nodes.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingletonSeparatedList&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; SingletonSeparatedList&lt;TNode&gt; (TNode node) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; SingletonSeparatedList&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(!!TNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingletonSeparatedList``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SingletonSeparatedList(Of TNode As SyntaxNode) (node As TNode) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member SingletonSeparatedList : 'Node -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SingletonSeparatedList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNode&gt;&#xA; where TNode : Microsoft::CodeAnalysis::SyntaxNode static Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; SingletonSeparatedList(TNode node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="TNode" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        <param name="node">A single node.</param>
        <summary>
 Creates a singleton separated list.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax SkipClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax count);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax SkipClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SkipClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SkipClause (count As ExpressionSyntax) As PartitionClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SkipClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SkipClause count" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PartitionClauseSyntax ^ SkipClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="count">
 Represents the expression with the number of items to take or skip.
 </param>
        <summary>
 Represents a "Skip" or "Take" query operator. The Kind property tells which.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax SkipClause (Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax count);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax SkipClause(valuetype Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SkipClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SkipClause (skipOrTakeKeyword As SyntaxToken, count As ExpressionSyntax) As PartitionClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SkipClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SkipClause (skipOrTakeKeyword, count)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PartitionClauseSyntax ^ SkipClause(Microsoft::CodeAnalysis::SyntaxToken skipOrTakeKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipOrTakeKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="count" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="skipOrTakeKeyword">
 The "Skip" or "Take" keyword.
 </param>
        <param name="count">
 Represents the expression with the number of items to take or skip.
 </param>
        <summary>
 Represents a "Skip" or "Take" query operator. The Kind property tells which.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkippedTokensTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax SkippedTokensTrivia ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax SkippedTokensTrivia() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SkippedTokensTrivia" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SkippedTokensTrivia () As SkippedTokensTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member SkippedTokensTrivia : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SkippedTokensTrivia " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SkippedTokensTriviaSyntax ^ SkippedTokensTrivia();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents tokens that were skipped by the parser as part of error recovery,
 and thus are not part of any syntactic structure.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkippedTokensTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax SkippedTokensTrivia (Microsoft.CodeAnalysis.SyntaxTokenList tokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax SkippedTokensTrivia(valuetype Microsoft.CodeAnalysis.SyntaxTokenList tokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SkippedTokensTrivia(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SkippedTokensTrivia (tokens As SyntaxTokenList) As SkippedTokensTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member SkippedTokensTrivia : Microsoft.CodeAnalysis.SyntaxTokenList -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SkippedTokensTrivia tokens" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SkippedTokensTriviaSyntax ^ SkippedTokensTrivia(Microsoft::CodeAnalysis::SyntaxTokenList tokens);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
      </Parameters>
      <Docs>
        <param name="tokens">
 The list of tokens that were skipped by the parser.
 </param>
        <summary>
 Represents tokens that were skipped by the parser as part of error recovery,
 and thus are not part of any syntactic structure.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipWhileClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax SkipWhileClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax SkipWhileClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SkipWhileClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SkipWhileClause (condition As ExpressionSyntax) As PartitionWhileClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SkipWhileClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SkipWhileClause condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PartitionWhileClauseSyntax ^ SkipWhileClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="condition">
 The boolean expression used for partitioning.
 </param>
        <summary>
 Represents a "Skip While" or "Take While" query operator. The Kind property
 tells which.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipWhileClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax SkipWhileClause (Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, Microsoft.CodeAnalysis.SyntaxToken whileKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax SkipWhileClause(valuetype Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken whileKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SkipWhileClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SkipWhileClause (skipOrTakeKeyword As SyntaxToken, whileKeyword As SyntaxToken, condition As ExpressionSyntax) As PartitionWhileClauseSyntax" />
      <MemberSignature Language="F#" Value="static member SkipWhileClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SkipWhileClause (skipOrTakeKeyword, whileKeyword, condition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PartitionWhileClauseSyntax ^ SkipWhileClause(Microsoft::CodeAnalysis::SyntaxToken skipOrTakeKeyword, Microsoft::CodeAnalysis::SyntaxToken whileKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipOrTakeKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="whileKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="skipOrTakeKeyword">
 The "Skip" or "Take" keyword.
 </param>
        <param name="whileKeyword">
 The "While" keyword.
 </param>
        <param name="condition">
 The boolean expression used for partitioning.
 </param>
        <summary>
 Represents a "Skip While" or "Take While" query operator. The Kind property
 tells which.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia Space { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia Space" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Space" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Space As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.Space : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Space" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::CodeAnalysis::SyntaxTrivia Space { Microsoft::CodeAnalysis::SyntaxTrivia get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
  A trivia with kind WhitespaceTrivia containing a single space character.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecialConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax SpecialConstraint (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken constraintKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax SpecialConstraint(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken constraintKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SpecialConstraint(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecialConstraint (kind As SyntaxKind, constraintKeyword As SyntaxToken) As SpecialConstraintSyntax" />
      <MemberSignature Language="F#" Value="static member SpecialConstraint : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SpecialConstraint (kind, constraintKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SpecialConstraintSyntax ^ SpecialConstraint(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken constraintKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="constraintKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 SpecialConstraintSyntax. One of NewConstraint, ClassConstraint,
 StructureConstraint.
 </param>
        <param name="constraintKeyword">
 The "New", "Class" or "Structure" keyword that denotes the kind of special
 constraint.
 </param>
        <summary>
 One of the special type parameter constraints: New, Class or Structure. Which
 kind of special constraint it is can be obtained from the Kind property and is
 one of: NewConstraint, ReferenceConstraint or ValueConstraint.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopOrEndStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax StopOrEndStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken stopOrEndKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax StopOrEndStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken stopOrEndKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StopOrEndStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StopOrEndStatement (kind As SyntaxKind, stopOrEndKeyword As SyntaxToken) As StopOrEndStatementSyntax" />
      <MemberSignature Language="F#" Value="static member StopOrEndStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StopOrEndStatement (kind, stopOrEndKeyword)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::StopOrEndStatementSyntax ^ StopOrEndStatement(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken stopOrEndKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="stopOrEndKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 StopOrEndStatementSyntax. One of StopStatement, EndStatement.
 </param>
        <param name="stopOrEndKeyword">
 The "Stop" or "End" keyword.
 </param>
        <summary>
 Represents a "Stop" or "End" statement. The Kind can be used to determine which
 kind of statement this is.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax StopStatement (Microsoft.CodeAnalysis.SyntaxToken stopOrEndKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax StopStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken stopOrEndKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StopStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StopStatement (stopOrEndKeyword As SyntaxToken) As StopOrEndStatementSyntax" />
      <MemberSignature Language="F#" Value="static member StopStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StopStatement stopOrEndKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::StopOrEndStatementSyntax ^ StopStatement(Microsoft::CodeAnalysis::SyntaxToken stopOrEndKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stopOrEndKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="stopOrEndKeyword">
 The "Stop" or "End" keyword.
 </param>
        <summary>
 Represents a "Stop" or "End" statement. The Kind can be used to determine which
 kind of statement this is.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringLiteralExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax StringLiteralExpression (Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax StringLiteralExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StringLiteralExpression(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StringLiteralExpression (token As SyntaxToken) As LiteralExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member StringLiteralExpression : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StringLiteralExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ StringLiteralExpression(Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="token">
 The token that represents the literal. The Kind property determines what type
 this property returns: Kind=IntegerLiteral ==&gt; Returns IntegerLiteralToken.
 Kind=CharacterLiteral ==&gt; Returns CharacterLiteralToken. Kind=DecimalLiteral
 ==&gt; Returns DecimalLiteralToken Kind=FloatingLiteral ==&gt; Returns
 FloatingLiteralToken Kind=DateLiteral ==&gt; Returns DateLiteralToken
 Kind=StringLiteral ==&gt; Returns StringLiteralToken Kind=BooleanLiteral ==&gt;
 Returns Keyword (with it's kind being TrueKeyword or FalseKeyword)
 Kind=NothingLiteral ==&gt; Returns Keyword (with it's kind being
 NothingKeyword)
 </param>
        <summary>
 Represents a literal. The kind of literal is determined by the Kind property:
 IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
 FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
 determined by casting the associated Token to the correct type and getting the
 value from the token.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringLiteralToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken StringLiteralToken (string text, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken StringLiteralToken(string text, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StringLiteralToken(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StringLiteralToken (text As String, value As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member StringLiteralToken : string * string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StringLiteralToken (text, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken StringLiteralToken(System::String ^ text, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="value">To be added.</param>
        <summary>
 Represents an string literal token.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringLiteralToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken StringLiteralToken (Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken StringLiteralToken(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, string value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StringLiteralToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StringLiteralToken (leadingTrivia As SyntaxTriviaList, text As String, value As String, trailingTrivia As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member StringLiteralToken : Microsoft.CodeAnalysis.SyntaxTriviaList * string * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StringLiteralToken (leadingTrivia, text, value, trailingTrivia)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken StringLiteralToken(Microsoft::CodeAnalysis::SyntaxTriviaList leadingTrivia, System::String ^ text, System::String ^ value, Microsoft::CodeAnalysis::SyntaxTriviaList trailingTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leadingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="trailingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leadingTrivia">To be added.</param>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="value">To be added.</param>
        <param name="trailingTrivia">To be added.</param>
        <summary>
 Represents an string literal token.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StructureBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax StructureBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax structureStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax StructureBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax structureStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StructureBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StructureBlock (structureStatement As StructureStatementSyntax) As StructureBlockSyntax" />
      <MemberSignature Language="F#" Value="static member StructureBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StructureBlock structureStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::StructureBlockSyntax ^ StructureBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::StructureStatementSyntax ^ structureStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="structureStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="structureStatement">
 The "Structure" statement that begins the block.
 </param>
        <summary>
 Represents a declaration of a Structure, its contents and the End statement
 that ends it.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StructureBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax StructureBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax structureStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax StructureBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax structureStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StructureBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StructureBlock (structureStatement As StructureStatementSyntax, inherits As SyntaxList(Of InheritsStatementSyntax), implements As SyntaxList(Of ImplementsStatementSyntax), members As SyntaxList(Of StatementSyntax)) As StructureBlockSyntax" />
      <MemberSignature Language="F#" Value="static member StructureBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StructureBlock (structureStatement, inherits, implements, members)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::StructureBlockSyntax ^ StructureBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::StructureStatementSyntax ^ structureStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^&gt; inherits, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^&gt; implements, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="structureStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax" />
        <Parameter Name="inherits" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt;" />
        <Parameter Name="implements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="structureStatement">
 The "Structure" statement that begins the block.
 </param>
        <param name="inherits">
 A list of the Inherits declarations for the type.
 </param>
        <param name="implements">
 A list of the Implements declarations for the type.
 </param>
        <param name="members">
 The declarations contained in the type or module.
 </param>
        <summary>
 Represents a declaration of a Structure, its contents and the End statement
 that ends it.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StructureBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax StructureBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax structureStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endStructureStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax StructureBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax structureStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endStructureStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StructureBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StructureBlock (structureStatement As StructureStatementSyntax, inherits As SyntaxList(Of InheritsStatementSyntax), implements As SyntaxList(Of ImplementsStatementSyntax), members As SyntaxList(Of StatementSyntax), endStructureStatement As EndBlockStatementSyntax) As StructureBlockSyntax" />
      <MemberSignature Language="F#" Value="static member StructureBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StructureBlock (structureStatement, inherits, implements, members, endStructureStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::StructureBlockSyntax ^ StructureBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::StructureStatementSyntax ^ structureStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^&gt; inherits, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^&gt; implements, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; members, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endStructureStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="structureStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax" />
        <Parameter Name="inherits" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt;" />
        <Parameter Name="implements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endStructureStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="structureStatement">
 The "Structure" statement that begins the block.
 </param>
        <param name="inherits">
 A list of the Inherits declarations for the type.
 </param>
        <param name="implements">
 A list of the Implements declarations for the type.
 </param>
        <param name="members">
 The declarations contained in the type or module.
 </param>
        <param name="endStructureStatement">
 The "End Structure" statement that ends the block.
 </param>
        <summary>
 Represents a declaration of a Structure, its contents and the End statement
 that ends it.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StructureConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax StructureConstraint (Microsoft.CodeAnalysis.SyntaxToken constraintKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax StructureConstraint(valuetype Microsoft.CodeAnalysis.SyntaxToken constraintKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StructureConstraint(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StructureConstraint (constraintKeyword As SyntaxToken) As SpecialConstraintSyntax" />
      <MemberSignature Language="F#" Value="static member StructureConstraint : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StructureConstraint constraintKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SpecialConstraintSyntax ^ StructureConstraint(Microsoft::CodeAnalysis::SyntaxToken constraintKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constraintKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="constraintKeyword">
 The "New", "Class" or "Structure" keyword that denotes the kind of special
 constraint.
 </param>
        <summary>
 One of the special type parameter constraints: New, Class or Structure. Which
 kind of special constraint it is can be obtained from the Kind property and is
 one of: NewConstraint, ReferenceConstraint or ValueConstraint.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StructureStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax StructureStatement (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax StructureStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StructureStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StructureStatement (identifier As SyntaxToken) As StructureStatementSyntax" />
      <MemberSignature Language="F#" Value="static member StructureStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StructureStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::StructureStatementSyntax ^ StructureStatement(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the type being declared.
 </param>
        <summary>
 Represents the beginning statement of a Structure declaration. This node always
 appears as the Begin of a TypeBlock with Kind=StructureDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StructureStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax StructureStatement (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax StructureStatement(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StructureStatement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StructureStatement (identifier As String) As StructureStatementSyntax" />
      <MemberSignature Language="F#" Value="static member StructureStatement : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StructureStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::StructureStatementSyntax ^ StructureStatement(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the type being declared.
 </param>
        <summary>
 Represents the beginning statement of a Structure declaration. This node always
 appears as the Begin of a TypeBlock with Kind=StructureDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StructureStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax StructureStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax StructureStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StructureStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StructureStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As StructureStatementSyntax" />
      <MemberSignature Language="F#" Value="static member StructureStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StructureStatement (attributeLists, modifiers, identifier, typeParameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::StructureStatementSyntax ^ StructureStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, an empty list is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned.
 </param>
        <param name="identifier">
 The name of the type being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic parameters for this type. If no
 generic parameters were present, Nothing is returned.
 </param>
        <summary>
 Represents the beginning statement of a Structure declaration. This node always
 appears as the Begin of a TypeBlock with Kind=StructureDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StructureStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax StructureStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken structureKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax StructureStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken structureKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StructureStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StructureStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, structureKeyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax) As StructureStatementSyntax" />
      <MemberSignature Language="F#" Value="static member StructureStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.StructureStatement (attributeLists, modifiers, structureKeyword, identifier, typeParameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::StructureStatementSyntax ^ StructureStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken structureKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="structureKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, an empty list is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned.
 </param>
        <param name="structureKeyword">
 The "Structure" keyword.
 </param>
        <param name="identifier">
 The name of the type being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic parameters for this type. If no
 generic parameters were present, Nothing is returned.
 </param>
        <summary>
 Represents the beginning statement of a Structure declaration. This node always
 appears as the Begin of a TypeBlock with Kind=StructureDeclarationBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax SubBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax SubBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubBlock (subOrFunctionStatement As MethodStatementSyntax) As MethodBlockSyntax" />
      <MemberSignature Language="F#" Value="static member SubBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubBlock subOrFunctionStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodBlockSyntax ^ SubBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ subOrFunctionStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subOrFunctionStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="subOrFunctionStatement">
 The "Sub" or "Function" statement that begins the block.
 </param>
        <summary>
 Represents a Function or Sub block declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax SubBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax SubBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubBlock (subOrFunctionStatement As MethodStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As MethodBlockSyntax" />
      <MemberSignature Language="F#" Value="static member SubBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubBlock (subOrFunctionStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodBlockSyntax ^ SubBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ subOrFunctionStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subOrFunctionStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="subOrFunctionStatement">
 The "Sub" or "Function" statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <summary>
 Represents a Function or Sub block declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax SubBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax SubBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax subOrFunctionStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSubOrFunctionStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubBlock (subOrFunctionStatement As MethodStatementSyntax, statements As SyntaxList(Of StatementSyntax), endSubOrFunctionStatement As EndBlockStatementSyntax) As MethodBlockSyntax" />
      <MemberSignature Language="F#" Value="static member SubBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubBlock (subOrFunctionStatement, statements, endSubOrFunctionStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodBlockSyntax ^ SubBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ subOrFunctionStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endSubOrFunctionStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subOrFunctionStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endSubOrFunctionStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="subOrFunctionStatement">
 The "Sub" or "Function" statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the block statement. This might be an empty list.
 </param>
        <param name="endSubOrFunctionStatement">
 The "End Sub" or "End Function" statement that ends the block.
 </param>
        <summary>
 Represents a Function or Sub block declaration: A declaration that has a
 beginning declaration, a body of executable statements and an end statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubLambdaHeader">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax SubLambdaHeader ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax SubLambdaHeader() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubLambdaHeader" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubLambdaHeader () As LambdaHeaderSyntax" />
      <MemberSignature Language="F#" Value="static member SubLambdaHeader : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubLambdaHeader " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ SubLambdaHeader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents the header part of a lambda expression
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubLambdaHeader">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax SubLambdaHeader (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax SubLambdaHeader(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubLambdaHeader(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubLambdaHeader (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As LambdaHeaderSyntax" />
      <MemberSignature Language="F#" Value="static member SubLambdaHeader : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubLambdaHeader (attributeLists, modifiers, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ SubLambdaHeader(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 Represents the header part of a lambda expression
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubLambdaHeader">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax SubLambdaHeader (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax SubLambdaHeader(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubLambdaHeader(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubLambdaHeader (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, subOrFunctionKeyword As SyntaxToken, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax) As LambdaHeaderSyntax" />
      <MemberSignature Language="F#" Value="static member SubLambdaHeader : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubLambdaHeader (attributeLists, modifiers, subOrFunctionKeyword, parameterList, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ SubLambdaHeader(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword that introduces this lambda expression.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <summary>
 Represents the header part of a lambda expression
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubNewStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax SubNewStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax SubNewStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubNewStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubNewStatement () As SubNewStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SubNewStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubNewStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SubNewStatementSyntax ^ SubNewStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 A statement that declares a constructor. This statement will be the Begin of a
 BlockStatement with Kind=MethodDeclarationBlock, and the body of the method
 will be the Body of that BlockStatement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubNewStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax SubNewStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax SubNewStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubNewStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubNewStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, parameterList As ParameterListSyntax) As SubNewStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SubNewStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubNewStatement (attributeLists, modifiers, parameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SubNewStatementSyntax ^ SubNewStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <summary>
 A statement that declares a constructor. This statement will be the Begin of a
 BlockStatement with Kind=MethodDeclarationBlock, and the body of the method
 will be the Body of that BlockStatement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubNewStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax SubNewStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subKeyword, Microsoft.CodeAnalysis.SyntaxToken newKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax SubNewStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken subKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken newKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubNewStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubNewStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, subKeyword As SyntaxToken, newKeyword As SyntaxToken, parameterList As ParameterListSyntax) As SubNewStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SubNewStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubNewStatement (attributeLists, modifiers, subKeyword, newKeyword, parameterList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SubNewStatementSyntax ^ SubNewStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken subKeyword, Microsoft::CodeAnalysis::SyntaxToken newKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="subKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="newKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="subKeyword">
 The "Sub" keyword.
 </param>
        <param name="newKeyword">
 The "New" keyword in the constructor declaration.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <summary>
 A statement that declares a constructor. This statement will be the Begin of a
 BlockStatement with Kind=MethodDeclarationBlock, and the body of the method
 will be the Body of that BlockStatement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax SubStatement (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax SubStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubStatement (identifier As SyntaxToken) As MethodStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SubStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ SubStatement(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <summary>
 The statement that declares a Sub or Function. If this method has a body, this
 statement will be the Begin of a BlockStatement with
 Kind=MethodDeclarationBlock, and the body of the method will be the Body of
 that BlockStatement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax SubStatement (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax SubStatement(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubStatement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubStatement (identifier As String) As MethodStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SubStatement : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubStatement identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ SubStatement(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <summary>
 The statement that declares a Sub or Function. If this method has a body, this
 statement will be the Begin of a BlockStatement with
 Kind=MethodDeclarationBlock, and the body of the method will be the Body of
 that BlockStatement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax SubStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax handlesClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax SubStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax handlesClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax, handlesClause As HandlesClauseSyntax, implementsClause As ImplementsClauseSyntax) As MethodStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SubStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubStatement (attributeLists, modifiers, identifier, typeParameterList, parameterList, asClause, handlesClause, implementsClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ SubStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseSyntax ^ handlesClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsClauseSyntax ^ implementsClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
        <Parameter Name="handlesClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax" />
        <Parameter Name="implementsClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic type parameters for this method.
 If no generic type parameters were present, Nothing is returned.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <param name="handlesClause">
 If present, a Handles clause indicated the events that this method handles.
 </param>
        <param name="implementsClause">
 If present, an Implements clause indicated the interface methods that this
 method implements.
 </param>
        <summary>
 The statement that declares a Sub or Function. If this method has a body, this
 statement will be the Begin of a BlockStatement with
 Kind=MethodDeclarationBlock, and the body of the method will be the Body of
 that BlockStatement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax SubStatement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax handlesClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax SubStatement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken subOrFunctionKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax parameterList, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax handlesClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax implementsClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubStatement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubStatement (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, subOrFunctionKeyword As SyntaxToken, identifier As SyntaxToken, typeParameterList As TypeParameterListSyntax, parameterList As ParameterListSyntax, asClause As SimpleAsClauseSyntax, handlesClause As HandlesClauseSyntax, implementsClause As ImplementsClauseSyntax) As MethodStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SubStatement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubStatement (attributeLists, modifiers, subOrFunctionKeyword, identifier, typeParameterList, parameterList, asClause, handlesClause, implementsClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ SubStatement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken subOrFunctionKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ typeParameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ parameterList, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseSyntax ^ handlesClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsClauseSyntax ^ implementsClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="subOrFunctionKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
        <Parameter Name="parameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
        <Parameter Name="handlesClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax" />
        <Parameter Name="implementsClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="attributeLists">
 A list of all attribute lists on this declaration. If no attributes were
 specified, Nothing is returned.
 </param>
        <param name="modifiers">
 A list of all the modifier tokens that were present on this declaration. If no
 modifiers were specified, an empty list is returned. A bitfield version of all
 the modifiers ORed together, which is in many cases easier to use, can be
 obtained with the Modifiers property.
 </param>
        <param name="subOrFunctionKeyword">
 The "Sub" or "Function" keyword that introduces this method declaration.
 </param>
        <param name="identifier">
 The name of the method being declared.
 </param>
        <param name="typeParameterList">
 If present, a type parameter list with generic type parameters for this method.
 If no generic type parameters were present, Nothing is returned.
 </param>
        <param name="parameterList">
 The method's parameter list including the parentheses. If no parameter list was
 present, Nothing is returned.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type. If no As clause was present,
 Nothing is returned.
 </param>
        <param name="handlesClause">
 If present, a Handles clause indicated the events that this method handles.
 </param>
        <param name="implementsClause">
 If present, an Implements clause indicated the interface methods that this
 method implements.
 </param>
        <summary>
 The statement that declares a Sub or Function. If this method has a body, this
 statement will be the Begin of a BlockStatement with
 Kind=MethodDeclarationBlock, and the body of the method will be the Body of
 that BlockStatement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax SubtractAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax SubtractAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubtractAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignmentStatement (left As ExpressionSyntax, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SubtractAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubtractAssignmentStatement (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ SubtractAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignmentStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax SubtractAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax SubtractAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubtractAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignmentStatement (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As AssignmentStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SubtractAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubtractAssignmentStatement (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ SubtractAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The target (left hand side) of the assignment.
 </param>
        <param name="operatorToken">
 The operator used in the assignment statement. One of "=", "+=", "-=", "*=",
 "/=", "\=", "^=", "&amp;=", "&lt;&lt;=" or "&gt;&gt;=".
 </param>
        <param name="right">
 The source (right hand side) of the assignment.
 </param>
        <summary>
 Represents a simple, compound, or Mid assignment statement. Which one can be
 determined by checking the Kind.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax SubtractExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax SubtractExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubtractExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractExpression (left As ExpressionSyntax, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member SubtractExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubtractExpression (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ SubtractExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax SubtractExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax SubtractExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax left, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubtractExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractExpression (left As ExpressionSyntax, operatorToken As SyntaxToken, right As ExpressionSyntax) As BinaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member SubtractExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SubtractExpression (left, operatorToken, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ SubtractExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ left, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="left">
 The left operand.
 </param>
        <param name="operatorToken">To be added.</param>
        <param name="right">
 The right operand.
 </param>
        <summary>
 Represents a binary operator. The Kind property classifies the operators into
 similar kind of operators (arithmetic, relational, logical or string); the
 exact operation being performed is determined by the Operator property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncLockBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax SyncLockBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax syncLockStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax SyncLockBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax syncLockStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SyncLockBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SyncLockBlock (syncLockStatement As SyncLockStatementSyntax) As SyncLockBlockSyntax" />
      <MemberSignature Language="F#" Value="static member SyncLockBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SyncLockBlock syncLockStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SyncLockBlockSyntax ^ SyncLockBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::SyncLockStatementSyntax ^ syncLockStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syncLockStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="syncLockStatement">
 The SyncLock statement that begins the block.
 </param>
        <summary>
 Represents a entire SyncLock...End SyncLock block, including the SyncLock
 statement, the enclosed statements, and the End SyncLock statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncLockBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax SyncLockBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax syncLockStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax SyncLockBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax syncLockStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SyncLockBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SyncLockBlock (syncLockStatement As SyncLockStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As SyncLockBlockSyntax" />
      <MemberSignature Language="F#" Value="static member SyncLockBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SyncLockBlock (syncLockStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SyncLockBlockSyntax ^ SyncLockBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::SyncLockStatementSyntax ^ syncLockStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syncLockStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="syncLockStatement">
 The SyncLock statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the SyncLock...End SyncLock statement. This might
 be an empty list.
 </param>
        <summary>
 Represents a entire SyncLock...End SyncLock block, including the SyncLock
 statement, the enclosed statements, and the End SyncLock statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncLockBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax SyncLockBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax syncLockStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSyncLockStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax SyncLockBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax syncLockStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endSyncLockStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SyncLockBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SyncLockBlock (syncLockStatement As SyncLockStatementSyntax, statements As SyntaxList(Of StatementSyntax), endSyncLockStatement As EndBlockStatementSyntax) As SyncLockBlockSyntax" />
      <MemberSignature Language="F#" Value="static member SyncLockBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SyncLockBlock (syncLockStatement, statements, endSyncLockStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SyncLockBlockSyntax ^ SyncLockBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::SyncLockStatementSyntax ^ syncLockStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endSyncLockStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syncLockStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endSyncLockStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="syncLockStatement">
 The SyncLock statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the SyncLock...End SyncLock statement. This might
 be an empty list.
 </param>
        <param name="endSyncLockStatement">
 The End SyncLock statement that ends the block.
 </param>
        <summary>
 Represents a entire SyncLock...End SyncLock block, including the SyncLock
 statement, the enclosed statements, and the End SyncLock statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncLockStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax SyncLockStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax SyncLockStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SyncLockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SyncLockStatement (expression As ExpressionSyntax) As SyncLockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SyncLockStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SyncLockStatement expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SyncLockStatementSyntax ^ SyncLockStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression being synchronized on.
 </param>
        <summary>
 Represents the "SyncLock" statement. This statement always occurs as the Begin
 of a SyncLockBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncLockStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax SyncLockStatement (Microsoft.CodeAnalysis.SyntaxToken syncLockKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax SyncLockStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken syncLockKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SyncLockStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SyncLockStatement (syncLockKeyword As SyntaxToken, expression As ExpressionSyntax) As SyncLockStatementSyntax" />
      <MemberSignature Language="F#" Value="static member SyncLockStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SyncLockStatement (syncLockKeyword, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::SyncLockStatementSyntax ^ SyncLockStatement(Microsoft::CodeAnalysis::SyntaxToken syncLockKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syncLockKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="syncLockKeyword">
 The "SyncLock" keyword.
 </param>
        <param name="expression">
 The expression being synchronized on.
 </param>
        <summary>
 Represents the "SyncLock" statement. This statement always occurs as the Begin
 of a SyncLockBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyntaxTree">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTree SyntaxTree (Microsoft.CodeAnalysis.SyntaxNode root, Microsoft.CodeAnalysis.ParseOptions options = null, string path = &quot;&quot;, System.Text.Encoding encoding = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.SyntaxTree SyntaxTree(class Microsoft.CodeAnalysis.SyntaxNode root, class Microsoft.CodeAnalysis.ParseOptions options, string path, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SyntaxTree(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ParseOptions,System.String,System.Text.Encoding)" />
      <MemberSignature Language="F#" Value="static member SyntaxTree : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.ParseOptions * string * System.Text.Encoding -&gt; Microsoft.CodeAnalysis.SyntaxTree" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SyntaxTree (root, options, path, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTree</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.ParseOptions" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="root">To be added.</param>
        <param name="options">To be added.</param>
        <param name="path">To be added.</param>
        <param name="encoding">To be added.</param>
        <summary>
 Create a new syntax tree from a syntax node.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyntaxTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia SyntaxTrivia (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTrivia SyntaxTrivia(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SyntaxTrivia(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SyntaxTrivia (kind As SyntaxKind, text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member SyntaxTrivia : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.SyntaxTrivia (kind, text)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTrivia SyntaxTrivia(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of SyntaxTrivia. One of
 WhitespaceTrivia, EndOfLineTrivia, ColonTrivia, CommentTrivia,
 ConflictMarkerTrivia, LineContinuationTrivia,
 DocumentationCommentExteriorTrivia, DisabledTextTrivia.
 </param>
        <param name="text">
 The actual text of this token.
 </param>
        <summary>
 Trivia nodes represents parts of the program text that are not parts of the
 syntactic grammar, such as spaces, newlines, comments, preprocessors
 directives, and disabled code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tab">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia Tab { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Microsoft.CodeAnalysis.SyntaxTrivia Tab" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Tab" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Tab As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="member this.Tab : Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Tab" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::CodeAnalysis::SyntaxTrivia Tab { Microsoft::CodeAnalysis::SyntaxTrivia get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 A trivia with kind WhitespaceTrivia containing a single tab character.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TakeClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax TakeClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax count);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax TakeClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TakeClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TakeClause (count As ExpressionSyntax) As PartitionClauseSyntax" />
      <MemberSignature Language="F#" Value="static member TakeClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TakeClause count" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PartitionClauseSyntax ^ TakeClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="count">
 Represents the expression with the number of items to take or skip.
 </param>
        <summary>
 Represents a "Skip" or "Take" query operator. The Kind property tells which.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TakeClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax TakeClause (Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax count);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax TakeClause(valuetype Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TakeClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TakeClause (skipOrTakeKeyword As SyntaxToken, count As ExpressionSyntax) As PartitionClauseSyntax" />
      <MemberSignature Language="F#" Value="static member TakeClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TakeClause (skipOrTakeKeyword, count)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PartitionClauseSyntax ^ TakeClause(Microsoft::CodeAnalysis::SyntaxToken skipOrTakeKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipOrTakeKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="count" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="skipOrTakeKeyword">
 The "Skip" or "Take" keyword.
 </param>
        <param name="count">
 Represents the expression with the number of items to take or skip.
 </param>
        <summary>
 Represents a "Skip" or "Take" query operator. The Kind property tells which.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TakeWhileClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax TakeWhileClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax TakeWhileClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TakeWhileClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TakeWhileClause (condition As ExpressionSyntax) As PartitionWhileClauseSyntax" />
      <MemberSignature Language="F#" Value="static member TakeWhileClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TakeWhileClause condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PartitionWhileClauseSyntax ^ TakeWhileClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="condition">
 The boolean expression used for partitioning.
 </param>
        <summary>
 Represents a "Skip While" or "Take While" query operator. The Kind property
 tells which.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TakeWhileClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax TakeWhileClause (Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, Microsoft.CodeAnalysis.SyntaxToken whileKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax TakeWhileClause(valuetype Microsoft.CodeAnalysis.SyntaxToken skipOrTakeKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken whileKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TakeWhileClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TakeWhileClause (skipOrTakeKeyword As SyntaxToken, whileKeyword As SyntaxToken, condition As ExpressionSyntax) As PartitionWhileClauseSyntax" />
      <MemberSignature Language="F#" Value="static member TakeWhileClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TakeWhileClause (skipOrTakeKeyword, whileKeyword, condition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::PartitionWhileClauseSyntax ^ TakeWhileClause(Microsoft::CodeAnalysis::SyntaxToken skipOrTakeKeyword, Microsoft::CodeAnalysis::SyntaxToken whileKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipOrTakeKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="whileKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="skipOrTakeKeyword">
 The "Skip" or "Take" keyword.
 </param>
        <param name="whileKeyword">
 The "While" keyword.
 </param>
        <param name="condition">
 The boolean expression used for partitioning.
 </param>
        <summary>
 Represents a "Skip While" or "Take While" query operator. The Kind property
 tells which.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TernaryConditionalExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax TernaryConditionalExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenTrue, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax TernaryConditionalExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenTrue, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TernaryConditionalExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TernaryConditionalExpression (condition As ExpressionSyntax, whenTrue As ExpressionSyntax, whenFalse As ExpressionSyntax) As TernaryConditionalExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member TernaryConditionalExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TernaryConditionalExpression (condition, whenTrue, whenFalse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TernaryConditionalExpressionSyntax ^ TernaryConditionalExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ whenTrue, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ whenFalse);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="whenTrue" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="whenFalse" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="condition">
 The first expression inside the parentheses.
 </param>
        <param name="whenTrue">
 The second expression inside the parentheses.
 </param>
        <param name="whenFalse">
 The second expression inside the parentheses.
 </param>
        <summary>
 Represents a conditional expression, If(condition, true-expr, false-expr) or
 If(expr, nothing-expr).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TernaryConditionalExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax TernaryConditionalExpression (Microsoft.CodeAnalysis.SyntaxToken ifKeyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, Microsoft.CodeAnalysis.SyntaxToken firstCommaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenTrue, Microsoft.CodeAnalysis.SyntaxToken secondCommaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenFalse, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax TernaryConditionalExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken ifKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition, valuetype Microsoft.CodeAnalysis.SyntaxToken firstCommaToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenTrue, valuetype Microsoft.CodeAnalysis.SyntaxToken secondCommaToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax whenFalse, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TernaryConditionalExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TernaryConditionalExpression (ifKeyword As SyntaxToken, openParenToken As SyntaxToken, condition As ExpressionSyntax, firstCommaToken As SyntaxToken, whenTrue As ExpressionSyntax, secondCommaToken As SyntaxToken, whenFalse As ExpressionSyntax, closeParenToken As SyntaxToken) As TernaryConditionalExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member TernaryConditionalExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TernaryConditionalExpression (ifKeyword, openParenToken, condition, firstCommaToken, whenTrue, secondCommaToken, whenFalse, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TernaryConditionalExpressionSyntax ^ TernaryConditionalExpression(Microsoft::CodeAnalysis::SyntaxToken ifKeyword, Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition, Microsoft::CodeAnalysis::SyntaxToken firstCommaToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ whenTrue, Microsoft::CodeAnalysis::SyntaxToken secondCommaToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ whenFalse, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="firstCommaToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="whenTrue" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="secondCommaToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="whenFalse" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="ifKeyword">
 The "If" keyword
 </param>
        <param name="openParenToken">
 The "(" token
 </param>
        <param name="condition">
 The first expression inside the parentheses.
 </param>
        <param name="firstCommaToken">
 The "," token.
 </param>
        <param name="whenTrue">
 The second expression inside the parentheses.
 </param>
        <param name="secondCommaToken">
 The "," token.
 </param>
        <param name="whenFalse">
 The second expression inside the parentheses.
 </param>
        <param name="closeParenToken">
 The ")" token
 </param>
        <summary>
 Represents a conditional expression, If(condition, true-expr, false-expr) or
 If(expr, nothing-expr).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax ThrowStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax ThrowStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ThrowStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ThrowStatement () As ThrowStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ThrowStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ThrowStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ThrowStatementSyntax ^ ThrowStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a Throw statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax ThrowStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax ThrowStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ThrowStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ThrowStatement (expression As ExpressionSyntax) As ThrowStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ThrowStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ThrowStatement expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ThrowStatementSyntax ^ ThrowStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression denoting the value being thrown.
 </param>
        <summary>
 Represents a Throw statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax ThrowStatement (Microsoft.CodeAnalysis.SyntaxToken throwKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax ThrowStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken throwKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ThrowStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ThrowStatement (throwKeyword As SyntaxToken, expression As ExpressionSyntax) As ThrowStatementSyntax" />
      <MemberSignature Language="F#" Value="static member ThrowStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.ThrowStatement (throwKeyword, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::ThrowStatementSyntax ^ ThrowStatement(Microsoft::CodeAnalysis::SyntaxToken throwKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="throwKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="throwKeyword">
 The "Throw" keyword
 </param>
        <param name="expression">
 The expression denoting the value being thrown.
 </param>
        <summary>
 Represents a Throw statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Token (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, string text = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Token(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Token(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Token (kind As SyntaxKind, Optional text As String = null) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Token : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Token (kind, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="text">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Token (Microsoft.CodeAnalysis.SyntaxTriviaList leading, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, string text = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Token(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Token (leading As SyntaxTriviaList, kind As SyntaxKind, Optional text As String = null) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Token : Microsoft.CodeAnalysis.SyntaxTriviaList * Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Token (leading, kind, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="leading">To be added.</param>
        <param name="kind">To be added.</param>
        <param name="text">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Token (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxTriviaList trailing, string text = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Token(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Token(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Token (kind As SyntaxKind, trailing As SyntaxTriviaList, Optional text As String = null) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Token : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxTriviaList * string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Token (kind, trailing, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="trailing">To be added.</param>
        <param name="text">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken Token (Microsoft.CodeAnalysis.SyntaxTriviaList leading, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxTriviaList trailing, string text = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken Token(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Token(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Token (leading As SyntaxTriviaList, kind As SyntaxKind, trailing As SyntaxTriviaList, Optional text As String = null) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member Token : Microsoft.CodeAnalysis.SyntaxTriviaList * Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxTriviaList * string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Token (leading, kind, trailing, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="leading">To be added.</param>
        <param name="kind">To be added.</param>
        <param name="trailing">To be added.</param>
        <param name="text">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTokenList TokenList ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTokenList TokenList() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TokenList" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TokenList () As SyntaxTokenList" />
      <MemberSignature Language="F#" Value="static member TokenList : unit -&gt; Microsoft.CodeAnalysis.SyntaxTokenList" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TokenList " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTokenList TokenList();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTokenList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Creates an empty list of tokens.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTokenList TokenList (Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTokenList TokenList(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TokenList (token As SyntaxToken) As SyntaxTokenList" />
      <MemberSignature Language="F#" Value="static member TokenList : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.SyntaxTokenList" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TokenList token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTokenList TokenList(Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTokenList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="token">The single token.</param>
        <summary>
 Creates a singleton list of tokens.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTokenList TokenList (params Microsoft.CodeAnalysis.SyntaxToken[] tokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTokenList TokenList(valuetype Microsoft.CodeAnalysis.SyntaxToken[] tokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TokenList(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TokenList (ParamArray tokens As SyntaxToken()) As SyntaxTokenList" />
      <MemberSignature Language="F#" Value="static member TokenList : Microsoft.CodeAnalysis.SyntaxToken[] -&gt; Microsoft.CodeAnalysis.SyntaxTokenList" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TokenList tokens" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTokenList TokenList(... cli::array &lt;Microsoft::CodeAnalysis::SyntaxToken&gt; ^ tokens);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTokenList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokens" Type="Microsoft.CodeAnalysis.SyntaxToken[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tokens">An array of tokens.</param>
        <summary>
 Creates a list of tokens.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTokenList TokenList (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; tokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTokenList TokenList(class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; tokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TokenList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TokenList (tokens As IEnumerable(Of SyntaxToken)) As SyntaxTokenList" />
      <MemberSignature Language="F#" Value="static member TokenList : seq&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; -&gt; Microsoft.CodeAnalysis.SyntaxTokenList" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TokenList tokens" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTokenList TokenList(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxToken&gt; ^ tokens);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTokenList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;" />
      </Parameters>
      <Docs>
        <param name="tokens"></param>
        <summary>
 Creates a list of tokens.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia Trivia (Microsoft.CodeAnalysis.VisualBasic.Syntax.StructuredTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTrivia Trivia(class Microsoft.CodeAnalysis.VisualBasic.Syntax.StructuredTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Trivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructuredTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Trivia (node As StructuredTriviaSyntax) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member Trivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.StructuredTriviaSyntax -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Trivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTrivia Trivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::StructuredTriviaSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.StructuredTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TriviaList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TriviaList" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TriviaList () As SyntaxTriviaList" />
      <MemberSignature Language="F#" Value="static member TriviaList : unit -&gt; Microsoft.CodeAnalysis.SyntaxTriviaList" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TriviaList " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTriviaList TriviaList();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTriviaList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Creates an empty list of trivia.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TriviaList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList (Microsoft.CodeAnalysis.SyntaxTrivia trivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList(valuetype Microsoft.CodeAnalysis.SyntaxTrivia trivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TriviaList (trivia As SyntaxTrivia) As SyntaxTriviaList" />
      <MemberSignature Language="F#" Value="static member TriviaList : Microsoft.CodeAnalysis.SyntaxTrivia -&gt; Microsoft.CodeAnalysis.SyntaxTriviaList" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TriviaList trivia" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTriviaList TriviaList(Microsoft::CodeAnalysis::SyntaxTrivia trivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTriviaList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trivia" Type="Microsoft.CodeAnalysis.SyntaxTrivia" />
      </Parameters>
      <Docs>
        <param name="trivia">A single trivia.</param>
        <summary>
 Creates a singleton list of trivia.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TriviaList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList (params Microsoft.CodeAnalysis.SyntaxTrivia[] trivias);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList(valuetype Microsoft.CodeAnalysis.SyntaxTrivia[] trivias) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TriviaList(Microsoft.CodeAnalysis.SyntaxTrivia[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TriviaList (ParamArray trivias As SyntaxTrivia()) As SyntaxTriviaList" />
      <MemberSignature Language="F#" Value="static member TriviaList : Microsoft.CodeAnalysis.SyntaxTrivia[] -&gt; Microsoft.CodeAnalysis.SyntaxTriviaList" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TriviaList trivias" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTriviaList TriviaList(... cli::array &lt;Microsoft::CodeAnalysis::SyntaxTrivia&gt; ^ trivias);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTriviaList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trivias" Type="Microsoft.CodeAnalysis.SyntaxTrivia[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trivias">An array of trivia.</param>
        <summary>
 Creates a list of trivia.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TriviaList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; trivias);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTriviaList TriviaList(class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; trivias) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TriviaList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TriviaList (trivias As IEnumerable(Of SyntaxTrivia)) As SyntaxTriviaList" />
      <MemberSignature Language="F#" Value="static member TriviaList : seq&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; -&gt; Microsoft.CodeAnalysis.SyntaxTriviaList" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TriviaList trivias" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTriviaList TriviaList(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxTrivia&gt; ^ trivias);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTriviaList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trivias" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
      </Parameters>
      <Docs>
        <param name="trivias">A sequence of trivia.</param>
        <summary>
 Creates a list of trivia.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrueLiteralExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax TrueLiteralExpression (Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax TrueLiteralExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TrueLiteralExpression(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TrueLiteralExpression (token As SyntaxToken) As LiteralExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member TrueLiteralExpression : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TrueLiteralExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ TrueLiteralExpression(Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="token">
 The token that represents the literal. The Kind property determines what type
 this property returns: Kind=IntegerLiteral ==&gt; Returns IntegerLiteralToken.
 Kind=CharacterLiteral ==&gt; Returns CharacterLiteralToken. Kind=DecimalLiteral
 ==&gt; Returns DecimalLiteralToken Kind=FloatingLiteral ==&gt; Returns
 FloatingLiteralToken Kind=DateLiteral ==&gt; Returns DateLiteralToken
 Kind=StringLiteral ==&gt; Returns StringLiteralToken Kind=BooleanLiteral ==&gt;
 Returns Keyword (with it's kind being TrueKeyword or FalseKeyword)
 Kind=NothingLiteral ==&gt; Returns Keyword (with it's kind being
 NothingKeyword)
 </param>
        <summary>
 Represents a literal. The kind of literal is determined by the Kind property:
 IntegerLiteral, CharacterLiteral, BooleanLiteral, DecimalLiteral,
 FloatingLiteral, DateLiteral or StringLiteral. The value of the literal can be
 determined by casting the associated Token to the correct type and getting the
 value from the token.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax TryBlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax TryBlock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TryBlock" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryBlock () As TryBlockSyntax" />
      <MemberSignature Language="F#" Value="static member TryBlock : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TryBlock " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TryBlockSyntax ^ TryBlock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents a "Try ... Catch ... Finally ... End Try" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax TryBlock (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax&gt; catchBlocks, Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax finallyBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax TryBlock(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax&gt; catchBlocks, class Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax finallyBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TryBlock(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryBlock (statements As SyntaxList(Of StatementSyntax), catchBlocks As SyntaxList(Of CatchBlockSyntax), finallyBlock As FinallyBlockSyntax) As TryBlockSyntax" />
      <MemberSignature Language="F#" Value="static member TryBlock : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TryBlock (statements, catchBlocks, finallyBlock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TryBlockSyntax ^ TryBlock(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchBlockSyntax ^&gt; catchBlocks, Microsoft::CodeAnalysis::VisualBasic::Syntax::FinallyBlockSyntax ^ finallyBlock);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="catchBlocks" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax&gt;" />
        <Parameter Name="finallyBlock" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="statements">
 A list of statements to be executed.
 </param>
        <param name="catchBlocks">
 A list of "Catch" blocks which may be executed if an exception is thrown while
 executing the statements in the "Try" block.
 </param>
        <param name="finallyBlock">
 A "Finally" block to be executed before execution leaves the "Try" block.
 </param>
        <summary>
 Represents a "Try ... Catch ... Finally ... End Try" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax TryBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax tryStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax&gt; catchBlocks, Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax finallyBlock, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endTryStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax TryBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax tryStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax&gt; catchBlocks, class Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax finallyBlock, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endTryStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TryBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryBlock (tryStatement As TryStatementSyntax, statements As SyntaxList(Of StatementSyntax), catchBlocks As SyntaxList(Of CatchBlockSyntax), finallyBlock As FinallyBlockSyntax, endTryStatement As EndBlockStatementSyntax) As TryBlockSyntax" />
      <MemberSignature Language="F#" Value="static member TryBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TryBlock (tryStatement, statements, catchBlocks, finallyBlock, endTryStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TryBlockSyntax ^ TryBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::TryStatementSyntax ^ tryStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchBlockSyntax ^&gt; catchBlocks, Microsoft::CodeAnalysis::VisualBasic::Syntax::FinallyBlockSyntax ^ finallyBlock, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endTryStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tryStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="catchBlocks" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax&gt;" />
        <Parameter Name="finallyBlock" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax" />
        <Parameter Name="endTryStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="tryStatement">
 The "Try" statement that begins the "Try" block.
 </param>
        <param name="statements">
 A list of statements to be executed.
 </param>
        <param name="catchBlocks">
 A list of "Catch" blocks which may be executed if an exception is thrown while
 executing the statements in the "Try" block.
 </param>
        <param name="finallyBlock">
 A "Finally" block to be executed before execution leaves the "Try" block.
 </param>
        <param name="endTryStatement">
 The "End Try" statement.
 </param>
        <summary>
 Represents a "Try ... Catch ... Finally ... End Try" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCastExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax TryCastExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax TryCastExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TryCastExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCastExpression (expression As ExpressionSyntax, type As TypeSyntax) As TryCastExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member TryCastExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TryCastExpression (expression, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TryCastExpressionSyntax ^ TryCastExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression being cast.
 </param>
        <param name="type">
 The type the expression is being cast to.
 </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCastExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax TryCastExpression (Microsoft.CodeAnalysis.SyntaxToken keyword, Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken commaToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax TryCastExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken commaToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TryCastExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCastExpression (keyword As SyntaxToken, openParenToken As SyntaxToken, expression As ExpressionSyntax, commaToken As SyntaxToken, type As TypeSyntax, closeParenToken As SyntaxToken) As TryCastExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member TryCastExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TryCastExpression (keyword, openParenToken, expression, commaToken, type, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TryCastExpressionSyntax ^ TryCastExpression(Microsoft::CodeAnalysis::SyntaxToken keyword, Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SyntaxToken commaToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="commaToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="keyword">
 The "CType", "DirectCast" or "TryCast" keyword.
 </param>
        <param name="openParenToken">
 The "(" token.
 </param>
        <param name="expression">
 The expression being cast.
 </param>
        <param name="commaToken">
 The "," token.
 </param>
        <param name="type">
 The type the expression is being cast to.
 </param>
        <param name="closeParenToken">
 The ")" token.
 </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax TryStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax TryStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TryStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStatement () As TryStatementSyntax" />
      <MemberSignature Language="F#" Value="static member TryStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TryStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TryStatementSyntax ^ TryStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents the "Try" statement that begins a "Try" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax TryStatement (Microsoft.CodeAnalysis.SyntaxToken tryKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax TryStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken tryKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TryStatement(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStatement (tryKeyword As SyntaxToken) As TryStatementSyntax" />
      <MemberSignature Language="F#" Value="static member TryStatement : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TryStatement tryKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TryStatementSyntax ^ TryStatement(Microsoft::CodeAnalysis::SyntaxToken tryKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tryKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="tryKeyword">
 The "Try" keyword.
 </param>
        <summary>
 Represents the "Try" statement that begins a "Try" block.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TupleExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleExpressionSyntax TupleExpression (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleExpressionSyntax TupleExpression(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TupleExpression(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TupleExpression (arguments As SeparatedSyntaxList(Of SimpleArgumentSyntax)) As TupleExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member TupleExpression : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TupleExpression arguments" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TupleExpressionSyntax ^ TupleExpression(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleArgumentSyntax ^&gt; arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="arguments">
 The list of tuple arguments.
 </param>
        <summary>
 Represents a tuple literal expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TupleExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleExpressionSyntax TupleExpression (params Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleExpressionSyntax TupleExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TupleExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TupleExpression (ParamArray arguments As SimpleArgumentSyntax()) As TupleExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member TupleExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TupleExpression arguments" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TupleExpressionSyntax ^ TupleExpression(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleArgumentSyntax ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="arguments">
 The list of tuple arguments.
 </param>
        <summary>
 Represents a tuple literal expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TupleExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleExpressionSyntax TupleExpression (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax&gt; arguments, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleExpressionSyntax TupleExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax&gt; arguments, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TupleExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TupleExpression (openParenToken As SyntaxToken, arguments As SeparatedSyntaxList(Of SimpleArgumentSyntax), closeParenToken As SyntaxToken) As TupleExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member TupleExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TupleExpression (openParenToken, arguments, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TupleExpressionSyntax ^ TupleExpression(Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleArgumentSyntax ^&gt; arguments, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax&gt;" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openParenToken">
 The "(" token
 </param>
        <param name="arguments">
 The list of tuple arguments.
 </param>
        <param name="closeParenToken">
 The ")" token
 </param>
        <summary>
 Represents a tuple literal expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TupleType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleTypeSyntax TupleType (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax&gt; elements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleTypeSyntax TupleType(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax&gt; elements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TupleType(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TupleType (elements As SeparatedSyntaxList(Of TupleElementSyntax)) As TupleTypeSyntax" />
      <MemberSignature Language="F#" Value="static member TupleType : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleTypeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TupleType elements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TupleTypeSyntax ^ TupleType(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::TupleElementSyntax ^&gt; elements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elements" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="elements">
 The list of tuple elements.
 </param>
        <summary>
 Represents a tuple type expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TupleType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleTypeSyntax TupleType (params Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax[] elements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleTypeSyntax TupleType(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax[] elements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TupleType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TupleType (ParamArray elements As TupleElementSyntax()) As TupleTypeSyntax" />
      <MemberSignature Language="F#" Value="static member TupleType : Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleTypeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TupleType elements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TupleTypeSyntax ^ TupleType(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::TupleElementSyntax ^&gt; ^ elements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elements" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="elements">
 The list of tuple elements.
 </param>
        <summary>
 Represents a tuple type expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TupleType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleTypeSyntax TupleType (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax&gt; elements, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleTypeSyntax TupleType(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax&gt; elements, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TupleType(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TupleType (openParenToken As SyntaxToken, elements As SeparatedSyntaxList(Of TupleElementSyntax), closeParenToken As SyntaxToken) As TupleTypeSyntax" />
      <MemberSignature Language="F#" Value="static member TupleType : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleTypeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TupleType (openParenToken, elements, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TupleTypeSyntax ^ TupleType(Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::TupleElementSyntax ^&gt; elements, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleTypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="elements" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax&gt;" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openParenToken">
 The "(" token
 </param>
        <param name="elements">
 The list of tuple elements.
 </param>
        <param name="closeParenToken">
 The ")" token
 </param>
        <summary>
 Represents a tuple type expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeArgumentList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax TypeArgumentList (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax TypeArgumentList(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeArgumentList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeArgumentList (arguments As SeparatedSyntaxList(Of TypeSyntax)) As TypeArgumentListSyntax" />
      <MemberSignature Language="F#" Value="static member TypeArgumentList : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeArgumentList arguments" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeArgumentListSyntax ^ TypeArgumentList(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^&gt; arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="arguments">
 A list of all the type arguments.
 </param>
        <summary>
 Represents a parenthesized list of generic type arguments.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeArgumentList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax TypeArgumentList (params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax TypeArgumentList(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeArgumentList(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeArgumentList (ParamArray arguments As TypeSyntax()) As TypeArgumentListSyntax" />
      <MemberSignature Language="F#" Value="static member TypeArgumentList : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeArgumentList arguments" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeArgumentListSyntax ^ TypeArgumentList(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="arguments">
 A list of all the type arguments.
 </param>
        <summary>
 Represents a parenthesized list of generic type arguments.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeArgumentList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax TypeArgumentList (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SyntaxToken ofKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt; arguments, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax TypeArgumentList(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, valuetype Microsoft.CodeAnalysis.SyntaxToken ofKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt; arguments, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeArgumentList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeArgumentList (openParenToken As SyntaxToken, ofKeyword As SyntaxToken, arguments As SeparatedSyntaxList(Of TypeSyntax), closeParenToken As SyntaxToken) As TypeArgumentListSyntax" />
      <MemberSignature Language="F#" Value="static member TypeArgumentList : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeArgumentList (openParenToken, ofKeyword, arguments, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeArgumentListSyntax ^ TypeArgumentList(Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::SyntaxToken ofKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^&gt; arguments, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="ofKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="arguments" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax&gt;" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openParenToken">
 The "(" token.
 </param>
        <param name="ofKeyword">
 The "Of" keyword.
 </param>
        <param name="arguments">
 A list of all the type arguments.
 </param>
        <param name="closeParenToken">
 The ")" token.
 </param>
        <summary>
 Represents a parenthesized list of generic type arguments.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax TypeBlock (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind blockKind, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax begin, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits = null, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements = null, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members = null, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax end = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax TypeBlock(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind blockKind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax begin, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax end) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeBlock(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeBlock (blockKind As SyntaxKind, begin As TypeStatementSyntax, Optional inherits As SyntaxList(Of InheritsStatementSyntax) = null, Optional implements As SyntaxList(Of ImplementsStatementSyntax) = null, Optional members As SyntaxList(Of StatementSyntax) = null, Optional end As EndBlockStatementSyntax = null) As TypeBlockSyntax" />
      <MemberSignature Language="F#" Value="static member TypeBlock : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeBlock (blockKind, begin, inherits, implements, members, end)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blockKind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="begin" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax" />
        <Parameter Name="inherits" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt;" />
        <Parameter Name="implements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="end" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="blockKind">To be added.</param>
        <param name="begin">To be added.</param>
        <param name="inherits">To be added.</param>
        <param name="implements">To be added.</param>
        <param name="members">To be added.</param>
        <param name="end">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeConstraint">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeConstraintSyntax TypeConstraint (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeConstraintSyntax TypeConstraint(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeConstraint(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeConstraint (type As TypeSyntax) As TypeConstraintSyntax" />
      <MemberSignature Language="F#" Value="static member TypeConstraint : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeConstraintSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeConstraint type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeConstraintSyntax ^ TypeConstraint(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeConstraintSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">
 The type describing the constraint.
 </param>
        <summary>
 Represents a type parameter constraint that is a type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypedTupleElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypedTupleElementSyntax TypedTupleElement (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypedTupleElementSyntax TypedTupleElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypedTupleElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypedTupleElement (type As TypeSyntax) As TypedTupleElementSyntax" />
      <MemberSignature Language="F#" Value="static member TypedTupleElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypedTupleElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypedTupleElement type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypedTupleElementSyntax ^ TypedTupleElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypedTupleElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="type">
 The type-name part of the tuple element syntax.
 </param>
        <summary>
 Represents a single declaration of a tuple element supplying only the type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeOfExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax TypeOfExpression (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax TypeOfExpression(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeOfExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeOfExpression (kind As SyntaxKind, expression As ExpressionSyntax, operatorToken As SyntaxToken, type As TypeSyntax) As TypeOfExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member TypeOfExpression : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeOfExpression (kind, expression, operatorToken, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeOfExpressionSyntax ^ TypeOfExpression(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 TypeOfExpressionSyntax. One of TypeOfIsExpression, TypeOfIsNotExpression.
 </param>
        <param name="expression">
 The expression being tested.
 </param>
        <param name="operatorToken">
 The "Is" or "IsNot" keyword.
 </param>
        <param name="type">
 The name of the type being tested against.
 </param>
        <summary>
 Represents a TypeOf...Is or IsNot expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeOfExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax TypeOfExpression (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken typeOfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax TypeOfExpression(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken typeOfKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeOfExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeOfExpression (kind As SyntaxKind, typeOfKeyword As SyntaxToken, expression As ExpressionSyntax, operatorToken As SyntaxToken, type As TypeSyntax) As TypeOfExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member TypeOfExpression : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeOfExpression (kind, typeOfKeyword, expression, operatorToken, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeOfExpressionSyntax ^ TypeOfExpression(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken typeOfKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="typeOfKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 TypeOfExpressionSyntax. One of TypeOfIsExpression, TypeOfIsNotExpression.
 </param>
        <param name="typeOfKeyword">
 The "TypeOf" keyword.
 </param>
        <param name="expression">
 The expression being tested.
 </param>
        <param name="operatorToken">
 The "Is" or "IsNot" keyword.
 </param>
        <param name="type">
 The name of the type being tested against.
 </param>
        <summary>
 Represents a TypeOf...Is or IsNot expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeOfIsExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax TypeOfIsExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax TypeOfIsExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeOfIsExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeOfIsExpression (expression As ExpressionSyntax, type As TypeSyntax) As TypeOfExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member TypeOfIsExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeOfIsExpression (expression, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeOfExpressionSyntax ^ TypeOfIsExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression being tested.
 </param>
        <param name="type">
 The name of the type being tested against.
 </param>
        <summary>
 Represents a TypeOf...Is or IsNot expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeOfIsExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax TypeOfIsExpression (Microsoft.CodeAnalysis.SyntaxToken typeOfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax TypeOfIsExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken typeOfKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeOfIsExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeOfIsExpression (typeOfKeyword As SyntaxToken, expression As ExpressionSyntax, operatorToken As SyntaxToken, type As TypeSyntax) As TypeOfExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member TypeOfIsExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeOfIsExpression (typeOfKeyword, expression, operatorToken, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeOfExpressionSyntax ^ TypeOfIsExpression(Microsoft::CodeAnalysis::SyntaxToken typeOfKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeOfKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="typeOfKeyword">
 The "TypeOf" keyword.
 </param>
        <param name="expression">
 The expression being tested.
 </param>
        <param name="operatorToken">
 The "Is" or "IsNot" keyword.
 </param>
        <param name="type">
 The name of the type being tested against.
 </param>
        <summary>
 Represents a TypeOf...Is or IsNot expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeOfIsNotExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax TypeOfIsNotExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax TypeOfIsNotExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeOfIsNotExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeOfIsNotExpression (expression As ExpressionSyntax, type As TypeSyntax) As TypeOfExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member TypeOfIsNotExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeOfIsNotExpression (expression, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeOfExpressionSyntax ^ TypeOfIsNotExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression being tested.
 </param>
        <param name="type">
 The name of the type being tested against.
 </param>
        <summary>
 Represents a TypeOf...Is or IsNot expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeOfIsNotExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax TypeOfIsNotExpression (Microsoft.CodeAnalysis.SyntaxToken typeOfKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax TypeOfIsNotExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken typeOfKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeOfIsNotExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeOfIsNotExpression (typeOfKeyword As SyntaxToken, expression As ExpressionSyntax, operatorToken As SyntaxToken, type As TypeSyntax) As TypeOfExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member TypeOfIsNotExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeOfIsNotExpression (typeOfKeyword, expression, operatorToken, type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeOfExpressionSyntax ^ TypeOfIsNotExpression(Microsoft::CodeAnalysis::SyntaxToken typeOfKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeSyntax ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeOfKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
      </Parameters>
      <Docs>
        <param name="typeOfKeyword">
 The "TypeOf" keyword.
 </param>
        <param name="expression">
 The expression being tested.
 </param>
        <param name="operatorToken">
 The "Is" or "IsNot" keyword.
 </param>
        <param name="type">
 The name of the type being tested against.
 </param>
        <summary>
 Represents a TypeOf...Is or IsNot expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameter">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax TypeParameter (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax TypeParameter(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameter(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameter (identifier As SyntaxToken) As TypeParameterSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameter : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameter identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterSyntax ^ TypeParameter(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the type parameter
 </param>
        <summary>
 Represents a type parameter on a generic type declaration.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameter">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax TypeParameter (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax TypeParameter(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameter(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameter (identifier As String) As TypeParameterSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameter : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameter identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterSyntax ^ TypeParameter(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the type parameter
 </param>
        <summary>
 Represents a type parameter on a generic type declaration.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameter">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax TypeParameter (Microsoft.CodeAnalysis.SyntaxToken varianceKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterConstraintClauseSyntax typeParameterConstraintClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax TypeParameter(valuetype Microsoft.CodeAnalysis.SyntaxToken varianceKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterConstraintClauseSyntax typeParameterConstraintClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameter(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterConstraintClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameter (varianceKeyword As SyntaxToken, identifier As SyntaxToken, typeParameterConstraintClause As TypeParameterConstraintClauseSyntax) As TypeParameterSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameter : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterConstraintClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameter (varianceKeyword, identifier, typeParameterConstraintClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterSyntax ^ TypeParameter(Microsoft::CodeAnalysis::SyntaxToken varianceKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterConstraintClauseSyntax ^ typeParameterConstraintClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="varianceKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterConstraintClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterConstraintClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="varianceKeyword">
 Represents the "In" or "Out" variance keyword on a type parameter, if present.
 If no variance modifier was present, Nothing is returned.
 </param>
        <param name="identifier">
 The name of the type parameter
 </param>
        <param name="typeParameterConstraintClause">
 The "As" keyword, if any type constraints were supplied. If no type constraints
 were supplied, Nothing is returned.
 </param>
        <summary>
 Represents a type parameter on a generic type declaration.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax TypeParameterList (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax TypeParameterList(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameterList(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameterList (parameters As SeparatedSyntaxList(Of TypeParameterSyntax)) As TypeParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameterList : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameterList parameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ TypeParameterList(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterSyntax ^&gt; parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="parameters">
 A list of the type parameters. There must be at least one type parameter in the
 list.
 </param>
        <summary>
 Represents the type parameter list in a declaration.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax TypeParameterList (params Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax TypeParameterList(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameterList (ParamArray parameters As TypeParameterSyntax()) As TypeParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameterList : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameterList parameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ TypeParameterList(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterSyntax ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parameters">
 A list of the type parameters. There must be at least one type parameter in the
 list.
 </param>
        <summary>
 Represents the type parameter list in a declaration.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameterList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax TypeParameterList (Microsoft.CodeAnalysis.SyntaxToken openParenToken, Microsoft.CodeAnalysis.SyntaxToken ofKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax&gt; parameters, Microsoft.CodeAnalysis.SyntaxToken closeParenToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax TypeParameterList(valuetype Microsoft.CodeAnalysis.SyntaxToken openParenToken, valuetype Microsoft.CodeAnalysis.SyntaxToken ofKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax&gt; parameters, valuetype Microsoft.CodeAnalysis.SyntaxToken closeParenToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameterList(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameterList (openParenToken As SyntaxToken, ofKeyword As SyntaxToken, parameters As SeparatedSyntaxList(Of TypeParameterSyntax), closeParenToken As SyntaxToken) As TypeParameterListSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameterList : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameterList (openParenToken, ofKeyword, parameters, closeParenToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ TypeParameterList(Microsoft::CodeAnalysis::SyntaxToken openParenToken, Microsoft::CodeAnalysis::SyntaxToken ofKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterSyntax ^&gt; parameters, Microsoft::CodeAnalysis::SyntaxToken closeParenToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="ofKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="parameters" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax&gt;" />
        <Parameter Name="closeParenToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openParenToken">
 The "(" token.
 </param>
        <param name="ofKeyword">
 The "Of" keyword.
 </param>
        <param name="parameters">
 A list of the type parameters. There must be at least one type parameter in the
 list.
 </param>
        <param name="closeParenToken">
 The ")" token.
 </param>
        <summary>
 Represents the type parameter list in a declaration.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameterMultipleConstraintClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax TypeParameterMultipleConstraintClause (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax&gt; constraints);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax TypeParameterMultipleConstraintClause(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax&gt; constraints) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameterMultipleConstraintClause(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameterMultipleConstraintClause (constraints As SeparatedSyntaxList(Of ConstraintSyntax)) As TypeParameterMultipleConstraintClauseSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameterMultipleConstraintClause : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameterMultipleConstraintClause constraints" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterMultipleConstraintClauseSyntax ^ TypeParameterMultipleConstraintClause(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ConstraintSyntax ^&gt; constraints);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constraints" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="constraints">
 A list of the supplied constraints. If no constraints were supplied, an empty
 list is returned.
 </param>
        <summary>
 One of the type parameter constraints clauses. This represents a constraint
 clause in the form of "As { Constraints }".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameterMultipleConstraintClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax TypeParameterMultipleConstraintClause (params Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax[] constraints);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax TypeParameterMultipleConstraintClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax[] constraints) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameterMultipleConstraintClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameterMultipleConstraintClause (ParamArray constraints As ConstraintSyntax()) As TypeParameterMultipleConstraintClauseSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameterMultipleConstraintClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameterMultipleConstraintClause constraints" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterMultipleConstraintClauseSyntax ^ TypeParameterMultipleConstraintClause(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ConstraintSyntax ^&gt; ^ constraints);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constraints" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constraints">
 A list of the supplied constraints. If no constraints were supplied, an empty
 list is returned.
 </param>
        <summary>
 One of the type parameter constraints clauses. This represents a constraint
 clause in the form of "As { Constraints }".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameterMultipleConstraintClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax TypeParameterMultipleConstraintClause (Microsoft.CodeAnalysis.SyntaxToken asKeyword, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax&gt; constraints, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax TypeParameterMultipleConstraintClause(valuetype Microsoft.CodeAnalysis.SyntaxToken asKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken openBraceToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax&gt; constraints, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameterMultipleConstraintClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameterMultipleConstraintClause (asKeyword As SyntaxToken, openBraceToken As SyntaxToken, constraints As SeparatedSyntaxList(Of ConstraintSyntax), closeBraceToken As SyntaxToken) As TypeParameterMultipleConstraintClauseSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameterMultipleConstraintClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameterMultipleConstraintClause (asKeyword, openBraceToken, constraints, closeBraceToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterMultipleConstraintClauseSyntax ^ TypeParameterMultipleConstraintClause(Microsoft::CodeAnalysis::SyntaxToken asKeyword, Microsoft::CodeAnalysis::SyntaxToken openBraceToken, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ConstraintSyntax ^&gt; constraints, Microsoft::CodeAnalysis::SyntaxToken closeBraceToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="openBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="constraints" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax&gt;" />
        <Parameter Name="closeBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="asKeyword">
 The "As" keyword.
 </param>
        <param name="openBraceToken">
 The "{" token.
 </param>
        <param name="constraints">
 A list of the supplied constraints. If no constraints were supplied, an empty
 list is returned.
 </param>
        <param name="closeBraceToken">
 The "}" token.
 </param>
        <summary>
 One of the type parameter constraints clauses. This represents a constraint
 clause in the form of "As { Constraints }".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameterSingleConstraintClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax TypeParameterSingleConstraintClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax constraint);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax TypeParameterSingleConstraintClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax constraint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameterSingleConstraintClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameterSingleConstraintClause (constraint As ConstraintSyntax) As TypeParameterSingleConstraintClauseSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameterSingleConstraintClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameterSingleConstraintClause constraint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterSingleConstraintClauseSyntax ^ TypeParameterSingleConstraintClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ConstraintSyntax ^ constraint);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constraint" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax" />
      </Parameters>
      <Docs>
        <param name="constraint">
 A list of the supplied constraints. If no constraints were supplied, Nothing is
 returned.
 </param>
        <summary>
 One of the type parameter constraints clauses. This represents a constraint
 clause in the form of "As Constraint".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeParameterSingleConstraintClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax TypeParameterSingleConstraintClause (Microsoft.CodeAnalysis.SyntaxToken asKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax constraint);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax TypeParameterSingleConstraintClause(valuetype Microsoft.CodeAnalysis.SyntaxToken asKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax constraint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameterSingleConstraintClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeParameterSingleConstraintClause (asKeyword As SyntaxToken, constraint As ConstraintSyntax) As TypeParameterSingleConstraintClauseSyntax" />
      <MemberSignature Language="F#" Value="static member TypeParameterSingleConstraintClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeParameterSingleConstraintClause (asKeyword, constraint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterSingleConstraintClauseSyntax ^ TypeParameterSingleConstraintClause(Microsoft::CodeAnalysis::SyntaxToken asKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ConstraintSyntax ^ constraint);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="constraint" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstraintSyntax" />
      </Parameters>
      <Docs>
        <param name="asKeyword">
 The "As" keyword, if any type constraints were supplied. If no type constraints
 were supplied, Nothing is returned.
 </param>
        <param name="constraint">
 A list of the supplied constraints. If no constraints were supplied, Nothing is
 returned.
 </param>
        <summary>
 One of the type parameter constraints clauses. This represents a constraint
 clause in the form of "As Constraint".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax TypeStatement (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind statementKind, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributes = null, Microsoft.CodeAnalysis.SyntaxTokenList modifiers = null, Microsoft.CodeAnalysis.SyntaxToken keyword = null, Microsoft.CodeAnalysis.SyntaxToken identifier = null, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax TypeStatement(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind statementKind, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; attributes, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken keyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax typeParameterList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeStatement(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TypeStatement (statementKind As SyntaxKind, Optional attributes As SyntaxList(Of AttributeListSyntax) = null, Optional modifiers As SyntaxTokenList = null, Optional keyword As SyntaxToken = null, Optional identifier As SyntaxToken = null, Optional typeParameterList As TypeParameterListSyntax = null) As TypeStatementSyntax" />
      <MemberSignature Language="F#" Value="static member TypeStatement : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.TypeStatement (statementKind, attributes, modifiers, keyword, identifier, typeParameterList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statementKind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="typeParameterList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="statementKind">To be added.</param>
        <param name="attributes">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="keyword">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="typeParameterList">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnaryExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax UnaryExpression (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax UnaryExpression(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UnaryExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnaryExpression (kind As SyntaxKind, operatorToken As SyntaxToken, operand As ExpressionSyntax) As UnaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member UnaryExpression : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UnaryExpression (kind, operatorToken, operand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::UnaryExpressionSyntax ^ UnaryExpression(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ operand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operand" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 UnaryExpressionSyntax. One of UnaryPlusExpression, UnaryMinusExpression,
 NotExpression, AddressOfExpression.
 </param>
        <param name="operatorToken">
 The token that is the operator.
 </param>
        <param name="operand">
 The expression being operated on.
 </param>
        <summary>
 Describes a unary operator: Plus, Negate, Not or AddressOf.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnaryMinusExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax UnaryMinusExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax UnaryMinusExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UnaryMinusExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnaryMinusExpression (operand As ExpressionSyntax) As UnaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member UnaryMinusExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UnaryMinusExpression operand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::UnaryExpressionSyntax ^ UnaryMinusExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ operand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="operand">
 The expression being operated on.
 </param>
        <summary>
 Describes a unary operator: Plus, Negate, Not or AddressOf.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnaryMinusExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax UnaryMinusExpression (Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax UnaryMinusExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UnaryMinusExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnaryMinusExpression (operatorToken As SyntaxToken, operand As ExpressionSyntax) As UnaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member UnaryMinusExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UnaryMinusExpression (operatorToken, operand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::UnaryExpressionSyntax ^ UnaryMinusExpression(Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ operand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operand" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="operatorToken">
 The token that is the operator.
 </param>
        <param name="operand">
 The expression being operated on.
 </param>
        <summary>
 Describes a unary operator: Plus, Negate, Not or AddressOf.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnaryPlusExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax UnaryPlusExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax UnaryPlusExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UnaryPlusExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnaryPlusExpression (operand As ExpressionSyntax) As UnaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member UnaryPlusExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UnaryPlusExpression operand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::UnaryExpressionSyntax ^ UnaryPlusExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ operand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="operand">
 The expression being operated on.
 </param>
        <summary>
 Describes a unary operator: Plus, Negate, Not or AddressOf.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnaryPlusExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax UnaryPlusExpression (Microsoft.CodeAnalysis.SyntaxToken operatorToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax UnaryPlusExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken operatorToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UnaryPlusExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnaryPlusExpression (operatorToken As SyntaxToken, operand As ExpressionSyntax) As UnaryExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member UnaryPlusExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UnaryPlusExpression (operatorToken, operand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::UnaryExpressionSyntax ^ UnaryPlusExpression(Microsoft::CodeAnalysis::SyntaxToken operatorToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ operand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="operand" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="operatorToken">
 The token that is the operator.
 </param>
        <param name="operand">
 The expression being operated on.
 </param>
        <summary>
 Describes a unary operator: Plus, Negate, Not or AddressOf.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UntilClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax UntilClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax UntilClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UntilClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UntilClause (condition As ExpressionSyntax) As WhileOrUntilClauseSyntax" />
      <MemberSignature Language="F#" Value="static member UntilClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UntilClause condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ UntilClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="condition">
 The boolean expression after the While or Until.
 </param>
        <summary>
 Represents a "While expression" or "Until expression" in a Do or Loop
 statement. The Kind of the clause can be "WhileClause" or "UntilClause" to
 indicate which kind of clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UntilClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax UntilClause (Microsoft.CodeAnalysis.SyntaxToken whileOrUntilKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax UntilClause(valuetype Microsoft.CodeAnalysis.SyntaxToken whileOrUntilKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UntilClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UntilClause (whileOrUntilKeyword As SyntaxToken, condition As ExpressionSyntax) As WhileOrUntilClauseSyntax" />
      <MemberSignature Language="F#" Value="static member UntilClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UntilClause (whileOrUntilKeyword, condition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ UntilClause(Microsoft::CodeAnalysis::SyntaxToken whileOrUntilKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whileOrUntilKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="whileOrUntilKeyword">
 The "While" or "Until" keyword.
 </param>
        <param name="condition">
 The boolean expression after the While or Until.
 </param>
        <summary>
 Represents a "While expression" or "Until expression" in a Do or Loop
 statement. The Kind of the clause can be "WhileClause" or "UntilClause" to
 indicate which kind of clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax UsingBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax usingStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax UsingBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax usingStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UsingBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UsingBlock (usingStatement As UsingStatementSyntax) As UsingBlockSyntax" />
      <MemberSignature Language="F#" Value="static member UsingBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UsingBlock usingStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::UsingBlockSyntax ^ UsingBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::UsingStatementSyntax ^ usingStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usingStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="usingStatement">
 The UsingStatement that begins the Using...End Using block.
 </param>
        <summary>
 Represents an entire Using...End Using statement, including the Using, body and
 End Using statements.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax UsingBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax usingStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax UsingBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax usingStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UsingBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UsingBlock (usingStatement As UsingStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As UsingBlockSyntax" />
      <MemberSignature Language="F#" Value="static member UsingBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UsingBlock (usingStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::UsingBlockSyntax ^ UsingBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::UsingStatementSyntax ^ usingStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usingStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="usingStatement">
 The UsingStatement that begins the Using...End Using block.
 </param>
        <param name="statements">
 The statements contained in the Using...End Using block. This might be an empty
 list.
 </param>
        <summary>
 Represents an entire Using...End Using statement, including the Using, body and
 End Using statements.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax UsingBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax usingStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endUsingStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax UsingBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax usingStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endUsingStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UsingBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UsingBlock (usingStatement As UsingStatementSyntax, statements As SyntaxList(Of StatementSyntax), endUsingStatement As EndBlockStatementSyntax) As UsingBlockSyntax" />
      <MemberSignature Language="F#" Value="static member UsingBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UsingBlock (usingStatement, statements, endUsingStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::UsingBlockSyntax ^ UsingBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::UsingStatementSyntax ^ usingStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endUsingStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usingStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endUsingStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="usingStatement">
 The UsingStatement that begins the Using...End Using block.
 </param>
        <param name="statements">
 The statements contained in the Using...End Using block. This might be an empty
 list.
 </param>
        <param name="endUsingStatement">
 The End Using statement that ends the block.
 </param>
        <summary>
 Represents an entire Using...End Using statement, including the Using, body and
 End Using statements.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax UsingStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax UsingStatement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UsingStatement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UsingStatement () As UsingStatementSyntax" />
      <MemberSignature Language="F#" Value="static member UsingStatement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UsingStatement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::UsingStatementSyntax ^ UsingStatement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 The Using statement that begins a Using block. This statement always occurs as
 the Begin of a UsingBlock, and the body of the Using is the Body of that
 UsingBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax UsingStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax UsingStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UsingStatement (expression As ExpressionSyntax, variables As SeparatedSyntaxList(Of VariableDeclaratorSyntax)) As UsingStatementSyntax" />
      <MemberSignature Language="F#" Value="static member UsingStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UsingStatement (expression, variables)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::UsingStatementSyntax ^ UsingStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableDeclaratorSyntax ^&gt; variables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">
 If the Using statement is of a form that does not declare a new variable, this
 is the expression used in the using. Otherwise, Nothing is returned.
 </param>
        <param name="variables">
 If the Using statement is of a form that declares one or more new variables,
 this is the list of variable declarations. Otherwise, Nothing is returned.
 </param>
        <summary>
 The Using statement that begins a Using block. This statement always occurs as
 the Begin of a UsingBlock, and the body of the Using is the Body of that
 UsingBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsingStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax UsingStatement (Microsoft.CodeAnalysis.SyntaxToken usingKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax UsingStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken usingKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UsingStatement (usingKeyword As SyntaxToken, expression As ExpressionSyntax, variables As SeparatedSyntaxList(Of VariableDeclaratorSyntax)) As UsingStatementSyntax" />
      <MemberSignature Language="F#" Value="static member UsingStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.UsingStatement (usingKeyword, expression, variables)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::UsingStatementSyntax ^ UsingStatement(Microsoft::CodeAnalysis::SyntaxToken usingKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableDeclaratorSyntax ^&gt; variables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usingKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="usingKeyword">
 The "Using" keyword.
 </param>
        <param name="expression">
 If the Using statement is of a form that does not declare a new variable, this
 is the expression used in the using. Otherwise, Nothing is returned.
 </param>
        <param name="variables">
 If the Using statement is of a form that declares one or more new variables,
 this is the list of variable declarations. Otherwise, Nothing is returned.
 </param>
        <summary>
 The Using statement that begins a Using block. This statement always occurs as
 the Begin of a UsingBlock, and the body of the Using is the Body of that
 UsingBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VariableDeclarator">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax VariableDeclarator (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax&gt; names);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax VariableDeclarator(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax&gt; names) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VariableDeclarator (names As SeparatedSyntaxList(Of ModifiedIdentifierSyntax)) As VariableDeclaratorSyntax" />
      <MemberSignature Language="F#" Value="static member VariableDeclarator : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.VariableDeclarator names" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableDeclaratorSyntax ^ VariableDeclarator(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ModifiedIdentifierSyntax ^&gt; names);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="names">
 The names of the variables being declared. Each name might have a "?" or "()"
 modifier(s) attached.
 </param>
        <summary>
 Represents the part of a variable or constant declaration statement that
 associated one or more variable names with a type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VariableDeclarator">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax VariableDeclarator (params Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax[] names);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax VariableDeclarator(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax[] names) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VariableDeclarator (ParamArray names As ModifiedIdentifierSyntax()) As VariableDeclaratorSyntax" />
      <MemberSignature Language="F#" Value="static member VariableDeclarator : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.VariableDeclarator names" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableDeclaratorSyntax ^ VariableDeclarator(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ModifiedIdentifierSyntax ^&gt; ^ names);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="names">
 The names of the variables being declared. Each name might have a "?" or "()"
 modifier(s) attached.
 </param>
        <summary>
 Represents the part of a variable or constant declaration statement that
 associated one or more variable names with a type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VariableDeclarator">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax VariableDeclarator (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax&gt; names, Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClause, Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax VariableDeclarator(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax&gt; names, class Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClause, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VariableDeclarator (names As SeparatedSyntaxList(Of ModifiedIdentifierSyntax), asClause As AsClauseSyntax, initializer As EqualsValueSyntax) As VariableDeclaratorSyntax" />
      <MemberSignature Language="F#" Value="static member VariableDeclarator : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.VariableDeclarator (names, asClause, initializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableDeclaratorSyntax ^ VariableDeclarator(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ModifiedIdentifierSyntax ^&gt; names, Microsoft::CodeAnalysis::VisualBasic::Syntax::AsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::VisualBasic::Syntax::EqualsValueSyntax ^ initializer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax&gt;" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax" />
      </Parameters>
      <Docs>
        <param name="names">
 The names of the variables being declared. Each name might have a "?" or "()"
 modifier(s) attached.
 </param>
        <param name="asClause">
 The "As" clause that describes the return type, and possibly includes "New",
 "With" or "From". If no As clause was present, Nothing is returned.
 </param>
        <param name="initializer">
 If present, an "= initial-value" clause describing the initial value of the
 variable or the value of the constant.
 </param>
        <summary>
 Represents the part of a variable or constant declaration statement that
 associated one or more variable names with a type.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VariableNameEquals">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax VariableNameEquals (Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax VariableNameEquals(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.VariableNameEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VariableNameEquals (identifier As ModifiedIdentifierSyntax) As VariableNameEqualsSyntax" />
      <MemberSignature Language="F#" Value="static member VariableNameEquals : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.VariableNameEquals identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableNameEqualsSyntax ^ VariableNameEquals(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModifiedIdentifierSyntax ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the variable being defined.
 </param>
        <summary>
 Represents the name and optional type of an expression range variable.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VariableNameEquals">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax VariableNameEquals (Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax VariableNameEquals(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.VariableNameEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VariableNameEquals (identifier As ModifiedIdentifierSyntax, asClause As SimpleAsClauseSyntax) As VariableNameEqualsSyntax" />
      <MemberSignature Language="F#" Value="static member VariableNameEquals : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.VariableNameEquals (identifier, asClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableNameEqualsSyntax ^ VariableNameEquals(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModifiedIdentifierSyntax ^ identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the variable being defined.
 </param>
        <param name="asClause">
 Describes the type of the variable being defined.
 </param>
        <summary>
 Represents the name and optional type of an expression range variable.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VariableNameEquals">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax VariableNameEquals (Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, Microsoft.CodeAnalysis.SyntaxToken equalsToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax VariableNameEquals(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifier, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax asClause, valuetype Microsoft.CodeAnalysis.SyntaxToken equalsToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.VariableNameEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VariableNameEquals (identifier As ModifiedIdentifierSyntax, asClause As SimpleAsClauseSyntax, equalsToken As SyntaxToken) As VariableNameEqualsSyntax" />
      <MemberSignature Language="F#" Value="static member VariableNameEquals : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.VariableNameEquals (identifier, asClause, equalsToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableNameEqualsSyntax ^ VariableNameEquals(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModifiedIdentifierSyntax ^ identifier, Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ asClause, Microsoft::CodeAnalysis::SyntaxToken equalsToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax" />
        <Parameter Name="asClause" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
        <Parameter Name="equalsToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The name of the variable being defined.
 </param>
        <param name="asClause">
 Describes the type of the variable being defined.
 </param>
        <param name="equalsToken">
 The "=" token.
 </param>
        <summary>
 Represents the name and optional type of an expression range variable.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax WhereClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax WhereClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhereClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhereClause (condition As ExpressionSyntax) As WhereClauseSyntax" />
      <MemberSignature Language="F#" Value="static member WhereClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhereClause condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WhereClauseSyntax ^ WhereClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="condition">
 The boolean expression used for filtering.
 </param>
        <summary>
 Represents a "Where" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax WhereClause (Microsoft.CodeAnalysis.SyntaxToken whereKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax WhereClause(valuetype Microsoft.CodeAnalysis.SyntaxToken whereKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhereClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhereClause (whereKeyword As SyntaxToken, condition As ExpressionSyntax) As WhereClauseSyntax" />
      <MemberSignature Language="F#" Value="static member WhereClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhereClause (whereKeyword, condition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WhereClauseSyntax ^ WhereClause(Microsoft::CodeAnalysis::SyntaxToken whereKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whereKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="whereKeyword">
 The "Where" keyword.
 </param>
        <param name="condition">
 The boolean expression used for filtering.
 </param>
        <summary>
 Represents a "Where" query operator.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhileBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax WhileBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax whileStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax WhileBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax whileStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhileBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhileBlock (whileStatement As WhileStatementSyntax) As WhileBlockSyntax" />
      <MemberSignature Language="F#" Value="static member WhileBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhileBlock whileStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileBlockSyntax ^ WhileBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileStatementSyntax ^ whileStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whileStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="whileStatement">
 The While statement that begins the block.
 </param>
        <summary>
 Represents a While...End While statement, including the While, body and End
 While.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhileBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax WhileBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax whileStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax WhileBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax whileStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhileBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhileBlock (whileStatement As WhileStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As WhileBlockSyntax" />
      <MemberSignature Language="F#" Value="static member WhileBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhileBlock (whileStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileBlockSyntax ^ WhileBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileStatementSyntax ^ whileStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whileStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="whileStatement">
 The While statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the While...End While. This might be an empty list.
 </param>
        <summary>
 Represents a While...End While statement, including the While, body and End
 While.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhileBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax WhileBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax whileStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endWhileStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax WhileBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax whileStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endWhileStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhileBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhileBlock (whileStatement As WhileStatementSyntax, statements As SyntaxList(Of StatementSyntax), endWhileStatement As EndBlockStatementSyntax) As WhileBlockSyntax" />
      <MemberSignature Language="F#" Value="static member WhileBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhileBlock (whileStatement, statements, endWhileStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileBlockSyntax ^ WhileBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileStatementSyntax ^ whileStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endWhileStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whileStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endWhileStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="whileStatement">
 The While statement that begins the block.
 </param>
        <param name="statements">
 The statements contained in the While...End While. This might be an empty list.
 </param>
        <param name="endWhileStatement">
 The End While statement that ends the block.
 </param>
        <summary>
 Represents a While...End While statement, including the While, body and End
 While.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhileClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax WhileClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax WhileClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhileClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhileClause (condition As ExpressionSyntax) As WhileOrUntilClauseSyntax" />
      <MemberSignature Language="F#" Value="static member WhileClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhileClause condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ WhileClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="condition">
 The boolean expression after the While or Until.
 </param>
        <summary>
 Represents a "While expression" or "Until expression" in a Do or Loop
 statement. The Kind of the clause can be "WhileClause" or "UntilClause" to
 indicate which kind of clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhileClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax WhileClause (Microsoft.CodeAnalysis.SyntaxToken whileOrUntilKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax WhileClause(valuetype Microsoft.CodeAnalysis.SyntaxToken whileOrUntilKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhileClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhileClause (whileOrUntilKeyword As SyntaxToken, condition As ExpressionSyntax) As WhileOrUntilClauseSyntax" />
      <MemberSignature Language="F#" Value="static member WhileClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhileClause (whileOrUntilKeyword, condition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ WhileClause(Microsoft::CodeAnalysis::SyntaxToken whileOrUntilKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whileOrUntilKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="whileOrUntilKeyword">
 The "While" or "Until" keyword.
 </param>
        <param name="condition">
 The boolean expression after the While or Until.
 </param>
        <summary>
 Represents a "While expression" or "Until expression" in a Do or Loop
 statement. The Kind of the clause can be "WhileClause" or "UntilClause" to
 indicate which kind of clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhileOrUntilClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax WhileOrUntilClause (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.SyntaxToken whileOrUntilKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax WhileOrUntilClause(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, valuetype Microsoft.CodeAnalysis.SyntaxToken whileOrUntilKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhileOrUntilClause(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhileOrUntilClause (kind As SyntaxKind, whileOrUntilKeyword As SyntaxToken, condition As ExpressionSyntax) As WhileOrUntilClauseSyntax" />
      <MemberSignature Language="F#" Value="static member WhileOrUntilClause : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhileOrUntilClause (kind, whileOrUntilKeyword, condition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ WhileOrUntilClause(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::SyntaxToken whileOrUntilKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="whileOrUntilKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 WhileOrUntilClauseSyntax. One of WhileClause, UntilClause.
 </param>
        <param name="whileOrUntilKeyword">
 The "While" or "Until" keyword.
 </param>
        <param name="condition">
 The boolean expression after the While or Until.
 </param>
        <summary>
 Represents a "While expression" or "Until expression" in a Do or Loop
 statement. The Kind of the clause can be "WhileClause" or "UntilClause" to
 indicate which kind of clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhileStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax WhileStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax WhileStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhileStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhileStatement (condition As ExpressionSyntax) As WhileStatementSyntax" />
      <MemberSignature Language="F#" Value="static member WhileStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhileStatement condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileStatementSyntax ^ WhileStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="condition">
 The boolean expression that controls the While loop.
 </param>
        <summary>
 The While statement that begins a While...End While block. This statement
 always occurs as the Begin of a WhileBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhileStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax WhileStatement (Microsoft.CodeAnalysis.SyntaxToken whileKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax WhileStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken whileKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhileStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhileStatement (whileKeyword As SyntaxToken, condition As ExpressionSyntax) As WhileStatementSyntax" />
      <MemberSignature Language="F#" Value="static member WhileStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhileStatement (whileKeyword, condition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileStatementSyntax ^ WhileStatement(Microsoft::CodeAnalysis::SyntaxToken whileKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whileKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="condition" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="whileKeyword">
 The "While" keyword.
 </param>
        <param name="condition">
 The boolean expression that controls the While loop.
 </param>
        <summary>
 The While statement that begins a While...End While block. This statement
 always occurs as the Begin of a WhileBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Whitespace">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia Whitespace (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTrivia Whitespace(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Whitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Whitespace (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member Whitespace : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Whitespace text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTrivia Whitespace(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text of the whitespace. Any text can be specified here, however only specific
 whitespace characters are recognized by the parser.</param>
        <summary>
 Creates a trivia with kind WhitespaceTrivia containing the specified text.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Whitespace">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia Whitespace (string text, bool elastic);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTrivia Whitespace(string text, bool elastic) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Whitespace(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Whitespace (text As String, elastic As Boolean) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member Whitespace : string * bool -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.Whitespace (text, elastic)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTrivia Whitespace(System::String ^ text, bool elastic);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use SyntaxFactory.Whitespace or SyntaxFactory.ElasticWhitespace")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="elastic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="elastic">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhitespaceTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTrivia WhitespaceTrivia (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTrivia WhitespaceTrivia(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhitespaceTrivia(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhitespaceTrivia (text As String) As SyntaxTrivia" />
      <MemberSignature Language="F#" Value="static member WhitespaceTrivia : string -&gt; Microsoft.CodeAnalysis.SyntaxTrivia" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WhitespaceTrivia text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxTrivia WhitespaceTrivia(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTrivia</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
 The actual text of this token.
 </param>
        <summary>
 Trivia nodes represents parts of the program text that are not parts of the
 syntactic grammar, such as spaces, newlines, comments, preprocessors
 directives, and disabled code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax WithBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax withStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax WithBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax withStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WithBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WithBlock (withStatement As WithStatementSyntax) As WithBlockSyntax" />
      <MemberSignature Language="F#" Value="static member WithBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WithBlock withStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WithBlockSyntax ^ WithBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::WithStatementSyntax ^ withStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="withStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="withStatement">
 The WithStatement that begins the With...End With block.
 </param>
        <summary>
 Represents a With...End With block, include the With statement, the body of the
 block and the End With statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax WithBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax withStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax WithBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax withStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WithBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WithBlock (withStatement As WithStatementSyntax, statements As SyntaxList(Of StatementSyntax)) As WithBlockSyntax" />
      <MemberSignature Language="F#" Value="static member WithBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WithBlock (withStatement, statements)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WithBlockSyntax ^ WithBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::WithStatementSyntax ^ withStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="withStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="withStatement">
 The WithStatement that begins the With...End With block.
 </param>
        <param name="statements">
 The statements contained in the With...End With block. This might be an empty
 list.
 </param>
        <summary>
 Represents a With...End With block, include the With statement, the body of the
 block and the End With statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithBlock">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax WithBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax withStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endWithStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax WithBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax withStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endWithStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WithBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WithBlock (withStatement As WithStatementSyntax, statements As SyntaxList(Of StatementSyntax), endWithStatement As EndBlockStatementSyntax) As WithBlockSyntax" />
      <MemberSignature Language="F#" Value="static member WithBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WithBlock (withStatement, statements, endWithStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WithBlockSyntax ^ WithBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::WithStatementSyntax ^ withStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endWithStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="withStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endWithStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="withStatement">
 The WithStatement that begins the With...End With block.
 </param>
        <param name="statements">
 The statements contained in the With...End With block. This might be an empty
 list.
 </param>
        <param name="endWithStatement">
 The End With statement that ends the block.
 </param>
        <summary>
 Represents a With...End With block, include the With statement, the body of the
 block and the End With statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithEventsEventContainer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax WithEventsEventContainer (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax WithEventsEventContainer(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WithEventsEventContainer(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WithEventsEventContainer (identifier As SyntaxToken) As WithEventsEventContainerSyntax" />
      <MemberSignature Language="F#" Value="static member WithEventsEventContainer : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WithEventsEventContainer identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WithEventsEventContainerSyntax ^ WithEventsEventContainer(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The container of the event. It is a simple identifier that refers to a
 WithEvents member of the containing type.
 </param>
        <summary>
 Represents event container that refers to a WithEvents member.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithEventsEventContainer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax WithEventsEventContainer (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax WithEventsEventContainer(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WithEventsEventContainer(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WithEventsEventContainer (identifier As String) As WithEventsEventContainerSyntax" />
      <MemberSignature Language="F#" Value="static member WithEventsEventContainer : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WithEventsEventContainer identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WithEventsEventContainerSyntax ^ WithEventsEventContainer(System::String ^ identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">
 The container of the event. It is a simple identifier that refers to a
 WithEvents member of the containing type.
 </param>
        <summary>
 Represents event container that refers to a WithEvents member.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithEventsPropertyEventContainer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax WithEventsPropertyEventContainer (Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax withEventsContainer, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax property);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax WithEventsPropertyEventContainer(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax withEventsContainer, class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WithEventsPropertyEventContainer(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WithEventsPropertyEventContainer (withEventsContainer As WithEventsEventContainerSyntax, property As IdentifierNameSyntax) As WithEventsPropertyEventContainerSyntax" />
      <MemberSignature Language="F#" Value="static member WithEventsPropertyEventContainer : Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WithEventsPropertyEventContainer (withEventsContainer, property)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WithEventsPropertyEventContainerSyntax ^ WithEventsPropertyEventContainer(Microsoft::CodeAnalysis::VisualBasic::Syntax::WithEventsEventContainerSyntax ^ withEventsContainer, Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="withEventsContainer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax" />
        <Parameter Name="property" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
      </Parameters>
      <Docs>
        <param name="withEventsContainer">
 The container of the event.
 </param>
        <param name="property">
 The provider of the event. It is a property of a WithEvents member of the
 containing type.
 </param>
        <summary>
 Represents event container that refers to a WithEvents member's property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithEventsPropertyEventContainer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax WithEventsPropertyEventContainer (Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax withEventsContainer, Microsoft.CodeAnalysis.SyntaxToken dotToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax property);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax WithEventsPropertyEventContainer(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax withEventsContainer, valuetype Microsoft.CodeAnalysis.SyntaxToken dotToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax property) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WithEventsPropertyEventContainer(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WithEventsPropertyEventContainer (withEventsContainer As WithEventsEventContainerSyntax, dotToken As SyntaxToken, property As IdentifierNameSyntax) As WithEventsPropertyEventContainerSyntax" />
      <MemberSignature Language="F#" Value="static member WithEventsPropertyEventContainer : Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WithEventsPropertyEventContainer (withEventsContainer, dotToken, property)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WithEventsPropertyEventContainerSyntax ^ WithEventsPropertyEventContainer(Microsoft::CodeAnalysis::VisualBasic::Syntax::WithEventsEventContainerSyntax ^ withEventsContainer, Microsoft::CodeAnalysis::SyntaxToken dotToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="withEventsContainer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax" />
        <Parameter Name="dotToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="property" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
      </Parameters>
      <Docs>
        <param name="withEventsContainer">
 The container of the event.
 </param>
        <param name="dotToken">
 The "." token.
 </param>
        <param name="property">
 The provider of the event. It is a property of a WithEvents member of the
 containing type.
 </param>
        <summary>
 Represents event container that refers to a WithEvents member's property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax WithStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax WithStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WithStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WithStatement (expression As ExpressionSyntax) As WithStatementSyntax" />
      <MemberSignature Language="F#" Value="static member WithStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WithStatement expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WithStatementSyntax ^ WithStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression that is the operand of the With statement.
 </param>
        <summary>
 Represents a "With" statement. This statement always occurs as the
 BeginStatement of a WithBlock, and the body of the With is the Body of that
 WithBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax WithStatement (Microsoft.CodeAnalysis.SyntaxToken withKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax WithStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken withKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WithStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WithStatement (withKeyword As SyntaxToken, expression As ExpressionSyntax) As WithStatementSyntax" />
      <MemberSignature Language="F#" Value="static member WithStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.WithStatement (withKeyword, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::WithStatementSyntax ^ WithStatement(Microsoft::CodeAnalysis::SyntaxToken withKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="withKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="withKeyword">
 The "With" keyword.
 </param>
        <param name="expression">
 The expression that is the operand of the With statement.
 </param>
        <summary>
 Represents a "With" statement. This statement always occurs as the
 BeginStatement of a WithBlock, and the body of the With is the Body of that
 WithBlock.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax XmlAttribute (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax XmlAttribute(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlAttribute (name As XmlNodeSyntax, value As XmlNodeSyntax) As XmlAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlAttribute : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlAttribute (name, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlAttributeSyntax ^ XmlAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
 Represents an XML attribute in an XML literal expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax XmlAttribute (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax XmlAttribute(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken equalsToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlAttribute (name As XmlNodeSyntax, equalsToken As SyntaxToken, value As XmlNodeSyntax) As XmlAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlAttribute : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlAttribute (name, equalsToken, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlAttributeSyntax ^ XmlAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name, Microsoft::CodeAnalysis::SyntaxToken equalsToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
        <Parameter Name="equalsToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="equalsToken">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
 Represents an XML attribute in an XML literal expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAttributeAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlAttributeAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlAttributeAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlAttributeAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlAttributeAccessExpression (name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlAttributeAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlAttributeAccessExpression name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlMemberAccessExpressionSyntax ^ XmlAttributeAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
      </Parameters>
      <Docs>
        <param name="name">
 The identifier after the ".", ".@" or "..."
 </param>
        <summary>
 Represents an XML member element access (node.&lt;Element&gt;), attribute
 access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
 Kind property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAttributeAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlAttributeAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax base, Microsoft.CodeAnalysis.SyntaxToken token2, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlAttributeAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax base, valuetype Microsoft.CodeAnalysis.SyntaxToken token2, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlAttributeAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlAttributeAccessExpression (base As ExpressionSyntax, token2 As SyntaxToken, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlAttributeAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlAttributeAccessExpression (base, token2, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlMemberAccessExpressionSyntax ^ XmlAttributeAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ base, Microsoft::CodeAnalysis::SyntaxToken token2, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="base" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="token2" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
      </Parameters>
      <Docs>
        <param name="base">
 The expression on the left-hand-side of the ".", ".@" or "..." .
 </param>
        <param name="token2">
 The "@" part of .@ or the second "." of "...".
 </param>
        <param name="name">
 The identifier after the ".", ".@" or "..."
 </param>
        <summary>
 Represents an XML member element access (node.&lt;Element&gt;), attribute
 access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
 Kind property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAttributeAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlAttributeAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax base, Microsoft.CodeAnalysis.SyntaxToken token1, Microsoft.CodeAnalysis.SyntaxToken token2, Microsoft.CodeAnalysis.SyntaxToken token3, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlAttributeAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax base, valuetype Microsoft.CodeAnalysis.SyntaxToken token1, valuetype Microsoft.CodeAnalysis.SyntaxToken token2, valuetype Microsoft.CodeAnalysis.SyntaxToken token3, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlAttributeAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlAttributeAccessExpression (base As ExpressionSyntax, token1 As SyntaxToken, token2 As SyntaxToken, token3 As SyntaxToken, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlAttributeAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlAttributeAccessExpression (base, token1, token2, token3, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlMemberAccessExpressionSyntax ^ XmlAttributeAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ base, Microsoft::CodeAnalysis::SyntaxToken token1, Microsoft::CodeAnalysis::SyntaxToken token2, Microsoft::CodeAnalysis::SyntaxToken token3, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="base" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="token1" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="token2" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="token3" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
      </Parameters>
      <Docs>
        <param name="base">
 The expression on the left-hand-side of the ".", ".@" or "..." .
 </param>
        <param name="token1">
 The initial dot "." part of the separator.
 </param>
        <param name="token2">
 The "@" part of .@ or the second "." of "...".
 </param>
        <param name="token3">
 The third "." in a "..." separator.
 </param>
        <param name="name">
 The identifier after the ".", ".@" or "..."
 </param>
        <summary>
 Represents an XML member element access (node.&lt;Element&gt;), attribute
 access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
 Kind property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlBracketedName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax XmlBracketedName (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax XmlBracketedName(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlBracketedName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlBracketedName (name As XmlNameSyntax) As XmlBracketedNameSyntax" />
      <MemberSignature Language="F#" Value="static member XmlBracketedName : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlBracketedName name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlBracketedNameSyntax ^ XmlBracketedName(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
 Represents an XML name of the form &lt;xml-name&gt; appearing in source as part
 of an XML literal or member access expression or an XML namespace import
 clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlBracketedName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax XmlBracketedName (Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax XmlBracketedName(valuetype Microsoft.CodeAnalysis.SyntaxToken lessThanToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlBracketedName(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlBracketedName (lessThanToken As SyntaxToken, name As XmlNameSyntax, greaterThanToken As SyntaxToken) As XmlBracketedNameSyntax" />
      <MemberSignature Language="F#" Value="static member XmlBracketedName : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlBracketedName (lessThanToken, name, greaterThanToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlBracketedNameSyntax ^ XmlBracketedName(Microsoft::CodeAnalysis::SyntaxToken lessThanToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameSyntax ^ name, Microsoft::CodeAnalysis::SyntaxToken greaterThanToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lessThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax" />
        <Parameter Name="greaterThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="lessThanToken">To be added.</param>
        <param name="name">To be added.</param>
        <param name="greaterThanToken">To be added.</param>
        <summary>
 Represents an XML name of the form &lt;xml-name&gt; appearing in source as part
 of an XML literal or member access expression or an XML namespace import
 clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlCDataSection">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax XmlCDataSection ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax XmlCDataSection() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlCDataSection" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlCDataSection () As XmlCDataSectionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlCDataSection : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlCDataSection " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlCDataSectionSyntax ^ XmlCDataSection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an XML CDATA section in an XML literal expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlCDataSection">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax XmlCDataSection (Microsoft.CodeAnalysis.SyntaxToken beginCDataToken, Microsoft.CodeAnalysis.SyntaxTokenList textTokens, Microsoft.CodeAnalysis.SyntaxToken endCDataToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax XmlCDataSection(valuetype Microsoft.CodeAnalysis.SyntaxToken beginCDataToken, valuetype Microsoft.CodeAnalysis.SyntaxTokenList textTokens, valuetype Microsoft.CodeAnalysis.SyntaxToken endCDataToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlCDataSection(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlCDataSection (beginCDataToken As SyntaxToken, textTokens As SyntaxTokenList, endCDataToken As SyntaxToken) As XmlCDataSectionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlCDataSection : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlCDataSection (beginCDataToken, textTokens, endCDataToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlCDataSectionSyntax ^ XmlCDataSection(Microsoft::CodeAnalysis::SyntaxToken beginCDataToken, Microsoft::CodeAnalysis::SyntaxTokenList textTokens, Microsoft::CodeAnalysis::SyntaxToken endCDataToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginCDataToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="endCDataToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="beginCDataToken">To be added.</param>
        <param name="textTokens">To be added.</param>
        <param name="endCDataToken">To be added.</param>
        <summary>
 Represents an XML CDATA section in an XML literal expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlComment">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax XmlComment ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax XmlComment() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlComment" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlComment () As XmlCommentSyntax" />
      <MemberSignature Language="F#" Value="static member XmlComment : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlComment " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlCommentSyntax ^ XmlComment();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an XML comment of the form &lt;!-- Comment --&gt; appearing in an
 XML literal expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlComment">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax XmlComment (Microsoft.CodeAnalysis.SyntaxToken lessThanExclamationMinusMinusToken, Microsoft.CodeAnalysis.SyntaxTokenList textTokens, Microsoft.CodeAnalysis.SyntaxToken minusMinusGreaterThanToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax XmlComment(valuetype Microsoft.CodeAnalysis.SyntaxToken lessThanExclamationMinusMinusToken, valuetype Microsoft.CodeAnalysis.SyntaxTokenList textTokens, valuetype Microsoft.CodeAnalysis.SyntaxToken minusMinusGreaterThanToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlComment(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlComment (lessThanExclamationMinusMinusToken As SyntaxToken, textTokens As SyntaxTokenList, minusMinusGreaterThanToken As SyntaxToken) As XmlCommentSyntax" />
      <MemberSignature Language="F#" Value="static member XmlComment : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlComment (lessThanExclamationMinusMinusToken, textTokens, minusMinusGreaterThanToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlCommentSyntax ^ XmlComment(Microsoft::CodeAnalysis::SyntaxToken lessThanExclamationMinusMinusToken, Microsoft::CodeAnalysis::SyntaxTokenList textTokens, Microsoft::CodeAnalysis::SyntaxToken minusMinusGreaterThanToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lessThanExclamationMinusMinusToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="minusMinusGreaterThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="lessThanExclamationMinusMinusToken">To be added.</param>
        <param name="textTokens">To be added.</param>
        <param name="minusMinusGreaterThanToken">To be added.</param>
        <summary>
 Represents an XML comment of the form &lt;!-- Comment --&gt; appearing in an
 XML literal expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlCrefAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute (Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlCrefAttribute (cref As CrefReferenceSyntax) As XmlCrefAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlCrefAttribute : Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlCrefAttribute cref" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlCrefAttributeSyntax ^ XmlCrefAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefReferenceSyntax ^ cref);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cref" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax" />
      </Parameters>
      <Docs>
        <param name="cref">The <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax" /> used for the xml cref attribute syntax.</param>
        <summary>
 Creates a syntax node for a cref attribute within a xml documentation comment.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlCrefAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute (Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind quoteKind);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref, valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind quoteKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax,Microsoft.CodeAnalysis.VisualBasic.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlCrefAttribute (cref As CrefReferenceSyntax, quoteKind As SyntaxKind) As XmlCrefAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlCrefAttribute : Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax * Microsoft.CodeAnalysis.VisualBasic.SyntaxKind -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlCrefAttribute (cref, quoteKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlCrefAttributeSyntax ^ XmlCrefAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefReferenceSyntax ^ cref, Microsoft::CodeAnalysis::VisualBasic::SyntaxKind quoteKind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cref" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax" />
        <Parameter Name="quoteKind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="cref">The <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax" /> used for the xml cref attribute syntax.</param>
        <param name="quoteKind">The kind of the quote for the referenced item in the cref attribute.</param>
        <summary>
 Creates a syntax node for a cref attribute within a xml documentation comment.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlCrefAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax reference, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax reference, valuetype Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlCrefAttribute (name As XmlNameSyntax, startQuoteToken As SyntaxToken, reference As CrefReferenceSyntax, endQuoteToken As SyntaxToken) As XmlCrefAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlCrefAttribute : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlCrefAttribute (name, startQuoteToken, reference, endQuoteToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlCrefAttributeSyntax ^ XmlCrefAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameSyntax ^ name, Microsoft::CodeAnalysis::SyntaxToken startQuoteToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefReferenceSyntax ^ reference, Microsoft::CodeAnalysis::SyntaxToken endQuoteToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax" />
        <Parameter Name="startQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="reference" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax" />
        <Parameter Name="endQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="startQuoteToken">To be added.</param>
        <param name="reference">To be added.</param>
        <param name="endQuoteToken">To be added.</param>
        <summary>
 A symbol referenced by a cref attribute (e.g. in a &lt;see&gt; or
 &lt;seealso&gt; documentation comment tag). For example, the M in &lt;see
 cref="M" /&gt;.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlCrefAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax reference, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax XmlCrefAttribute(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken equalsToken, valuetype Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax reference, valuetype Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlCrefAttribute (name As XmlNameSyntax, equalsToken As SyntaxToken, startQuoteToken As SyntaxToken, reference As CrefReferenceSyntax, endQuoteToken As SyntaxToken) As XmlCrefAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlCrefAttribute : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlCrefAttribute (name, equalsToken, startQuoteToken, reference, endQuoteToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlCrefAttributeSyntax ^ XmlCrefAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameSyntax ^ name, Microsoft::CodeAnalysis::SyntaxToken equalsToken, Microsoft::CodeAnalysis::SyntaxToken startQuoteToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefReferenceSyntax ^ reference, Microsoft::CodeAnalysis::SyntaxToken endQuoteToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax" />
        <Parameter Name="equalsToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="startQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="reference" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax" />
        <Parameter Name="endQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="equalsToken">To be added.</param>
        <param name="startQuoteToken">To be added.</param>
        <param name="reference">To be added.</param>
        <param name="endQuoteToken">To be added.</param>
        <summary>
 A symbol referenced by a cref attribute (e.g. in a &lt;see&gt; or
 &lt;seealso&gt; documentation comment tag). For example, the M in &lt;see
 cref="M" /&gt;.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax XmlDeclaration (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax version);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax XmlDeclaration(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax version) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlDeclaration (version As XmlDeclarationOptionSyntax) As XmlDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member XmlDeclaration : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDeclaration version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationSyntax ^ XmlDeclaration(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationOptionSyntax ^ version);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="version" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax" />
      </Parameters>
      <Docs>
        <param name="version">To be added.</param>
        <summary>
 Represents the XML declaration prologue in an XML literal expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax XmlDeclaration (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax version, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax encoding, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax XmlDeclaration(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax version, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax encoding, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlDeclaration (version As XmlDeclarationOptionSyntax, encoding As XmlDeclarationOptionSyntax, standalone As XmlDeclarationOptionSyntax) As XmlDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member XmlDeclaration : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDeclaration (version, encoding, standalone)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationSyntax ^ XmlDeclaration(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationOptionSyntax ^ version, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationOptionSyntax ^ encoding, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationOptionSyntax ^ standalone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="version" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax" />
        <Parameter Name="encoding" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax" />
        <Parameter Name="standalone" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax" />
      </Parameters>
      <Docs>
        <param name="version">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="standalone">To be added.</param>
        <summary>
 Represents the XML declaration prologue in an XML literal expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDeclaration">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax XmlDeclaration (Microsoft.CodeAnalysis.SyntaxToken lessThanQuestionToken, Microsoft.CodeAnalysis.SyntaxToken xmlKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax version, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax encoding, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax standalone, Microsoft.CodeAnalysis.SyntaxToken questionGreaterThanToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax XmlDeclaration(valuetype Microsoft.CodeAnalysis.SyntaxToken lessThanQuestionToken, valuetype Microsoft.CodeAnalysis.SyntaxToken xmlKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax version, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax encoding, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax standalone, valuetype Microsoft.CodeAnalysis.SyntaxToken questionGreaterThanToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlDeclaration (lessThanQuestionToken As SyntaxToken, xmlKeyword As SyntaxToken, version As XmlDeclarationOptionSyntax, encoding As XmlDeclarationOptionSyntax, standalone As XmlDeclarationOptionSyntax, questionGreaterThanToken As SyntaxToken) As XmlDeclarationSyntax" />
      <MemberSignature Language="F#" Value="static member XmlDeclaration : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDeclaration (lessThanQuestionToken, xmlKeyword, version, encoding, standalone, questionGreaterThanToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationSyntax ^ XmlDeclaration(Microsoft::CodeAnalysis::SyntaxToken lessThanQuestionToken, Microsoft::CodeAnalysis::SyntaxToken xmlKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationOptionSyntax ^ version, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationOptionSyntax ^ encoding, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationOptionSyntax ^ standalone, Microsoft::CodeAnalysis::SyntaxToken questionGreaterThanToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lessThanQuestionToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="xmlKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="version" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax" />
        <Parameter Name="encoding" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax" />
        <Parameter Name="standalone" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax" />
        <Parameter Name="questionGreaterThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="lessThanQuestionToken">To be added.</param>
        <param name="xmlKeyword">To be added.</param>
        <param name="version">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="standalone">To be added.</param>
        <param name="questionGreaterThanToken">To be added.</param>
        <summary>
 Represents the XML declaration prologue in an XML literal expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDeclarationOption">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax XmlDeclarationOption (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax XmlDeclarationOption(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDeclarationOption(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlDeclarationOption (value As XmlStringSyntax) As XmlDeclarationOptionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlDeclarationOption : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDeclarationOption value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationOptionSyntax ^ XmlDeclarationOption(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlStringSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
 Represents an XML document prologue option - version, encoding, standalone or
 whitespace in an XML literal expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDeclarationOption">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax XmlDeclarationOption (Microsoft.CodeAnalysis.SyntaxToken name, Microsoft.CodeAnalysis.SyntaxToken equals, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax XmlDeclarationOption(valuetype Microsoft.CodeAnalysis.SyntaxToken name, valuetype Microsoft.CodeAnalysis.SyntaxToken equals, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDeclarationOption(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlDeclarationOption (name As SyntaxToken, equals As SyntaxToken, value As XmlStringSyntax) As XmlDeclarationOptionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlDeclarationOption : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDeclarationOption (name, equals, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationOptionSyntax ^ XmlDeclarationOption(Microsoft::CodeAnalysis::SyntaxToken name, Microsoft::CodeAnalysis::SyntaxToken equals, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlStringSyntax ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="equals" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="equals">To be added.</param>
        <param name="value">To be added.</param>
        <summary>
 Represents an XML document prologue option - version, encoding, standalone or
 whitespace in an XML literal expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDescendantAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlDescendantAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlDescendantAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDescendantAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlDescendantAccessExpression (name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlDescendantAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDescendantAccessExpression name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlMemberAccessExpressionSyntax ^ XmlDescendantAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
      </Parameters>
      <Docs>
        <param name="name">
 The identifier after the ".", ".@" or "..."
 </param>
        <summary>
 Represents an XML member element access (node.&lt;Element&gt;), attribute
 access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
 Kind property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDescendantAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlDescendantAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax base, Microsoft.CodeAnalysis.SyntaxToken token2, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlDescendantAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax base, valuetype Microsoft.CodeAnalysis.SyntaxToken token2, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDescendantAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlDescendantAccessExpression (base As ExpressionSyntax, token2 As SyntaxToken, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlDescendantAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDescendantAccessExpression (base, token2, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlMemberAccessExpressionSyntax ^ XmlDescendantAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ base, Microsoft::CodeAnalysis::SyntaxToken token2, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="base" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="token2" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
      </Parameters>
      <Docs>
        <param name="base">
 The expression on the left-hand-side of the ".", ".@" or "..." .
 </param>
        <param name="token2">
 The "@" part of .@ or the second "." of "...".
 </param>
        <param name="name">
 The identifier after the ".", ".@" or "..."
 </param>
        <summary>
 Represents an XML member element access (node.&lt;Element&gt;), attribute
 access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
 Kind property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDescendantAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlDescendantAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax base, Microsoft.CodeAnalysis.SyntaxToken token1, Microsoft.CodeAnalysis.SyntaxToken token2, Microsoft.CodeAnalysis.SyntaxToken token3, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlDescendantAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax base, valuetype Microsoft.CodeAnalysis.SyntaxToken token1, valuetype Microsoft.CodeAnalysis.SyntaxToken token2, valuetype Microsoft.CodeAnalysis.SyntaxToken token3, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDescendantAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlDescendantAccessExpression (base As ExpressionSyntax, token1 As SyntaxToken, token2 As SyntaxToken, token3 As SyntaxToken, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlDescendantAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDescendantAccessExpression (base, token1, token2, token3, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlMemberAccessExpressionSyntax ^ XmlDescendantAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ base, Microsoft::CodeAnalysis::SyntaxToken token1, Microsoft::CodeAnalysis::SyntaxToken token2, Microsoft::CodeAnalysis::SyntaxToken token3, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="base" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="token1" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="token2" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="token3" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
      </Parameters>
      <Docs>
        <param name="base">
 The expression on the left-hand-side of the ".", ".@" or "..." .
 </param>
        <param name="token1">
 The initial dot "." part of the separator.
 </param>
        <param name="token2">
 The "@" part of .@ or the second "." of "...".
 </param>
        <param name="token3">
 The third "." in a "..." separator.
 </param>
        <param name="name">
 The identifier after the ".", ".@" or "..."
 </param>
        <summary>
 Represents an XML member element access (node.&lt;Element&gt;), attribute
 access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
 Kind property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDocument">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax XmlDocument (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax declaration, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax root);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax XmlDocument(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax declaration, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax root) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDocument(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlDocument (declaration As XmlDeclarationSyntax, root As XmlNodeSyntax) As XmlDocumentSyntax" />
      <MemberSignature Language="F#" Value="static member XmlDocument : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDocument (declaration, root)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDocumentSyntax ^ XmlDocument(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationSyntax ^ declaration, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ root);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax" />
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="root">To be added.</param>
        <summary>
 Represents an XML Document literal expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDocument">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax XmlDocument (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax declaration, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; precedingMisc, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax root, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; followingMisc);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax XmlDocument(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax declaration, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; precedingMisc, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax root, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; followingMisc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDocument(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlDocument (declaration As XmlDeclarationSyntax, precedingMisc As SyntaxList(Of XmlNodeSyntax), root As XmlNodeSyntax, followingMisc As SyntaxList(Of XmlNodeSyntax)) As XmlDocumentSyntax" />
      <MemberSignature Language="F#" Value="static member XmlDocument : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlDocument (declaration, precedingMisc, root, followingMisc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDocumentSyntax ^ XmlDocument(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationSyntax ^ declaration, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; precedingMisc, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ root, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; followingMisc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax" />
        <Parameter Name="precedingMisc" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
        <Parameter Name="followingMisc" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <param name="precedingMisc">To be added.</param>
        <param name="root">To be added.</param>
        <param name="followingMisc">To be added.</param>
        <summary>
 Represents an XML Document literal expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlElement (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax startTag, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax endTag);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax startTag, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax endTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElement (startTag As XmlElementStartTagSyntax, endTag As XmlElementEndTagSyntax) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElement (startTag, endTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementStartTagSyntax ^ startTag, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementEndTagSyntax ^ endTag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startTag" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax" />
        <Parameter Name="endTag" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax" />
      </Parameters>
      <Docs>
        <param name="startTag">To be added.</param>
        <param name="endTag">To be added.</param>
        <summary>
 Represents an XML element with content in an XML literal expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlElement (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElement (name As XmlNameSyntax, content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElement (name, content)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameSyntax ^ name, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="name">The name of the empty xml element.</param>
        <param name="content">A list of syntax nodes that represents the content of the xml element.</param>
        <summary>
 Creates the syntax representation of a named xml element within xml documentation comments.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlElement (string localName, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlElement(string localName, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElement(System.String,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElement (localName As String, content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElement : string * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElement (localName, content)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlElement(System::String ^ localName, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="localName">The name of the empty xml element.</param>
        <param name="content">A list of syntax nodes that represents the content of the xml element.</param>
        <summary>
 Creates the syntax representation of a named xml element within xml documentation comments.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlElement (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax startTag, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax endTag);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax startTag, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax endTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElement (startTag As XmlElementStartTagSyntax, content As SyntaxList(Of XmlNodeSyntax), endTag As XmlElementEndTagSyntax) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElement (startTag, content, endTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementStartTagSyntax ^ startTag, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; content, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementEndTagSyntax ^ endTag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startTag" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
        <Parameter Name="endTag" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax" />
      </Parameters>
      <Docs>
        <param name="startTag">To be added.</param>
        <param name="content">To be added.</param>
        <param name="endTag">To be added.</param>
        <summary>
 Represents an XML element with content in an XML literal expression.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElementAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlElementAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlElementAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElementAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElementAccessExpression (name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElementAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElementAccessExpression name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlMemberAccessExpressionSyntax ^ XmlElementAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
      </Parameters>
      <Docs>
        <param name="name">
 The identifier after the ".", ".@" or "..."
 </param>
        <summary>
 Represents an XML member element access (node.&lt;Element&gt;), attribute
 access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
 Kind property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElementAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlElementAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax base, Microsoft.CodeAnalysis.SyntaxToken token2, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlElementAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax base, valuetype Microsoft.CodeAnalysis.SyntaxToken token2, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElementAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElementAccessExpression (base As ExpressionSyntax, token2 As SyntaxToken, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElementAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElementAccessExpression (base, token2, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlMemberAccessExpressionSyntax ^ XmlElementAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ base, Microsoft::CodeAnalysis::SyntaxToken token2, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="base" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="token2" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
      </Parameters>
      <Docs>
        <param name="base">
 The expression on the left-hand-side of the ".", ".@" or "..." .
 </param>
        <param name="token2">
 The "@" part of .@ or the second "." of "...".
 </param>
        <param name="name">
 The identifier after the ".", ".@" or "..."
 </param>
        <summary>
 Represents an XML member element access (node.&lt;Element&gt;), attribute
 access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
 Kind property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElementAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlElementAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax base, Microsoft.CodeAnalysis.SyntaxToken token1, Microsoft.CodeAnalysis.SyntaxToken token2, Microsoft.CodeAnalysis.SyntaxToken token3, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlElementAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax base, valuetype Microsoft.CodeAnalysis.SyntaxToken token1, valuetype Microsoft.CodeAnalysis.SyntaxToken token2, valuetype Microsoft.CodeAnalysis.SyntaxToken token3, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElementAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElementAccessExpression (base As ExpressionSyntax, token1 As SyntaxToken, token2 As SyntaxToken, token3 As SyntaxToken, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElementAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElementAccessExpression (base, token1, token2, token3, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlMemberAccessExpressionSyntax ^ XmlElementAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ base, Microsoft::CodeAnalysis::SyntaxToken token1, Microsoft::CodeAnalysis::SyntaxToken token2, Microsoft::CodeAnalysis::SyntaxToken token3, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="base" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="token1" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="token2" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="token3" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
      </Parameters>
      <Docs>
        <param name="base">
 The expression on the left-hand-side of the ".", ".@" or "..." .
 </param>
        <param name="token1">
 The initial dot "." part of the separator.
 </param>
        <param name="token2">
 The "@" part of .@ or the second "." of "...".
 </param>
        <param name="token3">
 The third "." in a "..." separator.
 </param>
        <param name="name">
 The identifier after the ".", ".@" or "..."
 </param>
        <summary>
 Represents an XML member element access (node.&lt;Element&gt;), attribute
 access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
 Kind property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElementEndTag">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax XmlElementEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax XmlElementEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElementEndTag" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElementEndTag () As XmlElementEndTagSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElementEndTag : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElementEndTag " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementEndTagSyntax ^ XmlElementEndTag();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents the end tag of an XML element of the form &lt;/element&gt;.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElementEndTag">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax XmlElementEndTag (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax XmlElementEndTag(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElementEndTag(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElementEndTag (name As XmlNameSyntax) As XmlElementEndTagSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElementEndTag : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElementEndTag name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementEndTagSyntax ^ XmlElementEndTag(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
 Represents the end tag of an XML element of the form &lt;/element&gt;.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElementEndTag">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax XmlElementEndTag (Microsoft.CodeAnalysis.SyntaxToken lessThanSlashToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax XmlElementEndTag(valuetype Microsoft.CodeAnalysis.SyntaxToken lessThanSlashToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElementEndTag(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElementEndTag (lessThanSlashToken As SyntaxToken, name As XmlNameSyntax, greaterThanToken As SyntaxToken) As XmlElementEndTagSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElementEndTag : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElementEndTag (lessThanSlashToken, name, greaterThanToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementEndTagSyntax ^ XmlElementEndTag(Microsoft::CodeAnalysis::SyntaxToken lessThanSlashToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameSyntax ^ name, Microsoft::CodeAnalysis::SyntaxToken greaterThanToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lessThanSlashToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax" />
        <Parameter Name="greaterThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="lessThanSlashToken">To be added.</param>
        <param name="name">To be added.</param>
        <param name="greaterThanToken">To be added.</param>
        <summary>
 Represents the end tag of an XML element of the form &lt;/element&gt;.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElementStartTag">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax XmlElementStartTag (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax XmlElementStartTag(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElementStartTag (name As XmlNodeSyntax) As XmlElementStartTagSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElementStartTag : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElementStartTag name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementStartTagSyntax ^ XmlElementStartTag(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
 Represents the start tag of an XML element of the form &lt;element&gt;.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElementStartTag">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax XmlElementStartTag (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax XmlElementStartTag(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElementStartTag (name As XmlNodeSyntax, attributes As SyntaxList(Of XmlNodeSyntax)) As XmlElementStartTagSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElementStartTag : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElementStartTag (name, attributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementStartTagSyntax ^ XmlElementStartTag(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>
 Represents the start tag of an XML element of the form &lt;element&gt;.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElementStartTag">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax XmlElementStartTag (Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; attributes, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax XmlElementStartTag(valuetype Microsoft.CodeAnalysis.SyntaxToken lessThanToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; attributes, valuetype Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlElementStartTag (lessThanToken As SyntaxToken, name As XmlNodeSyntax, attributes As SyntaxList(Of XmlNodeSyntax), greaterThanToken As SyntaxToken) As XmlElementStartTagSyntax" />
      <MemberSignature Language="F#" Value="static member XmlElementStartTag : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlElementStartTag (lessThanToken, name, attributes, greaterThanToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementStartTagSyntax ^ XmlElementStartTag(Microsoft::CodeAnalysis::SyntaxToken lessThanToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; attributes, Microsoft::CodeAnalysis::SyntaxToken greaterThanToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lessThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
        <Parameter Name="greaterThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="lessThanToken">To be added.</param>
        <param name="name">To be added.</param>
        <param name="attributes">To be added.</param>
        <param name="greaterThanToken">To be added.</param>
        <summary>
 Represents the start tag of an XML element of the form &lt;element&gt;.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEmbeddedExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax XmlEmbeddedExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax XmlEmbeddedExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlEmbeddedExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEmbeddedExpression (expression As ExpressionSyntax) As XmlEmbeddedExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlEmbeddedExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlEmbeddedExpression expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmbeddedExpressionSyntax ^ XmlEmbeddedExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
 Represents an embedded expression in an XML literal e.g. '&lt;name&gt;&lt;%=
 obj.Name =%&gt;&lt;/name&gt;'.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEmbeddedExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax XmlEmbeddedExpression (Microsoft.CodeAnalysis.SyntaxToken lessThanPercentEqualsToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken percentGreaterThanToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax XmlEmbeddedExpression(valuetype Microsoft.CodeAnalysis.SyntaxToken lessThanPercentEqualsToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken percentGreaterThanToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlEmbeddedExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEmbeddedExpression (lessThanPercentEqualsToken As SyntaxToken, expression As ExpressionSyntax, percentGreaterThanToken As SyntaxToken) As XmlEmbeddedExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlEmbeddedExpression : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlEmbeddedExpression (lessThanPercentEqualsToken, expression, percentGreaterThanToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmbeddedExpressionSyntax ^ XmlEmbeddedExpression(Microsoft::CodeAnalysis::SyntaxToken lessThanPercentEqualsToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SyntaxToken percentGreaterThanToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lessThanPercentEqualsToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="percentGreaterThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="lessThanPercentEqualsToken">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="percentGreaterThanToken">To be added.</param>
        <summary>
 Represents an embedded expression in an XML literal e.g. '&lt;name&gt;&lt;%=
 obj.Name =%&gt;&lt;/name&gt;'.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEmptyElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlEmptyElement (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlEmptyElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEmptyElement (name As XmlNodeSyntax) As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlEmptyElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlEmptyElement name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmptyElementSyntax ^ XmlEmptyElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
 Represents an empty XML element of the form &lt;element /&gt;
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEmptyElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlEmptyElement (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlEmptyElement(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlEmptyElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEmptyElement (localName As String) As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlEmptyElement : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlEmptyElement localName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmptyElementSyntax ^ XmlEmptyElement(System::String ^ localName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">The name of the empty xml element.</param>
        <summary>
 Creates the syntax representation of a named empty xml element within xml documentation comments.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEmptyElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlEmptyElement (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlEmptyElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEmptyElement (name As XmlNodeSyntax, attributes As SyntaxList(Of XmlNodeSyntax)) As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlEmptyElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlEmptyElement (name, attributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmptyElementSyntax ^ XmlEmptyElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>
 Represents an empty XML element of the form &lt;element /&gt;
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEmptyElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlEmptyElement (Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; attributes, Microsoft.CodeAnalysis.SyntaxToken slashGreaterThanToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlEmptyElement(valuetype Microsoft.CodeAnalysis.SyntaxToken lessThanToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; attributes, valuetype Microsoft.CodeAnalysis.SyntaxToken slashGreaterThanToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax},Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEmptyElement (lessThanToken As SyntaxToken, name As XmlNodeSyntax, attributes As SyntaxList(Of XmlNodeSyntax), slashGreaterThanToken As SyntaxToken) As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlEmptyElement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlEmptyElement (lessThanToken, name, attributes, slashGreaterThanToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmptyElementSyntax ^ XmlEmptyElement(Microsoft::CodeAnalysis::SyntaxToken lessThanToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; attributes, Microsoft::CodeAnalysis::SyntaxToken slashGreaterThanToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lessThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
        <Parameter Name="attributes" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
        <Parameter Name="slashGreaterThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="lessThanToken">To be added.</param>
        <param name="name">To be added.</param>
        <param name="attributes">To be added.</param>
        <param name="slashGreaterThanToken">To be added.</param>
        <summary>
 Represents an empty XML element of the form &lt;element /&gt;
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEntityLiteralToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlEntityLiteralToken (string text, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken XmlEntityLiteralToken(string text, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlEntityLiteralToken(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEntityLiteralToken (text As String, value As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlEntityLiteralToken : string * string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlEntityLiteralToken (text, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken XmlEntityLiteralToken(System::String ^ text, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="value">To be added.</param>
        <summary>
 Represents character data in Xml content also known as PCData or in an Xml
 attribute value. All text is here for now even text that does not need
 normalization such as comment, pi and cdata text.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEntityLiteralToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlEntityLiteralToken (Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken XmlEntityLiteralToken(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, string value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlEntityLiteralToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEntityLiteralToken (leadingTrivia As SyntaxTriviaList, text As String, value As String, trailingTrivia As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlEntityLiteralToken : Microsoft.CodeAnalysis.SyntaxTriviaList * string * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlEntityLiteralToken (leadingTrivia, text, value, trailingTrivia)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken XmlEntityLiteralToken(Microsoft::CodeAnalysis::SyntaxTriviaList leadingTrivia, System::String ^ text, System::String ^ value, Microsoft::CodeAnalysis::SyntaxTriviaList trailingTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leadingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="trailingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leadingTrivia">To be added.</param>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="value">To be added.</param>
        <param name="trailingTrivia">To be added.</param>
        <summary>
 Represents character data in Xml content also known as PCData or in an Xml
 attribute value. All text is here for now even text that does not need
 normalization such as comment, pi and cdata text.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlExampleElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlExampleElement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlExampleElement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlExampleElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlExampleElement (content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlExampleElement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlExampleElement content" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlExampleElement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="content">A list of syntax nodes that represents the content of the example element.</param>
        <summary>
 Creates the syntax representation of an example element within xml documentation comments.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlExampleElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlExampleElement (params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlExampleElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlExampleElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlExampleElement (ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlExampleElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlExampleElement content" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlExampleElement(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">A list of syntax nodes that represents the content of the example element.</param>
        <summary>
 Creates the syntax representation of an example element within xml documentation comments.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlExceptionElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlExceptionElement (Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlExceptionElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlExceptionElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlExceptionElement (cref As CrefReferenceSyntax, content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlExceptionElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlExceptionElement (cref, content)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlExceptionElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefReferenceSyntax ^ cref, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cref" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="cref">Syntax representation of the reference to the exception type.</param>
        <param name="content">A list of syntax nodes that represents the content of the exception element.</param>
        <summary>
 Creates the syntax representation of an exception element within xml documentation comments.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlExceptionElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlExceptionElement (Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref, params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlExceptionElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlExceptionElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlExceptionElement (cref As CrefReferenceSyntax, ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlExceptionElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlExceptionElement (cref, content)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlExceptionElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefReferenceSyntax ^ cref, ... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cref" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="cref">Syntax representation of the reference to the exception type.</param>
        <param name="content">A list of syntax nodes that represents the content of the exception element.</param>
        <summary>
 Creates the syntax representation of an exception element within xml documentation comments.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlMemberAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlMemberAccessExpression (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlMemberAccessExpression(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlMemberAccessExpression (kind As SyntaxKind, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlMemberAccessExpression : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlMemberAccessExpression (kind, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlMemberAccessExpressionSyntax ^ XmlMemberAccessExpression(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 XmlMemberAccessExpressionSyntax. One of XmlElementAccessExpression,
 XmlDescendantAccessExpression, XmlAttributeAccessExpression.
 </param>
        <param name="name">
 The identifier after the ".", ".@" or "..."
 </param>
        <summary>
 Represents an XML member element access (node.&lt;Element&gt;), attribute
 access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
 Kind property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlMemberAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlMemberAccessExpression (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax base, Microsoft.CodeAnalysis.SyntaxToken token2, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlMemberAccessExpression(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax base, valuetype Microsoft.CodeAnalysis.SyntaxToken token2, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlMemberAccessExpression (kind As SyntaxKind, base As ExpressionSyntax, token2 As SyntaxToken, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlMemberAccessExpression : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlMemberAccessExpression (kind, base, token2, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlMemberAccessExpressionSyntax ^ XmlMemberAccessExpression(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ base, Microsoft::CodeAnalysis::SyntaxToken token2, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="base" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="token2" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 XmlMemberAccessExpressionSyntax. One of XmlElementAccessExpression,
 XmlDescendantAccessExpression, XmlAttributeAccessExpression.
 </param>
        <param name="base">
 The expression on the left-hand-side of the ".", ".@" or "..." .
 </param>
        <param name="token2">
 The "@" part of .@ or the second "." of "...".
 </param>
        <param name="name">
 The identifier after the ".", ".@" or "..."
 </param>
        <summary>
 Represents an XML member element access (node.&lt;Element&gt;), attribute
 access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
 Kind property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlMemberAccessExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlMemberAccessExpression (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax base, Microsoft.CodeAnalysis.SyntaxToken token1, Microsoft.CodeAnalysis.SyntaxToken token2, Microsoft.CodeAnalysis.SyntaxToken token3, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax XmlMemberAccessExpression(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax base, valuetype Microsoft.CodeAnalysis.SyntaxToken token1, valuetype Microsoft.CodeAnalysis.SyntaxToken token2, valuetype Microsoft.CodeAnalysis.SyntaxToken token3, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlMemberAccessExpression (kind As SyntaxKind, base As ExpressionSyntax, token1 As SyntaxToken, token2 As SyntaxToken, token3 As SyntaxToken, name As XmlNodeSyntax) As XmlMemberAccessExpressionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlMemberAccessExpression : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlMemberAccessExpression (kind, base, token1, token2, token3, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlMemberAccessExpressionSyntax ^ XmlMemberAccessExpression(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ base, Microsoft::CodeAnalysis::SyntaxToken token1, Microsoft::CodeAnalysis::SyntaxToken token2, Microsoft::CodeAnalysis::SyntaxToken token3, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="base" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="token1" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="token2" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="token3" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of
 XmlMemberAccessExpressionSyntax. One of XmlElementAccessExpression,
 XmlDescendantAccessExpression, XmlAttributeAccessExpression.
 </param>
        <param name="base">
 The expression on the left-hand-side of the ".", ".@" or "..." .
 </param>
        <param name="token1">
 The initial dot "." part of the separator.
 </param>
        <param name="token2">
 The "@" part of .@ or the second "." of "...".
 </param>
        <param name="token3">
 The third "." in a "..." separator.
 </param>
        <param name="name">
 The identifier after the ".", ".@" or "..."
 </param>
        <summary>
 Represents an XML member element access (node.&lt;Element&gt;), attribute
 access (node.@Attribute) or descendants access (node...&lt;Descendant&gt;). The
 Kind property determines which kind of access.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlMultiLineElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlMultiLineElement (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlMultiLineElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlMultiLineElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlMultiLineElement (name As XmlNameSyntax, content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlMultiLineElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlMultiLineElement (name, content)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlMultiLineElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameSyntax ^ name, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="name">The name of the xml element.</param>
        <param name="content">A list of syntax nodes that represents the content of the xml multi line element.</param>
        <summary>
 Creates the syntax representation of an xml element that spans multiple text lines.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlMultiLineElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlMultiLineElement (string localName, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlMultiLineElement(string localName, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlMultiLineElement(System.String,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlMultiLineElement (localName As String, content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlMultiLineElement : string * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlMultiLineElement (localName, content)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlMultiLineElement(System::String ^ localName, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="localName">The name of the xml element.</param>
        <param name="content">A list of syntax nodes that represents the content of the xml multi line element.</param>
        <summary>
 Creates the syntax representation of an xml element that spans multiple text lines.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax XmlName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax XmlName() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlName () As XmlNameSyntax" />
      <MemberSignature Language="F#" Value="static member XmlName : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlName " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameSyntax ^ XmlName();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an XML name of the form 'name' or 'namespace:name' appearing in
 source as part of an XML literal or member access expression or an XML
 namespace import clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax XmlName (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax prefix, Microsoft.CodeAnalysis.SyntaxToken localName);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax XmlName(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax prefix, valuetype Microsoft.CodeAnalysis.SyntaxToken localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlName (prefix As XmlPrefixSyntax, localName As SyntaxToken) As XmlNameSyntax" />
      <MemberSignature Language="F#" Value="static member XmlName : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlName (prefix, localName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameSyntax ^ XmlName(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlPrefixSyntax ^ prefix, Microsoft::CodeAnalysis::SyntaxToken localName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax" />
        <Parameter Name="localName" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="prefix">To be added.</param>
        <param name="localName">To be added.</param>
        <summary>
 Represents an XML name of the form 'name' or 'namespace:name' appearing in
 source as part of an XML literal or member access expression or an XML
 namespace import clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNameAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax XmlNameAttribute (string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax XmlNameAttribute(string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlNameAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlNameAttribute (parameterName As String) As XmlNameAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlNameAttribute : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlNameAttribute parameterName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameAttributeSyntax ^ XmlNameAttribute(System::String ^ parameterName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameterName">The value of the name attribute.</param>
        <summary>
 Creates a syntax node for a name attribute in a xml element within a xml documentation comment.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNameAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax XmlNameAttribute (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax reference, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax XmlNameAttribute(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax reference, valuetype Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlNameAttribute (name As XmlNameSyntax, startQuoteToken As SyntaxToken, reference As IdentifierNameSyntax, endQuoteToken As SyntaxToken) As XmlNameAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlNameAttribute : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlNameAttribute (name, startQuoteToken, reference, endQuoteToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameAttributeSyntax ^ XmlNameAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameSyntax ^ name, Microsoft::CodeAnalysis::SyntaxToken startQuoteToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ reference, Microsoft::CodeAnalysis::SyntaxToken endQuoteToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax" />
        <Parameter Name="startQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="reference" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
        <Parameter Name="endQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="startQuoteToken">To be added.</param>
        <param name="reference">To be added.</param>
        <param name="endQuoteToken">To be added.</param>
        <summary>
 A param or type param symbol referenced by a name attribute (e.g. in a
 &lt;param&gt; or &lt;typeparam&gt; documentation comment tag). For example, the
 M in &lt;param name="M" /&gt;.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNameAttribute">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax XmlNameAttribute (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, Microsoft.CodeAnalysis.SyntaxToken equalsToken, Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax reference, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax XmlNameAttribute(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax name, valuetype Microsoft.CodeAnalysis.SyntaxToken equalsToken, valuetype Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax reference, valuetype Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlNameAttribute (name As XmlNameSyntax, equalsToken As SyntaxToken, startQuoteToken As SyntaxToken, reference As IdentifierNameSyntax, endQuoteToken As SyntaxToken) As XmlNameAttributeSyntax" />
      <MemberSignature Language="F#" Value="static member XmlNameAttribute : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlNameAttribute (name, equalsToken, startQuoteToken, reference, endQuoteToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameAttributeSyntax ^ XmlNameAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameSyntax ^ name, Microsoft::CodeAnalysis::SyntaxToken equalsToken, Microsoft::CodeAnalysis::SyntaxToken startQuoteToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ reference, Microsoft::CodeAnalysis::SyntaxToken endQuoteToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax" />
        <Parameter Name="equalsToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="startQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="reference" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
        <Parameter Name="endQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="equalsToken">To be added.</param>
        <param name="startQuoteToken">To be added.</param>
        <param name="reference">To be added.</param>
        <param name="endQuoteToken">To be added.</param>
        <summary>
 A param or type param symbol referenced by a name attribute (e.g. in a
 &lt;param&gt; or &lt;typeparam&gt; documentation comment tag). For example, the
 M in &lt;param name="M" /&gt;.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNamespaceImportsClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax XmlNamespaceImportsClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax xmlNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax XmlNamespaceImportsClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax xmlNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlNamespaceImportsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlNamespaceImportsClause (xmlNamespace As XmlAttributeSyntax) As XmlNamespaceImportsClauseSyntax" />
      <MemberSignature Language="F#" Value="static member XmlNamespaceImportsClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlNamespaceImportsClause xmlNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNamespaceImportsClauseSyntax ^ XmlNamespaceImportsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlAttributeSyntax ^ xmlNamespace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlNamespace" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax" />
      </Parameters>
      <Docs>
        <param name="xmlNamespace">
 Identifies the XML namespace alias and URI.
 </param>
        <summary>
 Defines a XML namespace for XML expressions.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNamespaceImportsClause">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax XmlNamespaceImportsClause (Microsoft.CodeAnalysis.SyntaxToken lessThanToken, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax xmlNamespace, Microsoft.CodeAnalysis.SyntaxToken greaterThanToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax XmlNamespaceImportsClause(valuetype Microsoft.CodeAnalysis.SyntaxToken lessThanToken, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax xmlNamespace, valuetype Microsoft.CodeAnalysis.SyntaxToken greaterThanToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlNamespaceImportsClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlNamespaceImportsClause (lessThanToken As SyntaxToken, xmlNamespace As XmlAttributeSyntax, greaterThanToken As SyntaxToken) As XmlNamespaceImportsClauseSyntax" />
      <MemberSignature Language="F#" Value="static member XmlNamespaceImportsClause : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlNamespaceImportsClause (lessThanToken, xmlNamespace, greaterThanToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNamespaceImportsClauseSyntax ^ XmlNamespaceImportsClause(Microsoft::CodeAnalysis::SyntaxToken lessThanToken, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlAttributeSyntax ^ xmlNamespace, Microsoft::CodeAnalysis::SyntaxToken greaterThanToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lessThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="xmlNamespace" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax" />
        <Parameter Name="greaterThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="lessThanToken">To be added.</param>
        <param name="xmlNamespace">
 Identifies the XML namespace alias and URI.
 </param>
        <param name="greaterThanToken">To be added.</param>
        <summary>
 Defines a XML namespace for XML expressions.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNameToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlNameToken (string text, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind possibleKeywordKind);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken XmlNameToken(string text, valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind possibleKeywordKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlNameToken(System.String,Microsoft.CodeAnalysis.VisualBasic.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlNameToken (text As String, possibleKeywordKind As SyntaxKind) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlNameToken : string * Microsoft.CodeAnalysis.VisualBasic.SyntaxKind -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlNameToken (text, possibleKeywordKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken XmlNameToken(System::String ^ text, Microsoft::CodeAnalysis::VisualBasic::SyntaxKind possibleKeywordKind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="possibleKeywordKind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="possibleKeywordKind">To be added.</param>
        <summary>
 Represents an Xml NCName per Namespaces in XML 1.0
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNameToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlNameToken (Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind possibleKeywordKind, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken XmlNameToken(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind possibleKeywordKind, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlNameToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlNameToken (leadingTrivia As SyntaxTriviaList, text As String, possibleKeywordKind As SyntaxKind, trailingTrivia As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlNameToken : Microsoft.CodeAnalysis.SyntaxTriviaList * string * Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlNameToken (leadingTrivia, text, possibleKeywordKind, trailingTrivia)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken XmlNameToken(Microsoft::CodeAnalysis::SyntaxTriviaList leadingTrivia, System::String ^ text, Microsoft::CodeAnalysis::VisualBasic::SyntaxKind possibleKeywordKind, Microsoft::CodeAnalysis::SyntaxTriviaList trailingTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leadingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="possibleKeywordKind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="trailingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leadingTrivia">To be added.</param>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="possibleKeywordKind">To be added.</param>
        <param name="trailingTrivia">To be added.</param>
        <summary>
 Represents an Xml NCName per Namespaces in XML 1.0
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNewLine">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax XmlNewLine (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax XmlNewLine(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlNewLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlNewLine (text As String) As XmlTextSyntax" />
      <MemberSignature Language="F#" Value="static member XmlNewLine : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlNewLine text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlTextSyntax ^ XmlNewLine(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The raw text within the new line.</param>
        <summary>
 Creates the syntax representation of an xml text that contains a newline token with a documentation comment 
 exterior trivia at the end (continued documentation comment).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNullKeywordElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlNullKeywordElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlNullKeywordElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlNullKeywordElement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlNullKeywordElement () As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlNullKeywordElement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlNullKeywordElement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmptyElementSyntax ^ XmlNullKeywordElement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Creates the syntax representation of a see element within xml documentation comments,
 that points to the 'null' language keyword.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlParaElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlParaElement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlParaElement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlParaElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlParaElement (content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlParaElement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlParaElement content" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlParaElement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="content">A list of syntax nodes that represents the content of the para element.</param>
        <summary>
 Creates the syntax representation of a para element within xml documentation comments.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlParaElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlParaElement (params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlParaElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlParaElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlParaElement (ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlParaElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlParaElement content" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlParaElement(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">A list of syntax nodes that represents the content of the para element.</param>
        <summary>
 Creates the syntax representation of a para element within xml documentation comments.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlParamElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlParamElement (string parameterName, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlParamElement(string parameterName, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlParamElement(System.String,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlParamElement (parameterName As String, content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlParamElement : string * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlParamElement (parameterName, content)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlParamElement(System::String ^ parameterName, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="parameterName">The name of the parameter.</param>
        <param name="content">A list of syntax nodes that represents the content of the param element (e.g. 
 the description and meaning of the parameter).</param>
        <summary>
 Creates the syntax representation of a param element within xml documentation comments (e.g. for
 documentation of method parameters).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlParamElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlParamElement (string parameterName, params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlParamElement(string parameterName, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlParamElement(System.String,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlParamElement (parameterName As String, ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlParamElement : string * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlParamElement (parameterName, content)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlParamElement(System::String ^ parameterName, ... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parameterName">The name of the parameter.</param>
        <param name="content">A list of syntax nodes that represents the content of the param element (e.g. 
 the description and meaning of the parameter).</param>
        <summary>
 Creates the syntax representation of a param element within xml documentation comments (e.g. for
 documentation of method parameters).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlParamRefElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlParamRefElement (string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlParamRefElement(string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlParamRefElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlParamRefElement (parameterName As String) As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlParamRefElement : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlParamRefElement parameterName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmptyElementSyntax ^ XmlParamRefElement(System::String ^ parameterName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameterName">The name of the referenced parameter.</param>
        <summary>
 Creates the syntax representation of a paramref element within xml documentation comments (e.g. for
 referencing particular parameters of a method).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlPermissionElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlPermissionElement (Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlPermissionElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlPermissionElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlPermissionElement (cref As CrefReferenceSyntax, content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlPermissionElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlPermissionElement (cref, content)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlPermissionElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefReferenceSyntax ^ cref, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cref" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="cref">Syntax representation of the reference to the permission type.</param>
        <param name="content">A list of syntax nodes that represents the content of the permission element.</param>
        <summary>
 Creates the syntax representation of a permission element within xml documentation comments.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlPermissionElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlPermissionElement (Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref, params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlPermissionElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlPermissionElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlPermissionElement (cref As CrefReferenceSyntax, ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlPermissionElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlPermissionElement (cref, content)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlPermissionElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefReferenceSyntax ^ cref, ... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cref" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax" />
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="cref">Syntax representation of the reference to the permission type.</param>
        <param name="content">A list of syntax nodes that represents the content of the permission element.</param>
        <summary>
 Creates the syntax representation of a permission element within xml documentation comments.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlPlaceholderElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlPlaceholderElement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlPlaceholderElement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlPlaceholderElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlPlaceholderElement (content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlPlaceholderElement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlPlaceholderElement content" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlPlaceholderElement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="content">A list of syntax nodes that represents the content of the placeholder element.</param>
        <summary>
 Creates the syntax representation of a placeholder element within xml documentation comments.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlPlaceholderElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlPlaceholderElement (params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlPlaceholderElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlPlaceholderElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlPlaceholderElement (ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlPlaceholderElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlPlaceholderElement content" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlPlaceholderElement(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">A list of syntax nodes that represents the content of the placeholder element.</param>
        <summary>
 Creates the syntax representation of a placeholder element within xml documentation comments.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlPrefix">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax XmlPrefix ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax XmlPrefix() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlPrefix" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlPrefix () As XmlPrefixSyntax" />
      <MemberSignature Language="F#" Value="static member XmlPrefix : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlPrefix " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlPrefixSyntax ^ XmlPrefix();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an XML namespace prefix of the form 'prefix:' as in xml:ns="".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlPrefix">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax XmlPrefix (Microsoft.CodeAnalysis.SyntaxToken name, Microsoft.CodeAnalysis.SyntaxToken colonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax XmlPrefix(valuetype Microsoft.CodeAnalysis.SyntaxToken name, valuetype Microsoft.CodeAnalysis.SyntaxToken colonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlPrefix(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlPrefix (name As SyntaxToken, colonToken As SyntaxToken) As XmlPrefixSyntax" />
      <MemberSignature Language="F#" Value="static member XmlPrefix : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlPrefix (name, colonToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlPrefixSyntax ^ XmlPrefix(Microsoft::CodeAnalysis::SyntaxToken name, Microsoft::CodeAnalysis::SyntaxToken colonToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="colonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="colonToken">To be added.</param>
        <summary>
 Represents an XML namespace prefix of the form 'prefix:' as in xml:ns="".
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlPrefixName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax XmlPrefixName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax XmlPrefixName() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlPrefixName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlPrefixName () As XmlPrefixNameSyntax" />
      <MemberSignature Language="F#" Value="static member XmlPrefixName : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlPrefixName " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlPrefixNameSyntax ^ XmlPrefixName();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an XML name of the form 'name' appearing in GetXmlNamespace().
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlPrefixName">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax XmlPrefixName (Microsoft.CodeAnalysis.SyntaxToken name);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax XmlPrefixName(valuetype Microsoft.CodeAnalysis.SyntaxToken name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlPrefixName(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlPrefixName (name As SyntaxToken) As XmlPrefixNameSyntax" />
      <MemberSignature Language="F#" Value="static member XmlPrefixName : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlPrefixName name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlPrefixNameSyntax ^ XmlPrefixName(Microsoft::CodeAnalysis::SyntaxToken name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
 Represents an XML name of the form 'name' appearing in GetXmlNamespace().
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlPreliminaryElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlPreliminaryElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlPreliminaryElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlPreliminaryElement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlPreliminaryElement () As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlPreliminaryElement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlPreliminaryElement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmptyElementSyntax ^ XmlPreliminaryElement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Creates a syntax node for a priliminary element within a xml documentation comment.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlProcessingInstruction">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax XmlProcessingInstruction ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax XmlProcessingInstruction() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlProcessingInstruction" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlProcessingInstruction () As XmlProcessingInstructionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlProcessingInstruction : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlProcessingInstruction " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlProcessingInstructionSyntax ^ XmlProcessingInstruction();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents an XML processing instruction of the form '&lt;? XMLProcessingTarget
 XMLProcessingValue ?&gt;'.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlProcessingInstruction">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax XmlProcessingInstruction (Microsoft.CodeAnalysis.SyntaxToken lessThanQuestionToken, Microsoft.CodeAnalysis.SyntaxToken name, Microsoft.CodeAnalysis.SyntaxTokenList textTokens, Microsoft.CodeAnalysis.SyntaxToken questionGreaterThanToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax XmlProcessingInstruction(valuetype Microsoft.CodeAnalysis.SyntaxToken lessThanQuestionToken, valuetype Microsoft.CodeAnalysis.SyntaxToken name, valuetype Microsoft.CodeAnalysis.SyntaxTokenList textTokens, valuetype Microsoft.CodeAnalysis.SyntaxToken questionGreaterThanToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlProcessingInstruction (lessThanQuestionToken As SyntaxToken, name As SyntaxToken, textTokens As SyntaxTokenList, questionGreaterThanToken As SyntaxToken) As XmlProcessingInstructionSyntax" />
      <MemberSignature Language="F#" Value="static member XmlProcessingInstruction : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlProcessingInstruction (lessThanQuestionToken, name, textTokens, questionGreaterThanToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlProcessingInstructionSyntax ^ XmlProcessingInstruction(Microsoft::CodeAnalysis::SyntaxToken lessThanQuestionToken, Microsoft::CodeAnalysis::SyntaxToken name, Microsoft::CodeAnalysis::SyntaxTokenList textTokens, Microsoft::CodeAnalysis::SyntaxToken questionGreaterThanToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lessThanQuestionToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="name" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="questionGreaterThanToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="lessThanQuestionToken">To be added.</param>
        <param name="name">To be added.</param>
        <param name="textTokens">To be added.</param>
        <param name="questionGreaterThanToken">To be added.</param>
        <summary>
 Represents an XML processing instruction of the form '&lt;? XMLProcessingTarget
 XMLProcessingValue ?&gt;'.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlRemarksElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlRemarksElement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlRemarksElement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlRemarksElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlRemarksElement (content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlRemarksElement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlRemarksElement content" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlRemarksElement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="content">A list of xml node syntax that will be the content within the remarks element.</param>
        <summary>
 Creates a remarks element within an xml documentation comment.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlRemarksElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlRemarksElement (params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlRemarksElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlRemarksElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlRemarksElement (ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlRemarksElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlRemarksElement content" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlRemarksElement(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">A list of xml node syntax that will be the content within the remarks element.</param>
        <summary>
 Creates a remarks element within an xml documentation comment.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlReturnsElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlReturnsElement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlReturnsElement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlReturnsElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlReturnsElement (content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlReturnsElement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlReturnsElement content" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlReturnsElement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="content">A list of xml node syntax that will be the content within the returns element.</param>
        <summary>
 Creates a returns element within an xml documentation comment.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlReturnsElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlReturnsElement (params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlReturnsElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlReturnsElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlReturnsElement (ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlReturnsElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlReturnsElement content" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlReturnsElement(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">A list of xml node syntax that will be the content within the returns element.</param>
        <summary>
 Creates a returns element within an xml documentation comment.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlSeeAlsoElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlSeeAlsoElement (Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlSeeAlsoElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlSeeAlsoElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlSeeAlsoElement (cref As CrefReferenceSyntax) As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlSeeAlsoElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlSeeAlsoElement cref" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmptyElementSyntax ^ XmlSeeAlsoElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefReferenceSyntax ^ cref);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cref" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax" />
      </Parameters>
      <Docs>
        <param name="cref">A cref syntax node that points to the referenced item (e.g. a class, struct).</param>
        <summary>
 Creates a seealso element within an xml documentation comment.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlSeeAlsoElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlSeeAlsoElement (Uri linkAddress, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; linkText);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlSeeAlsoElement(class System.Uri linkAddress, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; linkText) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlSeeAlsoElement(System.Uri,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlSeeAlsoElement (linkAddress As Uri, linkText As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlSeeAlsoElement : Uri * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlSeeAlsoElement (linkAddress, linkText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlSeeAlsoElement(Uri ^ linkAddress, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; linkText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkAddress" Type="System.Uri" />
        <Parameter Name="linkText" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="linkAddress">The uri of the referenced item.</param>
        <param name="linkText"> A list of xml node syntax that will be used as the link text for the referenced item.</param>
        <summary>
 Creates a seealso element within an xml documentation comment.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlSeeElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlSeeElement (Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlSeeElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax cref) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlSeeElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlSeeElement (cref As CrefReferenceSyntax) As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlSeeElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlSeeElement cref" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmptyElementSyntax ^ XmlSeeElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefReferenceSyntax ^ cref);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cref" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax" />
      </Parameters>
      <Docs>
        <param name="cref">A cref syntax node that points to the referenced item (e.g. a class, struct).</param>
        <summary>
 Creates a see element within an xml documentation comment.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlString">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax XmlString (Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax XmlString(valuetype Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, valuetype Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlString(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlString (startQuoteToken As SyntaxToken, endQuoteToken As SyntaxToken) As XmlStringSyntax" />
      <MemberSignature Language="F#" Value="static member XmlString : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlString (startQuoteToken, endQuoteToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlStringSyntax ^ XmlString(Microsoft::CodeAnalysis::SyntaxToken startQuoteToken, Microsoft::CodeAnalysis::SyntaxToken endQuoteToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="endQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="startQuoteToken">To be added.</param>
        <param name="endQuoteToken">To be added.</param>
        <summary>
 Represents a string of XML characters embedded as the content of an XML
 element.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlString">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax XmlString (Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, Microsoft.CodeAnalysis.SyntaxTokenList textTokens, Microsoft.CodeAnalysis.SyntaxToken endQuoteToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax XmlString(valuetype Microsoft.CodeAnalysis.SyntaxToken startQuoteToken, valuetype Microsoft.CodeAnalysis.SyntaxTokenList textTokens, valuetype Microsoft.CodeAnalysis.SyntaxToken endQuoteToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlString(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlString (startQuoteToken As SyntaxToken, textTokens As SyntaxTokenList, endQuoteToken As SyntaxToken) As XmlStringSyntax" />
      <MemberSignature Language="F#" Value="static member XmlString : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlString (startQuoteToken, textTokens, endQuoteToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlStringSyntax ^ XmlString(Microsoft::CodeAnalysis::SyntaxToken startQuoteToken, Microsoft::CodeAnalysis::SyntaxTokenList textTokens, Microsoft::CodeAnalysis::SyntaxToken endQuoteToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="endQuoteToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="startQuoteToken">To be added.</param>
        <param name="textTokens">To be added.</param>
        <param name="endQuoteToken">To be added.</param>
        <summary>
 Represents a string of XML characters embedded as the content of an XML
 element.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlSummaryElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlSummaryElement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlSummaryElement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlSummaryElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlSummaryElement (content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlSummaryElement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlSummaryElement content" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlSummaryElement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="content">A list of xml node syntax that will be the content within the summary element.</param>
        <summary>
 Creates a summary element within an xml documentation comment.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlSummaryElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlSummaryElement (params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlSummaryElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlSummaryElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlSummaryElement (ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlSummaryElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlSummaryElement content" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlSummaryElement(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">A list of xml node syntax that will be the content within the summary element.</param>
        <summary>
 Creates a summary element within an xml documentation comment.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlText">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax XmlText ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax XmlText() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlText" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlText () As XmlTextSyntax" />
      <MemberSignature Language="F#" Value="static member XmlText : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlText " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlTextSyntax ^ XmlText();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Represents Xml text.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlText">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax XmlText (params Microsoft.CodeAnalysis.SyntaxToken[] textTokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax XmlText(valuetype Microsoft.CodeAnalysis.SyntaxToken[] textTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlText(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlText (ParamArray textTokens As SyntaxToken()) As XmlTextSyntax" />
      <MemberSignature Language="F#" Value="static member XmlText : Microsoft.CodeAnalysis.SyntaxToken[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlText textTokens" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlTextSyntax ^ XmlText(... cli::array &lt;Microsoft::CodeAnalysis::SyntaxToken&gt; ^ textTokens);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxToken[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="textTokens">A list of text tokens used as the text of the xml text node.</param>
        <summary>
 Generates the syntax representation of a xml text node (e.g. for xml documentation comments).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlText">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax XmlText (Microsoft.CodeAnalysis.SyntaxTokenList textTokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax XmlText(valuetype Microsoft.CodeAnalysis.SyntaxTokenList textTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlText(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlText (textTokens As SyntaxTokenList) As XmlTextSyntax" />
      <MemberSignature Language="F#" Value="static member XmlText : Microsoft.CodeAnalysis.SyntaxTokenList -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlText textTokens" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlTextSyntax ^ XmlText(Microsoft::CodeAnalysis::SyntaxTokenList textTokens);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textTokens" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
      </Parameters>
      <Docs>
        <param name="textTokens">
 A list of all the text tokens in the Xml text. This list always contains at
 least one token.
 </param>
        <summary>
 Represents Xml text.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlText">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax XmlText (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax XmlText(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlText (value As String) As XmlTextSyntax" />
      <MemberSignature Language="F#" Value="static member XmlText : string -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlText value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlTextSyntax ^ XmlText(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The string literal used as the text of the xml text node.</param>
        <summary>
 Generates the syntax representation of a xml text node (e.g. for xml documentation comments).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextLiteral">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlTextLiteral (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken XmlTextLiteral(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlTextLiteral(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextLiteral (value As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlTextLiteral : string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlTextLiteral value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken XmlTextLiteral(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The text used within the xml text literal.</param>
        <summary>
 Generates the syntax representation of an xml text literal.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextLiteral">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlTextLiteral (string text, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken XmlTextLiteral(string text, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlTextLiteral(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextLiteral (text As String, value As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlTextLiteral : string * string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlTextLiteral (text, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken XmlTextLiteral(System::String ^ text, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The text used within the xml text literal.</param>
        <summary>
 Generates the syntax representation of an xml text literal.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextLiteralToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlTextLiteralToken (string text, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken XmlTextLiteralToken(string text, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlTextLiteralToken(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextLiteralToken (text As String, value As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlTextLiteralToken : string * string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlTextLiteralToken (text, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken XmlTextLiteralToken(System::String ^ text, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="value">To be added.</param>
        <summary>
 Represents character data in Xml content also known as PCData or in an Xml
 attribute value. All text is here for now even text that does not need
 normalization such as comment, pi and cdata text.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextLiteralToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlTextLiteralToken (Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken XmlTextLiteralToken(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, string text, string value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlTextLiteralToken(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextLiteralToken (leadingTrivia As SyntaxTriviaList, text As String, value As String, trailingTrivia As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlTextLiteralToken : Microsoft.CodeAnalysis.SyntaxTriviaList * string * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlTextLiteralToken (leadingTrivia, text, value, trailingTrivia)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken XmlTextLiteralToken(Microsoft::CodeAnalysis::SyntaxTriviaList leadingTrivia, System::String ^ text, System::String ^ value, Microsoft::CodeAnalysis::SyntaxTriviaList trailingTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leadingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="trailingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leadingTrivia">To be added.</param>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="value">To be added.</param>
        <param name="trailingTrivia">To be added.</param>
        <summary>
 Represents character data in Xml content also known as PCData or in an Xml
 attribute value. All text is here for now even text that does not need
 normalization such as comment, pi and cdata text.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextNewLine">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlTextNewLine (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken XmlTextNewLine(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlTextNewLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextNewLine (text As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlTextNewLine : string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlTextNewLine text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken XmlTextNewLine(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The raw text within the new line.</param>
        <summary>
 Creates the syntax representation of an xml newline token with a documentation comment exterior trivia at 
 the end (continued documentation comment).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextNewLine">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlTextNewLine (string text, bool continueXmlDocumentationComment);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken XmlTextNewLine(string text, bool continueXmlDocumentationComment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlTextNewLine(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextNewLine (text As String, continueXmlDocumentationComment As Boolean) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlTextNewLine : string * bool -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlTextNewLine (text, continueXmlDocumentationComment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken XmlTextNewLine(System::String ^ text, bool continueXmlDocumentationComment);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="continueXmlDocumentationComment" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The raw text within the new line.</param>
        <param name="continueXmlDocumentationComment">
 If set to true, a documentation comment exterior token will be added to the trailing trivia
 of the new token.</param>
        <summary>
 Creates the syntax representation of an xml newline token for xml documentation comments.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextNewLine">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlTextNewLine (string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList leading, Microsoft.CodeAnalysis.SyntaxTriviaList trailing);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken XmlTextNewLine(string text, string value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leading, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlTextNewLine(System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextNewLine (text As String, value As String, leading As SyntaxTriviaList, trailing As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlTextNewLine : string * string * Microsoft.CodeAnalysis.SyntaxTriviaList * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlTextNewLine (text, value, leading, trailing)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken XmlTextNewLine(System::String ^ text, System::String ^ value, Microsoft::CodeAnalysis::SyntaxTriviaList leading, Microsoft::CodeAnalysis::SyntaxTriviaList trailing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="leading" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="trailing" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="text">The raw text of the literal.</param>
        <param name="value">The xml text new line value.</param>
        <param name="leading">A list of trivia immediately preceding the token.</param>
        <param name="trailing">A list of trivia immediately following the token.</param>
        <summary>
 Creates a token with kind XmlTextLiteralNewLineToken.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlTextToken (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, string text, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken XmlTextToken(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, string text, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlTextToken(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextToken (kind As SyntaxKind, text As String, value As String) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlTextToken : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * string * string -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlTextToken (kind, text, value)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken XmlTextToken(Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, System::String ^ text, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of XmlTextTokenSyntax.
 One of XmlTextLiteralToken, XmlEntityLiteralToken,
 DocumentationCommentLineBreakToken.
 </param>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="value">To be added.</param>
        <summary>
 Represents character data in Xml content also known as PCData or in an Xml
 attribute value. All text is here for now even text that does not need
 normalization such as comment, pi and cdata text.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlTextToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken XmlTextToken (Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, string text, string value, Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken XmlTextToken(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList leadingTrivia, valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, string text, string value, valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trailingTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlTextToken(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,System.String,System.String,Microsoft.CodeAnalysis.SyntaxTriviaList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlTextToken (leadingTrivia As SyntaxTriviaList, kind As SyntaxKind, text As String, value As String, trailingTrivia As SyntaxTriviaList) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member XmlTextToken : Microsoft.CodeAnalysis.SyntaxTriviaList * Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * string * string * Microsoft.CodeAnalysis.SyntaxTriviaList -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlTextToken (leadingTrivia, kind, text, value, trailingTrivia)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::SyntaxToken XmlTextToken(Microsoft::CodeAnalysis::SyntaxTriviaList leadingTrivia, Microsoft::CodeAnalysis::VisualBasic::SyntaxKind kind, System::String ^ text, System::String ^ value, Microsoft::CodeAnalysis::SyntaxTriviaList trailingTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leadingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="trailingTrivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" />
      </Parameters>
      <Docs>
        <param name="leadingTrivia">To be added.</param>
        <param name="kind">
 A <cref c="SyntaxKind" /> representing the specific kind of XmlTextTokenSyntax.
 One of XmlTextLiteralToken, XmlEntityLiteralToken,
 DocumentationCommentLineBreakToken.
 </param>
        <param name="text">
 The actual text of this token.
 </param>
        <param name="value">To be added.</param>
        <param name="trailingTrivia">To be added.</param>
        <summary>
 Represents character data in Xml content also known as PCData or in an Xml
 attribute value. All text is here for now even text that does not need
 normalization such as comment, pi and cdata text.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlThreadSafetyElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlThreadSafetyElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlThreadSafetyElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlThreadSafetyElement" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlThreadSafetyElement () As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlThreadSafetyElement : unit -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlThreadSafetyElement " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmptyElementSyntax ^ XmlThreadSafetyElement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Creates a threadsafety element within an xml documentation comment.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlThreadSafetyElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlThreadSafetyElement (bool isStatic, bool isInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax XmlThreadSafetyElement(bool isStatic, bool isInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlThreadSafetyElement(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlThreadSafetyElement (isStatic As Boolean, isInstance As Boolean) As XmlEmptyElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlThreadSafetyElement : bool * bool -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlThreadSafetyElement (isStatic, isInstance)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmptyElementSyntax ^ XmlThreadSafetyElement(bool isStatic, bool isInstance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isStatic" Type="System.Boolean" />
        <Parameter Name="isInstance" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isStatic">Indicates whether static member of this type are safe for multi-threaded operations.</param>
        <param name="isInstance">Indicates whether instance members of this type are safe for multi-threaded operations.</param>
        <summary>
 Creates a threadsafety element within an xml documentation comment.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <threadsafety static="true" instance="" />
      </Docs>
    </Member>
    <Member MemberName="XmlValueElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlValueElement (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlValueElement(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlValueElement(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlValueElement (content As SyntaxList(Of XmlNodeSyntax)) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlValueElement : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlValueElement content" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlValueElement(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="content">A list of xml syntax nodes that represents the content of the value element.</param>
        <summary>
 Creates the the syntax representation of an xml value element (e.g. for xml documentation comments).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlValueElement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlValueElement (params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax XmlValueElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlValueElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlValueElement (ParamArray content As XmlNodeSyntax()) As XmlElementSyntax" />
      <MemberSignature Language="F#" Value="static member XmlValueElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.XmlValueElement content" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ XmlValueElement(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">A list of xml syntax nodes that represents the content of the value element.</param>
        <summary>
 Creates the the syntax representation of an xml value element (e.g. for xml documentation comments).
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax YieldStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax YieldStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.YieldStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function YieldStatement (expression As ExpressionSyntax) As YieldStatementSyntax" />
      <MemberSignature Language="F#" Value="static member YieldStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.YieldStatement expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::YieldStatementSyntax ^ YieldStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">
 The expression whose value is being yielded.
 </param>
        <summary>
 Represent a Yield statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax YieldStatement (Microsoft.CodeAnalysis.SyntaxToken yieldKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax YieldStatement(valuetype Microsoft.CodeAnalysis.SyntaxToken yieldKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.YieldStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function YieldStatement (yieldKeyword As SyntaxToken, expression As ExpressionSyntax) As YieldStatementSyntax" />
      <MemberSignature Language="F#" Value="static member YieldStatement : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory.YieldStatement (yieldKeyword, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::YieldStatementSyntax ^ YieldStatement(Microsoft::CodeAnalysis::SyntaxToken yieldKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="yieldKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="yieldKeyword">
 The "Yield" keyword.
 </param>
        <param name="expression">
 The expression whose value is being yielded.
 </param>
        <summary>
 Represent a Yield statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>