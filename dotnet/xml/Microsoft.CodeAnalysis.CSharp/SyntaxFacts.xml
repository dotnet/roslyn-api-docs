<Type Name="SyntaxFacts" FullName="Microsoft.CodeAnalysis.CSharp.SyntaxFacts">
  <TypeSignature Language="C#" Value="public static class SyntaxFacts" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit SyntaxFacts extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CSharp.SyntaxFacts" />
  <TypeSignature Language="VB.NET" Value="Public Module SyntaxFacts" />
  <TypeSignature Language="F#" Value="type SyntaxFacts = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class SyntaxFacts abstract sealed" />
  <TypeSignature Language="C++ CX" Value="public ref class SyntaxFacts abstract sealed" />
  <TypeSignature Language="C++ WINRT" Value="class SyntaxFacts abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Defines a set of methods to determine how Unicode characters are treated by the C# compiler.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="EqualityComparer">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEqualityComparer&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt; EqualityComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IEqualityComparer`1&lt;valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt; EqualityComparer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.EqualityComparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EqualityComparer As IEqualityComparer(Of SyntaxKind)" />
      <MemberSignature Language="F#" Value="member this.EqualityComparer : System.Collections.Generic.IEqualityComparer&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.EqualityComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::IEqualityComparer&lt;Microsoft::CodeAnalysis::CSharp::SyntaxKind&gt; ^ EqualityComparer { System::Collections::Generic::IEqualityComparer&lt;Microsoft::CodeAnalysis::CSharp::SyntaxKind&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A custom equality comparer for <see cref="T:Microsoft.CodeAnalysis.CSharp.SyntaxKind" /></summary>
        <value>To be added.</value>
        <remarks>
            PERF: The framework specializes EqualityComparer for enums, but only if the underlying type is System.Int32
            Since SyntaxKind's underlying type is System.UInt16, ObjectEqualityComparer will be chosen instead.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessorDeclarationKind">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.SyntaxKind GetAccessorDeclarationKind (Microsoft.CodeAnalysis.CSharp.SyntaxKind keyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind GetAccessorDeclarationKind(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind keyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetAccessorDeclarationKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessorDeclarationKind (keyword As SyntaxKind) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member GetAccessorDeclarationKind : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; Microsoft.CodeAnalysis.CSharp.SyntaxKind" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetAccessorDeclarationKind keyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetAccessorDeclarationKind(Microsoft::CodeAnalysis::CSharp::SyntaxKind keyword);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetAccessorDeclarationKind(Microsoft::CodeAnalysis::CSharp::SyntaxKind keyword);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetAccessorDeclarationKind(Microsoft::CodeAnalysis::CSharp::SyntaxKind keyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="keyword">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssignmentExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.SyntaxKind GetAssignmentExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind GetAssignmentExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetAssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssignmentExpression (token As SyntaxKind) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member GetAssignmentExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; Microsoft.CodeAnalysis.CSharp.SyntaxKind" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetAssignmentExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetAssignmentExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetAssignmentExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetAssignmentExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBaseTypeDeclarationKind">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.SyntaxKind GetBaseTypeDeclarationKind (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind GetBaseTypeDeclarationKind(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetBaseTypeDeclarationKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBaseTypeDeclarationKind (kind As SyntaxKind) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member GetBaseTypeDeclarationKind : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; Microsoft.CodeAnalysis.CSharp.SyntaxKind" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetBaseTypeDeclarationKind kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetBaseTypeDeclarationKind(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetBaseTypeDeclarationKind(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetBaseTypeDeclarationKind(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBinaryExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.SyntaxKind GetBinaryExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind GetBinaryExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetBinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBinaryExpression (token As SyntaxKind) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member GetBinaryExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; Microsoft.CodeAnalysis.CSharp.SyntaxKind" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetBinaryExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetBinaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetBinaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetBinaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCheckStatement">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.SyntaxKind GetCheckStatement (Microsoft.CodeAnalysis.CSharp.SyntaxKind keyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind GetCheckStatement(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind keyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetCheckStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCheckStatement (keyword As SyntaxKind) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member GetCheckStatement : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; Microsoft.CodeAnalysis.CSharp.SyntaxKind" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetCheckStatement keyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetCheckStatement(Microsoft::CodeAnalysis::CSharp::SyntaxKind keyword);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetCheckStatement(Microsoft::CodeAnalysis::CSharp::SyntaxKind keyword);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetCheckStatement(Microsoft::CodeAnalysis::CSharp::SyntaxKind keyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="keyword">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContextualKeywordKind">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.SyntaxKind GetContextualKeywordKind (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind GetContextualKeywordKind(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetContextualKeywordKind(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextualKeywordKind (text As String) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member GetContextualKeywordKind : string -&gt; Microsoft.CodeAnalysis.CSharp.SyntaxKind" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetContextualKeywordKind text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetContextualKeywordKind(System::String ^ text);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetContextualKeywordKind(Platform::String ^ text);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetContextualKeywordKind(std::wstring const &amp; text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContextualKeywordKinds">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt; GetContextualKeywordKinds ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt; GetContextualKeywordKinds() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetContextualKeywordKinds" />
      <MemberSignature Language="VB.NET" Value="Public Iterator Function GetContextualKeywordKinds () As IEnumerable(Of SyntaxKind)" />
      <MemberSignature Language="F#" Value="static member GetContextualKeywordKinds : unit -&gt; seq&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetContextualKeywordKinds " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::CSharp::SyntaxKind&gt; ^ GetContextualKeywordKinds();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.CodeAnalysis.CSharp.SyntaxFacts/&lt;GetContextualKeywordKinds&gt;d__94))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstanceExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.SyntaxKind GetInstanceExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind GetInstanceExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetInstanceExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstanceExpression (token As SyntaxKind) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member GetInstanceExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; Microsoft.CodeAnalysis.CSharp.SyntaxKind" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetInstanceExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetInstanceExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetInstanceExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetInstanceExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKeywordKind">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.SyntaxKind GetKeywordKind (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind GetKeywordKind(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetKeywordKind(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKeywordKind (text As String) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member GetKeywordKind : string -&gt; Microsoft.CodeAnalysis.CSharp.SyntaxKind" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetKeywordKind text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetKeywordKind(System::String ^ text);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetKeywordKind(Platform::String ^ text);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetKeywordKind(std::wstring const &amp; text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKeywordKinds">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt; GetKeywordKinds ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt; GetKeywordKinds() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetKeywordKinds" />
      <MemberSignature Language="VB.NET" Value="Public Iterator Function GetKeywordKinds () As IEnumerable(Of SyntaxKind)" />
      <MemberSignature Language="F#" Value="static member GetKeywordKinds : unit -&gt; seq&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetKeywordKinds " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::CSharp::SyntaxKind&gt; ^ GetKeywordKinds();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.CodeAnalysis.CSharp.SyntaxFacts/&lt;GetKeywordKinds&gt;d__37))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLiteralExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.SyntaxKind GetLiteralExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind GetLiteralExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetLiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLiteralExpression (token As SyntaxKind) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member GetLiteralExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; Microsoft.CodeAnalysis.CSharp.SyntaxKind" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetLiteralExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetLiteralExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetLiteralExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetLiteralExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOperatorKind">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.SyntaxKind GetOperatorKind (string operatorMetadataName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind GetOperatorKind(string operatorMetadataName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetOperatorKind(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOperatorKind (operatorMetadataName As String) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member GetOperatorKind : string -&gt; Microsoft.CodeAnalysis.CSharp.SyntaxKind" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetOperatorKind operatorMetadataName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetOperatorKind(System::String ^ operatorMetadataName);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetOperatorKind(Platform::String ^ operatorMetadataName);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetOperatorKind(std::wstring const &amp; operatorMetadataName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorMetadataName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operatorMetadataName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPostfixUnaryExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.SyntaxKind GetPostfixUnaryExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind GetPostfixUnaryExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostfixUnaryExpression (token As SyntaxKind) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member GetPostfixUnaryExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; Microsoft.CodeAnalysis.CSharp.SyntaxKind" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPostfixUnaryExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetPostfixUnaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetPostfixUnaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetPostfixUnaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrefixUnaryExpression">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.SyntaxKind GetPrefixUnaryExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind GetPrefixUnaryExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrefixUnaryExpression (token As SyntaxKind) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member GetPrefixUnaryExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; Microsoft.CodeAnalysis.CSharp.SyntaxKind" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPrefixUnaryExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetPrefixUnaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetPrefixUnaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetPrefixUnaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreprocessorKeywordKind">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.SyntaxKind GetPreprocessorKeywordKind (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind GetPreprocessorKeywordKind(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPreprocessorKeywordKind(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPreprocessorKeywordKind (text As String) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member GetPreprocessorKeywordKind : string -&gt; Microsoft.CodeAnalysis.CSharp.SyntaxKind" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPreprocessorKeywordKind text" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetPreprocessorKeywordKind(System::String ^ text);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetPreprocessorKeywordKind(Platform::String ^ text);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetPreprocessorKeywordKind(std::wstring const &amp; text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreprocessorKeywordKinds">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt; GetPreprocessorKeywordKinds ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt; GetPreprocessorKeywordKinds() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPreprocessorKeywordKinds" />
      <MemberSignature Language="VB.NET" Value="Public Iterator Function GetPreprocessorKeywordKinds () As IEnumerable(Of SyntaxKind)" />
      <MemberSignature Language="F#" Value="static member GetPreprocessorKeywordKinds : unit -&gt; seq&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPreprocessorKeywordKinds " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::CSharp::SyntaxKind&gt; ^ GetPreprocessorKeywordKinds();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.CodeAnalysis.CSharp.SyntaxFacts/&lt;GetPreprocessorKeywordKinds&gt;d__43))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrimaryFunction">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.SyntaxKind GetPrimaryFunction (Microsoft.CodeAnalysis.CSharp.SyntaxKind keyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind GetPrimaryFunction(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind keyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPrimaryFunction(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrimaryFunction (keyword As SyntaxKind) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member GetPrimaryFunction : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; Microsoft.CodeAnalysis.CSharp.SyntaxKind" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPrimaryFunction keyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetPrimaryFunction(Microsoft::CodeAnalysis::CSharp::SyntaxKind keyword);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetPrimaryFunction(Microsoft::CodeAnalysis::CSharp::SyntaxKind keyword);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetPrimaryFunction(Microsoft::CodeAnalysis::CSharp::SyntaxKind keyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="keyword">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPunctuationKinds">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt; GetPunctuationKinds ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt; GetPunctuationKinds() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPunctuationKinds" />
      <MemberSignature Language="VB.NET" Value="Public Iterator Function GetPunctuationKinds () As IEnumerable(Of SyntaxKind)" />
      <MemberSignature Language="F#" Value="static member GetPunctuationKinds : unit -&gt; seq&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetPunctuationKinds " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::CSharp::SyntaxKind&gt; ^ GetPunctuationKinds();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.CodeAnalysis.CSharp.SyntaxFacts/&lt;GetPunctuationKinds&gt;d__48))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReservedKeywordKinds">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt; GetReservedKeywordKinds ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt; GetReservedKeywordKinds() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetReservedKeywordKinds" />
      <MemberSignature Language="VB.NET" Value="Public Iterator Function GetReservedKeywordKinds () As IEnumerable(Of SyntaxKind)" />
      <MemberSignature Language="F#" Value="static member GetReservedKeywordKinds : unit -&gt; seq&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetReservedKeywordKinds " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::CSharp::SyntaxKind&gt; ^ GetReservedKeywordKinds();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.CodeAnalysis.CSharp.SyntaxFacts/&lt;GetReservedKeywordKinds&gt;d__36))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.CSharp.SyntaxKind&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSwitchLabelKind">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.SyntaxKind GetSwitchLabelKind (Microsoft.CodeAnalysis.CSharp.SyntaxKind keyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind GetSwitchLabelKind(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind keyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetSwitchLabelKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSwitchLabelKind (keyword As SyntaxKind) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member GetSwitchLabelKind : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; Microsoft.CodeAnalysis.CSharp.SyntaxKind" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetSwitchLabelKind keyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetSwitchLabelKind(Microsoft::CodeAnalysis::CSharp::SyntaxKind keyword);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetSwitchLabelKind(Microsoft::CodeAnalysis::CSharp::SyntaxKind keyword);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetSwitchLabelKind(Microsoft::CodeAnalysis::CSharp::SyntaxKind keyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="keyword">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetText">
      <MemberSignature Language="C#" Value="public static string GetText (Microsoft.CodeAnalysis.Accessibility accessibility);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetText(valuetype Microsoft.CodeAnalysis.Accessibility accessibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetText(Microsoft.CodeAnalysis.Accessibility)" />
      <MemberSignature Language="F#" Value="static member GetText : Microsoft.CodeAnalysis.Accessibility -&gt; string" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetText accessibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetText(Microsoft::CodeAnalysis::Accessibility accessibility);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Platform::String ^ GetText(Microsoft::CodeAnalysis::Accessibility accessibility);" />
      <MemberSignature Language="C++ WINRT" Value=" static std::wstring GetText(Microsoft::CodeAnalysis::Accessibility accessibility);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessibility" Type="Microsoft.CodeAnalysis.Accessibility" />
      </Parameters>
      <Docs>
        <param name="accessibility">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetText">
      <MemberSignature Language="C#" Value="public static string GetText (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetText(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetText(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetText (kind As SyntaxKind) As String" />
      <MemberSignature Language="F#" Value="static member GetText : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; string" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetText kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetText(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Platform::String ^ GetText(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static std::wstring GetText(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeDeclarationKind">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.CSharp.SyntaxKind GetTypeDeclarationKind (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind GetTypeDeclarationKind(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetTypeDeclarationKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeDeclarationKind (kind As SyntaxKind) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member GetTypeDeclarationKind : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; Microsoft.CodeAnalysis.CSharp.SyntaxKind" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.GetTypeDeclarationKind kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetTypeDeclarationKind(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetTypeDeclarationKind(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::CodeAnalysis::CSharp::SyntaxKind GetTypeDeclarationKind(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAccessibilityModifier">
      <MemberSignature Language="C#" Value="public static bool IsAccessibilityModifier (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAccessibilityModifier(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessibilityModifier(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAccessibilityModifier (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsAccessibilityModifier : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessibilityModifier kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsAccessibilityModifier(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsAccessibilityModifier(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsAccessibilityModifier(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAccessorDeclaration">
      <MemberSignature Language="C#" Value="public static bool IsAccessorDeclaration (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAccessorDeclaration(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAccessorDeclaration (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsAccessorDeclaration : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessorDeclaration kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsAccessorDeclaration(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsAccessorDeclaration(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsAccessorDeclaration(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAccessorDeclarationKeyword">
      <MemberSignature Language="C#" Value="public static bool IsAccessorDeclarationKeyword (Microsoft.CodeAnalysis.CSharp.SyntaxKind keyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAccessorDeclarationKeyword(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind keyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessorDeclarationKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAccessorDeclarationKeyword (keyword As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsAccessorDeclarationKeyword : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAccessorDeclarationKeyword keyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsAccessorDeclarationKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind keyword);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsAccessorDeclarationKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind keyword);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsAccessorDeclarationKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind keyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="keyword">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAliasQualifier">
      <MemberSignature Language="C#" Value="public static bool IsAliasQualifier (Microsoft.CodeAnalysis.SyntaxNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAliasQualifier(class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAliasQualifier(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAliasQualifier (node As SyntaxNode) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsAliasQualifier : Microsoft.CodeAnalysis.SyntaxNode -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAliasQualifier node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsAliasQualifier(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsAliasQualifier(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsAliasQualifier(Microsoft::CodeAnalysis::SyntaxNode const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
            Returns true if the node is the alias of an AliasQualifiedNameSyntax
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAnyOverloadableOperator">
      <MemberSignature Language="C#" Value="public static bool IsAnyOverloadableOperator (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAnyOverloadableOperator(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyOverloadableOperator(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAnyOverloadableOperator (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsAnyOverloadableOperator : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyOverloadableOperator kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsAnyOverloadableOperator(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsAnyOverloadableOperator(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsAnyOverloadableOperator(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAnyToken">
      <MemberSignature Language="C#" Value="public static bool IsAnyToken (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAnyToken(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAnyToken (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsAnyToken : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyToken kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsAnyToken(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsAnyToken(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsAnyToken(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAnyUnaryExpression">
      <MemberSignature Language="C#" Value="public static bool IsAnyUnaryExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAnyUnaryExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAnyUnaryExpression (token As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsAnyUnaryExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAnyUnaryExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsAnyUnaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsAnyUnaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsAnyUnaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAssignmentExpression">
      <MemberSignature Language="C#" Value="public static bool IsAssignmentExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAssignmentExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAssignmentExpression (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsAssignmentExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAssignmentExpression kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsAssignmentExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsAssignmentExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsAssignmentExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAssignmentExpressionOperatorToken">
      <MemberSignature Language="C#" Value="public static bool IsAssignmentExpressionOperatorToken (Microsoft.CodeAnalysis.CSharp.SyntaxKind token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAssignmentExpressionOperatorToken(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAssignmentExpressionOperatorToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAssignmentExpressionOperatorToken (token As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsAssignmentExpressionOperatorToken : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAssignmentExpressionOperatorToken token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsAssignmentExpressionOperatorToken(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsAssignmentExpressionOperatorToken(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsAssignmentExpressionOperatorToken(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAttributeName">
      <MemberSignature Language="C#" Value="public static bool IsAttributeName (Microsoft.CodeAnalysis.SyntaxNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAttributeName(class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAttributeName(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAttributeName (node As SyntaxNode) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsAttributeName : Microsoft.CodeAnalysis.SyntaxNode -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAttributeName node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsAttributeName(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsAttributeName(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsAttributeName(Microsoft::CodeAnalysis::SyntaxNode const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAttributeTargetSpecifier">
      <MemberSignature Language="C#" Value="public static bool IsAttributeTargetSpecifier (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAttributeTargetSpecifier(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAttributeTargetSpecifier(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAttributeTargetSpecifier (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsAttributeTargetSpecifier : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsAttributeTargetSpecifier kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsAttributeTargetSpecifier(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsAttributeTargetSpecifier(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsAttributeTargetSpecifier(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBinaryExpression">
      <MemberSignature Language="C#" Value="public static bool IsBinaryExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsBinaryExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsBinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsBinaryExpression (token As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsBinaryExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsBinaryExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsBinaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsBinaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsBinaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBinaryExpressionOperatorToken">
      <MemberSignature Language="C#" Value="public static bool IsBinaryExpressionOperatorToken (Microsoft.CodeAnalysis.CSharp.SyntaxKind token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsBinaryExpressionOperatorToken(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsBinaryExpressionOperatorToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsBinaryExpressionOperatorToken (token As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsBinaryExpressionOperatorToken : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsBinaryExpressionOperatorToken token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsBinaryExpressionOperatorToken(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsBinaryExpressionOperatorToken(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsBinaryExpressionOperatorToken(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContextualKeyword">
      <MemberSignature Language="C#" Value="public static bool IsContextualKeyword (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsContextualKeyword(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsContextualKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsContextualKeyword (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsContextualKeyword : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsContextualKeyword kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsContextualKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsContextualKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsContextualKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDocumentationCommentTrivia">
      <MemberSignature Language="C#" Value="public static bool IsDocumentationCommentTrivia (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDocumentationCommentTrivia(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsDocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDocumentationCommentTrivia (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsDocumentationCommentTrivia : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsDocumentationCommentTrivia kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDocumentationCommentTrivia(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsDocumentationCommentTrivia(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsDocumentationCommentTrivia(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFixedStatementExpression">
      <MemberSignature Language="C#" Value="public static bool IsFixedStatementExpression (Microsoft.CodeAnalysis.SyntaxNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFixedStatementExpression(class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsFixedStatementExpression(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsFixedStatementExpression (node As SyntaxNode) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsFixedStatementExpression : Microsoft.CodeAnalysis.SyntaxNode -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsFixedStatementExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsFixedStatementExpression(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsFixedStatementExpression(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsFixedStatementExpression(Microsoft::CodeAnalysis::SyntaxNode const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
            Is the expression the initializer in a fixed statement?
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGlobalMemberDeclaration">
      <MemberSignature Language="C#" Value="public static bool IsGlobalMemberDeclaration (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsGlobalMemberDeclaration(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsGlobalMemberDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsGlobalMemberDeclaration (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsGlobalMemberDeclaration : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsGlobalMemberDeclaration kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsGlobalMemberDeclaration(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsGlobalMemberDeclaration(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsGlobalMemberDeclaration(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>
            Member declarations that can appear in global code (other than type declarations).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdentifierPartCharacter">
      <MemberSignature Language="C#" Value="public static bool IsIdentifierPartCharacter (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsIdentifierPartCharacter(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIdentifierPartCharacter(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsIdentifierPartCharacter (ch As Char) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsIdentifierPartCharacter : char -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIdentifierPartCharacter ch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsIdentifierPartCharacter(char ch);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsIdentifierPartCharacter(char16 ch);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsIdentifierPartCharacter(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character.</param>
        <summary>
            Returns true if the Unicode character can be a part of a C# identifier.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdentifierStartCharacter">
      <MemberSignature Language="C#" Value="public static bool IsIdentifierStartCharacter (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsIdentifierStartCharacter(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIdentifierStartCharacter(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsIdentifierStartCharacter (ch As Char) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsIdentifierStartCharacter : char -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIdentifierStartCharacter ch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsIdentifierStartCharacter(char ch);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsIdentifierStartCharacter(char16 ch);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsIdentifierStartCharacter(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character.</param>
        <summary>
            Returns true if the Unicode character can be the starting character of a C# identifier.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIndexed">
      <MemberSignature Language="C#" Value="public static bool IsIndexed (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsIndexed(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIndexed(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsIndexed (node As ExpressionSyntax) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsIndexed : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsIndexed node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsIndexed(Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsIndexed(Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsIndexed(Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
            Returns true if the node is the object of an element access expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInNamespaceOrTypeContext">
      <MemberSignature Language="C#" Value="public static bool IsInNamespaceOrTypeContext (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInNamespaceOrTypeContext(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInNamespaceOrTypeContext(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInNamespaceOrTypeContext (node As ExpressionSyntax) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsInNamespaceOrTypeContext : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInNamespaceOrTypeContext node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsInNamespaceOrTypeContext(Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsInNamespaceOrTypeContext(Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsInNamespaceOrTypeContext(Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node"></param>
        <summary>
            Returns true if a node is in a tree location that is expected to be either a namespace or type
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInstanceExpression">
      <MemberSignature Language="C#" Value="public static bool IsInstanceExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInstanceExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInstanceExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInstanceExpression (token As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsInstanceExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInstanceExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsInstanceExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsInstanceExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsInstanceExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInTypeOnlyContext">
      <MemberSignature Language="C#" Value="public static bool IsInTypeOnlyContext (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInTypeOnlyContext(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInTypeOnlyContext(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInTypeOnlyContext (node As ExpressionSyntax) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsInTypeOnlyContext : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInTypeOnlyContext node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsInTypeOnlyContext(Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsInTypeOnlyContext(Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsInTypeOnlyContext(Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node"></param>
        <summary>
            Returns true if the node is in a tree location that is expected to be a type
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInvoked">
      <MemberSignature Language="C#" Value="public static bool IsInvoked (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInvoked(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInvoked(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInvoked (node As ExpressionSyntax) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsInvoked : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsInvoked node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsInvoked(Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsInvoked(Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsInvoked(Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
            Returns true if the node is the object of an invocation expression.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeywordKind">
      <MemberSignature Language="C#" Value="public static bool IsKeywordKind (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKeywordKind(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsKeywordKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsKeywordKind (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsKeywordKind : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsKeywordKind kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsKeywordKind(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsKeywordKind(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsKeywordKind(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLambdaBody">
      <MemberSignature Language="C#" Value="public static bool IsLambdaBody (Microsoft.CodeAnalysis.SyntaxNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLambdaBody(class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLambdaBody(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLambdaBody (node As SyntaxNode) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsLambdaBody : Microsoft.CodeAnalysis.SyntaxNode -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLambdaBody node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLambdaBody(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsLambdaBody(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsLambdaBody(Microsoft::CodeAnalysis::SyntaxNode const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("IsLambdaBody API is obsolete", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLanguagePunctuation">
      <MemberSignature Language="C#" Value="public static bool IsLanguagePunctuation (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLanguagePunctuation(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLanguagePunctuation(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLanguagePunctuation (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsLanguagePunctuation : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLanguagePunctuation kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLanguagePunctuation(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsLanguagePunctuation(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsLanguagePunctuation(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLiteralExpression">
      <MemberSignature Language="C#" Value="public static bool IsLiteralExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLiteralExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLiteralExpression (token As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsLiteralExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsLiteralExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLiteralExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsLiteralExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsLiteralExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsName">
      <MemberSignature Language="C#" Value="public static bool IsName (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsName(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsName(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsName (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsName : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsName kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsName(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsName(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsName(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNamedArgumentName">
      <MemberSignature Language="C#" Value="public static bool IsNamedArgumentName (Microsoft.CodeAnalysis.SyntaxNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNamedArgumentName(class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamedArgumentName(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNamedArgumentName (node As SyntaxNode) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNamedArgumentName : Microsoft.CodeAnalysis.SyntaxNode -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamedArgumentName node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNamedArgumentName(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsNamedArgumentName(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsNamedArgumentName(Microsoft::CodeAnalysis::SyntaxNode const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
            Is the node the name of a named argument of an invocation, object creation expression, 
            constructor initializer, or element access, but not an attribute.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNamespaceAliasQualifier">
      <MemberSignature Language="C#" Value="public static bool IsNamespaceAliasQualifier (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNamespaceAliasQualifier(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamespaceAliasQualifier(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNamespaceAliasQualifier (node As ExpressionSyntax) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNamespaceAliasQualifier : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamespaceAliasQualifier node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNamespaceAliasQualifier(Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsNamespaceAliasQualifier(Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsNamespaceAliasQualifier(Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNamespaceMemberDeclaration">
      <MemberSignature Language="C#" Value="public static bool IsNamespaceMemberDeclaration (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNamespaceMemberDeclaration(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamespaceMemberDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNamespaceMemberDeclaration (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNamespaceMemberDeclaration : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNamespaceMemberDeclaration kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNamespaceMemberDeclaration(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsNamespaceMemberDeclaration(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsNamespaceMemberDeclaration(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNewLine">
      <MemberSignature Language="C#" Value="public static bool IsNewLine (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNewLine(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNewLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNewLine (ch As Char) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNewLine : char -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsNewLine ch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNewLine(char ch);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsNewLine(char16 ch);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsNewLine(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character.</param>
        <summary>
            Returns true if the Unicode character is a newline character.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOverloadableBinaryOperator">
      <MemberSignature Language="C#" Value="public static bool IsOverloadableBinaryOperator (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsOverloadableBinaryOperator(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsOverloadableBinaryOperator(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOverloadableBinaryOperator (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsOverloadableBinaryOperator : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsOverloadableBinaryOperator kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsOverloadableBinaryOperator(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsOverloadableBinaryOperator(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsOverloadableBinaryOperator(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOverloadableUnaryOperator">
      <MemberSignature Language="C#" Value="public static bool IsOverloadableUnaryOperator (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsOverloadableUnaryOperator(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsOverloadableUnaryOperator(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOverloadableUnaryOperator (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsOverloadableUnaryOperator : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsOverloadableUnaryOperator kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsOverloadableUnaryOperator(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsOverloadableUnaryOperator(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsOverloadableUnaryOperator(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPostfixUnaryExpression">
      <MemberSignature Language="C#" Value="public static bool IsPostfixUnaryExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPostfixUnaryExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsPostfixUnaryExpression (token As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPostfixUnaryExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPostfixUnaryExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPostfixUnaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsPostfixUnaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsPostfixUnaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPostfixUnaryExpressionToken">
      <MemberSignature Language="C#" Value="public static bool IsPostfixUnaryExpressionToken (Microsoft.CodeAnalysis.CSharp.SyntaxKind token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPostfixUnaryExpressionToken(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPostfixUnaryExpressionToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsPostfixUnaryExpressionToken (token As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPostfixUnaryExpressionToken : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPostfixUnaryExpressionToken token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPostfixUnaryExpressionToken(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsPostfixUnaryExpressionToken(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsPostfixUnaryExpressionToken(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPredefinedType">
      <MemberSignature Language="C#" Value="public static bool IsPredefinedType (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPredefinedType(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPredefinedType(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsPredefinedType (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPredefinedType : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPredefinedType kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPredefinedType(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsPredefinedType(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsPredefinedType(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrefixUnaryExpression">
      <MemberSignature Language="C#" Value="public static bool IsPrefixUnaryExpression (Microsoft.CodeAnalysis.CSharp.SyntaxKind token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPrefixUnaryExpression(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsPrefixUnaryExpression (token As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPrefixUnaryExpression : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrefixUnaryExpression token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPrefixUnaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsPrefixUnaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsPrefixUnaryExpression(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrefixUnaryExpressionOperatorToken">
      <MemberSignature Language="C#" Value="public static bool IsPrefixUnaryExpressionOperatorToken (Microsoft.CodeAnalysis.CSharp.SyntaxKind token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPrefixUnaryExpressionOperatorToken(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrefixUnaryExpressionOperatorToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsPrefixUnaryExpressionOperatorToken (token As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPrefixUnaryExpressionOperatorToken : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrefixUnaryExpressionOperatorToken token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPrefixUnaryExpressionOperatorToken(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsPrefixUnaryExpressionOperatorToken(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsPrefixUnaryExpressionOperatorToken(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPreprocessorDirective">
      <MemberSignature Language="C#" Value="public static bool IsPreprocessorDirective (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPreprocessorDirective(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorDirective(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsPreprocessorDirective (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPreprocessorDirective : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorDirective kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPreprocessorDirective(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsPreprocessorDirective(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsPreprocessorDirective(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPreprocessorKeyword">
      <MemberSignature Language="C#" Value="public static bool IsPreprocessorKeyword (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPreprocessorKeyword(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsPreprocessorKeyword (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPreprocessorKeyword : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorKeyword kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPreprocessorKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsPreprocessorKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsPreprocessorKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPreprocessorPunctuation">
      <MemberSignature Language="C#" Value="public static bool IsPreprocessorPunctuation (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPreprocessorPunctuation(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorPunctuation(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsPreprocessorPunctuation (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPreprocessorPunctuation : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPreprocessorPunctuation kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPreprocessorPunctuation(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsPreprocessorPunctuation(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsPreprocessorPunctuation(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimaryFunction">
      <MemberSignature Language="C#" Value="public static bool IsPrimaryFunction (Microsoft.CodeAnalysis.CSharp.SyntaxKind keyword);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPrimaryFunction(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind keyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrimaryFunction(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsPrimaryFunction (keyword As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPrimaryFunction : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPrimaryFunction keyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPrimaryFunction(Microsoft::CodeAnalysis::CSharp::SyntaxKind keyword);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsPrimaryFunction(Microsoft::CodeAnalysis::CSharp::SyntaxKind keyword);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsPrimaryFunction(Microsoft::CodeAnalysis::CSharp::SyntaxKind keyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyword" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="keyword">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPunctuation(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsPunctuation (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPunctuation : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPunctuation kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPunctuation(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsPunctuation(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsPunctuation(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPunctuationOrKeyword">
      <MemberSignature Language="C#" Value="public static bool IsPunctuationOrKeyword (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuationOrKeyword(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPunctuationOrKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsPunctuationOrKeyword (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPunctuationOrKeyword : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsPunctuationOrKeyword kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPunctuationOrKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsPunctuationOrKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsPunctuationOrKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsQueryContextualKeyword">
      <MemberSignature Language="C#" Value="public static bool IsQueryContextualKeyword (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsQueryContextualKeyword(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsQueryContextualKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsQueryContextualKeyword (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsQueryContextualKeyword : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsQueryContextualKeyword kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsQueryContextualKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsQueryContextualKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsQueryContextualKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReservedKeyword">
      <MemberSignature Language="C#" Value="public static bool IsReservedKeyword (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsReservedKeyword(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsReservedKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReservedKeyword (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsReservedKeyword : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsReservedKeyword kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReservedKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsReservedKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsReservedKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReservedTupleElementName">
      <MemberSignature Language="C#" Value="public static bool IsReservedTupleElementName (string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsReservedTupleElementName(string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsReservedTupleElementName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReservedTupleElementName (elementName As String) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsReservedTupleElementName : string -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsReservedTupleElementName elementName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReservedTupleElementName(System::String ^ elementName);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsReservedTupleElementName(Platform::String ^ elementName);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsReservedTupleElementName(std::wstring const &amp; elementName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">To be added.</param>
        <summary>
             Checks whether the element name is reserved.
            
             For example:
             "Item3" is reserved (at certain positions).
             "Rest", "ToString" and other members of System.ValueTuple are reserved (in any position).
             Names that are not reserved return false.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrivia">
      <MemberSignature Language="C#" Value="public static bool IsTrivia (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTrivia(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTrivia(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsTrivia (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsTrivia : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTrivia kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsTrivia(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsTrivia(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsTrivia(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDeclaration">
      <MemberSignature Language="C#" Value="public static bool IsTypeDeclaration (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTypeDeclaration(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsTypeDeclaration (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsTypeDeclaration : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeDeclaration kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsTypeDeclaration(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsTypeDeclaration(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsTypeDeclaration(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeParameterVarianceKeyword">
      <MemberSignature Language="C#" Value="public static bool IsTypeParameterVarianceKeyword (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTypeParameterVarianceKeyword(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeParameterVarianceKeyword(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsTypeParameterVarianceKeyword (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsTypeParameterVarianceKeyword : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeParameterVarianceKeyword kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsTypeParameterVarianceKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsTypeParameterVarianceKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsTypeParameterVarianceKeyword(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeSyntax">
      <MemberSignature Language="C#" Value="public static bool IsTypeSyntax (Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTypeSyntax(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeSyntax(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsTypeSyntax (kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsTypeSyntax : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsTypeSyntax kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsTypeSyntax(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsTypeSyntax(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsTypeSyntax(Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnaryOperatorDeclarationToken">
      <MemberSignature Language="C#" Value="public static bool IsUnaryOperatorDeclarationToken (Microsoft.CodeAnalysis.CSharp.SyntaxKind token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUnaryOperatorDeclarationToken(valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsUnaryOperatorDeclarationToken(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnaryOperatorDeclarationToken (token As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsUnaryOperatorDeclarationToken : Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsUnaryOperatorDeclarationToken token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUnaryOperatorDeclarationToken(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsUnaryOperatorDeclarationToken(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsUnaryOperatorDeclarationToken(Microsoft::CodeAnalysis::CSharp::SyntaxKind token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidIdentifier">
      <MemberSignature Language="C#" Value="public static bool IsValidIdentifier (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidIdentifier(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidIdentifier (name As String) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsValidIdentifier : string -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsValidIdentifier name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValidIdentifier(System::String ^ name);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsValidIdentifier(Platform::String ^ name);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsValidIdentifier(std::wstring const &amp; name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
            Check that the name is a valid identifier.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWhitespace">
      <MemberSignature Language="C#" Value="public static bool IsWhitespace (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhitespace(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsWhitespace(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsWhitespace (ch As Char) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsWhitespace : char -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.IsWhitespace ch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsWhitespace(char ch);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static bool IsWhitespace(char16 ch);" />
      <MemberSignature Language="C++ WINRT" Value=" static bool IsWhitespace(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character.</param>
        <summary>
            Returns true if the Unicode character represents a whitespace.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetInferredMemberName">
      <MemberSignature Language="C#" Value="public static string TryGetInferredMemberName (this Microsoft.CodeAnalysis.SyntaxNode syntax);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string TryGetInferredMemberName(class Microsoft.CodeAnalysis.SyntaxNode syntax) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SyntaxFacts.TryGetInferredMemberName(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryGetInferredMemberName (syntax As SyntaxNode) As String" />
      <MemberSignature Language="F#" Value="static member TryGetInferredMemberName : Microsoft.CodeAnalysis.SyntaxNode -&gt; string" Usage="Microsoft.CodeAnalysis.CSharp.SyntaxFacts.TryGetInferredMemberName syntax" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ TryGetInferredMemberName(Microsoft::CodeAnalysis::SyntaxNode ^ syntax);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::String ^ TryGetInferredMemberName(Microsoft::CodeAnalysis::SyntaxNode ^ syntax);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syntax" Type="Microsoft.CodeAnalysis.SyntaxNode" RefType="this" />
      </Parameters>
      <Docs>
        <param name="syntax">To be added.</param>
        <summary>
            Given an initializer expression infer the name of anonymous property or tuple element.
            Returns null if unsuccessful
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>