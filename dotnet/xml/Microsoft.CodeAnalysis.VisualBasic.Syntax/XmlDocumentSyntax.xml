<Type Name="XmlDocumentSyntax" FullName="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax">
  <TypeSignature Language="C#" Value="public sealed class XmlDocumentSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed XmlDocumentSyntax extends Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlDocumentSyntax&#xA;Inherits XmlNodeSyntax" />
  <TypeSignature Language="F#" Value="type XmlDocumentSyntax = class&#xA;    inherit XmlNodeSyntax" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlDocumentSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax" />
  <TypeSignature Language="C++ CX" Value="public ref class XmlDocumentSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax" />
  <TypeSignature Language="C++ WINRT" Value="class XmlDocumentSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
 Represents an XML Document literal expression.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public override void Accept (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Accept(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax.Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Accept (visitor As VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor -&gt; unit" Usage="xmlDocumentSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value=" override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public override TResult Accept&lt;TResult&gt; (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt; visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!TResult Accept&lt;TResult&gt;(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor`1&lt;!!TResult&gt; visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax.Accept``1(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Accept(Of TResult) (visitor As VisualBasicSyntaxVisitor(Of TResult)) As TResult" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;'Result&gt; -&gt; 'Result" Usage="xmlDocumentSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor&lt;TResult&gt; ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor&lt;TResult&gt; const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFollowingMisc">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax AddFollowingMisc (params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax AddFollowingMisc(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax.AddFollowingMisc(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddFollowingMisc (ParamArray items As XmlNodeSyntax()) As XmlDocumentSyntax" />
      <MemberSignature Language="F#" Value="member this.AddFollowingMisc : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax" Usage="xmlDocumentSyntax.AddFollowingMisc items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDocumentSyntax ^ AddFollowingMisc(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPrecedingMisc">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax AddPrecedingMisc (params Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax AddPrecedingMisc(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax.AddPrecedingMisc(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddPrecedingMisc (ParamArray items As XmlNodeSyntax()) As XmlDocumentSyntax" />
      <MemberSignature Language="F#" Value="member this.AddPrecedingMisc : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax" Usage="xmlDocumentSyntax.AddPrecedingMisc items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDocumentSyntax ^ AddPrecedingMisc(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Declaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax Declaration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax Declaration" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax.Declaration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Declaration As XmlDeclarationSyntax" />
      <MemberSignature Language="F#" Value="member this.Declaration : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax.Declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationSyntax ^ Declaration { Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationSyntax ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationSyntax ^ Declaration { Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FollowingMisc">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; FollowingMisc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; FollowingMisc" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax.FollowingMisc" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FollowingMisc As SyntaxList(Of XmlNodeSyntax)" />
      <MemberSignature Language="F#" Value="member this.FollowingMisc : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax.FollowingMisc" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; FollowingMisc { Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
 If nothing is present, an empty list is returned.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrecedingMisc">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; PrecedingMisc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; PrecedingMisc" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax.PrecedingMisc" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrecedingMisc As SyntaxList(Of XmlNodeSyntax)" />
      <MemberSignature Language="F#" Value="member this.PrecedingMisc : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax.PrecedingMisc" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; PrecedingMisc { Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
 If nothing is present, an empty list is returned.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax Root { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax Root" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax.Root" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Root As XmlNodeSyntax" />
      <MemberSignature Language="F#" Value="member this.Root : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax.Root" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ Root { Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ Root { Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax Update (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax declaration, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; precedingMisc, Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax root, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; followingMisc);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax Update(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax declaration, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; precedingMisc, class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax root, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; followingMisc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax.Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (declaration As XmlDeclarationSyntax, precedingMisc As SyntaxList(Of XmlNodeSyntax), root As XmlNodeSyntax, followingMisc As SyntaxList(Of XmlNodeSyntax)) As XmlDocumentSyntax" />
      <MemberSignature Language="F#" Value="member this.Update : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax" Usage="xmlDocumentSyntax.Update (declaration, precedingMisc, root, followingMisc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDocumentSyntax ^ Update(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationSyntax ^ declaration, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; precedingMisc, Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ root, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; followingMisc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax" />
        <Parameter Name="precedingMisc" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
        <Parameter Name="followingMisc" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="declaration">
 The value for the Declaration property.
 </param>
        <param name="precedingMisc">
 The value for the PrecedingMisc property.
 </param>
        <param name="root">
 The value for the Root property.
 </param>
        <param name="followingMisc">
 The value for the FollowingMisc property.
 </param>
        <summary>
 Returns a copy of this with the specified changes. Returns this instance if
 there are no actual changes.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithDeclaration">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax WithDeclaration (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax WithDeclaration(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax.WithDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithDeclaration (declaration As XmlDeclarationSyntax) As XmlDocumentSyntax" />
      <MemberSignature Language="F#" Value="member this.WithDeclaration : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax" Usage="xmlDocumentSyntax.WithDeclaration declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDocumentSyntax ^ WithDeclaration(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationSyntax ^ declaration);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDocumentSyntax ^ WithDeclaration(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationSyntax ^ declaration);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDocumentSyntax WithDeclaration(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationSyntax const &amp; declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="declaration">To be added.</param>
        <summary>
 Returns a copy of this with the Declaration property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithFollowingMisc">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax WithFollowingMisc (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; followingMisc);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax WithFollowingMisc(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; followingMisc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax.WithFollowingMisc(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithFollowingMisc (followingMisc As SyntaxList(Of XmlNodeSyntax)) As XmlDocumentSyntax" />
      <MemberSignature Language="F#" Value="member this.WithFollowingMisc : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax" Usage="xmlDocumentSyntax.WithFollowingMisc followingMisc" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDocumentSyntax ^ WithFollowingMisc(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; followingMisc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="followingMisc" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="followingMisc">To be added.</param>
        <summary>
 Returns a copy of this with the FollowingMisc property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithPrecedingMisc">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax WithPrecedingMisc (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; precedingMisc);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax WithPrecedingMisc(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; precedingMisc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax.WithPrecedingMisc(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithPrecedingMisc (precedingMisc As SyntaxList(Of XmlNodeSyntax)) As XmlDocumentSyntax" />
      <MemberSignature Language="F#" Value="member this.WithPrecedingMisc : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax" Usage="xmlDocumentSyntax.WithPrecedingMisc precedingMisc" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDocumentSyntax ^ WithPrecedingMisc(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^&gt; precedingMisc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precedingMisc" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="precedingMisc">To be added.</param>
        <summary>
 Returns a copy of this with the PrecedingMisc property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithRoot">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax WithRoot (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax root);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax WithRoot(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax root) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax.WithRoot(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithRoot (root As XmlNodeSyntax) As XmlDocumentSyntax" />
      <MemberSignature Language="F#" Value="member this.WithRoot : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax" Usage="xmlDocumentSyntax.WithRoot root" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDocumentSyntax ^ WithRoot(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ root);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDocumentSyntax ^ WithRoot(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax ^ root);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDocumentSyntax WithRoot(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNodeSyntax const &amp; root);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNodeSyntax" />
      </Parameters>
      <Docs>
        <param name="root">To be added.</param>
        <summary>
 Returns a copy of this with the Root property changed to the specified value.
 Returns this instance if the specified value is the same as the current value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>