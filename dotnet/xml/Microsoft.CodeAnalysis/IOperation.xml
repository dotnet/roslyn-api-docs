<Type Name="IOperation" FullName="Microsoft.CodeAnalysis.IOperation">
  <TypeSignature Language="C#" Value="public interface IOperation" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IOperation" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="VB.NET" Value="Public Interface IOperation" />
  <TypeSignature Language="F#" Value="type IOperation = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IOperation" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Root type for representing the abstract semantics of C# and VB statements and expressions.
            </summary>
    <remarks>
            This interface is reserved for implementation by its associated APIs. We reserve the right to
            change it in the future.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public void Accept (Microsoft.CodeAnalysis.Operations.OperationVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Accept(class Microsoft.CodeAnalysis.Operations.OperationVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.IOperation.Accept(Microsoft.CodeAnalysis.Operations.OperationVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Accept (visitor As OperationVisitor)" />
      <MemberSignature Language="F#" Value="abstract member Accept : Microsoft.CodeAnalysis.Operations.OperationVisitor -&gt; unit" Usage="iOperation.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Accept(Microsoft::CodeAnalysis::Operations::OperationVisitor ^ visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.Operations.OperationVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TArgument,TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Accept&lt;TArgument,TResult&gt; (Microsoft.CodeAnalysis.Operations.OperationVisitor&lt;TArgument,TResult&gt; visitor, TArgument argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult Accept&lt;TArgument, TResult&gt;(class Microsoft.CodeAnalysis.Operations.OperationVisitor`2&lt;!!TArgument, !!TResult&gt; visitor, !!TArgument argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.IOperation.Accept``2(Microsoft.CodeAnalysis.Operations.OperationVisitor{``0,``1},``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Accept(Of TArgument, TResult) (visitor As OperationVisitor(Of TArgument, TResult), argument As TArgument) As TResult" />
      <MemberSignature Language="F#" Value="abstract member Accept : Microsoft.CodeAnalysis.Operations.OperationVisitor&lt;'Argument, 'Result&gt; * 'Argument -&gt; 'Result" Usage="iOperation.Accept (visitor, argument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArgument, typename TResult&gt;&#xA; TResult Accept(Microsoft::CodeAnalysis::Operations::OperationVisitor&lt;TArgument, TResult&gt; ^ visitor, TArgument argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArgument" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.Operations.OperationVisitor&lt;TArgument,TResult&gt;" />
        <Parameter Name="argument" Type="TArgument" />
      </Parameters>
      <Docs>
        <typeparam name="TArgument">To be added.</typeparam>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="visitor">To be added.</param>
        <param name="argument">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt; Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.IOperation&gt; Children" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.IOperation.Children" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Children As IEnumerable(Of IOperation)" />
      <MemberSignature Language="F#" Value="member this.Children : seq&lt;Microsoft.CodeAnalysis.IOperation&gt;" Usage="Microsoft.CodeAnalysis.IOperation.Children" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::IOperation ^&gt; ^ Children { System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::IOperation ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            An array of child operations for this operation.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstantValue">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Optional&lt;object&gt; ConstantValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.Optional`1&lt;object&gt; ConstantValue" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.IOperation.ConstantValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConstantValue As Optional(Of Object)" />
      <MemberSignature Language="F#" Value="member this.ConstantValue : Microsoft.CodeAnalysis.Optional&lt;obj&gt;" Usage="Microsoft.CodeAnalysis.IOperation.ConstantValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::Optional&lt;System::Object ^&gt; ConstantValue { Microsoft::CodeAnalysis::Optional&lt;System::Object ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Optional&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            If the operation is an expression that evaluates to a constant value, <see cref="P:Microsoft.CodeAnalysis.Optional`1.HasValue" /> is true and <see cref="P:Microsoft.CodeAnalysis.Optional`1.Value" /> is the value of the expression. Otherwise, <see cref="P:Microsoft.CodeAnalysis.Optional`1.HasValue" /> is false.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImplicit">
      <MemberSignature Language="C#" Value="public bool IsImplicit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImplicit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.IOperation.IsImplicit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsImplicit As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsImplicit : bool" Usage="Microsoft.CodeAnalysis.IOperation.IsImplicit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsImplicit { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Set to True if compiler generated /implicitly computed by compiler code
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.OperationKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.OperationKind Kind" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.IOperation.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As OperationKind" />
      <MemberSignature Language="F#" Value="member this.Kind : Microsoft.CodeAnalysis.OperationKind" Usage="Microsoft.CodeAnalysis.IOperation.Kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::OperationKind Kind { Microsoft::CodeAnalysis::OperationKind get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.OperationKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Identifies the kind of the operation.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public string Language { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.IOperation.Language" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Language As String" />
      <MemberSignature Language="F#" Value="member this.Language : string" Usage="Microsoft.CodeAnalysis.IOperation.Language" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Language { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The source language of the IOperation. Possible values are <see cref="F:Microsoft.CodeAnalysis.LanguageNames.CSharp" /> and <see cref="F:Microsoft.CodeAnalysis.LanguageNames.VisualBasic" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IOperation Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IOperation Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.IOperation.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As IOperation" />
      <MemberSignature Language="F#" Value="member this.Parent : Microsoft.CodeAnalysis.IOperation" Usage="Microsoft.CodeAnalysis.IOperation.Parent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ Parent { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            IOperation that has this operation as a child
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SemanticModel">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SemanticModel SemanticModel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.SemanticModel SemanticModel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.IOperation.SemanticModel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SemanticModel As SemanticModel" />
      <MemberSignature Language="F#" Value="member this.SemanticModel : Microsoft.CodeAnalysis.SemanticModel" Usage="Microsoft.CodeAnalysis.IOperation.SemanticModel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SemanticModel ^ SemanticModel { Microsoft::CodeAnalysis::SemanticModel ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SemanticModel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Optional semantic model that was used to generate this operation.
            Non-null for operations generated from source with <see cref="M:Microsoft.CodeAnalysis.SemanticModel.GetOperation(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)" /> API
            and operation callbacks made to analyzers.
            Null for operations inside a <see cref="T:Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Syntax">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNode Syntax { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.SyntaxNode Syntax" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.IOperation.Syntax" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Syntax As SyntaxNode" />
      <MemberSignature Language="F#" Value="member this.Syntax : Microsoft.CodeAnalysis.SyntaxNode" Usage="Microsoft.CodeAnalysis.IOperation.Syntax" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxNode ^ Syntax { Microsoft::CodeAnalysis::SyntaxNode ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Syntax that was analyzed to produce the operation.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.ITypeSymbol Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.ITypeSymbol Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.IOperation.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As ITypeSymbol" />
      <MemberSignature Language="F#" Value="member this.Type : Microsoft.CodeAnalysis.ITypeSymbol" Usage="Microsoft.CodeAnalysis.IOperation.Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::ITypeSymbol ^ Type { Microsoft::CodeAnalysis::ITypeSymbol ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ITypeSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Result type of the operation, or null if the operation does not produce a result.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>