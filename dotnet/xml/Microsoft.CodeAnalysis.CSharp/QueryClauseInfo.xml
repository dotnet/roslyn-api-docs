<Type Name="QueryClauseInfo" FullName="Microsoft.CodeAnalysis.CSharp.QueryClauseInfo">
  <TypeSignature Language="C#" Value="public struct QueryClauseInfo : IEquatable&lt;Microsoft.CodeAnalysis.CSharp.QueryClauseInfo&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit QueryClauseInfo extends System.ValueType implements class System.IEquatable`1&lt;valuetype Microsoft.CodeAnalysis.CSharp.QueryClauseInfo&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CSharp.QueryClauseInfo" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Microsoft.CodeAnalysis.CSharp.QueryClauseInfo&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Semantic information associated with a query clause in a C# query expression.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CastInfo">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SymbolInfo CastInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SymbolInfo CastInfo" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.QueryClauseInfo.CastInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SymbolInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The .Cast&lt;T&gt;() operation generated from the query range variable's type restriction,
            or null if the type restriction isn't specified. 
            </summary>
        <value>To be added.</value>
        <remarks>
            The operation, when present is implemented via <see cref="T:Microsoft.CodeAnalysis.IMethodSymbol" />.
            To access the type, when this is non-null use <see cref="P:Microsoft.CodeAnalysis.IMethodSymbol.TypeArguments" />[0].
            If it is an extension method, it is returned in reduced form.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Microsoft.CodeAnalysis.CSharp.QueryClauseInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype Microsoft.CodeAnalysis.CSharp.QueryClauseInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.QueryClauseInfo.Equals(Microsoft.CodeAnalysis.CSharp.QueryClauseInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.CodeAnalysis.CSharp.QueryClauseInfo" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.QueryClauseInfo.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.QueryClauseInfo.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationInfo">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SymbolInfo OperationInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SymbolInfo OperationInfo" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.QueryClauseInfo.OperationInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SymbolInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The operation (e.g. Select(), Where(), etc) that implements the given clause.
            </summary>
        <value>To be added.</value>
        <remarks>
            The clause can be implemented via <see cref="T:Microsoft.CodeAnalysis.IMethodSymbol" />, or 
            <see cref="T:Microsoft.CodeAnalysis.IFieldSymbol" /> or <see cref="T:Microsoft.CodeAnalysis.IPropertySymbol" /> that return a delegate.
            If it is an extension method, it is returned in reduced form.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>