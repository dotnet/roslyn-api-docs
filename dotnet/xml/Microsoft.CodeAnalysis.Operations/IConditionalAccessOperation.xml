<Type Name="IConditionalAccessOperation" FullName="Microsoft.CodeAnalysis.Operations.IConditionalAccessOperation">
  <TypeSignature Language="C#" Value="public interface IConditionalAccessOperation : Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IConditionalAccessOperation implements class Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Operations.IConditionalAccessOperation" />
  <TypeSignature Language="VB.NET" Value="Public Interface IConditionalAccessOperation&#xA;Implements IOperation" />
  <TypeSignature Language="F#" Value="type IConditionalAccessOperation = interface&#xA;    interface IOperation" />
  <TypeSignature Language="C++ CLI" Value="public interface class IConditionalAccessOperation : Microsoft::CodeAnalysis::IOperation" />
  <TypeSignature Language="C++ CX" Value="public interface class IConditionalAccessOperation : Microsoft::CodeAnalysis::IOperation" />
  <TypeSignature Language="C++ WINRT" Value="__interface IConditionalAccessOperation : Microsoft::CodeAnalysis::IOperation" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.CodeAnalysis.IOperation</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents a conditionally accessed operation. Note that <see cref="T:Microsoft.CodeAnalysis.Operations.IConditionalAccessInstanceOperation" /> is used to refer to the value
            of <see cref="P:Microsoft.CodeAnalysis.Operations.IConditionalAccessOperation.Operation" /> within <see cref="P:Microsoft.CodeAnalysis.Operations.IConditionalAccessOperation.WhenNotNull" />.
            <para>
            Current usage:
             (1) C# conditional access expression (? or ?. operator).
             (2) VB conditional access expression (? or ?. operator).
            </para></summary>
    <remarks>
            This interface is reserved for implementation by its associated APIs. We reserve the right to
            change it in the future.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Operation">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IOperation Operation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IOperation Operation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IConditionalAccessOperation.Operation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Operation As IOperation" />
      <MemberSignature Language="F#" Value="member this.Operation : Microsoft.CodeAnalysis.IOperation" Usage="Microsoft.CodeAnalysis.Operations.IConditionalAccessOperation.Operation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ Operation { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ Operation { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Operation that will be evaluated and accessed if non null.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhenNotNull">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IOperation WhenNotNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IOperation WhenNotNull" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IConditionalAccessOperation.WhenNotNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhenNotNull As IOperation" />
      <MemberSignature Language="F#" Value="member this.WhenNotNull : Microsoft.CodeAnalysis.IOperation" Usage="Microsoft.CodeAnalysis.Operations.IConditionalAccessOperation.WhenNotNull" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ WhenNotNull { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ WhenNotNull { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Operation to be evaluated if <see cref="P:Microsoft.CodeAnalysis.Operations.IConditionalAccessOperation.Operation" /> is non null.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>