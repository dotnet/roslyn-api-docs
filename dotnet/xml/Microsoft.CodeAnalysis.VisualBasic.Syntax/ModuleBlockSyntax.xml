<Type Name="ModuleBlockSyntax" FullName="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax">
  <TypeSignature Language="C#" Value="public sealed class ModuleBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ModuleBlockSyntax extends Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ModuleBlockSyntax&#xA;Inherits TypeBlockSyntax" />
  <TypeSignature Language="F#" Value="type ModuleBlockSyntax = class&#xA;    inherit TypeBlockSyntax" />
  <TypeSignature Language="C++ CLI" Value="public ref class ModuleBlockSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeBlockSyntax" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
 Represents a declaration of Module, its contents and the End statement that
 ends it.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public override void Accept (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Accept(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Accept (visitor As VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor -&gt; unit" Usage="moduleBlockSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor ^ visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public override TResult Accept&lt;TResult&gt; (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt; visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!TResult Accept&lt;TResult&gt;(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor`1&lt;!!TResult&gt; visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.Accept``1(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Accept(Of TResult) (visitor As VisualBasicSyntaxVisitor(Of TResult)) As TResult" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;'Result&gt; -&gt; 'Result" Usage="moduleBlockSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor&lt;TResult&gt; ^ visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddImplements">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax AddImplements (params Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax AddImplements(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.AddImplements(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddImplements (ParamArray items As ImplementsStatementSyntax()) As ModuleBlockSyntax" />
      <MemberSignature Language="F#" Value="override this.AddImplements : Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax" Usage="moduleBlockSyntax.AddImplements items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleBlockSyntax ^ AddImplements(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInherits">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax AddInherits (params Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax AddInherits(class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.AddInherits(Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddInherits (ParamArray items As InheritsStatementSyntax()) As ModuleBlockSyntax" />
      <MemberSignature Language="F#" Value="override this.AddInherits : Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax" Usage="moduleBlockSyntax.AddInherits items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleBlockSyntax ^ AddInherits(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMembers">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax AddMembers (params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax AddMembers(class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.AddMembers(Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMembers (ParamArray items As StatementSyntax()) As ModuleBlockSyntax" />
      <MemberSignature Language="F#" Value="override this.AddMembers : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax" Usage="moduleBlockSyntax.AddMembers items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleBlockSyntax ^ AddMembers(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax Begin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax Begin" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.Begin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Begin As ModuleStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.Begin : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.Begin" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleStatementSyntax ^ Begin { Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This member is obsolete.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BlockStatement">
      <MemberSignature Language="C#" Value="public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax BlockStatement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax BlockStatement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.BlockStatement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BlockStatement As TypeStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.BlockStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.BlockStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeStatementSyntax ^ BlockStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax End { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax End" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.End" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property End As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.End : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.End" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ End { Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This member is obsolete.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBlockStatement">
      <MemberSignature Language="C#" Value="public override Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.EndBlockStatement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property EndBlockStatement As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.EndBlockStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.EndBlockStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndBlockStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndModuleStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndModuleStatement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndModuleStatement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.EndModuleStatement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndModuleStatement As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.EndModuleStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.EndModuleStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndModuleStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The "End Module" statement that ends the block.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Implements">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; Implements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; Implements" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.Implements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Implements As SyntaxList(Of ImplementsStatementSyntax)" />
      <MemberSignature Language="F#" Value="member this.Implements : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.Implements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^&gt; Implements { Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 A list of the Implements declarations for the type.
 </summary>
        <value>To be added.</value>
        <remarks>
 If nothing is present, an empty list is returned.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inherits">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; Inherits { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; Inherits" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.Inherits" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Inherits As SyntaxList(Of InheritsStatementSyntax)" />
      <MemberSignature Language="F#" Value="member this.Inherits : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.Inherits" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^&gt; Inherits { Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 A list of the Inherits declarations for the type.
 </summary>
        <value>To be added.</value>
        <remarks>
 If nothing is present, an empty list is returned.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="Members">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; Members { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; Members" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.Members" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Members As SyntaxList(Of StatementSyntax)" />
      <MemberSignature Language="F#" Value="member this.Members : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.Members" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; Members { Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The declarations contained in the type or module.
 </summary>
        <value>To be added.</value>
        <remarks>
 If nothing is present, an empty list is returned.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax ModuleStatement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax ModuleStatement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.ModuleStatement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ModuleStatement As ModuleStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.ModuleStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.ModuleStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleStatementSyntax ^ ModuleStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The "Module" statement that begins the block.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax Update (Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax moduleStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endModuleStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax Update(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax moduleStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endModuleStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax},Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (moduleStatement As ModuleStatementSyntax, inherits As SyntaxList(Of InheritsStatementSyntax), implements As SyntaxList(Of ImplementsStatementSyntax), members As SyntaxList(Of StatementSyntax), endModuleStatement As EndBlockStatementSyntax) As ModuleBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.Update : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax" Usage="moduleBlockSyntax.Update (moduleStatement, inherits, implements, members, endModuleStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleBlockSyntax ^ Update(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleStatementSyntax ^ moduleStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^&gt; inherits, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^&gt; implements, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; members, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endModuleStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="moduleStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax" />
        <Parameter Name="inherits" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt;" />
        <Parameter Name="implements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt;" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="endModuleStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="moduleStatement">
 The value for the ModuleStatement property.
 </param>
        <param name="inherits">
 The value for the Inherits property.
 </param>
        <param name="implements">
 The value for the Implements property.
 </param>
        <param name="members">
 The value for the Members property.
 </param>
        <param name="endModuleStatement">
 The value for the EndModuleStatement property.
 </param>
        <summary>
 Returns a copy of this with the specified changes. Returns this instance if
 there are no actual changes.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithBegin">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithBegin (Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax begin);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithBegin(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax begin) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.WithBegin(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithBegin (begin As ModuleStatementSyntax) As ModuleBlockSyntax" />
      <MemberSignature Language="F#" Value="override this.WithBegin : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax" Usage="moduleBlockSyntax.WithBegin begin" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleBlockSyntax ^ WithBegin(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleStatementSyntax ^ begin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This member is obsolete.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="begin" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="begin">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithBlockStatement">
      <MemberSignature Language="C#" Value="public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithBlockStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax blockStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithBlockStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax blockStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.WithBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WithBlockStatement (blockStatement As TypeStatementSyntax) As TypeBlockSyntax" />
      <MemberSignature Language="F#" Value="override this.WithBlockStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" Usage="moduleBlockSyntax.WithBlockStatement blockStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeBlockSyntax ^ WithBlockStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeStatementSyntax ^ blockStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blockStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="blockStatement">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithEnd">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithEnd (Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax end);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithEnd(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax end) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.WithEnd(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithEnd (end As EndBlockStatementSyntax) As ModuleBlockSyntax" />
      <MemberSignature Language="F#" Value="override this.WithEnd : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax" Usage="moduleBlockSyntax.WithEnd end" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleBlockSyntax ^ WithEnd(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ end);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This member is obsolete.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="end" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="end">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithEndBlockStatement">
      <MemberSignature Language="C#" Value="public override Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithEndBlockStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endBlockStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithEndBlockStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endBlockStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.WithEndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WithEndBlockStatement (endBlockStatement As EndBlockStatementSyntax) As TypeBlockSyntax" />
      <MemberSignature Language="F#" Value="override this.WithEndBlockStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" Usage="moduleBlockSyntax.WithEndBlockStatement endBlockStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeBlockSyntax ^ WithEndBlockStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endBlockStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endBlockStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="endBlockStatement">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithEndModuleStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithEndModuleStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endModuleStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithEndModuleStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endModuleStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.WithEndModuleStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithEndModuleStatement (endModuleStatement As EndBlockStatementSyntax) As ModuleBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.WithEndModuleStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax" Usage="moduleBlockSyntax.WithEndModuleStatement endModuleStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleBlockSyntax ^ WithEndModuleStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endModuleStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endModuleStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="endModuleStatement">To be added.</param>
        <summary>
 Returns a copy of this with the EndModuleStatement property changed to the
 specified value. Returns this instance if the specified value is the same as
 the current value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithImplements">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithImplements (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithImplements(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.WithImplements(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithImplements (implements As SyntaxList(Of ImplementsStatementSyntax)) As ModuleBlockSyntax" />
      <MemberSignature Language="F#" Value="override this.WithImplements : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax" Usage="moduleBlockSyntax.WithImplements implements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleBlockSyntax ^ WithImplements(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^&gt; implements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="implements">To be added.</param>
        <summary>
 Returns a copy of this with the [Implements] property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithInherits">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithInherits (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithInherits(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.WithInherits(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithInherits (inherits As SyntaxList(Of InheritsStatementSyntax)) As ModuleBlockSyntax" />
      <MemberSignature Language="F#" Value="override this.WithInherits : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax" Usage="moduleBlockSyntax.WithInherits inherits" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleBlockSyntax ^ WithInherits(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^&gt; inherits);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherits" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="inherits">To be added.</param>
        <summary>
 Returns a copy of this with the [Inherits] property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithMembers">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithMembers (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithMembers(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.WithMembers(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithMembers (members As SyntaxList(Of StatementSyntax)) As ModuleBlockSyntax" />
      <MemberSignature Language="F#" Value="override this.WithMembers : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax" Usage="moduleBlockSyntax.WithMembers members" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleBlockSyntax ^ WithMembers(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="members">To be added.</param>
        <summary>
 Returns a copy of this with the Members property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithModuleStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithModuleStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax moduleStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax WithModuleStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax moduleStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax.WithModuleStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithModuleStatement (moduleStatement As ModuleStatementSyntax) As ModuleBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.WithModuleStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax" Usage="moduleBlockSyntax.WithModuleStatement moduleStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleBlockSyntax ^ WithModuleStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleStatementSyntax ^ moduleStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="moduleStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="moduleStatement">To be added.</param>
        <summary>
 Returns a copy of this with the ModuleStatement property changed to the
 specified value. Returns this instance if the specified value is the same as
 the current value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>