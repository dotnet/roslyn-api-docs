<Type Name="ForBlockSyntax" FullName="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax">
  <TypeSignature Language="C#" Value="public sealed class ForBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ForBlockSyntax extends Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ForBlockSyntax&#xA;Inherits ForOrForEachBlockSyntax" />
  <TypeSignature Language="F#" Value="type ForBlockSyntax = class&#xA;    inherit ForOrForEachBlockSyntax" />
  <TypeSignature Language="C++ CLI" Value="public ref class ForBlockSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::ForOrForEachBlockSyntax" />
  <TypeSignature Language="C++ CX" Value="public ref class ForBlockSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::ForOrForEachBlockSyntax" />
  <TypeSignature Language="C++ WINRT" Value="class ForBlockSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::ForOrForEachBlockSyntax" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachBlockSyntax</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
 Represents a For block, including the introducing statement, the body and the
 "Next" (which can be omitted if a containing For has a Next with multiple
 variables).
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public override void Accept (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Accept(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax.Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Accept (visitor As VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor -&gt; unit" Usage="forBlockSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value=" override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public override TResult Accept&lt;TResult&gt; (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt; visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!TResult Accept&lt;TResult&gt;(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor`1&lt;!!TResult&gt; visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax.Accept``1(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Accept(Of TResult) (visitor As VisualBasicSyntaxVisitor(Of TResult)) As TResult" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;'Result&gt; -&gt; 'Result" Usage="forBlockSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor&lt;TResult&gt; ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor&lt;TResult&gt; const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddNextStatementControlVariables">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax AddNextStatementControlVariables (params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax AddNextStatementControlVariables(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax.AddNextStatementControlVariables(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddNextStatementControlVariables (ParamArray items As ExpressionSyntax()) As ForBlockSyntax" />
      <MemberSignature Language="F#" Value="override this.AddNextStatementControlVariables : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax" Usage="forBlockSyntax.AddNextStatementControlVariables items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ForBlockSyntax ^ AddNextStatementControlVariables(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddStatements">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax AddStatements (params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax AddStatements(class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax.AddStatements(Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddStatements (ParamArray items As StatementSyntax()) As ForBlockSyntax" />
      <MemberSignature Language="F#" Value="override this.AddStatements : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax" Usage="forBlockSyntax.AddStatements items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ForBlockSyntax ^ AddStatements(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForOrForEachStatement">
      <MemberSignature Language="C#" Value="public override Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachStatementSyntax ForOrForEachStatement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachStatementSyntax ForOrForEachStatement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax.ForOrForEachStatement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ForOrForEachStatement As ForOrForEachStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.ForOrForEachStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax.ForOrForEachStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::CodeAnalysis::VisualBasic::Syntax::ForOrForEachStatementSyntax ^ ForOrForEachStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::ForOrForEachStatementSyntax ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property Microsoft::CodeAnalysis::VisualBasic::Syntax::ForOrForEachStatementSyntax ^ ForOrForEachStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::ForOrForEachStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForOrForEachStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax ForStatement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax ForStatement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax.ForStatement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ForStatement As ForStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.ForStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax.ForStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStatementSyntax ^ ForStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStatementSyntax ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStatementSyntax ^ ForStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The For statement that begins the block.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax NextStatement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax NextStatement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax.NextStatement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextStatement As NextStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.NextStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax.NextStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax ^ NextStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax ^ NextStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The Next statement that ends the block. If two For or For Each statements are
 ended by a single Next statement, the inner For will not have a Next statement.
 </summary>
        <value>To be added.</value>
        <remarks>
 This child is optional. If it is not present, then Nothing is returned.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="Statements">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; Statements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; Statements" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax.Statements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Statements As SyntaxList(Of StatementSyntax)" />
      <MemberSignature Language="F#" Value="member this.Statements : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax.Statements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; Statements { Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The statements contained in the For or For Each loop. This might be an empty
 list.
 </summary>
        <value>To be added.</value>
        <remarks>
 If nothing is present, an empty list is returned.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax Update (Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax forStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax nextStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax Update(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax forStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements, class Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax nextStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax.Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (forStatement As ForStatementSyntax, statements As SyntaxList(Of StatementSyntax), nextStatement As NextStatementSyntax) As ForBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.Update : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax" Usage="forBlockSyntax.Update (forStatement, statements, nextStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ForBlockSyntax ^ Update(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStatementSyntax ^ forStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements, Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax ^ nextStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax" />
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
        <Parameter Name="nextStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="forStatement">
 The value for the ForStatement property.
 </param>
        <param name="statements">
 The value for the Statements property.
 </param>
        <param name="nextStatement">
 The value for the NextStatement property.
 </param>
        <summary>
 Returns a copy of this with the specified changes. Returns this instance if
 there are no actual changes.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithForStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax WithForStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax forStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax WithForStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax forStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax.WithForStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithForStatement (forStatement As ForStatementSyntax) As ForBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.WithForStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax" Usage="forBlockSyntax.WithForStatement forStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ForBlockSyntax ^ WithForStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStatementSyntax ^ forStatement);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ForBlockSyntax ^ WithForStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStatementSyntax ^ forStatement);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::VisualBasic::Syntax::ForBlockSyntax WithForStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStatementSyntax const &amp; forStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="forStatement">To be added.</param>
        <summary>
 Returns a copy of this with the ForStatement property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithNextStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax WithNextStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax nextStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax WithNextStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax nextStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax.WithNextStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithNextStatement (nextStatement As NextStatementSyntax) As ForBlockSyntax" />
      <MemberSignature Language="F#" Value="override this.WithNextStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax" Usage="forBlockSyntax.WithNextStatement nextStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ForBlockSyntax ^ WithNextStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax ^ nextStatement);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ForBlockSyntax ^ WithNextStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax ^ nextStatement);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::VisualBasic::Syntax::ForBlockSyntax WithNextStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax const &amp; nextStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nextStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="nextStatement">To be added.</param>
        <summary>
 Returns a copy of this with the NextStatement property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithStatements">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax WithStatements (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax WithStatements(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax.WithStatements(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithStatements (statements As SyntaxList(Of StatementSyntax)) As ForBlockSyntax" />
      <MemberSignature Language="F#" Value="override this.WithStatements : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax" Usage="forBlockSyntax.WithStatements statements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::ForBlockSyntax ^ WithStatements(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; statements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="statements">To be added.</param>
        <summary>
 Returns a copy of this with the Statements property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>