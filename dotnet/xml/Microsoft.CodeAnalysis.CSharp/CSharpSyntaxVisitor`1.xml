<Type Name="CSharpSyntaxVisitor&lt;TResult&gt;" FullName="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;TResult&gt;">
  <TypeSignature Language="C#" Value="public abstract class CSharpSyntaxVisitor&lt;TResult&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CSharpSyntaxVisitor`1&lt;TResult&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CSharpSyntaxVisitor(Of TResult)" />
  <TypeSignature Language="F#" Value="type CSharpSyntaxVisitor&lt;'Result&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TResult">
            The type of the return value this visitor's Visit method.
            </typeparam>
    <summary>
            Represents a <see cref="T:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode" /> visitor that visits only the single CSharpSyntaxNode
            passed into its Visit method and produces 
            a value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CSharpSyntaxVisitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultVisit">
      <MemberSignature Language="C#" Value="public virtual TResult DefaultVisit (Microsoft.CodeAnalysis.SyntaxNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult DefaultVisit(class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.DefaultVisit(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DefaultVisit (node As SyntaxNode) As TResult" />
      <MemberSignature Language="F#" Value="abstract member DefaultVisit : Microsoft.CodeAnalysis.SyntaxNode -&gt; 'Result&#xA;override this.DefaultVisit : Microsoft.CodeAnalysis.SyntaxNode -&gt; 'Result" Usage="cSharpSyntaxVisitor.DefaultVisit node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public virtual TResult Visit (Microsoft.CodeAnalysis.SyntaxNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult Visit(class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.Visit(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Visit (node As SyntaxNode) As TResult" />
      <MemberSignature Language="F#" Value="abstract member Visit : Microsoft.CodeAnalysis.SyntaxNode -&gt; 'Result&#xA;override this.Visit : Microsoft.CodeAnalysis.SyntaxNode -&gt; 'Result" Usage="cSharpSyntaxVisitor.Visit node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAccessorDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitAccessorDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitAccessorDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAccessorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitAccessorDeclaration (node As AccessorDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitAccessorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax -&gt; 'Result&#xA;override this.VisitAccessorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitAccessorDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AccessorDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAccessorList">
      <MemberSignature Language="C#" Value="public virtual TResult VisitAccessorList (Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitAccessorList(class Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAccessorList(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitAccessorList (node As AccessorListSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitAccessorList : Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax -&gt; 'Result&#xA;override this.VisitAccessorList : Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitAccessorList node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AccessorListSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAliasQualifiedName">
      <MemberSignature Language="C#" Value="public virtual TResult VisitAliasQualifiedName (Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitAliasQualifiedName(class Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitAliasQualifiedName (node As AliasQualifiedNameSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitAliasQualifiedName : Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax -&gt; 'Result&#xA;override this.VisitAliasQualifiedName : Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitAliasQualifiedName node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AliasQualifiedNameSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAnonymousMethodExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitAnonymousMethodExpression (Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitAnonymousMethodExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAnonymousMethodExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitAnonymousMethodExpression (node As AnonymousMethodExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitAnonymousMethodExpression : Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax -&gt; 'Result&#xA;override this.VisitAnonymousMethodExpression : Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitAnonymousMethodExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AnonymousMethodExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAnonymousObjectCreationExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitAnonymousObjectCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitAnonymousObjectCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAnonymousObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitAnonymousObjectCreationExpression (node As AnonymousObjectCreationExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitAnonymousObjectCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax -&gt; 'Result&#xA;override this.VisitAnonymousObjectCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitAnonymousObjectCreationExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AnonymousObjectCreationExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAnonymousObjectMemberDeclarator">
      <MemberSignature Language="C#" Value="public virtual TResult VisitAnonymousObjectMemberDeclarator (Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitAnonymousObjectMemberDeclarator(class Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitAnonymousObjectMemberDeclarator (node As AnonymousObjectMemberDeclaratorSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitAnonymousObjectMemberDeclarator : Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax -&gt; 'Result&#xA;override this.VisitAnonymousObjectMemberDeclarator : Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitAnonymousObjectMemberDeclarator node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AnonymousObjectMemberDeclaratorSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitArgument">
      <MemberSignature Language="C#" Value="public virtual TResult VisitArgument (Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitArgument(class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitArgument(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitArgument (node As ArgumentSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitArgument : Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax -&gt; 'Result&#xA;override this.VisitArgument : Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitArgument node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ArgumentSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitArgumentList">
      <MemberSignature Language="C#" Value="public virtual TResult VisitArgumentList (Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitArgumentList(class Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitArgumentList (node As ArgumentListSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitArgumentList : Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax -&gt; 'Result&#xA;override this.VisitArgumentList : Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitArgumentList node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ArgumentListSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitArrayCreationExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitArrayCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitArrayCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitArrayCreationExpression (node As ArrayCreationExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax -&gt; 'Result&#xA;override this.VisitArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitArrayCreationExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ArrayCreationExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitArrayRankSpecifier">
      <MemberSignature Language="C#" Value="public virtual TResult VisitArrayRankSpecifier (Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitArrayRankSpecifier(class Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitArrayRankSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitArrayRankSpecifier (node As ArrayRankSpecifierSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitArrayRankSpecifier : Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax -&gt; 'Result&#xA;override this.VisitArrayRankSpecifier : Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitArrayRankSpecifier node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ArrayRankSpecifierSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitArrayType">
      <MemberSignature Language="C#" Value="public virtual TResult VisitArrayType (Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitArrayType(class Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitArrayType (node As ArrayTypeSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitArrayType : Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax -&gt; 'Result&#xA;override this.VisitArrayType : Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitArrayType node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ArrayTypeSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitArrowExpressionClause">
      <MemberSignature Language="C#" Value="public virtual TResult VisitArrowExpressionClause (Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitArrowExpressionClause(class Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitArrowExpressionClause(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitArrowExpressionClause (node As ArrowExpressionClauseSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitArrowExpressionClause : Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax -&gt; 'Result&#xA;override this.VisitArrowExpressionClause : Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitArrowExpressionClause node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ArrowExpressionClauseSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAssignmentExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitAssignmentExpression (Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitAssignmentExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAssignmentExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitAssignmentExpression (node As AssignmentExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitAssignmentExpression : Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax -&gt; 'Result&#xA;override this.VisitAssignmentExpression : Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitAssignmentExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AssignmentExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAttribute">
      <MemberSignature Language="C#" Value="public virtual TResult VisitAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitAttribute (node As AttributeSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax -&gt; 'Result&#xA;override this.VisitAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitAttribute node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AttributeSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAttributeArgument">
      <MemberSignature Language="C#" Value="public virtual TResult VisitAttributeArgument (Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitAttributeArgument(class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitAttributeArgument (node As AttributeArgumentSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitAttributeArgument : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax -&gt; 'Result&#xA;override this.VisitAttributeArgument : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitAttributeArgument node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AttributeArgumentSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAttributeArgumentList">
      <MemberSignature Language="C#" Value="public virtual TResult VisitAttributeArgumentList (Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitAttributeArgumentList(class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAttributeArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitAttributeArgumentList (node As AttributeArgumentListSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitAttributeArgumentList : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax -&gt; 'Result&#xA;override this.VisitAttributeArgumentList : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitAttributeArgumentList node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AttributeArgumentListSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAttributeList">
      <MemberSignature Language="C#" Value="public virtual TResult VisitAttributeList (Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitAttributeList(class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAttributeList(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitAttributeList (node As AttributeListSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitAttributeList : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax -&gt; 'Result&#xA;override this.VisitAttributeList : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitAttributeList node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AttributeListSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAttributeTargetSpecifier">
      <MemberSignature Language="C#" Value="public virtual TResult VisitAttributeTargetSpecifier (Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitAttributeTargetSpecifier(class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAttributeTargetSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitAttributeTargetSpecifier (node As AttributeTargetSpecifierSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitAttributeTargetSpecifier : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax -&gt; 'Result&#xA;override this.VisitAttributeTargetSpecifier : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitAttributeTargetSpecifier node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AttributeTargetSpecifierSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAwaitExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitAwaitExpression (Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitAwaitExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitAwaitExpression(Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitAwaitExpression (node As AwaitExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitAwaitExpression : Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax -&gt; 'Result&#xA;override this.VisitAwaitExpression : Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitAwaitExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a AwaitExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBadDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitBadDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitBadDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitBadDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitBadDirectiveTrivia (node As BadDirectiveTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitBadDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax -&gt; 'Result&#xA;override this.VisitBadDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitBadDirectiveTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a BadDirectiveTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBaseExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitBaseExpression (Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitBaseExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitBaseExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitBaseExpression (node As BaseExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitBaseExpression : Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax -&gt; 'Result&#xA;override this.VisitBaseExpression : Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitBaseExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a BaseExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBaseList">
      <MemberSignature Language="C#" Value="public virtual TResult VisitBaseList (Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitBaseList(class Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitBaseList(Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitBaseList (node As BaseListSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitBaseList : Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax -&gt; 'Result&#xA;override this.VisitBaseList : Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitBaseList node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a BaseListSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBinaryExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitBinaryExpression (Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitBinaryExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitBinaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitBinaryExpression (node As BinaryExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitBinaryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax -&gt; 'Result&#xA;override this.VisitBinaryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitBinaryExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a BinaryExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBlock">
      <MemberSignature Language="C#" Value="public virtual TResult VisitBlock (Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitBlock(class Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitBlock(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitBlock (node As BlockSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitBlock : Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax -&gt; 'Result&#xA;override this.VisitBlock : Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitBlock node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a BlockSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBracketedArgumentList">
      <MemberSignature Language="C#" Value="public virtual TResult VisitBracketedArgumentList (Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitBracketedArgumentList(class Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitBracketedArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitBracketedArgumentList (node As BracketedArgumentListSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitBracketedArgumentList : Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax -&gt; 'Result&#xA;override this.VisitBracketedArgumentList : Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitBracketedArgumentList node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a BracketedArgumentListSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBracketedParameterList">
      <MemberSignature Language="C#" Value="public virtual TResult VisitBracketedParameterList (Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitBracketedParameterList(class Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitBracketedParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitBracketedParameterList (node As BracketedParameterListSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitBracketedParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax -&gt; 'Result&#xA;override this.VisitBracketedParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitBracketedParameterList node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a BracketedParameterListSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBreakStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitBreakStatement (Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitBreakStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitBreakStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitBreakStatement (node As BreakStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitBreakStatement : Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax -&gt; 'Result&#xA;override this.VisitBreakStatement : Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitBreakStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a BreakStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCasePatternSwitchLabel">
      <MemberSignature Language="C#" Value="public virtual TResult VisitCasePatternSwitchLabel (Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitCasePatternSwitchLabel(class Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCasePatternSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitCasePatternSwitchLabel (node As CasePatternSwitchLabelSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitCasePatternSwitchLabel : Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax -&gt; 'Result&#xA;override this.VisitCasePatternSwitchLabel : Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitCasePatternSwitchLabel node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CasePatternSwitchLabelSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCaseSwitchLabel">
      <MemberSignature Language="C#" Value="public virtual TResult VisitCaseSwitchLabel (Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitCaseSwitchLabel(class Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitCaseSwitchLabel (node As CaseSwitchLabelSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitCaseSwitchLabel : Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax -&gt; 'Result&#xA;override this.VisitCaseSwitchLabel : Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitCaseSwitchLabel node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CaseSwitchLabelSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCastExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitCastExpression (Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitCastExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCastExpression(Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitCastExpression (node As CastExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitCastExpression : Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax -&gt; 'Result&#xA;override this.VisitCastExpression : Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitCastExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CastExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCatchClause">
      <MemberSignature Language="C#" Value="public virtual TResult VisitCatchClause (Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitCatchClause(class Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCatchClause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitCatchClause (node As CatchClauseSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitCatchClause : Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax -&gt; 'Result&#xA;override this.VisitCatchClause : Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitCatchClause node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CatchClauseSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCatchDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitCatchDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitCatchDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitCatchDeclaration (node As CatchDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitCatchDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax -&gt; 'Result&#xA;override this.VisitCatchDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitCatchDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CatchDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCatchFilterClause">
      <MemberSignature Language="C#" Value="public virtual TResult VisitCatchFilterClause (Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitCatchFilterClause(class Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCatchFilterClause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitCatchFilterClause (node As CatchFilterClauseSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitCatchFilterClause : Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax -&gt; 'Result&#xA;override this.VisitCatchFilterClause : Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitCatchFilterClause node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CatchFilterClauseSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCheckedExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitCheckedExpression (Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitCheckedExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCheckedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitCheckedExpression (node As CheckedExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitCheckedExpression : Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax -&gt; 'Result&#xA;override this.VisitCheckedExpression : Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitCheckedExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CheckedExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCheckedStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitCheckedStatement (Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitCheckedStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCheckedStatement(Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitCheckedStatement (node As CheckedStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitCheckedStatement : Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax -&gt; 'Result&#xA;override this.VisitCheckedStatement : Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitCheckedStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CheckedStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitClassDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitClassDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitClassDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitClassDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitClassDeclaration (node As ClassDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitClassDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax -&gt; 'Result&#xA;override this.VisitClassDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitClassDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ClassDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitClassOrStructConstraint">
      <MemberSignature Language="C#" Value="public virtual TResult VisitClassOrStructConstraint (Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitClassOrStructConstraint(class Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitClassOrStructConstraint (node As ClassOrStructConstraintSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitClassOrStructConstraint : Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax -&gt; 'Result&#xA;override this.VisitClassOrStructConstraint : Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitClassOrStructConstraint node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ClassOrStructConstraintSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCompilationUnit">
      <MemberSignature Language="C#" Value="public virtual TResult VisitCompilationUnit (Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitCompilationUnit(class Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCompilationUnit(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitCompilationUnit (node As CompilationUnitSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitCompilationUnit : Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax -&gt; 'Result&#xA;override this.VisitCompilationUnit : Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitCompilationUnit node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CompilationUnitSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConditionalAccessExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitConditionalAccessExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitConditionalAccessExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitConditionalAccessExpression (node As ConditionalAccessExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitConditionalAccessExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax -&gt; 'Result&#xA;override this.VisitConditionalAccessExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitConditionalAccessExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ConditionalAccessExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConditionalExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitConditionalExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitConditionalExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitConditionalExpression (node As ConditionalExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitConditionalExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax -&gt; 'Result&#xA;override this.VisitConditionalExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitConditionalExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ConditionalExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConstantPattern">
      <MemberSignature Language="C#" Value="public virtual TResult VisitConstantPattern (Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitConstantPattern(class Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitConstantPattern(Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitConstantPattern (node As ConstantPatternSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitConstantPattern : Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax -&gt; 'Result&#xA;override this.VisitConstantPattern : Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitConstantPattern node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ConstantPatternSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConstructorConstraint">
      <MemberSignature Language="C#" Value="public virtual TResult VisitConstructorConstraint (Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitConstructorConstraint(class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitConstructorConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitConstructorConstraint (node As ConstructorConstraintSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitConstructorConstraint : Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax -&gt; 'Result&#xA;override this.VisitConstructorConstraint : Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitConstructorConstraint node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ConstructorConstraintSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConstructorDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitConstructorDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitConstructorDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitConstructorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitConstructorDeclaration (node As ConstructorDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitConstructorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax -&gt; 'Result&#xA;override this.VisitConstructorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitConstructorDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ConstructorDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConstructorInitializer">
      <MemberSignature Language="C#" Value="public virtual TResult VisitConstructorInitializer (Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitConstructorInitializer(class Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitConstructorInitializer(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitConstructorInitializer (node As ConstructorInitializerSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitConstructorInitializer : Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax -&gt; 'Result&#xA;override this.VisitConstructorInitializer : Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitConstructorInitializer node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ConstructorInitializerSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitContinueStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitContinueStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitContinueStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitContinueStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitContinueStatement (node As ContinueStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitContinueStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax -&gt; 'Result&#xA;override this.VisitContinueStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitContinueStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ContinueStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConversionOperatorDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitConversionOperatorDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitConversionOperatorDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitConversionOperatorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitConversionOperatorDeclaration (node As ConversionOperatorDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitConversionOperatorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax -&gt; 'Result&#xA;override this.VisitConversionOperatorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitConversionOperatorDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ConversionOperatorDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConversionOperatorMemberCref">
      <MemberSignature Language="C#" Value="public virtual TResult VisitConversionOperatorMemberCref (Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitConversionOperatorMemberCref(class Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitConversionOperatorMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitConversionOperatorMemberCref (node As ConversionOperatorMemberCrefSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitConversionOperatorMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax -&gt; 'Result&#xA;override this.VisitConversionOperatorMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitConversionOperatorMemberCref node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ConversionOperatorMemberCrefSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCrefBracketedParameterList">
      <MemberSignature Language="C#" Value="public virtual TResult VisitCrefBracketedParameterList (Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitCrefBracketedParameterList(class Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCrefBracketedParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitCrefBracketedParameterList (node As CrefBracketedParameterListSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitCrefBracketedParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax -&gt; 'Result&#xA;override this.VisitCrefBracketedParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitCrefBracketedParameterList node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CrefBracketedParameterListSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCrefParameter">
      <MemberSignature Language="C#" Value="public virtual TResult VisitCrefParameter (Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitCrefParameter(class Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCrefParameter(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitCrefParameter (node As CrefParameterSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitCrefParameter : Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax -&gt; 'Result&#xA;override this.VisitCrefParameter : Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitCrefParameter node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CrefParameterSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCrefParameterList">
      <MemberSignature Language="C#" Value="public virtual TResult VisitCrefParameterList (Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitCrefParameterList(class Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitCrefParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitCrefParameterList (node As CrefParameterListSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitCrefParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax -&gt; 'Result&#xA;override this.VisitCrefParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitCrefParameterList node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a CrefParameterListSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDeclarationExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitDeclarationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitDeclarationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDeclarationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitDeclarationExpression (node As DeclarationExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitDeclarationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax -&gt; 'Result&#xA;override this.VisitDeclarationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitDeclarationExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DeclarationExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDeclarationPattern">
      <MemberSignature Language="C#" Value="public virtual TResult VisitDeclarationPattern (Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitDeclarationPattern(class Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDeclarationPattern(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitDeclarationPattern (node As DeclarationPatternSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitDeclarationPattern : Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax -&gt; 'Result&#xA;override this.VisitDeclarationPattern : Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitDeclarationPattern node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DeclarationPatternSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDefaultExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitDefaultExpression (Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitDefaultExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDefaultExpression(Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitDefaultExpression (node As DefaultExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitDefaultExpression : Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax -&gt; 'Result&#xA;override this.VisitDefaultExpression : Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitDefaultExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DefaultExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDefaultSwitchLabel">
      <MemberSignature Language="C#" Value="public virtual TResult VisitDefaultSwitchLabel (Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitDefaultSwitchLabel(class Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDefaultSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitDefaultSwitchLabel (node As DefaultSwitchLabelSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitDefaultSwitchLabel : Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax -&gt; 'Result&#xA;override this.VisitDefaultSwitchLabel : Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitDefaultSwitchLabel node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DefaultSwitchLabelSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDefineDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitDefineDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitDefineDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDefineDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitDefineDirectiveTrivia (node As DefineDirectiveTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitDefineDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax -&gt; 'Result&#xA;override this.VisitDefineDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitDefineDirectiveTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DefineDirectiveTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDelegateDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitDelegateDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitDelegateDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitDelegateDeclaration (node As DelegateDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitDelegateDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax -&gt; 'Result&#xA;override this.VisitDelegateDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitDelegateDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DelegateDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDestructorDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitDestructorDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitDestructorDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDestructorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitDestructorDeclaration (node As DestructorDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitDestructorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax -&gt; 'Result&#xA;override this.VisitDestructorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitDestructorDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DestructorDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDiscardDesignation">
      <MemberSignature Language="C#" Value="public virtual TResult VisitDiscardDesignation (Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitDiscardDesignation(class Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDiscardDesignation(Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitDiscardDesignation (node As DiscardDesignationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitDiscardDesignation : Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax -&gt; 'Result&#xA;override this.VisitDiscardDesignation : Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitDiscardDesignation node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DiscardDesignationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDocumentationCommentTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitDocumentationCommentTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitDocumentationCommentTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDocumentationCommentTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitDocumentationCommentTrivia (node As DocumentationCommentTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitDocumentationCommentTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax -&gt; 'Result&#xA;override this.VisitDocumentationCommentTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitDocumentationCommentTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DocumentationCommentTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDoStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitDoStatement (Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitDoStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitDoStatement(Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitDoStatement (node As DoStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitDoStatement : Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax -&gt; 'Result&#xA;override this.VisitDoStatement : Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitDoStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a DoStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElementAccessExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitElementAccessExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitElementAccessExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitElementAccessExpression (node As ElementAccessExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitElementAccessExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax -&gt; 'Result&#xA;override this.VisitElementAccessExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitElementAccessExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ElementAccessExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElementBindingExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitElementBindingExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitElementBindingExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitElementBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitElementBindingExpression (node As ElementBindingExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitElementBindingExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax -&gt; 'Result&#xA;override this.VisitElementBindingExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitElementBindingExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ElementBindingExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElifDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitElifDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitElifDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitElifDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitElifDirectiveTrivia (node As ElifDirectiveTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitElifDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax -&gt; 'Result&#xA;override this.VisitElifDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitElifDirectiveTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ElifDirectiveTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElseClause">
      <MemberSignature Language="C#" Value="public virtual TResult VisitElseClause (Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitElseClause(class Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitElseClause(Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitElseClause (node As ElseClauseSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitElseClause : Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax -&gt; 'Result&#xA;override this.VisitElseClause : Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitElseClause node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ElseClauseSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElseDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitElseDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitElseDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitElseDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitElseDirectiveTrivia (node As ElseDirectiveTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitElseDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax -&gt; 'Result&#xA;override this.VisitElseDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitElseDirectiveTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ElseDirectiveTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEmptyStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitEmptyStatement (Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitEmptyStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitEmptyStatement(Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitEmptyStatement (node As EmptyStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitEmptyStatement : Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax -&gt; 'Result&#xA;override this.VisitEmptyStatement : Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitEmptyStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a EmptyStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEndIfDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitEndIfDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitEndIfDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitEndIfDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitEndIfDirectiveTrivia (node As EndIfDirectiveTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitEndIfDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax -&gt; 'Result&#xA;override this.VisitEndIfDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitEndIfDirectiveTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a EndIfDirectiveTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEndRegionDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitEndRegionDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitEndRegionDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitEndRegionDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitEndRegionDirectiveTrivia (node As EndRegionDirectiveTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitEndRegionDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax -&gt; 'Result&#xA;override this.VisitEndRegionDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitEndRegionDirectiveTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a EndRegionDirectiveTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEnumDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitEnumDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitEnumDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitEnumDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitEnumDeclaration (node As EnumDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitEnumDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax -&gt; 'Result&#xA;override this.VisitEnumDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitEnumDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a EnumDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEnumMemberDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitEnumMemberDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitEnumMemberDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitEnumMemberDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitEnumMemberDeclaration (node As EnumMemberDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitEnumMemberDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax -&gt; 'Result&#xA;override this.VisitEnumMemberDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitEnumMemberDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a EnumMemberDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEqualsValueClause">
      <MemberSignature Language="C#" Value="public virtual TResult VisitEqualsValueClause (Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitEqualsValueClause(class Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitEqualsValueClause(Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitEqualsValueClause (node As EqualsValueClauseSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitEqualsValueClause : Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax -&gt; 'Result&#xA;override this.VisitEqualsValueClause : Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitEqualsValueClause node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a EqualsValueClauseSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitErrorDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitErrorDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitErrorDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitErrorDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitErrorDirectiveTrivia (node As ErrorDirectiveTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitErrorDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax -&gt; 'Result&#xA;override this.VisitErrorDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitErrorDirectiveTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ErrorDirectiveTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEventDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitEventDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitEventDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitEventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitEventDeclaration (node As EventDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitEventDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax -&gt; 'Result&#xA;override this.VisitEventDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitEventDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a EventDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEventFieldDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitEventFieldDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitEventFieldDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitEventFieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitEventFieldDeclaration (node As EventFieldDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitEventFieldDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax -&gt; 'Result&#xA;override this.VisitEventFieldDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitEventFieldDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a EventFieldDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExplicitInterfaceSpecifier">
      <MemberSignature Language="C#" Value="public virtual TResult VisitExplicitInterfaceSpecifier (Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitExplicitInterfaceSpecifier(class Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitExplicitInterfaceSpecifier (node As ExplicitInterfaceSpecifierSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitExplicitInterfaceSpecifier : Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax -&gt; 'Result&#xA;override this.VisitExplicitInterfaceSpecifier : Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitExplicitInterfaceSpecifier node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ExplicitInterfaceSpecifierSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExpressionStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitExpressionStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitExpressionStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitExpressionStatement (node As ExpressionStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitExpressionStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax -&gt; 'Result&#xA;override this.VisitExpressionStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitExpressionStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ExpressionStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExternAliasDirective">
      <MemberSignature Language="C#" Value="public virtual TResult VisitExternAliasDirective (Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitExternAliasDirective(class Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitExternAliasDirective(Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitExternAliasDirective (node As ExternAliasDirectiveSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitExternAliasDirective : Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax -&gt; 'Result&#xA;override this.VisitExternAliasDirective : Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitExternAliasDirective node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ExternAliasDirectiveSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitFieldDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitFieldDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitFieldDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitFieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitFieldDeclaration (node As FieldDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitFieldDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax -&gt; 'Result&#xA;override this.VisitFieldDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitFieldDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a FieldDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitFinallyClause">
      <MemberSignature Language="C#" Value="public virtual TResult VisitFinallyClause (Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitFinallyClause(class Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitFinallyClause(Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitFinallyClause (node As FinallyClauseSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitFinallyClause : Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax -&gt; 'Result&#xA;override this.VisitFinallyClause : Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitFinallyClause node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a FinallyClauseSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitFixedStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitFixedStatement (Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitFixedStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitFixedStatement(Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitFixedStatement (node As FixedStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitFixedStatement : Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax -&gt; 'Result&#xA;override this.VisitFixedStatement : Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitFixedStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a FixedStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitForEachStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitForEachStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitForEachStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitForEachStatement (node As ForEachStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitForEachStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax -&gt; 'Result&#xA;override this.VisitForEachStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitForEachStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ForEachStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitForEachVariableStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitForEachVariableStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitForEachVariableStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitForEachVariableStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitForEachVariableStatement (node As ForEachVariableStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitForEachVariableStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax -&gt; 'Result&#xA;override this.VisitForEachVariableStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitForEachVariableStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ForEachVariableStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitForStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitForStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitForStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitForStatement (node As ForStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitForStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax -&gt; 'Result&#xA;override this.VisitForStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitForStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ForStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitFromClause">
      <MemberSignature Language="C#" Value="public virtual TResult VisitFromClause (Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitFromClause(class Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitFromClause(Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitFromClause (node As FromClauseSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitFromClause : Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax -&gt; 'Result&#xA;override this.VisitFromClause : Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitFromClause node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a FromClauseSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGenericName">
      <MemberSignature Language="C#" Value="public virtual TResult VisitGenericName (Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitGenericName(class Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitGenericName(Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitGenericName (node As GenericNameSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitGenericName : Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax -&gt; 'Result&#xA;override this.VisitGenericName : Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitGenericName node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a GenericNameSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGlobalStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitGlobalStatement (Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitGlobalStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitGlobalStatement(Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitGlobalStatement (node As GlobalStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitGlobalStatement : Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax -&gt; 'Result&#xA;override this.VisitGlobalStatement : Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitGlobalStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a GlobalStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGotoStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitGotoStatement (Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitGotoStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitGotoStatement(Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitGotoStatement (node As GotoStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitGotoStatement : Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax -&gt; 'Result&#xA;override this.VisitGotoStatement : Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitGotoStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a GotoStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGroupClause">
      <MemberSignature Language="C#" Value="public virtual TResult VisitGroupClause (Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitGroupClause(class Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitGroupClause(Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitGroupClause (node As GroupClauseSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitGroupClause : Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax -&gt; 'Result&#xA;override this.VisitGroupClause : Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitGroupClause node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a GroupClauseSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIdentifierName">
      <MemberSignature Language="C#" Value="public virtual TResult VisitIdentifierName (Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitIdentifierName(class Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitIdentifierName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitIdentifierName (node As IdentifierNameSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitIdentifierName : Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax -&gt; 'Result&#xA;override this.VisitIdentifierName : Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitIdentifierName node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a IdentifierNameSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIfDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitIfDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitIfDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitIfDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitIfDirectiveTrivia (node As IfDirectiveTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitIfDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax -&gt; 'Result&#xA;override this.VisitIfDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitIfDirectiveTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a IfDirectiveTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIfStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitIfStatement (Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitIfStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitIfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitIfStatement (node As IfStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitIfStatement : Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax -&gt; 'Result&#xA;override this.VisitIfStatement : Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitIfStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a IfStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitImplicitArrayCreationExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitImplicitArrayCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitImplicitArrayCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitImplicitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitImplicitArrayCreationExpression (node As ImplicitArrayCreationExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitImplicitArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax -&gt; 'Result&#xA;override this.VisitImplicitArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitImplicitArrayCreationExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ImplicitArrayCreationExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitImplicitElementAccess">
      <MemberSignature Language="C#" Value="public virtual TResult VisitImplicitElementAccess (Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitImplicitElementAccess(class Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitImplicitElementAccess(Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitImplicitElementAccess (node As ImplicitElementAccessSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitImplicitElementAccess : Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax -&gt; 'Result&#xA;override this.VisitImplicitElementAccess : Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitImplicitElementAccess node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ImplicitElementAccessSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIncompleteMember">
      <MemberSignature Language="C#" Value="public virtual TResult VisitIncompleteMember (Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitIncompleteMember(class Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitIncompleteMember(Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitIncompleteMember (node As IncompleteMemberSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitIncompleteMember : Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax -&gt; 'Result&#xA;override this.VisitIncompleteMember : Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitIncompleteMember node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a IncompleteMemberSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIndexerDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitIndexerDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitIndexerDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitIndexerDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitIndexerDeclaration (node As IndexerDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitIndexerDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax -&gt; 'Result&#xA;override this.VisitIndexerDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitIndexerDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a IndexerDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIndexerMemberCref">
      <MemberSignature Language="C#" Value="public virtual TResult VisitIndexerMemberCref (Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitIndexerMemberCref(class Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitIndexerMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitIndexerMemberCref (node As IndexerMemberCrefSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitIndexerMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax -&gt; 'Result&#xA;override this.VisitIndexerMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitIndexerMemberCref node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a IndexerMemberCrefSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInitializerExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitInitializerExpression (Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitInitializerExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitInitializerExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitInitializerExpression (node As InitializerExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitInitializerExpression : Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax -&gt; 'Result&#xA;override this.VisitInitializerExpression : Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitInitializerExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a InitializerExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterfaceDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitInterfaceDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitInterfaceDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitInterfaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitInterfaceDeclaration (node As InterfaceDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitInterfaceDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax -&gt; 'Result&#xA;override this.VisitInterfaceDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitInterfaceDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a InterfaceDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterpolatedStringExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitInterpolatedStringExpression (Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitInterpolatedStringExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitInterpolatedStringExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitInterpolatedStringExpression (node As InterpolatedStringExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitInterpolatedStringExpression : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax -&gt; 'Result&#xA;override this.VisitInterpolatedStringExpression : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitInterpolatedStringExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a InterpolatedStringExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterpolatedStringText">
      <MemberSignature Language="C#" Value="public virtual TResult VisitInterpolatedStringText (Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitInterpolatedStringText(class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitInterpolatedStringText(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitInterpolatedStringText (node As InterpolatedStringTextSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitInterpolatedStringText : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax -&gt; 'Result&#xA;override this.VisitInterpolatedStringText : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitInterpolatedStringText node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a InterpolatedStringTextSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterpolation">
      <MemberSignature Language="C#" Value="public virtual TResult VisitInterpolation (Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitInterpolation(class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitInterpolation(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitInterpolation (node As InterpolationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitInterpolation : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax -&gt; 'Result&#xA;override this.VisitInterpolation : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitInterpolation node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a InterpolationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterpolationAlignmentClause">
      <MemberSignature Language="C#" Value="public virtual TResult VisitInterpolationAlignmentClause (Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitInterpolationAlignmentClause(class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitInterpolationAlignmentClause(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitInterpolationAlignmentClause (node As InterpolationAlignmentClauseSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitInterpolationAlignmentClause : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax -&gt; 'Result&#xA;override this.VisitInterpolationAlignmentClause : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitInterpolationAlignmentClause node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a InterpolationAlignmentClauseSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterpolationFormatClause">
      <MemberSignature Language="C#" Value="public virtual TResult VisitInterpolationFormatClause (Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitInterpolationFormatClause(class Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitInterpolationFormatClause(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitInterpolationFormatClause (node As InterpolationFormatClauseSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitInterpolationFormatClause : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax -&gt; 'Result&#xA;override this.VisitInterpolationFormatClause : Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitInterpolationFormatClause node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a InterpolationFormatClauseSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInvocationExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitInvocationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitInvocationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitInvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitInvocationExpression (node As InvocationExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitInvocationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax -&gt; 'Result&#xA;override this.VisitInvocationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitInvocationExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a InvocationExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIsPatternExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitIsPatternExpression (Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitIsPatternExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitIsPatternExpression(Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitIsPatternExpression (node As IsPatternExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitIsPatternExpression : Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax -&gt; 'Result&#xA;override this.VisitIsPatternExpression : Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitIsPatternExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a IsPatternExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitJoinClause">
      <MemberSignature Language="C#" Value="public virtual TResult VisitJoinClause (Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitJoinClause(class Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitJoinClause(Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitJoinClause (node As JoinClauseSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitJoinClause : Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax -&gt; 'Result&#xA;override this.VisitJoinClause : Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitJoinClause node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a JoinClauseSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitJoinIntoClause">
      <MemberSignature Language="C#" Value="public virtual TResult VisitJoinIntoClause (Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitJoinIntoClause(class Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitJoinIntoClause(Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitJoinIntoClause (node As JoinIntoClauseSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitJoinIntoClause : Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax -&gt; 'Result&#xA;override this.VisitJoinIntoClause : Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitJoinIntoClause node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a JoinIntoClauseSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLabeledStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitLabeledStatement (Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitLabeledStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitLabeledStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitLabeledStatement (node As LabeledStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitLabeledStatement : Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax -&gt; 'Result&#xA;override this.VisitLabeledStatement : Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitLabeledStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a LabeledStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLetClause">
      <MemberSignature Language="C#" Value="public virtual TResult VisitLetClause (Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitLetClause(class Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitLetClause(Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitLetClause (node As LetClauseSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitLetClause : Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax -&gt; 'Result&#xA;override this.VisitLetClause : Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitLetClause node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a LetClauseSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLineDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitLineDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitLineDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitLineDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitLineDirectiveTrivia (node As LineDirectiveTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitLineDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax -&gt; 'Result&#xA;override this.VisitLineDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitLineDirectiveTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a LineDirectiveTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLiteralExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitLiteralExpression (Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitLiteralExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitLiteralExpression(Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitLiteralExpression (node As LiteralExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitLiteralExpression : Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax -&gt; 'Result&#xA;override this.VisitLiteralExpression : Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitLiteralExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a LiteralExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLoadDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitLoadDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitLoadDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitLoadDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitLoadDirectiveTrivia (node As LoadDirectiveTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitLoadDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax -&gt; 'Result&#xA;override this.VisitLoadDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitLoadDirectiveTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a LoadDirectiveTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLocalDeclarationStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitLocalDeclarationStatement (Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitLocalDeclarationStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitLocalDeclarationStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitLocalDeclarationStatement (node As LocalDeclarationStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitLocalDeclarationStatement : Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax -&gt; 'Result&#xA;override this.VisitLocalDeclarationStatement : Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitLocalDeclarationStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a LocalDeclarationStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLocalFunctionStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitLocalFunctionStatement (Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitLocalFunctionStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitLocalFunctionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitLocalFunctionStatement (node As LocalFunctionStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitLocalFunctionStatement : Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax -&gt; 'Result&#xA;override this.VisitLocalFunctionStatement : Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitLocalFunctionStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a LocalFunctionStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLockStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitLockStatement (Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitLockStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitLockStatement(Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitLockStatement (node As LockStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitLockStatement : Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax -&gt; 'Result&#xA;override this.VisitLockStatement : Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitLockStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a LockStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMakeRefExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitMakeRefExpression (Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitMakeRefExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitMakeRefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitMakeRefExpression (node As MakeRefExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitMakeRefExpression : Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax -&gt; 'Result&#xA;override this.VisitMakeRefExpression : Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitMakeRefExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a MakeRefExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMemberAccessExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitMemberAccessExpression (Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitMemberAccessExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitMemberAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitMemberAccessExpression (node As MemberAccessExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitMemberAccessExpression : Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax -&gt; 'Result&#xA;override this.VisitMemberAccessExpression : Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitMemberAccessExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a MemberAccessExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMemberBindingExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitMemberBindingExpression (Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitMemberBindingExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitMemberBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitMemberBindingExpression (node As MemberBindingExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitMemberBindingExpression : Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax -&gt; 'Result&#xA;override this.VisitMemberBindingExpression : Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitMemberBindingExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a MemberBindingExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMethodDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitMethodDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitMethodDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitMethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitMethodDeclaration (node As MethodDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitMethodDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax -&gt; 'Result&#xA;override this.VisitMethodDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitMethodDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a MethodDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNameColon">
      <MemberSignature Language="C#" Value="public virtual TResult VisitNameColon (Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitNameColon(class Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitNameColon(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitNameColon (node As NameColonSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitNameColon : Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax -&gt; 'Result&#xA;override this.VisitNameColon : Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitNameColon node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a NameColonSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNameEquals">
      <MemberSignature Language="C#" Value="public virtual TResult VisitNameEquals (Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitNameEquals(class Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitNameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitNameEquals (node As NameEqualsSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitNameEquals : Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax -&gt; 'Result&#xA;override this.VisitNameEquals : Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitNameEquals node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a NameEqualsSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNameMemberCref">
      <MemberSignature Language="C#" Value="public virtual TResult VisitNameMemberCref (Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitNameMemberCref(class Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitNameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitNameMemberCref (node As NameMemberCrefSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitNameMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax -&gt; 'Result&#xA;override this.VisitNameMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitNameMemberCref node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a NameMemberCrefSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNamespaceDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitNamespaceDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitNamespaceDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitNamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitNamespaceDeclaration (node As NamespaceDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitNamespaceDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax -&gt; 'Result&#xA;override this.VisitNamespaceDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitNamespaceDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a NamespaceDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNullableType">
      <MemberSignature Language="C#" Value="public virtual TResult VisitNullableType (Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitNullableType(class Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitNullableType(Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitNullableType (node As NullableTypeSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitNullableType : Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax -&gt; 'Result&#xA;override this.VisitNullableType : Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitNullableType node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a NullableTypeSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitObjectCreationExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitObjectCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitObjectCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitObjectCreationExpression (node As ObjectCreationExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitObjectCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax -&gt; 'Result&#xA;override this.VisitObjectCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitObjectCreationExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ObjectCreationExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOmittedArraySizeExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitOmittedArraySizeExpression (Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitOmittedArraySizeExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitOmittedArraySizeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitOmittedArraySizeExpression (node As OmittedArraySizeExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitOmittedArraySizeExpression : Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax -&gt; 'Result&#xA;override this.VisitOmittedArraySizeExpression : Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitOmittedArraySizeExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a OmittedArraySizeExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOmittedTypeArgument">
      <MemberSignature Language="C#" Value="public virtual TResult VisitOmittedTypeArgument (Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitOmittedTypeArgument(class Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitOmittedTypeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitOmittedTypeArgument (node As OmittedTypeArgumentSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitOmittedTypeArgument : Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax -&gt; 'Result&#xA;override this.VisitOmittedTypeArgument : Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitOmittedTypeArgument node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a OmittedTypeArgumentSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOperatorDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitOperatorDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitOperatorDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitOperatorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitOperatorDeclaration (node As OperatorDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitOperatorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax -&gt; 'Result&#xA;override this.VisitOperatorDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitOperatorDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a OperatorDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOperatorMemberCref">
      <MemberSignature Language="C#" Value="public virtual TResult VisitOperatorMemberCref (Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitOperatorMemberCref(class Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitOperatorMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitOperatorMemberCref (node As OperatorMemberCrefSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitOperatorMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax -&gt; 'Result&#xA;override this.VisitOperatorMemberCref : Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitOperatorMemberCref node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a OperatorMemberCrefSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOrderByClause">
      <MemberSignature Language="C#" Value="public virtual TResult VisitOrderByClause (Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitOrderByClause(class Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitOrderByClause(Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitOrderByClause (node As OrderByClauseSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitOrderByClause : Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax -&gt; 'Result&#xA;override this.VisitOrderByClause : Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitOrderByClause node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a OrderByClauseSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOrdering">
      <MemberSignature Language="C#" Value="public virtual TResult VisitOrdering (Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitOrdering(class Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitOrdering(Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitOrdering (node As OrderingSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitOrdering : Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax -&gt; 'Result&#xA;override this.VisitOrdering : Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitOrdering node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a OrderingSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitParameter">
      <MemberSignature Language="C#" Value="public virtual TResult VisitParameter (Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitParameter(class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitParameter(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitParameter (node As ParameterSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitParameter : Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax -&gt; 'Result&#xA;override this.VisitParameter : Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitParameter node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ParameterSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitParameterList">
      <MemberSignature Language="C#" Value="public virtual TResult VisitParameterList (Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitParameterList(class Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitParameterList (node As ParameterListSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax -&gt; 'Result&#xA;override this.VisitParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitParameterList node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ParameterListSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitParenthesizedExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitParenthesizedExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitParenthesizedExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitParenthesizedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitParenthesizedExpression (node As ParenthesizedExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitParenthesizedExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax -&gt; 'Result&#xA;override this.VisitParenthesizedExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitParenthesizedExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ParenthesizedExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitParenthesizedLambdaExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitParenthesizedLambdaExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitParenthesizedLambdaExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitParenthesizedLambdaExpression (node As ParenthesizedLambdaExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitParenthesizedLambdaExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax -&gt; 'Result&#xA;override this.VisitParenthesizedLambdaExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitParenthesizedLambdaExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ParenthesizedLambdaExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitParenthesizedVariableDesignation">
      <MemberSignature Language="C#" Value="public virtual TResult VisitParenthesizedVariableDesignation (Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitParenthesizedVariableDesignation(class Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitParenthesizedVariableDesignation(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitParenthesizedVariableDesignation (node As ParenthesizedVariableDesignationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitParenthesizedVariableDesignation : Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax -&gt; 'Result&#xA;override this.VisitParenthesizedVariableDesignation : Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitParenthesizedVariableDesignation node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ParenthesizedVariableDesignationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPointerType">
      <MemberSignature Language="C#" Value="public virtual TResult VisitPointerType (Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitPointerType(class Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitPointerType(Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitPointerType (node As PointerTypeSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitPointerType : Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax -&gt; 'Result&#xA;override this.VisitPointerType : Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitPointerType node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a PointerTypeSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPostfixUnaryExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitPostfixUnaryExpression (Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitPostfixUnaryExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitPostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitPostfixUnaryExpression (node As PostfixUnaryExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitPostfixUnaryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax -&gt; 'Result&#xA;override this.VisitPostfixUnaryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitPostfixUnaryExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a PostfixUnaryExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPragmaChecksumDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitPragmaChecksumDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitPragmaChecksumDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitPragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitPragmaChecksumDirectiveTrivia (node As PragmaChecksumDirectiveTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitPragmaChecksumDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax -&gt; 'Result&#xA;override this.VisitPragmaChecksumDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitPragmaChecksumDirectiveTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a PragmaChecksumDirectiveTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPragmaWarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitPragmaWarningDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitPragmaWarningDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitPragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitPragmaWarningDirectiveTrivia (node As PragmaWarningDirectiveTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitPragmaWarningDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax -&gt; 'Result&#xA;override this.VisitPragmaWarningDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitPragmaWarningDirectiveTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a PragmaWarningDirectiveTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPredefinedType">
      <MemberSignature Language="C#" Value="public virtual TResult VisitPredefinedType (Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitPredefinedType(class Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitPredefinedType(Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitPredefinedType (node As PredefinedTypeSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitPredefinedType : Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax -&gt; 'Result&#xA;override this.VisitPredefinedType : Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitPredefinedType node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a PredefinedTypeSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPrefixUnaryExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitPrefixUnaryExpression (Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitPrefixUnaryExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitPrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitPrefixUnaryExpression (node As PrefixUnaryExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitPrefixUnaryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax -&gt; 'Result&#xA;override this.VisitPrefixUnaryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitPrefixUnaryExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a PrefixUnaryExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPropertyDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitPropertyDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitPropertyDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitPropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitPropertyDeclaration (node As PropertyDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitPropertyDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax -&gt; 'Result&#xA;override this.VisitPropertyDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitPropertyDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a PropertyDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitQualifiedCref">
      <MemberSignature Language="C#" Value="public virtual TResult VisitQualifiedCref (Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitQualifiedCref(class Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitQualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitQualifiedCref (node As QualifiedCrefSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitQualifiedCref : Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax -&gt; 'Result&#xA;override this.VisitQualifiedCref : Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitQualifiedCref node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a QualifiedCrefSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitQualifiedName">
      <MemberSignature Language="C#" Value="public virtual TResult VisitQualifiedName (Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitQualifiedName(class Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitQualifiedName (node As QualifiedNameSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitQualifiedName : Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax -&gt; 'Result&#xA;override this.VisitQualifiedName : Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitQualifiedName node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a QualifiedNameSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitQueryBody">
      <MemberSignature Language="C#" Value="public virtual TResult VisitQueryBody (Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitQueryBody(class Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitQueryBody(Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitQueryBody (node As QueryBodySyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitQueryBody : Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax -&gt; 'Result&#xA;override this.VisitQueryBody : Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitQueryBody node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a QueryBodySyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitQueryContinuation">
      <MemberSignature Language="C#" Value="public virtual TResult VisitQueryContinuation (Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitQueryContinuation(class Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitQueryContinuation(Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitQueryContinuation (node As QueryContinuationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitQueryContinuation : Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax -&gt; 'Result&#xA;override this.VisitQueryContinuation : Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitQueryContinuation node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a QueryContinuationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitQueryExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitQueryExpression (Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitQueryExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitQueryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitQueryExpression (node As QueryExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitQueryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax -&gt; 'Result&#xA;override this.VisitQueryExpression : Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitQueryExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a QueryExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitReferenceDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitReferenceDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitReferenceDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitReferenceDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitReferenceDirectiveTrivia (node As ReferenceDirectiveTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitReferenceDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax -&gt; 'Result&#xA;override this.VisitReferenceDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitReferenceDirectiveTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ReferenceDirectiveTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRefExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitRefExpression (Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitRefExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitRefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitRefExpression (node As RefExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitRefExpression : Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax -&gt; 'Result&#xA;override this.VisitRefExpression : Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitRefExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a RefExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRefType">
      <MemberSignature Language="C#" Value="public virtual TResult VisitRefType (Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitRefType(class Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitRefType(Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitRefType (node As RefTypeSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitRefType : Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax -&gt; 'Result&#xA;override this.VisitRefType : Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitRefType node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a RefTypeSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRefTypeExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitRefTypeExpression (Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitRefTypeExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitRefTypeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitRefTypeExpression (node As RefTypeExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitRefTypeExpression : Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax -&gt; 'Result&#xA;override this.VisitRefTypeExpression : Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitRefTypeExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a RefTypeExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRefValueExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitRefValueExpression (Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitRefValueExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitRefValueExpression(Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitRefValueExpression (node As RefValueExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitRefValueExpression : Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax -&gt; 'Result&#xA;override this.VisitRefValueExpression : Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitRefValueExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a RefValueExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRegionDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitRegionDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitRegionDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitRegionDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitRegionDirectiveTrivia (node As RegionDirectiveTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitRegionDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax -&gt; 'Result&#xA;override this.VisitRegionDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitRegionDirectiveTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a RegionDirectiveTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitReturnStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitReturnStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitReturnStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitReturnStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitReturnStatement (node As ReturnStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitReturnStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax -&gt; 'Result&#xA;override this.VisitReturnStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitReturnStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ReturnStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSelectClause">
      <MemberSignature Language="C#" Value="public virtual TResult VisitSelectClause (Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitSelectClause(class Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitSelectClause(Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitSelectClause (node As SelectClauseSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitSelectClause : Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax -&gt; 'Result&#xA;override this.VisitSelectClause : Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitSelectClause node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a SelectClauseSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitShebangDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitShebangDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitShebangDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitShebangDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitShebangDirectiveTrivia (node As ShebangDirectiveTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitShebangDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax -&gt; 'Result&#xA;override this.VisitShebangDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitShebangDirectiveTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ShebangDirectiveTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSimpleBaseType">
      <MemberSignature Language="C#" Value="public virtual TResult VisitSimpleBaseType (Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitSimpleBaseType(class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitSimpleBaseType(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitSimpleBaseType (node As SimpleBaseTypeSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitSimpleBaseType : Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax -&gt; 'Result&#xA;override this.VisitSimpleBaseType : Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitSimpleBaseType node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a SimpleBaseTypeSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSimpleLambdaExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitSimpleLambdaExpression (Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitSimpleLambdaExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitSimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitSimpleLambdaExpression (node As SimpleLambdaExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitSimpleLambdaExpression : Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax -&gt; 'Result&#xA;override this.VisitSimpleLambdaExpression : Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitSimpleLambdaExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a SimpleLambdaExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSingleVariableDesignation">
      <MemberSignature Language="C#" Value="public virtual TResult VisitSingleVariableDesignation (Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitSingleVariableDesignation(class Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitSingleVariableDesignation(Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitSingleVariableDesignation (node As SingleVariableDesignationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitSingleVariableDesignation : Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax -&gt; 'Result&#xA;override this.VisitSingleVariableDesignation : Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitSingleVariableDesignation node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a SingleVariableDesignationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSizeOfExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitSizeOfExpression (Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitSizeOfExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitSizeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitSizeOfExpression (node As SizeOfExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitSizeOfExpression : Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax -&gt; 'Result&#xA;override this.VisitSizeOfExpression : Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitSizeOfExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a SizeOfExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSkippedTokensTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitSkippedTokensTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitSkippedTokensTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitSkippedTokensTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitSkippedTokensTrivia (node As SkippedTokensTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitSkippedTokensTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax -&gt; 'Result&#xA;override this.VisitSkippedTokensTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitSkippedTokensTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a SkippedTokensTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitStackAllocArrayCreationExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitStackAllocArrayCreationExpression (Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitStackAllocArrayCreationExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitStackAllocArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitStackAllocArrayCreationExpression (node As StackAllocArrayCreationExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitStackAllocArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax -&gt; 'Result&#xA;override this.VisitStackAllocArrayCreationExpression : Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitStackAllocArrayCreationExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a StackAllocArrayCreationExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitStructDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitStructDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitStructDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitStructDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitStructDeclaration (node As StructDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitStructDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax -&gt; 'Result&#xA;override this.VisitStructDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitStructDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a StructDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSwitchSection">
      <MemberSignature Language="C#" Value="public virtual TResult VisitSwitchSection (Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitSwitchSection(class Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitSwitchSection(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitSwitchSection (node As SwitchSectionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitSwitchSection : Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax -&gt; 'Result&#xA;override this.VisitSwitchSection : Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitSwitchSection node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a SwitchSectionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSwitchStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitSwitchStatement (Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitSwitchStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitSwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitSwitchStatement (node As SwitchStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitSwitchStatement : Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax -&gt; 'Result&#xA;override this.VisitSwitchStatement : Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitSwitchStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a SwitchStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitThisExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitThisExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitThisExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitThisExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitThisExpression (node As ThisExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitThisExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax -&gt; 'Result&#xA;override this.VisitThisExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitThisExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ThisExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitThrowExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitThrowExpression (Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitThrowExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitThrowExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitThrowExpression (node As ThrowExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitThrowExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax -&gt; 'Result&#xA;override this.VisitThrowExpression : Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitThrowExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ThrowExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitThrowStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitThrowStatement (Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitThrowStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitThrowStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitThrowStatement (node As ThrowStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitThrowStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax -&gt; 'Result&#xA;override this.VisitThrowStatement : Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitThrowStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a ThrowStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTryStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitTryStatement (Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitTryStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTryStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitTryStatement (node As TryStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitTryStatement : Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax -&gt; 'Result&#xA;override this.VisitTryStatement : Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitTryStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TryStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTupleElement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitTupleElement (Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitTupleElement(class Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTupleElement(Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitTupleElement (node As TupleElementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitTupleElement : Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax -&gt; 'Result&#xA;override this.VisitTupleElement : Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitTupleElement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TupleElementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTupleExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitTupleExpression (Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitTupleExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTupleExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitTupleExpression (node As TupleExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitTupleExpression : Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax -&gt; 'Result&#xA;override this.VisitTupleExpression : Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitTupleExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TupleExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTupleType">
      <MemberSignature Language="C#" Value="public virtual TResult VisitTupleType (Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitTupleType(class Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTupleType(Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitTupleType (node As TupleTypeSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitTupleType : Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax -&gt; 'Result&#xA;override this.VisitTupleType : Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitTupleType node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TupleTypeSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeArgumentList">
      <MemberSignature Language="C#" Value="public virtual TResult VisitTypeArgumentList (Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitTypeArgumentList(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTypeArgumentList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitTypeArgumentList (node As TypeArgumentListSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeArgumentList : Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax -&gt; 'Result&#xA;override this.VisitTypeArgumentList : Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitTypeArgumentList node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TypeArgumentListSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeConstraint">
      <MemberSignature Language="C#" Value="public virtual TResult VisitTypeConstraint (Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitTypeConstraint(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTypeConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitTypeConstraint (node As TypeConstraintSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeConstraint : Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax -&gt; 'Result&#xA;override this.VisitTypeConstraint : Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitTypeConstraint node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TypeConstraintSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeCref">
      <MemberSignature Language="C#" Value="public virtual TResult VisitTypeCref (Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitTypeCref(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTypeCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitTypeCref (node As TypeCrefSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeCref : Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax -&gt; 'Result&#xA;override this.VisitTypeCref : Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitTypeCref node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TypeCrefSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeOfExpression">
      <MemberSignature Language="C#" Value="public virtual TResult VisitTypeOfExpression (Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitTypeOfExpression(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTypeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitTypeOfExpression (node As TypeOfExpressionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeOfExpression : Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax -&gt; 'Result&#xA;override this.VisitTypeOfExpression : Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitTypeOfExpression node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TypeOfExpressionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeParameter">
      <MemberSignature Language="C#" Value="public virtual TResult VisitTypeParameter (Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitTypeParameter(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTypeParameter(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitTypeParameter (node As TypeParameterSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeParameter : Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax -&gt; 'Result&#xA;override this.VisitTypeParameter : Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitTypeParameter node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TypeParameterSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeParameterConstraintClause">
      <MemberSignature Language="C#" Value="public virtual TResult VisitTypeParameterConstraintClause (Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitTypeParameterConstraintClause(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitTypeParameterConstraintClause (node As TypeParameterConstraintClauseSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeParameterConstraintClause : Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax -&gt; 'Result&#xA;override this.VisitTypeParameterConstraintClause : Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitTypeParameterConstraintClause node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TypeParameterConstraintClauseSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeParameterList">
      <MemberSignature Language="C#" Value="public virtual TResult VisitTypeParameterList (Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitTypeParameterList(class Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitTypeParameterList(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitTypeParameterList (node As TypeParameterListSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax -&gt; 'Result&#xA;override this.VisitTypeParameterList : Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitTypeParameterList node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a TypeParameterListSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUndefDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitUndefDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitUndefDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitUndefDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitUndefDirectiveTrivia (node As UndefDirectiveTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitUndefDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax -&gt; 'Result&#xA;override this.VisitUndefDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitUndefDirectiveTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a UndefDirectiveTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUnsafeStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitUnsafeStatement (Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitUnsafeStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitUnsafeStatement(Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitUnsafeStatement (node As UnsafeStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitUnsafeStatement : Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax -&gt; 'Result&#xA;override this.VisitUnsafeStatement : Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitUnsafeStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a UnsafeStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUsingDirective">
      <MemberSignature Language="C#" Value="public virtual TResult VisitUsingDirective (Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitUsingDirective(class Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitUsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitUsingDirective (node As UsingDirectiveSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitUsingDirective : Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax -&gt; 'Result&#xA;override this.VisitUsingDirective : Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitUsingDirective node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a UsingDirectiveSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUsingStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitUsingStatement (Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitUsingStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitUsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitUsingStatement (node As UsingStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitUsingStatement : Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax -&gt; 'Result&#xA;override this.VisitUsingStatement : Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitUsingStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a UsingStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitVariableDeclaration">
      <MemberSignature Language="C#" Value="public virtual TResult VisitVariableDeclaration (Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitVariableDeclaration(class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitVariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitVariableDeclaration (node As VariableDeclarationSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitVariableDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax -&gt; 'Result&#xA;override this.VisitVariableDeclaration : Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitVariableDeclaration node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a VariableDeclarationSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitVariableDeclarator">
      <MemberSignature Language="C#" Value="public virtual TResult VisitVariableDeclarator (Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitVariableDeclarator(class Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitVariableDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitVariableDeclarator (node As VariableDeclaratorSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitVariableDeclarator : Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax -&gt; 'Result&#xA;override this.VisitVariableDeclarator : Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitVariableDeclarator node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a VariableDeclaratorSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitWarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual TResult VisitWarningDirectiveTrivia (Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitWarningDirectiveTrivia(class Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitWarningDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitWarningDirectiveTrivia (node As WarningDirectiveTriviaSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitWarningDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax -&gt; 'Result&#xA;override this.VisitWarningDirectiveTrivia : Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitWarningDirectiveTrivia node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a WarningDirectiveTriviaSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitWhenClause">
      <MemberSignature Language="C#" Value="public virtual TResult VisitWhenClause (Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitWhenClause(class Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitWhenClause(Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitWhenClause (node As WhenClauseSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitWhenClause : Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax -&gt; 'Result&#xA;override this.VisitWhenClause : Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitWhenClause node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a WhenClauseSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitWhereClause">
      <MemberSignature Language="C#" Value="public virtual TResult VisitWhereClause (Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitWhereClause(class Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitWhereClause(Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitWhereClause (node As WhereClauseSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitWhereClause : Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax -&gt; 'Result&#xA;override this.VisitWhereClause : Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitWhereClause node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a WhereClauseSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitWhileStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitWhileStatement (Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitWhileStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitWhileStatement(Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitWhileStatement (node As WhileStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitWhileStatement : Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax -&gt; 'Result&#xA;override this.VisitWhileStatement : Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitWhileStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a WhileStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlCDataSection">
      <MemberSignature Language="C#" Value="public virtual TResult VisitXmlCDataSection (Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitXmlCDataSection(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlCDataSection(Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitXmlCDataSection (node As XmlCDataSectionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlCDataSection : Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax -&gt; 'Result&#xA;override this.VisitXmlCDataSection : Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitXmlCDataSection node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlCDataSectionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlComment">
      <MemberSignature Language="C#" Value="public virtual TResult VisitXmlComment (Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitXmlComment(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlComment(Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitXmlComment (node As XmlCommentSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlComment : Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax -&gt; 'Result&#xA;override this.VisitXmlComment : Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitXmlComment node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlCommentSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlCrefAttribute">
      <MemberSignature Language="C#" Value="public virtual TResult VisitXmlCrefAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitXmlCrefAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitXmlCrefAttribute (node As XmlCrefAttributeSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlCrefAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax -&gt; 'Result&#xA;override this.VisitXmlCrefAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitXmlCrefAttribute node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlCrefAttributeSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlElement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitXmlElement (Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitXmlElement(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitXmlElement (node As XmlElementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax -&gt; 'Result&#xA;override this.VisitXmlElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitXmlElement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlElementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlElementEndTag">
      <MemberSignature Language="C#" Value="public virtual TResult VisitXmlElementEndTag (Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitXmlElementEndTag(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlElementEndTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitXmlElementEndTag (node As XmlElementEndTagSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlElementEndTag : Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax -&gt; 'Result&#xA;override this.VisitXmlElementEndTag : Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitXmlElementEndTag node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlElementEndTagSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlElementStartTag">
      <MemberSignature Language="C#" Value="public virtual TResult VisitXmlElementStartTag (Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitXmlElementStartTag(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitXmlElementStartTag (node As XmlElementStartTagSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlElementStartTag : Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax -&gt; 'Result&#xA;override this.VisitXmlElementStartTag : Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitXmlElementStartTag node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlElementStartTagSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlEmptyElement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitXmlEmptyElement (Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitXmlEmptyElement(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitXmlEmptyElement (node As XmlEmptyElementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlEmptyElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax -&gt; 'Result&#xA;override this.VisitXmlEmptyElement : Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitXmlEmptyElement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlEmptyElementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlName">
      <MemberSignature Language="C#" Value="public virtual TResult VisitXmlName (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitXmlName(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitXmlName (node As XmlNameSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlName : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax -&gt; 'Result&#xA;override this.VisitXmlName : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitXmlName node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlNameSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlNameAttribute">
      <MemberSignature Language="C#" Value="public virtual TResult VisitXmlNameAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitXmlNameAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitXmlNameAttribute (node As XmlNameAttributeSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlNameAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax -&gt; 'Result&#xA;override this.VisitXmlNameAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitXmlNameAttribute node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlNameAttributeSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlPrefix">
      <MemberSignature Language="C#" Value="public virtual TResult VisitXmlPrefix (Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitXmlPrefix(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlPrefix(Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitXmlPrefix (node As XmlPrefixSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlPrefix : Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax -&gt; 'Result&#xA;override this.VisitXmlPrefix : Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitXmlPrefix node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlPrefixSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlProcessingInstruction">
      <MemberSignature Language="C#" Value="public virtual TResult VisitXmlProcessingInstruction (Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitXmlProcessingInstruction(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitXmlProcessingInstruction (node As XmlProcessingInstructionSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlProcessingInstruction : Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax -&gt; 'Result&#xA;override this.VisitXmlProcessingInstruction : Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitXmlProcessingInstruction node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlProcessingInstructionSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlText">
      <MemberSignature Language="C#" Value="public virtual TResult VisitXmlText (Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitXmlText(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlText(Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitXmlText (node As XmlTextSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlText : Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax -&gt; 'Result&#xA;override this.VisitXmlText : Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitXmlText node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlTextSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlTextAttribute">
      <MemberSignature Language="C#" Value="public virtual TResult VisitXmlTextAttribute (Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitXmlTextAttribute(class Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitXmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitXmlTextAttribute (node As XmlTextAttributeSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlTextAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax -&gt; 'Result&#xA;override this.VisitXmlTextAttribute : Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitXmlTextAttribute node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a XmlTextAttributeSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitYieldStatement">
      <MemberSignature Language="C#" Value="public virtual TResult VisitYieldStatement (Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TResult VisitYieldStatement(class Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1.VisitYieldStatement(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VisitYieldStatement (node As YieldStatementSyntax) As TResult" />
      <MemberSignature Language="F#" Value="abstract member VisitYieldStatement : Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax -&gt; 'Result&#xA;override this.VisitYieldStatement : Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax -&gt; 'Result" Usage="cSharpSyntaxVisitor.VisitYieldStatement node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Called when the visitor visits a YieldStatementSyntax node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>