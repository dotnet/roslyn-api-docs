<Type Name="CompilationWithAnalyzersOptions" FullName="Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions">
  <TypeSignature Language="C#" Value="public sealed class CompilationWithAnalyzersOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CompilationWithAnalyzersOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CompilationWithAnalyzersOptions" />
  <TypeSignature Language="F#" Value="type CompilationWithAnalyzersOptions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompilationWithAnalyzersOptions sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Options to configure analyzer execution within <see cref="T:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilationWithAnalyzersOptions (Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, Action&lt;Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Diagnostic&gt; onAnalyzerException, bool concurrentAnalysis, bool logAnalyzerExecutionTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, class System.Action`3&lt;class System.Exception, class Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, class Microsoft.CodeAnalysis.Diagnostic&gt; onAnalyzerException, bool concurrentAnalysis, bool logAnalyzerExecutionTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.#ctor(Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Action{System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Diagnostic},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As AnalyzerOptions, onAnalyzerException As Action(Of Exception, DiagnosticAnalyzer, Diagnostic), concurrentAnalysis As Boolean, logAnalyzerExecutionTime As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions : Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions * Action&lt;Exception, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, Microsoft.CodeAnalysis.Diagnostic&gt; * bool * bool -&gt; Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions" Usage="new Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions (options, onAnalyzerException, concurrentAnalysis, logAnalyzerExecutionTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompilationWithAnalyzersOptions(Microsoft::CodeAnalysis::Diagnostics::AnalyzerOptions ^ options, Action&lt;Exception ^, Microsoft::CodeAnalysis::Diagnostics::DiagnosticAnalyzer ^, Microsoft::CodeAnalysis::Diagnostic ^&gt; ^ onAnalyzerException, bool concurrentAnalysis, bool logAnalyzerExecutionTime);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions" />
        <Parameter Name="onAnalyzerException" Type="System.Action&lt;System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Diagnostic&gt;" />
        <Parameter Name="concurrentAnalysis" Type="System.Boolean" />
        <Parameter Name="logAnalyzerExecutionTime" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="options">Options that are passed to analyzers.</param>
        <param name="onAnalyzerException">Action to invoke if an analyzer throws an exception.</param>
        <param name="concurrentAnalysis">Flag indicating whether analysis can be performed concurrently on multiple threads.</param>
        <param name="logAnalyzerExecutionTime">Flag indicating whether analyzer execution time should be logged.</param>
        <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilationWithAnalyzersOptions (Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, Action&lt;Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Diagnostic&gt; onAnalyzerException, bool concurrentAnalysis, bool logAnalyzerExecutionTime, bool reportSuppressedDiagnostics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, class System.Action`3&lt;class System.Exception, class Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, class Microsoft.CodeAnalysis.Diagnostic&gt; onAnalyzerException, bool concurrentAnalysis, bool logAnalyzerExecutionTime, bool reportSuppressedDiagnostics) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.#ctor(Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Action{System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Diagnostic},System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As AnalyzerOptions, onAnalyzerException As Action(Of Exception, DiagnosticAnalyzer, Diagnostic), concurrentAnalysis As Boolean, logAnalyzerExecutionTime As Boolean, reportSuppressedDiagnostics As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions : Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions * Action&lt;Exception, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, Microsoft.CodeAnalysis.Diagnostic&gt; * bool * bool * bool -&gt; Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions" Usage="new Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions (options, onAnalyzerException, concurrentAnalysis, logAnalyzerExecutionTime, reportSuppressedDiagnostics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompilationWithAnalyzersOptions(Microsoft::CodeAnalysis::Diagnostics::AnalyzerOptions ^ options, Action&lt;Exception ^, Microsoft::CodeAnalysis::Diagnostics::DiagnosticAnalyzer ^, Microsoft::CodeAnalysis::Diagnostic ^&gt; ^ onAnalyzerException, bool concurrentAnalysis, bool logAnalyzerExecutionTime, bool reportSuppressedDiagnostics);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions" />
        <Parameter Name="onAnalyzerException" Type="System.Action&lt;System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Diagnostic&gt;" />
        <Parameter Name="concurrentAnalysis" Type="System.Boolean" />
        <Parameter Name="logAnalyzerExecutionTime" Type="System.Boolean" />
        <Parameter Name="reportSuppressedDiagnostics" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="options">Options that are passed to analyzers.</param>
        <param name="onAnalyzerException">Action to invoke if an analyzer throws an exception.</param>
        <param name="concurrentAnalysis">Flag indicating whether analysis can be performed concurrently on multiple threads.</param>
        <param name="logAnalyzerExecutionTime">Flag indicating whether analyzer execution time should be logged.</param>
        <param name="reportSuppressedDiagnostics">Flag indicating whether analyzer diagnostics with <see cref="P:Microsoft.CodeAnalysis.Diagnostic.IsSuppressed" /> should be reported.</param>
        <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilationWithAnalyzersOptions (Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, Action&lt;Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Diagnostic&gt; onAnalyzerException, bool concurrentAnalysis, bool logAnalyzerExecutionTime, bool reportSuppressedDiagnostics, Func&lt;Exception,bool&gt; analyzerExceptionFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, class System.Action`3&lt;class System.Exception, class Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, class Microsoft.CodeAnalysis.Diagnostic&gt; onAnalyzerException, bool concurrentAnalysis, bool logAnalyzerExecutionTime, bool reportSuppressedDiagnostics, class System.Func`2&lt;class System.Exception, bool&gt; analyzerExceptionFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.#ctor(Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Action{System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Diagnostic},System.Boolean,System.Boolean,System.Boolean,System.Func{System.Exception,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As AnalyzerOptions, onAnalyzerException As Action(Of Exception, DiagnosticAnalyzer, Diagnostic), concurrentAnalysis As Boolean, logAnalyzerExecutionTime As Boolean, reportSuppressedDiagnostics As Boolean, analyzerExceptionFilter As Func(Of Exception, Boolean))" />
      <MemberSignature Language="F#" Value="new Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions : Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions * Action&lt;Exception, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, Microsoft.CodeAnalysis.Diagnostic&gt; * bool * bool * bool * Func&lt;Exception, bool&gt; -&gt; Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions" Usage="new Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions (options, onAnalyzerException, concurrentAnalysis, logAnalyzerExecutionTime, reportSuppressedDiagnostics, analyzerExceptionFilter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompilationWithAnalyzersOptions(Microsoft::CodeAnalysis::Diagnostics::AnalyzerOptions ^ options, Action&lt;Exception ^, Microsoft::CodeAnalysis::Diagnostics::DiagnosticAnalyzer ^, Microsoft::CodeAnalysis::Diagnostic ^&gt; ^ onAnalyzerException, bool concurrentAnalysis, bool logAnalyzerExecutionTime, bool reportSuppressedDiagnostics, Func&lt;Exception ^, bool&gt; ^ analyzerExceptionFilter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions" />
        <Parameter Name="onAnalyzerException" Type="System.Action&lt;System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Diagnostic&gt;" />
        <Parameter Name="concurrentAnalysis" Type="System.Boolean" />
        <Parameter Name="logAnalyzerExecutionTime" Type="System.Boolean" />
        <Parameter Name="reportSuppressedDiagnostics" Type="System.Boolean" />
        <Parameter Name="analyzerExceptionFilter" Type="System.Func&lt;System.Exception,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="options">Options that are passed to analyzers.</param>
        <param name="onAnalyzerException">Action to invoke if an analyzer throws an exception.</param>
        <param name="concurrentAnalysis">Flag indicating whether analysis can be performed concurrently on multiple threads.</param>
        <param name="logAnalyzerExecutionTime">Flag indicating whether analyzer execution time should be logged.</param>
        <param name="reportSuppressedDiagnostics">Flag indicating whether analyzer diagnostics with <see cref="P:Microsoft.CodeAnalysis.Diagnostic.IsSuppressed" /> should be reported.</param>
        <param name="analyzerExceptionFilter">Action to invoke if an analyzer throws an exception as an exception filter.</param>
        <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnalyzerExceptionFilter">
      <MemberSignature Language="C#" Value="public Func&lt;Exception,bool&gt; AnalyzerExceptionFilter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;class System.Exception, bool&gt; AnalyzerExceptionFilter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.AnalyzerExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AnalyzerExceptionFilter As Func(Of Exception, Boolean)" />
      <MemberSignature Language="F#" Value="member this.AnalyzerExceptionFilter : Func&lt;Exception, bool&gt;" Usage="Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.AnalyzerExceptionFilter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Func&lt;Exception ^, bool&gt; ^ AnalyzerExceptionFilter { Func&lt;Exception ^, bool&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Exception,System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            An optional delegate to be invoked when an analyzer throws an exception as an exception filter.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcurrentAnalysis">
      <MemberSignature Language="C#" Value="public bool ConcurrentAnalysis { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConcurrentAnalysis" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.ConcurrentAnalysis" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConcurrentAnalysis As Boolean" />
      <MemberSignature Language="F#" Value="member this.ConcurrentAnalysis : bool" Usage="Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.ConcurrentAnalysis" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConcurrentAnalysis { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Flag indicating whether analysis can be performed concurrently on multiple threads.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogAnalyzerExecutionTime">
      <MemberSignature Language="C#" Value="public bool LogAnalyzerExecutionTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LogAnalyzerExecutionTime" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.LogAnalyzerExecutionTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LogAnalyzerExecutionTime As Boolean" />
      <MemberSignature Language="F#" Value="member this.LogAnalyzerExecutionTime : bool" Usage="Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.LogAnalyzerExecutionTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LogAnalyzerExecutionTime { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Flag indicating whether analyzer execution time should be logged.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAnalyzerException">
      <MemberSignature Language="C#" Value="public Action&lt;Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Diagnostic&gt; OnAnalyzerException { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`3&lt;class System.Exception, class Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, class Microsoft.CodeAnalysis.Diagnostic&gt; OnAnalyzerException" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.OnAnalyzerException" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OnAnalyzerException As Action(Of Exception, DiagnosticAnalyzer, Diagnostic)" />
      <MemberSignature Language="F#" Value="member this.OnAnalyzerException : Action&lt;Exception, Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, Microsoft.CodeAnalysis.Diagnostic&gt;" Usage="Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.OnAnalyzerException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Action&lt;Exception ^, Microsoft::CodeAnalysis::Diagnostics::DiagnosticAnalyzer ^, Microsoft::CodeAnalysis::Diagnostic ^&gt; ^ OnAnalyzerException { Action&lt;Exception ^, Microsoft::CodeAnalysis::Diagnostics::DiagnosticAnalyzer ^, Microsoft::CodeAnalysis::Diagnostic ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Diagnostic&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            An optional delegate to be invoked when an analyzer throws an exception.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions Options" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As AnalyzerOptions" />
      <MemberSignature Language="F#" Value="member this.Options : Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions" Usage="Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.Options" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::Diagnostics::AnalyzerOptions ^ Options { Microsoft::CodeAnalysis::Diagnostics::AnalyzerOptions ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Options passed to <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer" />s.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportSuppressedDiagnostics">
      <MemberSignature Language="C#" Value="public bool ReportSuppressedDiagnostics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReportSuppressedDiagnostics" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.ReportSuppressedDiagnostics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReportSuppressedDiagnostics As Boolean" />
      <MemberSignature Language="F#" Value="member this.ReportSuppressedDiagnostics : bool" Usage="Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzersOptions.ReportSuppressedDiagnostics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReportSuppressedDiagnostics { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Flag indicating whether analyzer diagnostics with <see cref="P:Microsoft.CodeAnalysis.Diagnostic.IsSuppressed" /> should be reported.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>