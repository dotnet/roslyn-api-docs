<Type Name="Edit&lt;TNode&gt;" FullName="Microsoft.CodeAnalysis.Differencing.Edit&lt;TNode&gt;">
  <TypeSignature Language="C#" Value="public struct Edit&lt;TNode&gt; : IEquatable&lt;Microsoft.CodeAnalysis.Differencing.Edit&lt;TNode&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Edit`1&lt;TNode&gt; extends System.ValueType implements class System.IEquatable`1&lt;valuetype Microsoft.CodeAnalysis.Differencing.Edit`1&lt;!TNode&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Differencing.Edit`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure Edit(Of TNode)&#xA;Implements IEquatable(Of Edit(Of TNode))" />
  <TypeSignature Language="F#" Value="type Edit&lt;'Node&gt; = struct" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TNode&gt;&#xA;public value class Edit : IEquatable&lt;Microsoft::CodeAnalysis::Differencing::Edit&lt;TNode&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TNode" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Microsoft.CodeAnalysis.Differencing.Edit&lt;TNode&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{GetDebuggerDisplay(), nq}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TNode">Tree node.</typeparam>
    <summary>
            Represents an edit operation on a tree or a sequence of nodes.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Microsoft.CodeAnalysis.Differencing.Edit&lt;TNode&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype Microsoft.CodeAnalysis.Differencing.Edit`1&lt;!TNode&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Differencing.Edit`1.Equals(Microsoft.CodeAnalysis.Differencing.Edit{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Edit(Of TNode)) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : Microsoft.CodeAnalysis.Differencing.Edit&lt;'Node&gt; -&gt; bool" Usage="edit.Equals other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Microsoft::CodeAnalysis::Differencing::Edit&lt;TNode&gt; other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.CodeAnalysis.Differencing.Edit&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Differencing.Edit`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="edit.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Differencing.Edit`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="edit.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Differencing.EditKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.Differencing.EditKind Kind" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Differencing.Edit`1.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As EditKind" />
      <MemberSignature Language="F#" Value="member this.Kind : Microsoft.CodeAnalysis.Differencing.EditKind" Usage="Microsoft.CodeAnalysis.Differencing.Edit&lt;'Node&gt;.Kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::Differencing::EditKind Kind { Microsoft::CodeAnalysis::Differencing::EditKind get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Differencing.EditKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewNode">
      <MemberSignature Language="C#" Value="public TNode NewNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TNode NewNode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Differencing.Edit`1.NewNode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewNode As TNode" />
      <MemberSignature Language="F#" Value="member this.NewNode : 'Node" Usage="Microsoft.CodeAnalysis.Differencing.Edit&lt;'Node&gt;.NewNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TNode NewNode { TNode get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Insert: 
            Inserted node.
            
            Delete: 
            default(TNode)
            
            Move, Update:
            Node in the new tree/sequence.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OldNode">
      <MemberSignature Language="C#" Value="public TNode OldNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TNode OldNode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Differencing.Edit`1.OldNode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OldNode As TNode" />
      <MemberSignature Language="F#" Value="member this.OldNode : 'Node" Usage="Microsoft.CodeAnalysis.Differencing.Edit&lt;'Node&gt;.OldNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TNode OldNode { TNode get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Insert: 
            default(TNode).
            
            Delete: 
            Deleted node.
            
            Move, Update: 
            Node in the old tree/sequence.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>