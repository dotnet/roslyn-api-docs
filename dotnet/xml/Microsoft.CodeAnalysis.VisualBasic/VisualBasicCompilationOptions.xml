<Type Name="VisualBasicCompilationOptions" FullName="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions">
  <TypeSignature Language="C#" Value="public sealed class VisualBasicCompilationOptions : Microsoft.CodeAnalysis.CompilationOptions, IEquatable&lt;Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed VisualBasicCompilationOptions extends Microsoft.CodeAnalysis.CompilationOptions implements class System.IEquatable`1&lt;class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class VisualBasicCompilationOptions&#xA;Inherits CompilationOptions&#xA;Implements IEquatable(Of VisualBasicCompilationOptions)" />
  <TypeSignature Language="F#" Value="type VisualBasicCompilationOptions = class&#xA;    inherit CompilationOptions&#xA;    interface IEquatable&lt;VisualBasicCompilationOptions&gt;" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualBasicCompilationOptions sealed : Microsoft::CodeAnalysis::CompilationOptions, IEquatable&lt;Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.CompilationOptions</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
 A class representing Visual Basic compilation Options.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualBasicCompilationOptions (Microsoft.CodeAnalysis.OutputKind outputKind, string moduleName, string mainTypeName, string scriptClassName, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; globalImports, string rootNamespace, Microsoft.CodeAnalysis.VisualBasic.OptionStrict optionStrict, bool optionInfer, bool optionExplicit, bool optionCompareText, Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions parseOptions, bool embedVbCoreRuntime, Microsoft.CodeAnalysis.OptimizationLevel optimizationLevel, bool checkOverflow, string cryptoKeyContainer, string cryptoKeyFile, System.Collections.Immutable.ImmutableArray&lt;byte&gt; cryptoPublicKey, Nullable&lt;bool&gt; delaySign, Microsoft.CodeAnalysis.Platform platform, Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; specificDiagnosticOptions, bool concurrentBuild, Microsoft.CodeAnalysis.XmlReferenceResolver xmlReferenceResolver, Microsoft.CodeAnalysis.SourceReferenceResolver sourceReferenceResolver, Microsoft.CodeAnalysis.MetadataReferenceResolver metadataReferenceResolver, Microsoft.CodeAnalysis.AssemblyIdentityComparer assemblyIdentityComparer, Microsoft.CodeAnalysis.StrongNameProvider strongNameProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(valuetype Microsoft.CodeAnalysis.OutputKind outputKind, string moduleName, string mainTypeName, string scriptClassName, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; globalImports, string rootNamespace, valuetype Microsoft.CodeAnalysis.VisualBasic.OptionStrict optionStrict, bool optionInfer, bool optionExplicit, bool optionCompareText, class Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions parseOptions, bool embedVbCoreRuntime, valuetype Microsoft.CodeAnalysis.OptimizationLevel optimizationLevel, bool checkOverflow, string cryptoKeyContainer, string cryptoKeyFile, valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; cryptoPublicKey, valuetype System.Nullable`1&lt;bool&gt; delaySign, valuetype Microsoft.CodeAnalysis.Platform platform, valuetype Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, valuetype Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; specificDiagnosticOptions, bool concurrentBuild, class Microsoft.CodeAnalysis.XmlReferenceResolver xmlReferenceResolver, class Microsoft.CodeAnalysis.SourceReferenceResolver sourceReferenceResolver, class Microsoft.CodeAnalysis.MetadataReferenceResolver metadataReferenceResolver, class Microsoft.CodeAnalysis.AssemblyIdentityComparer assemblyIdentityComparer, class Microsoft.CodeAnalysis.StrongNameProvider strongNameProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.#ctor(Microsoft.CodeAnalysis.OutputKind,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.VisualBasic.GlobalImport},System.String,Microsoft.CodeAnalysis.VisualBasic.OptionStrict,System.Boolean,System.Boolean,System.Boolean,Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions,System.Boolean,Microsoft.CodeAnalysis.OptimizationLevel,System.Boolean,System.String,System.String,System.Collections.Immutable.ImmutableArray{System.Byte},System.Nullable{System.Boolean},Microsoft.CodeAnalysis.Platform,Microsoft.CodeAnalysis.ReportDiagnostic,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}},System.Boolean,Microsoft.CodeAnalysis.XmlReferenceResolver,Microsoft.CodeAnalysis.SourceReferenceResolver,Microsoft.CodeAnalysis.MetadataReferenceResolver,Microsoft.CodeAnalysis.AssemblyIdentityComparer,Microsoft.CodeAnalysis.StrongNameProvider)" />
      <MemberSignature Language="F#" Value="new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions : Microsoft.CodeAnalysis.OutputKind * string * string * string * seq&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; * string * Microsoft.CodeAnalysis.VisualBasic.OptionStrict * bool * bool * bool * Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions * bool * Microsoft.CodeAnalysis.OptimizationLevel * bool * string * string * System.Collections.Immutable.ImmutableArray&lt;byte&gt; * Nullable&lt;bool&gt; * Microsoft.CodeAnalysis.Platform * Microsoft.CodeAnalysis.ReportDiagnostic * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; * bool * Microsoft.CodeAnalysis.XmlReferenceResolver * Microsoft.CodeAnalysis.SourceReferenceResolver * Microsoft.CodeAnalysis.MetadataReferenceResolver * Microsoft.CodeAnalysis.AssemblyIdentityComparer * Microsoft.CodeAnalysis.StrongNameProvider -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions (outputKind, moduleName, mainTypeName, scriptClassName, globalImports, rootNamespace, optionStrict, optionInfer, optionExplicit, optionCompareText, parseOptions, embedVbCoreRuntime, optimizationLevel, checkOverflow, cryptoKeyContainer, cryptoKeyFile, cryptoPublicKey, delaySign, platform, generalDiagnosticOption, specificDiagnosticOptions, concurrentBuild, xmlReferenceResolver, sourceReferenceResolver, metadataReferenceResolver, assemblyIdentityComparer, strongNameProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualBasicCompilationOptions(Microsoft::CodeAnalysis::OutputKind outputKind, System::String ^ moduleName, System::String ^ mainTypeName, System::String ^ scriptClassName, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^&gt; ^ globalImports, System::String ^ rootNamespace, Microsoft::CodeAnalysis::VisualBasic::OptionStrict optionStrict, bool optionInfer, bool optionExplicit, bool optionCompareText, Microsoft::CodeAnalysis::VisualBasic::VisualBasicParseOptions ^ parseOptions, bool embedVbCoreRuntime, Microsoft::CodeAnalysis::OptimizationLevel optimizationLevel, bool checkOverflow, System::String ^ cryptoKeyContainer, System::String ^ cryptoKeyFile, System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; cryptoPublicKey, Nullable&lt;bool&gt; delaySign, Microsoft::CodeAnalysis::Platform platform, Microsoft::CodeAnalysis::ReportDiagnostic generalDiagnosticOption, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Microsoft::CodeAnalysis::ReportDiagnostic&gt;&gt; ^ specificDiagnosticOptions, bool concurrentBuild, Microsoft::CodeAnalysis::XmlReferenceResolver ^ xmlReferenceResolver, Microsoft::CodeAnalysis::SourceReferenceResolver ^ sourceReferenceResolver, Microsoft::CodeAnalysis::MetadataReferenceResolver ^ metadataReferenceResolver, Microsoft::CodeAnalysis::AssemblyIdentityComparer ^ assemblyIdentityComparer, Microsoft::CodeAnalysis::StrongNameProvider ^ strongNameProvider);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="outputKind" Type="Microsoft.CodeAnalysis.OutputKind" />
        <Parameter Name="moduleName" Type="System.String" />
        <Parameter Name="mainTypeName" Type="System.String" />
        <Parameter Name="scriptClassName" Type="System.String" />
        <Parameter Name="globalImports" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt;" />
        <Parameter Name="rootNamespace" Type="System.String" />
        <Parameter Name="optionStrict" Type="Microsoft.CodeAnalysis.VisualBasic.OptionStrict" />
        <Parameter Name="optionInfer" Type="System.Boolean" />
        <Parameter Name="optionExplicit" Type="System.Boolean" />
        <Parameter Name="optionCompareText" Type="System.Boolean" />
        <Parameter Name="parseOptions" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions" />
        <Parameter Name="embedVbCoreRuntime" Type="System.Boolean" />
        <Parameter Name="optimizationLevel" Type="Microsoft.CodeAnalysis.OptimizationLevel" />
        <Parameter Name="checkOverflow" Type="System.Boolean" />
        <Parameter Name="cryptoKeyContainer" Type="System.String" />
        <Parameter Name="cryptoKeyFile" Type="System.String" />
        <Parameter Name="cryptoPublicKey" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
        <Parameter Name="delaySign" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="platform" Type="Microsoft.CodeAnalysis.Platform" />
        <Parameter Name="generalDiagnosticOption" Type="Microsoft.CodeAnalysis.ReportDiagnostic" />
        <Parameter Name="specificDiagnosticOptions" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt;" />
        <Parameter Name="concurrentBuild" Type="System.Boolean" />
        <Parameter Name="xmlReferenceResolver" Type="Microsoft.CodeAnalysis.XmlReferenceResolver" />
        <Parameter Name="sourceReferenceResolver" Type="Microsoft.CodeAnalysis.SourceReferenceResolver" />
        <Parameter Name="metadataReferenceResolver" Type="Microsoft.CodeAnalysis.MetadataReferenceResolver" />
        <Parameter Name="assemblyIdentityComparer" Type="Microsoft.CodeAnalysis.AssemblyIdentityComparer" />
        <Parameter Name="strongNameProvider" Type="Microsoft.CodeAnalysis.StrongNameProvider" />
      </Parameters>
      <Docs>
        <param name="outputKind">To be added.</param>
        <param name="moduleName">To be added.</param>
        <param name="mainTypeName">To be added.</param>
        <param name="scriptClassName">To be added.</param>
        <param name="globalImports">To be added.</param>
        <param name="rootNamespace">To be added.</param>
        <param name="optionStrict">To be added.</param>
        <param name="optionInfer">To be added.</param>
        <param name="optionExplicit">To be added.</param>
        <param name="optionCompareText">To be added.</param>
        <param name="parseOptions">To be added.</param>
        <param name="embedVbCoreRuntime">To be added.</param>
        <param name="optimizationLevel">To be added.</param>
        <param name="checkOverflow">To be added.</param>
        <param name="cryptoKeyContainer">To be added.</param>
        <param name="cryptoKeyFile">To be added.</param>
        <param name="cryptoPublicKey">To be added.</param>
        <param name="delaySign">To be added.</param>
        <param name="platform">To be added.</param>
        <param name="generalDiagnosticOption">To be added.</param>
        <param name="specificDiagnosticOptions">To be added.</param>
        <param name="concurrentBuild">To be added.</param>
        <param name="xmlReferenceResolver">To be added.</param>
        <param name="sourceReferenceResolver">To be added.</param>
        <param name="metadataReferenceResolver">To be added.</param>
        <param name="assemblyIdentityComparer">To be added.</param>
        <param name="strongNameProvider">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualBasicCompilationOptions (Microsoft.CodeAnalysis.OutputKind outputKind, string moduleName, string mainTypeName, string scriptClassName, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; globalImports, string rootNamespace, Microsoft.CodeAnalysis.VisualBasic.OptionStrict optionStrict, bool optionInfer, bool optionExplicit, bool optionCompareText, Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions parseOptions, bool embedVbCoreRuntime, Microsoft.CodeAnalysis.OptimizationLevel optimizationLevel, bool checkOverflow, string cryptoKeyContainer, string cryptoKeyFile, System.Collections.Immutable.ImmutableArray&lt;byte&gt; cryptoPublicKey, Nullable&lt;bool&gt; delaySign, Microsoft.CodeAnalysis.Platform platform, Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; specificDiagnosticOptions, bool concurrentBuild, bool deterministic, Microsoft.CodeAnalysis.XmlReferenceResolver xmlReferenceResolver, Microsoft.CodeAnalysis.SourceReferenceResolver sourceReferenceResolver, Microsoft.CodeAnalysis.MetadataReferenceResolver metadataReferenceResolver, Microsoft.CodeAnalysis.AssemblyIdentityComparer assemblyIdentityComparer, Microsoft.CodeAnalysis.StrongNameProvider strongNameProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(valuetype Microsoft.CodeAnalysis.OutputKind outputKind, string moduleName, string mainTypeName, string scriptClassName, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; globalImports, string rootNamespace, valuetype Microsoft.CodeAnalysis.VisualBasic.OptionStrict optionStrict, bool optionInfer, bool optionExplicit, bool optionCompareText, class Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions parseOptions, bool embedVbCoreRuntime, valuetype Microsoft.CodeAnalysis.OptimizationLevel optimizationLevel, bool checkOverflow, string cryptoKeyContainer, string cryptoKeyFile, valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; cryptoPublicKey, valuetype System.Nullable`1&lt;bool&gt; delaySign, valuetype Microsoft.CodeAnalysis.Platform platform, valuetype Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, valuetype Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; specificDiagnosticOptions, bool concurrentBuild, bool deterministic, class Microsoft.CodeAnalysis.XmlReferenceResolver xmlReferenceResolver, class Microsoft.CodeAnalysis.SourceReferenceResolver sourceReferenceResolver, class Microsoft.CodeAnalysis.MetadataReferenceResolver metadataReferenceResolver, class Microsoft.CodeAnalysis.AssemblyIdentityComparer assemblyIdentityComparer, class Microsoft.CodeAnalysis.StrongNameProvider strongNameProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.#ctor(Microsoft.CodeAnalysis.OutputKind,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.VisualBasic.GlobalImport},System.String,Microsoft.CodeAnalysis.VisualBasic.OptionStrict,System.Boolean,System.Boolean,System.Boolean,Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions,System.Boolean,Microsoft.CodeAnalysis.OptimizationLevel,System.Boolean,System.String,System.String,System.Collections.Immutable.ImmutableArray{System.Byte},System.Nullable{System.Boolean},Microsoft.CodeAnalysis.Platform,Microsoft.CodeAnalysis.ReportDiagnostic,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}},System.Boolean,System.Boolean,Microsoft.CodeAnalysis.XmlReferenceResolver,Microsoft.CodeAnalysis.SourceReferenceResolver,Microsoft.CodeAnalysis.MetadataReferenceResolver,Microsoft.CodeAnalysis.AssemblyIdentityComparer,Microsoft.CodeAnalysis.StrongNameProvider)" />
      <MemberSignature Language="F#" Value="new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions : Microsoft.CodeAnalysis.OutputKind * string * string * string * seq&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; * string * Microsoft.CodeAnalysis.VisualBasic.OptionStrict * bool * bool * bool * Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions * bool * Microsoft.CodeAnalysis.OptimizationLevel * bool * string * string * System.Collections.Immutable.ImmutableArray&lt;byte&gt; * Nullable&lt;bool&gt; * Microsoft.CodeAnalysis.Platform * Microsoft.CodeAnalysis.ReportDiagnostic * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; * bool * bool * Microsoft.CodeAnalysis.XmlReferenceResolver * Microsoft.CodeAnalysis.SourceReferenceResolver * Microsoft.CodeAnalysis.MetadataReferenceResolver * Microsoft.CodeAnalysis.AssemblyIdentityComparer * Microsoft.CodeAnalysis.StrongNameProvider -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions (outputKind, moduleName, mainTypeName, scriptClassName, globalImports, rootNamespace, optionStrict, optionInfer, optionExplicit, optionCompareText, parseOptions, embedVbCoreRuntime, optimizationLevel, checkOverflow, cryptoKeyContainer, cryptoKeyFile, cryptoPublicKey, delaySign, platform, generalDiagnosticOption, specificDiagnosticOptions, concurrentBuild, deterministic, xmlReferenceResolver, sourceReferenceResolver, metadataReferenceResolver, assemblyIdentityComparer, strongNameProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualBasicCompilationOptions(Microsoft::CodeAnalysis::OutputKind outputKind, System::String ^ moduleName, System::String ^ mainTypeName, System::String ^ scriptClassName, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^&gt; ^ globalImports, System::String ^ rootNamespace, Microsoft::CodeAnalysis::VisualBasic::OptionStrict optionStrict, bool optionInfer, bool optionExplicit, bool optionCompareText, Microsoft::CodeAnalysis::VisualBasic::VisualBasicParseOptions ^ parseOptions, bool embedVbCoreRuntime, Microsoft::CodeAnalysis::OptimizationLevel optimizationLevel, bool checkOverflow, System::String ^ cryptoKeyContainer, System::String ^ cryptoKeyFile, System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; cryptoPublicKey, Nullable&lt;bool&gt; delaySign, Microsoft::CodeAnalysis::Platform platform, Microsoft::CodeAnalysis::ReportDiagnostic generalDiagnosticOption, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Microsoft::CodeAnalysis::ReportDiagnostic&gt;&gt; ^ specificDiagnosticOptions, bool concurrentBuild, bool deterministic, Microsoft::CodeAnalysis::XmlReferenceResolver ^ xmlReferenceResolver, Microsoft::CodeAnalysis::SourceReferenceResolver ^ sourceReferenceResolver, Microsoft::CodeAnalysis::MetadataReferenceResolver ^ metadataReferenceResolver, Microsoft::CodeAnalysis::AssemblyIdentityComparer ^ assemblyIdentityComparer, Microsoft::CodeAnalysis::StrongNameProvider ^ strongNameProvider);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="outputKind" Type="Microsoft.CodeAnalysis.OutputKind" />
        <Parameter Name="moduleName" Type="System.String" />
        <Parameter Name="mainTypeName" Type="System.String" />
        <Parameter Name="scriptClassName" Type="System.String" />
        <Parameter Name="globalImports" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt;" />
        <Parameter Name="rootNamespace" Type="System.String" />
        <Parameter Name="optionStrict" Type="Microsoft.CodeAnalysis.VisualBasic.OptionStrict" />
        <Parameter Name="optionInfer" Type="System.Boolean" />
        <Parameter Name="optionExplicit" Type="System.Boolean" />
        <Parameter Name="optionCompareText" Type="System.Boolean" />
        <Parameter Name="parseOptions" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions" />
        <Parameter Name="embedVbCoreRuntime" Type="System.Boolean" />
        <Parameter Name="optimizationLevel" Type="Microsoft.CodeAnalysis.OptimizationLevel" />
        <Parameter Name="checkOverflow" Type="System.Boolean" />
        <Parameter Name="cryptoKeyContainer" Type="System.String" />
        <Parameter Name="cryptoKeyFile" Type="System.String" />
        <Parameter Name="cryptoPublicKey" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
        <Parameter Name="delaySign" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="platform" Type="Microsoft.CodeAnalysis.Platform" />
        <Parameter Name="generalDiagnosticOption" Type="Microsoft.CodeAnalysis.ReportDiagnostic" />
        <Parameter Name="specificDiagnosticOptions" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt;" />
        <Parameter Name="concurrentBuild" Type="System.Boolean" />
        <Parameter Name="deterministic" Type="System.Boolean" />
        <Parameter Name="xmlReferenceResolver" Type="Microsoft.CodeAnalysis.XmlReferenceResolver" />
        <Parameter Name="sourceReferenceResolver" Type="Microsoft.CodeAnalysis.SourceReferenceResolver" />
        <Parameter Name="metadataReferenceResolver" Type="Microsoft.CodeAnalysis.MetadataReferenceResolver" />
        <Parameter Name="assemblyIdentityComparer" Type="Microsoft.CodeAnalysis.AssemblyIdentityComparer" />
        <Parameter Name="strongNameProvider" Type="Microsoft.CodeAnalysis.StrongNameProvider" />
      </Parameters>
      <Docs>
        <param name="outputKind">To be added.</param>
        <param name="moduleName">To be added.</param>
        <param name="mainTypeName">To be added.</param>
        <param name="scriptClassName">To be added.</param>
        <param name="globalImports">To be added.</param>
        <param name="rootNamespace">To be added.</param>
        <param name="optionStrict">To be added.</param>
        <param name="optionInfer">To be added.</param>
        <param name="optionExplicit">To be added.</param>
        <param name="optionCompareText">To be added.</param>
        <param name="parseOptions">To be added.</param>
        <param name="embedVbCoreRuntime">To be added.</param>
        <param name="optimizationLevel">To be added.</param>
        <param name="checkOverflow">To be added.</param>
        <param name="cryptoKeyContainer">To be added.</param>
        <param name="cryptoKeyFile">To be added.</param>
        <param name="cryptoPublicKey">To be added.</param>
        <param name="delaySign">To be added.</param>
        <param name="platform">To be added.</param>
        <param name="generalDiagnosticOption">To be added.</param>
        <param name="specificDiagnosticOptions">To be added.</param>
        <param name="concurrentBuild">To be added.</param>
        <param name="deterministic">To be added.</param>
        <param name="xmlReferenceResolver">To be added.</param>
        <param name="sourceReferenceResolver">To be added.</param>
        <param name="metadataReferenceResolver">To be added.</param>
        <param name="assemblyIdentityComparer">To be added.</param>
        <param name="strongNameProvider">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualBasicCompilationOptions (Microsoft.CodeAnalysis.OutputKind outputKind, bool reportSuppressedDiagnostics, string moduleName = null, string mainTypeName = null, string scriptClassName = &quot;Script&quot;, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; globalImports = null, string rootNamespace = null, Microsoft.CodeAnalysis.VisualBasic.OptionStrict optionStrict = Microsoft.CodeAnalysis.VisualBasic.OptionStrict.Off, bool optionInfer = true, bool optionExplicit = true, bool optionCompareText = false, Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions parseOptions = null, bool embedVbCoreRuntime = false, Microsoft.CodeAnalysis.OptimizationLevel optimizationLevel = Microsoft.CodeAnalysis.OptimizationLevel.Debug, bool checkOverflow = true, string cryptoKeyContainer = null, string cryptoKeyFile = null, System.Collections.Immutable.ImmutableArray&lt;byte&gt; cryptoPublicKey = null, Nullable&lt;bool&gt; delaySign = null, Microsoft.CodeAnalysis.Platform platform = Microsoft.CodeAnalysis.Platform.AnyCpu, Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption = Microsoft.CodeAnalysis.ReportDiagnostic.Default, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; specificDiagnosticOptions = null, bool concurrentBuild = true, bool deterministic = false, Microsoft.CodeAnalysis.XmlReferenceResolver xmlReferenceResolver = null, Microsoft.CodeAnalysis.SourceReferenceResolver sourceReferenceResolver = null, Microsoft.CodeAnalysis.MetadataReferenceResolver metadataReferenceResolver = null, Microsoft.CodeAnalysis.AssemblyIdentityComparer assemblyIdentityComparer = null, Microsoft.CodeAnalysis.StrongNameProvider strongNameProvider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(valuetype Microsoft.CodeAnalysis.OutputKind outputKind, bool reportSuppressedDiagnostics, string moduleName, string mainTypeName, string scriptClassName, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; globalImports, string rootNamespace, valuetype Microsoft.CodeAnalysis.VisualBasic.OptionStrict optionStrict, bool optionInfer, bool optionExplicit, bool optionCompareText, class Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions parseOptions, bool embedVbCoreRuntime, valuetype Microsoft.CodeAnalysis.OptimizationLevel optimizationLevel, bool checkOverflow, string cryptoKeyContainer, string cryptoKeyFile, valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; cryptoPublicKey, valuetype System.Nullable`1&lt;bool&gt; delaySign, valuetype Microsoft.CodeAnalysis.Platform platform, valuetype Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, valuetype Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; specificDiagnosticOptions, bool concurrentBuild, bool deterministic, class Microsoft.CodeAnalysis.XmlReferenceResolver xmlReferenceResolver, class Microsoft.CodeAnalysis.SourceReferenceResolver sourceReferenceResolver, class Microsoft.CodeAnalysis.MetadataReferenceResolver metadataReferenceResolver, class Microsoft.CodeAnalysis.AssemblyIdentityComparer assemblyIdentityComparer, class Microsoft.CodeAnalysis.StrongNameProvider strongNameProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.#ctor(Microsoft.CodeAnalysis.OutputKind,System.Boolean,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.VisualBasic.GlobalImport},System.String,Microsoft.CodeAnalysis.VisualBasic.OptionStrict,System.Boolean,System.Boolean,System.Boolean,Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions,System.Boolean,Microsoft.CodeAnalysis.OptimizationLevel,System.Boolean,System.String,System.String,System.Collections.Immutable.ImmutableArray{System.Byte},System.Nullable{System.Boolean},Microsoft.CodeAnalysis.Platform,Microsoft.CodeAnalysis.ReportDiagnostic,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}},System.Boolean,System.Boolean,Microsoft.CodeAnalysis.XmlReferenceResolver,Microsoft.CodeAnalysis.SourceReferenceResolver,Microsoft.CodeAnalysis.MetadataReferenceResolver,Microsoft.CodeAnalysis.AssemblyIdentityComparer,Microsoft.CodeAnalysis.StrongNameProvider)" />
      <MemberSignature Language="F#" Value="new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions : Microsoft.CodeAnalysis.OutputKind * bool * string * string * string * seq&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; * string * Microsoft.CodeAnalysis.VisualBasic.OptionStrict * bool * bool * bool * Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions * bool * Microsoft.CodeAnalysis.OptimizationLevel * bool * string * string * System.Collections.Immutable.ImmutableArray&lt;byte&gt; * Nullable&lt;bool&gt; * Microsoft.CodeAnalysis.Platform * Microsoft.CodeAnalysis.ReportDiagnostic * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; * bool * bool * Microsoft.CodeAnalysis.XmlReferenceResolver * Microsoft.CodeAnalysis.SourceReferenceResolver * Microsoft.CodeAnalysis.MetadataReferenceResolver * Microsoft.CodeAnalysis.AssemblyIdentityComparer * Microsoft.CodeAnalysis.StrongNameProvider -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions (outputKind, reportSuppressedDiagnostics, moduleName, mainTypeName, scriptClassName, globalImports, rootNamespace, optionStrict, optionInfer, optionExplicit, optionCompareText, parseOptions, embedVbCoreRuntime, optimizationLevel, checkOverflow, cryptoKeyContainer, cryptoKeyFile, cryptoPublicKey, delaySign, platform, generalDiagnosticOption, specificDiagnosticOptions, concurrentBuild, deterministic, xmlReferenceResolver, sourceReferenceResolver, metadataReferenceResolver, assemblyIdentityComparer, strongNameProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="outputKind" Type="Microsoft.CodeAnalysis.OutputKind" />
        <Parameter Name="reportSuppressedDiagnostics" Type="System.Boolean" />
        <Parameter Name="moduleName" Type="System.String" />
        <Parameter Name="mainTypeName" Type="System.String" />
        <Parameter Name="scriptClassName" Type="System.String" />
        <Parameter Name="globalImports" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt;" />
        <Parameter Name="rootNamespace" Type="System.String" />
        <Parameter Name="optionStrict" Type="Microsoft.CodeAnalysis.VisualBasic.OptionStrict" />
        <Parameter Name="optionInfer" Type="System.Boolean" />
        <Parameter Name="optionExplicit" Type="System.Boolean" />
        <Parameter Name="optionCompareText" Type="System.Boolean" />
        <Parameter Name="parseOptions" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions" />
        <Parameter Name="embedVbCoreRuntime" Type="System.Boolean" />
        <Parameter Name="optimizationLevel" Type="Microsoft.CodeAnalysis.OptimizationLevel" />
        <Parameter Name="checkOverflow" Type="System.Boolean" />
        <Parameter Name="cryptoKeyContainer" Type="System.String" />
        <Parameter Name="cryptoKeyFile" Type="System.String" />
        <Parameter Name="cryptoPublicKey" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
        <Parameter Name="delaySign" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="platform" Type="Microsoft.CodeAnalysis.Platform" />
        <Parameter Name="generalDiagnosticOption" Type="Microsoft.CodeAnalysis.ReportDiagnostic" />
        <Parameter Name="specificDiagnosticOptions" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt;" />
        <Parameter Name="concurrentBuild" Type="System.Boolean" />
        <Parameter Name="deterministic" Type="System.Boolean" />
        <Parameter Name="xmlReferenceResolver" Type="Microsoft.CodeAnalysis.XmlReferenceResolver" />
        <Parameter Name="sourceReferenceResolver" Type="Microsoft.CodeAnalysis.SourceReferenceResolver" />
        <Parameter Name="metadataReferenceResolver" Type="Microsoft.CodeAnalysis.MetadataReferenceResolver" />
        <Parameter Name="assemblyIdentityComparer" Type="Microsoft.CodeAnalysis.AssemblyIdentityComparer" />
        <Parameter Name="strongNameProvider" Type="Microsoft.CodeAnalysis.StrongNameProvider" />
      </Parameters>
      <Docs>
        <param name="outputKind">To be added.</param>
        <param name="reportSuppressedDiagnostics">To be added.</param>
        <param name="moduleName">To be added.</param>
        <param name="mainTypeName">To be added.</param>
        <param name="scriptClassName">To be added.</param>
        <param name="globalImports">To be added.</param>
        <param name="rootNamespace">To be added.</param>
        <param name="optionStrict">To be added.</param>
        <param name="optionInfer">To be added.</param>
        <param name="optionExplicit">To be added.</param>
        <param name="optionCompareText">To be added.</param>
        <param name="parseOptions">To be added.</param>
        <param name="embedVbCoreRuntime">To be added.</param>
        <param name="optimizationLevel">To be added.</param>
        <param name="checkOverflow">To be added.</param>
        <param name="cryptoKeyContainer">To be added.</param>
        <param name="cryptoKeyFile">To be added.</param>
        <param name="cryptoPublicKey">To be added.</param>
        <param name="delaySign">To be added.</param>
        <param name="platform">To be added.</param>
        <param name="generalDiagnosticOption">To be added.</param>
        <param name="specificDiagnosticOptions">To be added.</param>
        <param name="concurrentBuild">To be added.</param>
        <param name="deterministic">To be added.</param>
        <param name="xmlReferenceResolver">To be added.</param>
        <param name="sourceReferenceResolver">To be added.</param>
        <param name="metadataReferenceResolver">To be added.</param>
        <param name="assemblyIdentityComparer">To be added.</param>
        <param name="strongNameProvider">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualBasicCompilationOptions (Microsoft.CodeAnalysis.OutputKind outputKind, string moduleName, string mainTypeName, string scriptClassName, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; globalImports, string rootNamespace, Microsoft.CodeAnalysis.VisualBasic.OptionStrict optionStrict, bool optionInfer, bool optionExplicit, bool optionCompareText, Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions parseOptions, bool embedVbCoreRuntime, Microsoft.CodeAnalysis.OptimizationLevel optimizationLevel, bool checkOverflow, string cryptoKeyContainer, string cryptoKeyFile, System.Collections.Immutable.ImmutableArray&lt;byte&gt; cryptoPublicKey, Nullable&lt;bool&gt; delaySign, Microsoft.CodeAnalysis.Platform platform, Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; specificDiagnosticOptions, bool concurrentBuild, bool deterministic, Microsoft.CodeAnalysis.XmlReferenceResolver xmlReferenceResolver, Microsoft.CodeAnalysis.SourceReferenceResolver sourceReferenceResolver, Microsoft.CodeAnalysis.MetadataReferenceResolver metadataReferenceResolver, Microsoft.CodeAnalysis.AssemblyIdentityComparer assemblyIdentityComparer, Microsoft.CodeAnalysis.StrongNameProvider strongNameProvider, bool publicSign, bool reportSuppressedDiagnostics);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(valuetype Microsoft.CodeAnalysis.OutputKind outputKind, string moduleName, string mainTypeName, string scriptClassName, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; globalImports, string rootNamespace, valuetype Microsoft.CodeAnalysis.VisualBasic.OptionStrict optionStrict, bool optionInfer, bool optionExplicit, bool optionCompareText, class Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions parseOptions, bool embedVbCoreRuntime, valuetype Microsoft.CodeAnalysis.OptimizationLevel optimizationLevel, bool checkOverflow, string cryptoKeyContainer, string cryptoKeyFile, valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; cryptoPublicKey, valuetype System.Nullable`1&lt;bool&gt; delaySign, valuetype Microsoft.CodeAnalysis.Platform platform, valuetype Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, valuetype Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; specificDiagnosticOptions, bool concurrentBuild, bool deterministic, class Microsoft.CodeAnalysis.XmlReferenceResolver xmlReferenceResolver, class Microsoft.CodeAnalysis.SourceReferenceResolver sourceReferenceResolver, class Microsoft.CodeAnalysis.MetadataReferenceResolver metadataReferenceResolver, class Microsoft.CodeAnalysis.AssemblyIdentityComparer assemblyIdentityComparer, class Microsoft.CodeAnalysis.StrongNameProvider strongNameProvider, bool publicSign, bool reportSuppressedDiagnostics) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.#ctor(Microsoft.CodeAnalysis.OutputKind,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.VisualBasic.GlobalImport},System.String,Microsoft.CodeAnalysis.VisualBasic.OptionStrict,System.Boolean,System.Boolean,System.Boolean,Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions,System.Boolean,Microsoft.CodeAnalysis.OptimizationLevel,System.Boolean,System.String,System.String,System.Collections.Immutable.ImmutableArray{System.Byte},System.Nullable{System.Boolean},Microsoft.CodeAnalysis.Platform,Microsoft.CodeAnalysis.ReportDiagnostic,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}},System.Boolean,System.Boolean,Microsoft.CodeAnalysis.XmlReferenceResolver,Microsoft.CodeAnalysis.SourceReferenceResolver,Microsoft.CodeAnalysis.MetadataReferenceResolver,Microsoft.CodeAnalysis.AssemblyIdentityComparer,Microsoft.CodeAnalysis.StrongNameProvider,System.Boolean,System.Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions : Microsoft.CodeAnalysis.OutputKind * string * string * string * seq&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; * string * Microsoft.CodeAnalysis.VisualBasic.OptionStrict * bool * bool * bool * Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions * bool * Microsoft.CodeAnalysis.OptimizationLevel * bool * string * string * System.Collections.Immutable.ImmutableArray&lt;byte&gt; * Nullable&lt;bool&gt; * Microsoft.CodeAnalysis.Platform * Microsoft.CodeAnalysis.ReportDiagnostic * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; * bool * bool * Microsoft.CodeAnalysis.XmlReferenceResolver * Microsoft.CodeAnalysis.SourceReferenceResolver * Microsoft.CodeAnalysis.MetadataReferenceResolver * Microsoft.CodeAnalysis.AssemblyIdentityComparer * Microsoft.CodeAnalysis.StrongNameProvider * bool * bool -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions (outputKind, moduleName, mainTypeName, scriptClassName, globalImports, rootNamespace, optionStrict, optionInfer, optionExplicit, optionCompareText, parseOptions, embedVbCoreRuntime, optimizationLevel, checkOverflow, cryptoKeyContainer, cryptoKeyFile, cryptoPublicKey, delaySign, platform, generalDiagnosticOption, specificDiagnosticOptions, concurrentBuild, deterministic, xmlReferenceResolver, sourceReferenceResolver, metadataReferenceResolver, assemblyIdentityComparer, strongNameProvider, publicSign, reportSuppressedDiagnostics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualBasicCompilationOptions(Microsoft::CodeAnalysis::OutputKind outputKind, System::String ^ moduleName, System::String ^ mainTypeName, System::String ^ scriptClassName, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^&gt; ^ globalImports, System::String ^ rootNamespace, Microsoft::CodeAnalysis::VisualBasic::OptionStrict optionStrict, bool optionInfer, bool optionExplicit, bool optionCompareText, Microsoft::CodeAnalysis::VisualBasic::VisualBasicParseOptions ^ parseOptions, bool embedVbCoreRuntime, Microsoft::CodeAnalysis::OptimizationLevel optimizationLevel, bool checkOverflow, System::String ^ cryptoKeyContainer, System::String ^ cryptoKeyFile, System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; cryptoPublicKey, Nullable&lt;bool&gt; delaySign, Microsoft::CodeAnalysis::Platform platform, Microsoft::CodeAnalysis::ReportDiagnostic generalDiagnosticOption, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Microsoft::CodeAnalysis::ReportDiagnostic&gt;&gt; ^ specificDiagnosticOptions, bool concurrentBuild, bool deterministic, Microsoft::CodeAnalysis::XmlReferenceResolver ^ xmlReferenceResolver, Microsoft::CodeAnalysis::SourceReferenceResolver ^ sourceReferenceResolver, Microsoft::CodeAnalysis::MetadataReferenceResolver ^ metadataReferenceResolver, Microsoft::CodeAnalysis::AssemblyIdentityComparer ^ assemblyIdentityComparer, Microsoft::CodeAnalysis::StrongNameProvider ^ strongNameProvider, bool publicSign, bool reportSuppressedDiagnostics);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="outputKind" Type="Microsoft.CodeAnalysis.OutputKind" />
        <Parameter Name="moduleName" Type="System.String" />
        <Parameter Name="mainTypeName" Type="System.String" />
        <Parameter Name="scriptClassName" Type="System.String" />
        <Parameter Name="globalImports" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt;" />
        <Parameter Name="rootNamespace" Type="System.String" />
        <Parameter Name="optionStrict" Type="Microsoft.CodeAnalysis.VisualBasic.OptionStrict" />
        <Parameter Name="optionInfer" Type="System.Boolean" />
        <Parameter Name="optionExplicit" Type="System.Boolean" />
        <Parameter Name="optionCompareText" Type="System.Boolean" />
        <Parameter Name="parseOptions" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions" />
        <Parameter Name="embedVbCoreRuntime" Type="System.Boolean" />
        <Parameter Name="optimizationLevel" Type="Microsoft.CodeAnalysis.OptimizationLevel" />
        <Parameter Name="checkOverflow" Type="System.Boolean" />
        <Parameter Name="cryptoKeyContainer" Type="System.String" />
        <Parameter Name="cryptoKeyFile" Type="System.String" />
        <Parameter Name="cryptoPublicKey" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
        <Parameter Name="delaySign" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="platform" Type="Microsoft.CodeAnalysis.Platform" />
        <Parameter Name="generalDiagnosticOption" Type="Microsoft.CodeAnalysis.ReportDiagnostic" />
        <Parameter Name="specificDiagnosticOptions" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt;" />
        <Parameter Name="concurrentBuild" Type="System.Boolean" />
        <Parameter Name="deterministic" Type="System.Boolean" />
        <Parameter Name="xmlReferenceResolver" Type="Microsoft.CodeAnalysis.XmlReferenceResolver" />
        <Parameter Name="sourceReferenceResolver" Type="Microsoft.CodeAnalysis.SourceReferenceResolver" />
        <Parameter Name="metadataReferenceResolver" Type="Microsoft.CodeAnalysis.MetadataReferenceResolver" />
        <Parameter Name="assemblyIdentityComparer" Type="Microsoft.CodeAnalysis.AssemblyIdentityComparer" />
        <Parameter Name="strongNameProvider" Type="Microsoft.CodeAnalysis.StrongNameProvider" />
        <Parameter Name="publicSign" Type="System.Boolean" />
        <Parameter Name="reportSuppressedDiagnostics" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="outputKind">To be added.</param>
        <param name="moduleName">To be added.</param>
        <param name="mainTypeName">To be added.</param>
        <param name="scriptClassName">To be added.</param>
        <param name="globalImports">To be added.</param>
        <param name="rootNamespace">To be added.</param>
        <param name="optionStrict">To be added.</param>
        <param name="optionInfer">To be added.</param>
        <param name="optionExplicit">To be added.</param>
        <param name="optionCompareText">To be added.</param>
        <param name="parseOptions">To be added.</param>
        <param name="embedVbCoreRuntime">To be added.</param>
        <param name="optimizationLevel">To be added.</param>
        <param name="checkOverflow">To be added.</param>
        <param name="cryptoKeyContainer">To be added.</param>
        <param name="cryptoKeyFile">To be added.</param>
        <param name="cryptoPublicKey">To be added.</param>
        <param name="delaySign">To be added.</param>
        <param name="platform">To be added.</param>
        <param name="generalDiagnosticOption">To be added.</param>
        <param name="specificDiagnosticOptions">To be added.</param>
        <param name="concurrentBuild">To be added.</param>
        <param name="deterministic">To be added.</param>
        <param name="xmlReferenceResolver">To be added.</param>
        <param name="sourceReferenceResolver">To be added.</param>
        <param name="metadataReferenceResolver">To be added.</param>
        <param name="assemblyIdentityComparer">To be added.</param>
        <param name="strongNameProvider">To be added.</param>
        <param name="publicSign">To be added.</param>
        <param name="reportSuppressedDiagnostics">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualBasicCompilationOptions (Microsoft.CodeAnalysis.OutputKind outputKind, string moduleName = null, string mainTypeName = null, string scriptClassName = &quot;Script&quot;, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; globalImports = null, string rootNamespace = null, Microsoft.CodeAnalysis.VisualBasic.OptionStrict optionStrict = Microsoft.CodeAnalysis.VisualBasic.OptionStrict.Off, bool optionInfer = true, bool optionExplicit = true, bool optionCompareText = false, Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions parseOptions = null, bool embedVbCoreRuntime = false, Microsoft.CodeAnalysis.OptimizationLevel optimizationLevel = Microsoft.CodeAnalysis.OptimizationLevel.Debug, bool checkOverflow = true, string cryptoKeyContainer = null, string cryptoKeyFile = null, System.Collections.Immutable.ImmutableArray&lt;byte&gt; cryptoPublicKey = null, Nullable&lt;bool&gt; delaySign = null, Microsoft.CodeAnalysis.Platform platform = Microsoft.CodeAnalysis.Platform.AnyCpu, Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption = Microsoft.CodeAnalysis.ReportDiagnostic.Default, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; specificDiagnosticOptions = null, bool concurrentBuild = true, bool deterministic = false, Microsoft.CodeAnalysis.XmlReferenceResolver xmlReferenceResolver = null, Microsoft.CodeAnalysis.SourceReferenceResolver sourceReferenceResolver = null, Microsoft.CodeAnalysis.MetadataReferenceResolver metadataReferenceResolver = null, Microsoft.CodeAnalysis.AssemblyIdentityComparer assemblyIdentityComparer = null, Microsoft.CodeAnalysis.StrongNameProvider strongNameProvider = null, bool publicSign = false, bool reportSuppressedDiagnostics = false, Microsoft.CodeAnalysis.MetadataImportOptions metadataImportOptions = Microsoft.CodeAnalysis.MetadataImportOptions.Public);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(valuetype Microsoft.CodeAnalysis.OutputKind outputKind, string moduleName, string mainTypeName, string scriptClassName, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; globalImports, string rootNamespace, valuetype Microsoft.CodeAnalysis.VisualBasic.OptionStrict optionStrict, bool optionInfer, bool optionExplicit, bool optionCompareText, class Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions parseOptions, bool embedVbCoreRuntime, valuetype Microsoft.CodeAnalysis.OptimizationLevel optimizationLevel, bool checkOverflow, string cryptoKeyContainer, string cryptoKeyFile, valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; cryptoPublicKey, valuetype System.Nullable`1&lt;bool&gt; delaySign, valuetype Microsoft.CodeAnalysis.Platform platform, valuetype Microsoft.CodeAnalysis.ReportDiagnostic generalDiagnosticOption, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, valuetype Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; specificDiagnosticOptions, bool concurrentBuild, bool deterministic, class Microsoft.CodeAnalysis.XmlReferenceResolver xmlReferenceResolver, class Microsoft.CodeAnalysis.SourceReferenceResolver sourceReferenceResolver, class Microsoft.CodeAnalysis.MetadataReferenceResolver metadataReferenceResolver, class Microsoft.CodeAnalysis.AssemblyIdentityComparer assemblyIdentityComparer, class Microsoft.CodeAnalysis.StrongNameProvider strongNameProvider, bool publicSign, bool reportSuppressedDiagnostics, valuetype Microsoft.CodeAnalysis.MetadataImportOptions metadataImportOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.#ctor(Microsoft.CodeAnalysis.OutputKind,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.VisualBasic.GlobalImport},System.String,Microsoft.CodeAnalysis.VisualBasic.OptionStrict,System.Boolean,System.Boolean,System.Boolean,Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions,System.Boolean,Microsoft.CodeAnalysis.OptimizationLevel,System.Boolean,System.String,System.String,System.Collections.Immutable.ImmutableArray{System.Byte},System.Nullable{System.Boolean},Microsoft.CodeAnalysis.Platform,Microsoft.CodeAnalysis.ReportDiagnostic,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}},System.Boolean,System.Boolean,Microsoft.CodeAnalysis.XmlReferenceResolver,Microsoft.CodeAnalysis.SourceReferenceResolver,Microsoft.CodeAnalysis.MetadataReferenceResolver,Microsoft.CodeAnalysis.AssemblyIdentityComparer,Microsoft.CodeAnalysis.StrongNameProvider,System.Boolean,System.Boolean,Microsoft.CodeAnalysis.MetadataImportOptions)" />
      <MemberSignature Language="F#" Value="new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions : Microsoft.CodeAnalysis.OutputKind * string * string * string * seq&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; * string * Microsoft.CodeAnalysis.VisualBasic.OptionStrict * bool * bool * bool * Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions * bool * Microsoft.CodeAnalysis.OptimizationLevel * bool * string * string * System.Collections.Immutable.ImmutableArray&lt;byte&gt; * Nullable&lt;bool&gt; * Microsoft.CodeAnalysis.Platform * Microsoft.CodeAnalysis.ReportDiagnostic * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; * bool * bool * Microsoft.CodeAnalysis.XmlReferenceResolver * Microsoft.CodeAnalysis.SourceReferenceResolver * Microsoft.CodeAnalysis.MetadataReferenceResolver * Microsoft.CodeAnalysis.AssemblyIdentityComparer * Microsoft.CodeAnalysis.StrongNameProvider * bool * bool * Microsoft.CodeAnalysis.MetadataImportOptions -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="new Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions (outputKind, moduleName, mainTypeName, scriptClassName, globalImports, rootNamespace, optionStrict, optionInfer, optionExplicit, optionCompareText, parseOptions, embedVbCoreRuntime, optimizationLevel, checkOverflow, cryptoKeyContainer, cryptoKeyFile, cryptoPublicKey, delaySign, platform, generalDiagnosticOption, specificDiagnosticOptions, concurrentBuild, deterministic, xmlReferenceResolver, sourceReferenceResolver, metadataReferenceResolver, assemblyIdentityComparer, strongNameProvider, publicSign, reportSuppressedDiagnostics, metadataImportOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outputKind" Type="Microsoft.CodeAnalysis.OutputKind" />
        <Parameter Name="moduleName" Type="System.String" />
        <Parameter Name="mainTypeName" Type="System.String" />
        <Parameter Name="scriptClassName" Type="System.String" />
        <Parameter Name="globalImports" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt;" />
        <Parameter Name="rootNamespace" Type="System.String" />
        <Parameter Name="optionStrict" Type="Microsoft.CodeAnalysis.VisualBasic.OptionStrict" />
        <Parameter Name="optionInfer" Type="System.Boolean" />
        <Parameter Name="optionExplicit" Type="System.Boolean" />
        <Parameter Name="optionCompareText" Type="System.Boolean" />
        <Parameter Name="parseOptions" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions" />
        <Parameter Name="embedVbCoreRuntime" Type="System.Boolean" />
        <Parameter Name="optimizationLevel" Type="Microsoft.CodeAnalysis.OptimizationLevel" />
        <Parameter Name="checkOverflow" Type="System.Boolean" />
        <Parameter Name="cryptoKeyContainer" Type="System.String" />
        <Parameter Name="cryptoKeyFile" Type="System.String" />
        <Parameter Name="cryptoPublicKey" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
        <Parameter Name="delaySign" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="platform" Type="Microsoft.CodeAnalysis.Platform" />
        <Parameter Name="generalDiagnosticOption" Type="Microsoft.CodeAnalysis.ReportDiagnostic" />
        <Parameter Name="specificDiagnosticOptions" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt;" />
        <Parameter Name="concurrentBuild" Type="System.Boolean" />
        <Parameter Name="deterministic" Type="System.Boolean" />
        <Parameter Name="xmlReferenceResolver" Type="Microsoft.CodeAnalysis.XmlReferenceResolver" />
        <Parameter Name="sourceReferenceResolver" Type="Microsoft.CodeAnalysis.SourceReferenceResolver" />
        <Parameter Name="metadataReferenceResolver" Type="Microsoft.CodeAnalysis.MetadataReferenceResolver" />
        <Parameter Name="assemblyIdentityComparer" Type="Microsoft.CodeAnalysis.AssemblyIdentityComparer" />
        <Parameter Name="strongNameProvider" Type="Microsoft.CodeAnalysis.StrongNameProvider" />
        <Parameter Name="publicSign" Type="System.Boolean" />
        <Parameter Name="reportSuppressedDiagnostics" Type="System.Boolean" />
        <Parameter Name="metadataImportOptions" Type="Microsoft.CodeAnalysis.MetadataImportOptions" />
      </Parameters>
      <Docs>
        <param name="outputKind">The compilation output kind. <see cref="T:Microsoft.CodeAnalysis.OutputKind" /></param>
        <param name="moduleName">An optional parameter to specify the name of the assembly that this module will be a part of.</param>
        <param name="mainTypeName">An optional parameter to specify the class or module that contains the Sub Main procedure.</param>
        <param name="scriptClassName">An optional parameter to specify an alternate DefaultScriptClassName object to be used.</param>
        <param name="globalImports">An optional collection of GlobalImports <see cref="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.GlobalImports" /> .</param>
        <param name="rootNamespace">An optional parameter to specify the name of the default root namespace.</param>
        <param name="optionStrict">An optional parameter to specify the default Option Strict behavior. <see cref="T:Microsoft.CodeAnalysis.VisualBasic.OptionStrict" /></param>
        <param name="optionInfer">An optional parameter to specify default Option Infer behavior.</param>
        <param name="optionExplicit">An optional parameter to specify the default Option Explicit behavior.</param>
        <param name="optionCompareText">An optional parameter to specify the default Option Compare Text behavior.</param>
        <param name="parseOptions">An optional parameter to specify the parse options. <see cref="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions" /></param>
        <param name="embedVbCoreRuntime">An optional parameter to specify the embedded Visual Basic Core Runtime behavior.</param>
        <param name="optimizationLevel">An optional parameter to enabled/disable optimizations. </param>
        <param name="checkOverflow">An optional parameter to specify enabling/disabling overflow checking.</param>
        <param name="cryptoKeyContainer">An optional parameter to specify a key container name for a key pair to give an assembly a strong name.</param>
        <param name="cryptoKeyFile">An optional parameter to specify a file containing a key or key pair to give an assembly a strong name.</param>
        <param name="cryptoPublicKey">An optional parameter to specify a public key used to give an assembly a strong name.</param>
        <param name="delaySign">An optional parameter to specify whether the assembly will be fully or partially signed.</param>
        <param name="platform">An optional parameter to specify which platform version of common language runtime (CLR) can run compilation. <see cref="T:Microsoft.CodeAnalysis.Platform" /></param>
        <param name="generalDiagnosticOption">An optional parameter to specify the general warning level.</param>
        <param name="specificDiagnosticOptions">An optional collection representing specific warnings that differ from general warning behavior.</param>
        <param name="concurrentBuild">An optional parameter to specify enabling/disabling concurrent build.</param>
        <param name="deterministic">To be added.</param>
        <param name="xmlReferenceResolver">An optional parameter to specify the XML file resolver.</param>
        <param name="sourceReferenceResolver">An optional parameter to specify the source file resolver.</param>
        <param name="metadataReferenceResolver">An optional parameter to specify <see cref="T:Microsoft.CodeAnalysis.MetadataReferenceResolver" />.</param>
        <param name="assemblyIdentityComparer">An optional parameter to specify <see cref="T:Microsoft.CodeAnalysis.AssemblyIdentityComparer" />.</param>
        <param name="strongNameProvider">An optional parameter to specify <see cref="T:Microsoft.CodeAnalysis.StrongNameProvider" />.</param>
        <param name="publicSign">An optional parameter to specify whether the assembly will be public signed.</param>
        <param name="reportSuppressedDiagnostics">An optional parameter to specify whether or not suppressed diagnostics should be reported.</param>
        <param name="metadataImportOptions">An optional parameter to specify metadata import options.</param>
        <summary>
 Initializes a new instance of the VisualBasicCompilationOptions type with various options.
 </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithAssemblyIdentityComparer">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithAssemblyIdentityComparer (Microsoft.CodeAnalysis.AssemblyIdentityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithAssemblyIdentityComparer(class Microsoft.CodeAnalysis.AssemblyIdentityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithAssemblyIdentityComparer(Microsoft.CodeAnalysis.AssemblyIdentityComparer)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithAssemblyIdentityComparer (comparer As AssemblyIdentityComparer) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithAssemblyIdentityComparer : Microsoft.CodeAnalysis.AssemblyIdentityComparer -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithAssemblyIdentityComparer comparer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithAssemblyIdentityComparer(Microsoft::CodeAnalysis::AssemblyIdentityComparer ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="Microsoft.CodeAnalysis.AssemblyIdentityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithCheckOverflow">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithCheckOverflow (bool checkOverflow);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithCheckOverflow(bool checkOverflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithCheckOverflow(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithCheckOverflow (checkOverflow As Boolean) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithCheckOverflow : bool -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithCheckOverflow checkOverflow" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithCheckOverflow(bool checkOverflow);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkOverflow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="checkOverflow">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithConcurrentBuild">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithConcurrentBuild (bool concurrent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithConcurrentBuild(bool concurrent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithConcurrentBuild(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithConcurrentBuild (concurrent As Boolean) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithConcurrentBuild : bool -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithConcurrentBuild concurrent" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithConcurrentBuild(bool concurrent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="concurrent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="concurrent">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithCryptoKeyContainer">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithCryptoKeyContainer (string cryptoKeyContainer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithCryptoKeyContainer(string cryptoKeyContainer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithCryptoKeyContainer(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithCryptoKeyContainer (cryptoKeyContainer As String) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithCryptoKeyContainer : string -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithCryptoKeyContainer cryptoKeyContainer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithCryptoKeyContainer(System::String ^ cryptoKeyContainer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cryptoKeyContainer" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cryptoKeyContainer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithCryptoKeyFile">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithCryptoKeyFile (string cryptoKeyFile);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithCryptoKeyFile(string cryptoKeyFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithCryptoKeyFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithCryptoKeyFile (cryptoKeyFile As String) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithCryptoKeyFile : string -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithCryptoKeyFile cryptoKeyFile" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithCryptoKeyFile(System::String ^ cryptoKeyFile);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cryptoKeyFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cryptoKeyFile">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithCryptoPublicKey">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithCryptoPublicKey (System.Collections.Immutable.ImmutableArray&lt;byte&gt; cryptoPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithCryptoPublicKey(valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; cryptoPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithCryptoPublicKey(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithCryptoPublicKey (cryptoPublicKey As ImmutableArray(Of Byte)) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithCryptoPublicKey : System.Collections.Immutable.ImmutableArray&lt;byte&gt; -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithCryptoPublicKey cryptoPublicKey" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithCryptoPublicKey(System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; cryptoPublicKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cryptoPublicKey" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="cryptoPublicKey">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithDelaySign">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithDelaySign (Nullable&lt;bool&gt; delaySign);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithDelaySign(valuetype System.Nullable`1&lt;bool&gt; delaySign) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithDelaySign(System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithDelaySign (delaySign As Nullable(Of Boolean)) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithDelaySign : Nullable&lt;bool&gt; -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithDelaySign delaySign" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithDelaySign(Nullable&lt;bool&gt; delaySign);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delaySign" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="delaySign">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithDeterministic">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithDeterministic (bool deterministic);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithDeterministic(bool deterministic) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithDeterministic(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithDeterministic (deterministic As Boolean) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithDeterministic : bool -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithDeterministic deterministic" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithDeterministic(bool deterministic);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deterministic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deterministic">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithFeatures">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithFeatures (System.Collections.Immutable.ImmutableArray&lt;string&gt; features);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithFeatures(valuetype System.Collections.Immutable.ImmutableArray`1&lt;string&gt; features) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithFeatures(System.Collections.Immutable.ImmutableArray{System.String})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithFeatures (features As ImmutableArray(Of String)) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithFeatures : System.Collections.Immutable.ImmutableArray&lt;string&gt; -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithFeatures features" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithFeatures(System::Collections::Immutable::ImmutableArray&lt;System::String ^&gt; features);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="features" Type="System.Collections.Immutable.ImmutableArray&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="features">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithGeneralDiagnosticOption">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithGeneralDiagnosticOption (Microsoft.CodeAnalysis.ReportDiagnostic value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithGeneralDiagnosticOption(valuetype Microsoft.CodeAnalysis.ReportDiagnostic value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithGeneralDiagnosticOption(Microsoft.CodeAnalysis.ReportDiagnostic)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithGeneralDiagnosticOption (value As ReportDiagnostic) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithGeneralDiagnosticOption : Microsoft.CodeAnalysis.ReportDiagnostic -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithGeneralDiagnosticOption value" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithGeneralDiagnosticOption(Microsoft::CodeAnalysis::ReportDiagnostic value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.ReportDiagnostic" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithMainTypeName">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithMainTypeName (string mainTypeName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithMainTypeName(string mainTypeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithMainTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithMainTypeName (mainTypeName As String) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithMainTypeName : string -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithMainTypeName mainTypeName" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithMainTypeName(System::String ^ mainTypeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mainTypeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mainTypeName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithMetadataImportOptions">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithMetadataImportOptions (Microsoft.CodeAnalysis.MetadataImportOptions value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithMetadataImportOptions(valuetype Microsoft.CodeAnalysis.MetadataImportOptions value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithMetadataImportOptions(Microsoft.CodeAnalysis.MetadataImportOptions)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithMetadataImportOptions (value As MetadataImportOptions) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithMetadataImportOptions : Microsoft.CodeAnalysis.MetadataImportOptions -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithMetadataImportOptions value" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithMetadataImportOptions(Microsoft::CodeAnalysis::MetadataImportOptions value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.MetadataImportOptions" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithMetadataReferenceResolver">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithMetadataReferenceResolver (Microsoft.CodeAnalysis.MetadataReferenceResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithMetadataReferenceResolver(class Microsoft.CodeAnalysis.MetadataReferenceResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithMetadataReferenceResolver(Microsoft.CodeAnalysis.MetadataReferenceResolver)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithMetadataReferenceResolver (resolver As MetadataReferenceResolver) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithMetadataReferenceResolver : Microsoft.CodeAnalysis.MetadataReferenceResolver -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithMetadataReferenceResolver resolver" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithMetadataReferenceResolver(Microsoft::CodeAnalysis::MetadataReferenceResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolver" Type="Microsoft.CodeAnalysis.MetadataReferenceResolver" />
      </Parameters>
      <Docs>
        <param name="resolver">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithModuleName">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithModuleName (string moduleName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithModuleName(string moduleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithModuleName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithModuleName (moduleName As String) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithModuleName : string -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithModuleName moduleName" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithModuleName(System::String ^ moduleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="moduleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="moduleName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithOptimizationLevel">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithOptimizationLevel (Microsoft.CodeAnalysis.OptimizationLevel value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithOptimizationLevel(valuetype Microsoft.CodeAnalysis.OptimizationLevel value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithOptimizationLevel(Microsoft.CodeAnalysis.OptimizationLevel)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithOptimizationLevel (value As OptimizationLevel) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithOptimizationLevel : Microsoft.CodeAnalysis.OptimizationLevel -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithOptimizationLevel value" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithOptimizationLevel(Microsoft::CodeAnalysis::OptimizationLevel value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.OptimizationLevel" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithOutputKind">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithOutputKind (Microsoft.CodeAnalysis.OutputKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithOutputKind(valuetype Microsoft.CodeAnalysis.OutputKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithOutputKind(Microsoft.CodeAnalysis.OutputKind)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithOutputKind (kind As OutputKind) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithOutputKind : Microsoft.CodeAnalysis.OutputKind -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithOutputKind kind" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithOutputKind(Microsoft::CodeAnalysis::OutputKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.OutputKind" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithPlatform">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithPlatform (Microsoft.CodeAnalysis.Platform platform);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithPlatform(valuetype Microsoft.CodeAnalysis.Platform platform) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithPlatform(Microsoft.CodeAnalysis.Platform)" />
      <MemberSignature Language="F#" Value="override this.CommonWithPlatform : Microsoft.CodeAnalysis.Platform -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithPlatform platform" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithPlatform(Microsoft::CodeAnalysis::Platform platform);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="platform" Type="Microsoft.CodeAnalysis.Platform" />
      </Parameters>
      <Docs>
        <param name="platform">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithPublicSign">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithPublicSign (bool publicSign);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithPublicSign(bool publicSign) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithPublicSign(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithPublicSign (publicSign As Boolean) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithPublicSign : bool -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithPublicSign publicSign" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithPublicSign(bool publicSign);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publicSign" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="publicSign">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithReportSuppressedDiagnostics">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithReportSuppressedDiagnostics (bool reportSuppressedDiagnostics);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithReportSuppressedDiagnostics(bool reportSuppressedDiagnostics) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithReportSuppressedDiagnostics(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithReportSuppressedDiagnostics (reportSuppressedDiagnostics As Boolean) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithReportSuppressedDiagnostics : bool -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithReportSuppressedDiagnostics reportSuppressedDiagnostics" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithReportSuppressedDiagnostics(bool reportSuppressedDiagnostics);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reportSuppressedDiagnostics" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reportSuppressedDiagnostics">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithScriptClassName">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithScriptClassName (string scriptClassName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithScriptClassName(string scriptClassName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithScriptClassName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithScriptClassName (scriptClassName As String) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithScriptClassName : string -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithScriptClassName scriptClassName" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithScriptClassName(System::String ^ scriptClassName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptClassName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scriptClassName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithSourceReferenceResolver">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithSourceReferenceResolver (Microsoft.CodeAnalysis.SourceReferenceResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithSourceReferenceResolver(class Microsoft.CodeAnalysis.SourceReferenceResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithSourceReferenceResolver(Microsoft.CodeAnalysis.SourceReferenceResolver)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithSourceReferenceResolver (resolver As SourceReferenceResolver) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithSourceReferenceResolver : Microsoft.CodeAnalysis.SourceReferenceResolver -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithSourceReferenceResolver resolver" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithSourceReferenceResolver(Microsoft::CodeAnalysis::SourceReferenceResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolver" Type="Microsoft.CodeAnalysis.SourceReferenceResolver" />
      </Parameters>
      <Docs>
        <param name="resolver">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithSpecificDiagnosticOptions">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithSpecificDiagnosticOptions (System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; specificDiagnosticOptions);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithSpecificDiagnosticOptions(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, valuetype Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; specificDiagnosticOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithSpecificDiagnosticOptions(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithSpecificDiagnosticOptions (specificDiagnosticOptions As IEnumerable(Of KeyValuePair(Of String, ReportDiagnostic))) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithSpecificDiagnosticOptions : seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithSpecificDiagnosticOptions specificDiagnosticOptions" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithSpecificDiagnosticOptions(System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Microsoft::CodeAnalysis::ReportDiagnostic&gt;&gt; ^ specificDiagnosticOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="specificDiagnosticOptions" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="specificDiagnosticOptions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithSpecificDiagnosticOptions">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithSpecificDiagnosticOptions (System.Collections.Immutable.ImmutableDictionary&lt;string,Microsoft.CodeAnalysis.ReportDiagnostic&gt; specificDiagnosticOptions);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithSpecificDiagnosticOptions(class System.Collections.Immutable.ImmutableDictionary`2&lt;string, valuetype Microsoft.CodeAnalysis.ReportDiagnostic&gt; specificDiagnosticOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithSpecificDiagnosticOptions(System.Collections.Immutable.ImmutableDictionary{System.String,Microsoft.CodeAnalysis.ReportDiagnostic})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithSpecificDiagnosticOptions (specificDiagnosticOptions As ImmutableDictionary(Of String, ReportDiagnostic)) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithSpecificDiagnosticOptions : System.Collections.Immutable.ImmutableDictionary&lt;string, Microsoft.CodeAnalysis.ReportDiagnostic&gt; -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithSpecificDiagnosticOptions specificDiagnosticOptions" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithSpecificDiagnosticOptions(System::Collections::Immutable::ImmutableDictionary&lt;System::String ^, Microsoft::CodeAnalysis::ReportDiagnostic&gt; ^ specificDiagnosticOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="specificDiagnosticOptions" Type="System.Collections.Immutable.ImmutableDictionary&lt;System.String,Microsoft.CodeAnalysis.ReportDiagnostic&gt;" />
      </Parameters>
      <Docs>
        <param name="specificDiagnosticOptions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithStrongNameProvider">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithStrongNameProvider (Microsoft.CodeAnalysis.StrongNameProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithStrongNameProvider(class Microsoft.CodeAnalysis.StrongNameProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithStrongNameProvider(Microsoft.CodeAnalysis.StrongNameProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithStrongNameProvider (provider As StrongNameProvider) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithStrongNameProvider : Microsoft.CodeAnalysis.StrongNameProvider -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithStrongNameProvider provider" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithStrongNameProvider(Microsoft::CodeAnalysis::StrongNameProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="Microsoft.CodeAnalysis.StrongNameProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonWithXmlReferenceResolver">
      <MemberSignature Language="C#" Value="protected override Microsoft.CodeAnalysis.CompilationOptions CommonWithXmlReferenceResolver (Microsoft.CodeAnalysis.XmlReferenceResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.CodeAnalysis.CompilationOptions CommonWithXmlReferenceResolver(class Microsoft.CodeAnalysis.XmlReferenceResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.CommonWithXmlReferenceResolver(Microsoft.CodeAnalysis.XmlReferenceResolver)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CommonWithXmlReferenceResolver (resolver As XmlReferenceResolver) As CompilationOptions" />
      <MemberSignature Language="F#" Value="override this.CommonWithXmlReferenceResolver : Microsoft.CodeAnalysis.XmlReferenceResolver -&gt; Microsoft.CodeAnalysis.CompilationOptions" Usage="visualBasicCompilationOptions.CommonWithXmlReferenceResolver resolver" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::CodeAnalysis::CompilationOptions ^ CommonWithXmlReferenceResolver(Microsoft::CodeAnalysis::XmlReferenceResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolver" Type="Microsoft.CodeAnalysis.XmlReferenceResolver" />
      </Parameters>
      <Docs>
        <param name="resolver">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmbedVbCoreRuntime">
      <MemberSignature Language="C#" Value="public bool EmbedVbCoreRuntime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EmbedVbCoreRuntime" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.EmbedVbCoreRuntime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EmbedVbCoreRuntime As Boolean" />
      <MemberSignature Language="F#" Value="member this.EmbedVbCoreRuntime : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.EmbedVbCoreRuntime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EmbedVbCoreRuntime { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Gets the Embed Visual Basic Core Runtime setting.
 </summary>
        <value>
 The EmbedVbCoreRuntime setting, True if VB core runtime should be embedded in the compilation. Equal to '/vbruntime*'
 </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.Equals(Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As VisualBasicCompilationOptions) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions -&gt; bool" Usage="visualBasicCompilationOptions.Equals other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ other) = IEquatable&lt;Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^&gt;::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" />
      </Parameters>
      <Docs>
        <param name="other">A VisualBasicCompilationOptions to compare with this object</param>
        <summary>
 Determines whether the current object is equal to another object of the same type.
 </summary>
        <returns>A boolean value.  True if the current object is equal to the other parameter; otherwise, False.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="visualBasicCompilationOptions.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">A object to compare with this object</param>
        <summary>
 Indicates whether the current object is equal to another object.
 </summary>
        <returns>A boolean value.  True if the current object is equal to the other parameter; otherwise, False.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="visualBasicCompilationOptions.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Creates a hashcode for this instance.
 </summary>
        <returns>A hashcode representing this instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalImports">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; GlobalImports { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; GlobalImports" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.GlobalImports" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalImports As ImmutableArray(Of GlobalImport)" />
      <MemberSignature Language="F#" Value="member this.GlobalImports : System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.GlobalImports" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^&gt; GlobalImports { System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Gets the global imports collection.
 </summary>
        <value>The global imports.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public override string Language { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.Language" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Language As String" />
      <MemberSignature Language="F#" Value="member this.Language : string" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.Language" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Language { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionCompareText">
      <MemberSignature Language="C#" Value="public bool OptionCompareText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OptionCompareText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.OptionCompareText" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OptionCompareText As Boolean" />
      <MemberSignature Language="F#" Value="member this.OptionCompareText : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.OptionCompareText" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OptionCompareText { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Gets the Option Compare Text setting.
 </summary>
        <value>        
 The Option Compare Text Setting, True if Option Compare Text is in effect by default. False if Option Compare Binary is
 in effect by default.
 </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionExplicit">
      <MemberSignature Language="C#" Value="public bool OptionExplicit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OptionExplicit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.OptionExplicit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OptionExplicit As Boolean" />
      <MemberSignature Language="F#" Value="member this.OptionExplicit : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.OptionExplicit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OptionExplicit { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Gets the Option Explicit setting.
 </summary>
        <value>The Option Explicit setting. True if Option Explicit On is in effect by default. False if Option Explicit Off is on by default.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionInfer">
      <MemberSignature Language="C#" Value="public bool OptionInfer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OptionInfer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.OptionInfer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OptionInfer As Boolean" />
      <MemberSignature Language="F#" Value="member this.OptionInfer : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.OptionInfer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OptionInfer { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Gets the Option Infer setting.
 </summary>
        <value>The Option Infer setting. True if Option Infer On is in effect by default. False if Option Infer Off is on effect by default. </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionStrict">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.OptionStrict OptionStrict { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.VisualBasic.OptionStrict OptionStrict" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.OptionStrict" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OptionStrict As OptionStrict" />
      <MemberSignature Language="F#" Value="member this.OptionStrict : Microsoft.CodeAnalysis.VisualBasic.OptionStrict" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.OptionStrict" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::OptionStrict OptionStrict { Microsoft::CodeAnalysis::VisualBasic::OptionStrict get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.OptionStrict</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Gets the Option Strict Setting.
 </summary>
        <value>The Option Strict setting.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseOptions">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions ParseOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions ParseOptions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.ParseOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParseOptions As VisualBasicParseOptions" />
      <MemberSignature Language="F#" Value="member this.ParseOptions : Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.ParseOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::VisualBasicParseOptions ^ ParseOptions { Microsoft::CodeAnalysis::VisualBasic::VisualBasicParseOptions ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Gets the Parse Options setting.
 Compilation level parse options.  Used when compiling synthetic embedded code such as My template
 </summary>
        <value>The Parse Options Setting.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RootNamespace">
      <MemberSignature Language="C#" Value="public string RootNamespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RootNamespace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.RootNamespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RootNamespace As String" />
      <MemberSignature Language="F#" Value="member this.RootNamespace : string" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.RootNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RootNamespace { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Gets the default namespace for all source code in the project. Corresponds to the 
 "RootNamespace" project option or the "/rootnamespace" command line option.
 </summary>
        <value>The default namespace.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAssemblyIdentityComparer">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithAssemblyIdentityComparer (Microsoft.CodeAnalysis.AssemblyIdentityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithAssemblyIdentityComparer(class Microsoft.CodeAnalysis.AssemblyIdentityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithAssemblyIdentityComparer(Microsoft.CodeAnalysis.AssemblyIdentityComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithAssemblyIdentityComparer (comparer As AssemblyIdentityComparer) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithAssemblyIdentityComparer : Microsoft.CodeAnalysis.AssemblyIdentityComparer -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithAssemblyIdentityComparer comparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithAssemblyIdentityComparer(Microsoft::CodeAnalysis::AssemblyIdentityComparer ^ comparer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="Microsoft.CodeAnalysis.AssemblyIdentityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithConcurrentBuild">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithConcurrentBuild (bool concurrentBuild);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithConcurrentBuild(bool concurrentBuild) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithConcurrentBuild(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithConcurrentBuild (concurrentBuild As Boolean) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithConcurrentBuild : bool -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithConcurrentBuild concurrentBuild" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithConcurrentBuild(bool concurrentBuild);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="concurrentBuild" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="concurrentBuild">The concurrent build setting. </param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a different concurrent build specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the concurrent build is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithCryptoKeyContainer">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithCryptoKeyContainer (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithCryptoKeyContainer(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithCryptoKeyContainer(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithCryptoKeyContainer (name As String) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithCryptoKeyContainer : string -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithCryptoKeyContainer name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithCryptoKeyContainer(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the cryptography key container. </param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a different cryptography key container specified
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the cryptography key container name is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithCryptoKeyFile">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithCryptoKeyFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithCryptoKeyFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithCryptoKeyFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithCryptoKeyFile (path As String) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithCryptoKeyFile : string -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithCryptoKeyFile path" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithCryptoKeyFile(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The cryptography key file path. </param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a different cryptography key file path specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the cryptography key path is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithCryptoPublicKey">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithCryptoPublicKey (System.Collections.Immutable.ImmutableArray&lt;byte&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithCryptoPublicKey(valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithCryptoPublicKey(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithCryptoPublicKey (value As ImmutableArray(Of Byte)) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithCryptoPublicKey : System.Collections.Immutable.ImmutableArray&lt;byte&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithCryptoPublicKey value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithCryptoPublicKey(System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="value">The cryptography key file path. </param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a different public key.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the public key is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithDelaySign">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithDelaySign (Nullable&lt;bool&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithDelaySign(valuetype System.Nullable`1&lt;bool&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithDelaySign(System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithDelaySign (value As Nullable(Of Boolean)) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithDelaySign : Nullable&lt;bool&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithDelaySign value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithDelaySign(Nullable&lt;bool&gt; value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="value">The delay signing setting. </param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a different delay signing specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the delay sign is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithDeterministic">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithDeterministic (bool deterministic);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithDeterministic(bool deterministic) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithDeterministic(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithDeterministic (deterministic As Boolean) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithDeterministic : bool -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithDeterministic deterministic" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithDeterministic(bool deterministic);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deterministic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deterministic">To be added.</param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a different deterministic mode specified.
 <param name="deterministic"> The deterministic mode. </param><returns> A new instance of VisualBasicCompilationOptions, if the deterministic mode is different; otherwise the current instance.</returns></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithEmbedVbCoreRuntime">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithEmbedVbCoreRuntime (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithEmbedVbCoreRuntime(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithEmbedVbCoreRuntime(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithEmbedVbCoreRuntime (value As Boolean) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="member this.WithEmbedVbCoreRuntime : bool -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithEmbedVbCoreRuntime value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithEmbedVbCoreRuntime(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Embed VB Core Runtime setting. </param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a different Embed VB Core Runtime specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the embed vb core runtime is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithGeneralDiagnosticOption">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithGeneralDiagnosticOption (Microsoft.CodeAnalysis.ReportDiagnostic value);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithGeneralDiagnosticOption(valuetype Microsoft.CodeAnalysis.ReportDiagnostic value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithGeneralDiagnosticOption(Microsoft.CodeAnalysis.ReportDiagnostic)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithGeneralDiagnosticOption (value As ReportDiagnostic) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithGeneralDiagnosticOption : Microsoft.CodeAnalysis.ReportDiagnostic -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithGeneralDiagnosticOption value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithGeneralDiagnosticOption(Microsoft::CodeAnalysis::ReportDiagnostic value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.ReportDiagnostic" />
      </Parameters>
      <Docs>
        <param name="value">The Report Warning setting. <see cref="T:Microsoft.CodeAnalysis.ReportDiagnostic" /></param>
        <summary>
 Creates a new <see cref="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" /> instance with a different report warning specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the report warning is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithGlobalImports">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithGlobalImports (params Microsoft.CodeAnalysis.VisualBasic.GlobalImport[] globalImports);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithGlobalImports(class Microsoft.CodeAnalysis.VisualBasic.GlobalImport[] globalImports) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithGlobalImports(Microsoft.CodeAnalysis.VisualBasic.GlobalImport[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WithGlobalImports (ParamArray globalImports As GlobalImport()) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="member this.WithGlobalImports : Microsoft.CodeAnalysis.VisualBasic.GlobalImport[] -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithGlobalImports globalImports" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithGlobalImports(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^&gt; ^ globalImports);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="globalImports" Type="Microsoft.CodeAnalysis.VisualBasic.GlobalImport[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="globalImports">A collection of Global Imports <see cref="T:Microsoft.CodeAnalysis.VisualBasic.GlobalImport" />.</param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a different global imports specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithGlobalImports">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithGlobalImports (System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; globalImports);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithGlobalImports(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; globalImports) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithGlobalImports(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.VisualBasic.GlobalImport})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithGlobalImports (globalImports As IEnumerable(Of GlobalImport)) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="member this.WithGlobalImports : seq&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithGlobalImports globalImports" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithGlobalImports(System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^&gt; ^ globalImports);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="globalImports" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt;" />
      </Parameters>
      <Docs>
        <param name="globalImports">A collection of Global Imports <see cref="T:Microsoft.CodeAnalysis.VisualBasic.GlobalImport" />.</param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a different global imports specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithGlobalImports">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithGlobalImports (System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; globalImports);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithGlobalImports(valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; globalImports) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithGlobalImports(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.VisualBasic.GlobalImport})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithGlobalImports (globalImports As ImmutableArray(Of GlobalImport)) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="member this.WithGlobalImports : System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithGlobalImports globalImports" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithGlobalImports(System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::VisualBasic::GlobalImport ^&gt; globalImports);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="globalImports" Type="System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.VisualBasic.GlobalImport&gt;" />
      </Parameters>
      <Docs>
        <param name="globalImports">A collection of Global Imports <see cref="T:Microsoft.CodeAnalysis.VisualBasic.GlobalImport" />.</param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a different global imports specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithMainTypeName">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithMainTypeName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithMainTypeName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithMainTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithMainTypeName (name As String) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithMainTypeName : string -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithMainTypeName name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithMainTypeName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name for the MainType .</param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a different Main Type name specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the main type name is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithMetadataImportOptions">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithMetadataImportOptions (Microsoft.CodeAnalysis.MetadataImportOptions value);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithMetadataImportOptions(valuetype Microsoft.CodeAnalysis.MetadataImportOptions value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithMetadataImportOptions(Microsoft.CodeAnalysis.MetadataImportOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithMetadataImportOptions (value As MetadataImportOptions) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithMetadataImportOptions : Microsoft.CodeAnalysis.MetadataImportOptions -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithMetadataImportOptions value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithMetadataImportOptions(Microsoft::CodeAnalysis::MetadataImportOptions value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.MetadataImportOptions" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
 Creates a new <see cref="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" /> instance with a specified <see cref="T:Microsoft.CodeAnalysis.MetadataImportOptions" />.
 </summary>
        <returns>A new instance of <see cref="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" />, if the value is different; otherwise the current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithMetadataReferenceResolver">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithMetadataReferenceResolver (Microsoft.CodeAnalysis.MetadataReferenceResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithMetadataReferenceResolver(class Microsoft.CodeAnalysis.MetadataReferenceResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithMetadataReferenceResolver(Microsoft.CodeAnalysis.MetadataReferenceResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithMetadataReferenceResolver (resolver As MetadataReferenceResolver) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithMetadataReferenceResolver : Microsoft.CodeAnalysis.MetadataReferenceResolver -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithMetadataReferenceResolver resolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithMetadataReferenceResolver(Microsoft::CodeAnalysis::MetadataReferenceResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolver" Type="Microsoft.CodeAnalysis.MetadataReferenceResolver" />
      </Parameters>
      <Docs>
        <param name="resolver">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithModuleName">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithModuleName (string moduleName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithModuleName(string moduleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithModuleName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithModuleName (moduleName As String) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithModuleName : string -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithModuleName moduleName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithModuleName(System::String ^ moduleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="moduleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="moduleName">The moduleName.</param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance With a different ModuleName specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the module name is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithOptimizationLevel">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOptimizationLevel (Microsoft.CodeAnalysis.OptimizationLevel value);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOptimizationLevel(valuetype Microsoft.CodeAnalysis.OptimizationLevel value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithOptimizationLevel(Microsoft.CodeAnalysis.OptimizationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithOptimizationLevel (value As OptimizationLevel) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithOptimizationLevel : Microsoft.CodeAnalysis.OptimizationLevel -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithOptimizationLevel value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithOptimizationLevel(Microsoft::CodeAnalysis::OptimizationLevel value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.OptimizationLevel" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>
 Creates a new <see cref="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" /> instance with a specified <see cref="P:Microsoft.CodeAnalysis.CompilationOptions.OptimizationLevel" />.
 </summary>
        <returns>A new instance of <see cref="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" />, if the value is different; otherwise the current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithOptionCompareText">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOptionCompareText (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOptionCompareText(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithOptionCompareText(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithOptionCompareText (value As Boolean) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="member this.WithOptionCompareText : bool -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithOptionCompareText value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithOptionCompareText(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Option Compare Text setting. </param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a different Option Compare Text specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the option compare text is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithOptionExplicit">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOptionExplicit (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOptionExplicit(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithOptionExplicit(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithOptionExplicit (value As Boolean) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="member this.WithOptionExplicit : bool -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithOptionExplicit value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithOptionExplicit(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Option Explicit setting. </param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a different option explicit specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the option explicit is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithOptionInfer">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOptionInfer (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOptionInfer(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithOptionInfer(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithOptionInfer (value As Boolean) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="member this.WithOptionInfer : bool -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithOptionInfer value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithOptionInfer(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Option infer setting. </param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a different option infer specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the option infer is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithOptionStrict">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOptionStrict (Microsoft.CodeAnalysis.VisualBasic.OptionStrict value);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOptionStrict(valuetype Microsoft.CodeAnalysis.VisualBasic.OptionStrict value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithOptionStrict(Microsoft.CodeAnalysis.VisualBasic.OptionStrict)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithOptionStrict (value As OptionStrict) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="member this.WithOptionStrict : Microsoft.CodeAnalysis.VisualBasic.OptionStrict -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithOptionStrict value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithOptionStrict(Microsoft::CodeAnalysis::VisualBasic::OptionStrict value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.VisualBasic.OptionStrict" />
      </Parameters>
      <Docs>
        <param name="value">The Option Strict setting.  <see cref="T:Microsoft.CodeAnalysis.VisualBasic.OptionStrict" /></param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a different option strict specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the option strict is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithOutputKind">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOutputKind (Microsoft.CodeAnalysis.OutputKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOutputKind(valuetype Microsoft.CodeAnalysis.OutputKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithOutputKind(Microsoft.CodeAnalysis.OutputKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithOutputKind (kind As OutputKind) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithOutputKind : Microsoft.CodeAnalysis.OutputKind -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithOutputKind kind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithOutputKind(Microsoft::CodeAnalysis::OutputKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.OutputKind" />
      </Parameters>
      <Docs>
        <param name="kind">The Output Kind.</param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a different OutputKind specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the output kind is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithOverflowChecks">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOverflowChecks (bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithOverflowChecks(bool enabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithOverflowChecks(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithOverflowChecks (enabled As Boolean) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithOverflowChecks : bool -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithOverflowChecks enabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithOverflowChecks(bool enabled);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enabled">The overflow check setting. </param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a different Overflow checks specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the overflow check is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithParseOptions">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithParseOptions (Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithParseOptions(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithParseOptions(Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithParseOptions (options As VisualBasicParseOptions) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="member this.WithParseOptions : Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithParseOptions options" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithParseOptions(Microsoft::CodeAnalysis::VisualBasic::VisualBasicParseOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions" />
      </Parameters>
      <Docs>
        <param name="options">The parse option setting. <see cref="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions" /></param>
        <summary>
 Creates a new <see cref="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" /> instance with a different parse option specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the parse options is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithPlatform">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithPlatform (Microsoft.CodeAnalysis.Platform value);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithPlatform(valuetype Microsoft.CodeAnalysis.Platform value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithPlatform(Microsoft.CodeAnalysis.Platform)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithPlatform (value As Platform) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithPlatform : Microsoft.CodeAnalysis.Platform -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithPlatform value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithPlatform(Microsoft::CodeAnalysis::Platform value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.CodeAnalysis.Platform" />
      </Parameters>
      <Docs>
        <param name="value">The platform setting. <see cref="T:Microsoft.CodeAnalysis.Platform" /></param>
        <summary>
 Creates a new <see cref="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" /> instance with a different platform specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the platform is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithPublicSign">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithPublicSign (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithPublicSign(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithPublicSign(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithPublicSign (value As Boolean) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithPublicSign : bool -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithPublicSign value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithPublicSign(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithReportSuppressedDiagnostics">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithReportSuppressedDiagnostics (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithReportSuppressedDiagnostics(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithReportSuppressedDiagnostics(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithReportSuppressedDiagnostics (value As Boolean) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithReportSuppressedDiagnostics : bool -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithReportSuppressedDiagnostics value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithReportSuppressedDiagnostics(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Report suppressed diagnostics setting.</param>
        <summary>
 Creates a new <see cref="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" /> instance with specified suppress diagnostics reporting option.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the value is different from the current value; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithRootNamespace">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithRootNamespace (string rootNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithRootNamespace(string rootNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithRootNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithRootNamespace (rootNamespace As String) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="member this.WithRootNamespace : string -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithRootNamespace rootNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithRootNamespace(System::String ^ rootNamespace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rootNamespace">The root namespace.</param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a different root namespace specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the root namespace is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithScriptClassName">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithScriptClassName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithScriptClassName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithScriptClassName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithScriptClassName (name As String) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithScriptClassName : string -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithScriptClassName name" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithScriptClassName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name for the ScriptClassName.</param>
        <summary>
 Creates a new VisualBasicCompilationOptions instance with a Script Class Name specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the script class name is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithSourceReferenceResolver">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithSourceReferenceResolver (Microsoft.CodeAnalysis.SourceReferenceResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithSourceReferenceResolver(class Microsoft.CodeAnalysis.SourceReferenceResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithSourceReferenceResolver(Microsoft.CodeAnalysis.SourceReferenceResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithSourceReferenceResolver (resolver As SourceReferenceResolver) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithSourceReferenceResolver : Microsoft.CodeAnalysis.SourceReferenceResolver -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithSourceReferenceResolver resolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithSourceReferenceResolver(Microsoft::CodeAnalysis::SourceReferenceResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolver" Type="Microsoft.CodeAnalysis.SourceReferenceResolver" />
      </Parameters>
      <Docs>
        <param name="resolver">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithSpecificDiagnosticOptions">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithSpecificDiagnosticOptions (System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithSpecificDiagnosticOptions(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, valuetype Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithSpecificDiagnosticOptions(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithSpecificDiagnosticOptions (value As IEnumerable(Of KeyValuePair(Of String, ReportDiagnostic))) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithSpecificDiagnosticOptions : seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithSpecificDiagnosticOptions value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithSpecificDiagnosticOptions(System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Microsoft::CodeAnalysis::ReportDiagnostic&gt;&gt; ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Microsoft.CodeAnalysis.ReportDiagnostic&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="value">Specific report warnings. <see cref="T:Microsoft.CodeAnalysis.ReportDiagnostic" /></param>
        <summary>
 Creates a new <see cref="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" /> instance with different specific warnings specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the dictionary of report warning is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithSpecificDiagnosticOptions">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithSpecificDiagnosticOptions (System.Collections.Immutable.ImmutableDictionary&lt;string,Microsoft.CodeAnalysis.ReportDiagnostic&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithSpecificDiagnosticOptions(class System.Collections.Immutable.ImmutableDictionary`2&lt;string, valuetype Microsoft.CodeAnalysis.ReportDiagnostic&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithSpecificDiagnosticOptions(System.Collections.Immutable.ImmutableDictionary{System.String,Microsoft.CodeAnalysis.ReportDiagnostic})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithSpecificDiagnosticOptions (value As ImmutableDictionary(Of String, ReportDiagnostic)) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithSpecificDiagnosticOptions : System.Collections.Immutable.ImmutableDictionary&lt;string, Microsoft.CodeAnalysis.ReportDiagnostic&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithSpecificDiagnosticOptions value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithSpecificDiagnosticOptions(System::Collections::Immutable::ImmutableDictionary&lt;System::String ^, Microsoft::CodeAnalysis::ReportDiagnostic&gt; ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableDictionary&lt;System.String,Microsoft.CodeAnalysis.ReportDiagnostic&gt;" />
      </Parameters>
      <Docs>
        <param name="value">Specific report warnings. <see cref="T:Microsoft.CodeAnalysis.ReportDiagnostic" /></param>
        <summary>
 Creates a new <see cref="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" /> instance with different specific warnings specified.
 </summary>
        <returns>A new instance of VisualBasicCompilationOptions, if the dictionary of report warning is different; otherwise current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithStrongNameProvider">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithStrongNameProvider (Microsoft.CodeAnalysis.StrongNameProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithStrongNameProvider(class Microsoft.CodeAnalysis.StrongNameProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithStrongNameProvider(Microsoft.CodeAnalysis.StrongNameProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithStrongNameProvider (provider As StrongNameProvider) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithStrongNameProvider : Microsoft.CodeAnalysis.StrongNameProvider -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithStrongNameProvider provider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithStrongNameProvider(Microsoft::CodeAnalysis::StrongNameProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="Microsoft.CodeAnalysis.StrongNameProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithXmlReferenceResolver">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithXmlReferenceResolver (Microsoft.CodeAnalysis.XmlReferenceResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions WithXmlReferenceResolver(class Microsoft.CodeAnalysis.XmlReferenceResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions.WithXmlReferenceResolver(Microsoft.CodeAnalysis.XmlReferenceResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithXmlReferenceResolver (resolver As XmlReferenceResolver) As VisualBasicCompilationOptions" />
      <MemberSignature Language="F#" Value="override this.WithXmlReferenceResolver : Microsoft.CodeAnalysis.XmlReferenceResolver -&gt; Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions" Usage="visualBasicCompilationOptions.WithXmlReferenceResolver resolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::VisualBasicCompilationOptions ^ WithXmlReferenceResolver(Microsoft::CodeAnalysis::XmlReferenceResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolver" Type="Microsoft.CodeAnalysis.XmlReferenceResolver" />
      </Parameters>
      <Docs>
        <param name="resolver">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>