<Type Name="MemberCrefSyntax" FullName="Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax">
  <TypeSignature Language="C#" Value="public abstract class MemberCrefSyntax : Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MemberCrefSyntax extends Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MemberCrefSyntax&#xA;Inherits CrefSyntax" />
  <TypeSignature Language="F#" Value="type MemberCrefSyntax = class&#xA;    inherit CrefSyntax" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemberCrefSyntax abstract : Microsoft::CodeAnalysis::CSharp::Syntax::CrefSyntax" />
  <TypeSignature Language="C++ CX" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;public ref class MemberCrefSyntax abstract : Microsoft::CodeAnalysis::CSharp::Syntax::CrefSyntax" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class MemberCrefSyntax abstract : Microsoft::CodeAnalysis::CSharp::Syntax::CrefSyntax" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The unqualified part of a CrefSyntax.
            For example, "ToString()" in "object.ToString()".
            NOTE: TypeCrefSyntax, QualifiedCrefSyntax, and MemberCrefSyntax overlap.  The syntax in a TypeCrefSyntax
            will always be bound as type, so it's safer to use QualifiedCrefSyntax or MemberCrefSyntax if the symbol
            might be a non-type member.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members />
</Type>