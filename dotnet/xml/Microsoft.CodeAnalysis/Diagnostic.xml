<Type Name="Diagnostic" FullName="Microsoft.CodeAnalysis.Diagnostic">
  <TypeSignature Language="C#" Value="public abstract class Diagnostic : IEquatable&lt;Microsoft.CodeAnalysis.Diagnostic&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Diagnostic extends System.Object implements class System.IEquatable`1&lt;class Microsoft.CodeAnalysis.Diagnostic&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Diagnostic" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Diagnostic&#xA;Implements IEquatable(Of Diagnostic), IFormattable" />
  <TypeSignature Language="F#" Value="type Diagnostic = class&#xA;    interface IEquatable&lt;Diagnostic&gt;&#xA;    interface IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Diagnostic abstract : IEquatable&lt;Microsoft::CodeAnalysis::Diagnostic ^&gt;, IFormattable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Microsoft.CodeAnalysis.Diagnostic&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{GetDebuggerDisplay(), nq}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Represents a diagnostic, such as a compiler error or a warning, along with the location where it occurred.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Diagnostic ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostic.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Diagnostic();" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; Diagnostic();" />
      <MemberSignature Language="C++ WINRT" Value=" Diagnostic();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdditionalLocations">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.Location&gt; AdditionalLocations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.CodeAnalysis.Location&gt; AdditionalLocations" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property AdditionalLocations As IReadOnlyList(Of Location)" />
      <MemberSignature Language="F#" Value="member this.AdditionalLocations : System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.Location&gt;" Usage="Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::Location ^&gt; ^ AdditionalLocations { System::Collections::Generic::IReadOnlyList&lt;Microsoft::CodeAnalysis::Location ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.CodeAnalysis.Location&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets an array of additional locations related to the diagnostic.
            Typically these are the locations of other items referenced in the message.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Diagnostic Create (Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, Microsoft.CodeAnalysis.Location location, params object[] messageArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Diagnostic Create(class Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, class Microsoft.CodeAnalysis.Location location, object[] messageArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Object[])" />
      <MemberSignature Language="F#" Value="static member Create : Microsoft.CodeAnalysis.DiagnosticDescriptor * Microsoft.CodeAnalysis.Location * obj[] -&gt; Microsoft.CodeAnalysis.Diagnostic" Usage="Microsoft.CodeAnalysis.Diagnostic.Create (descriptor, location, messageArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::Diagnostic ^ Create(Microsoft::CodeAnalysis::DiagnosticDescriptor ^ descriptor, Microsoft::CodeAnalysis::Location ^ location, ... cli::array &lt;System::Object ^&gt; ^ messageArgs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Diagnostic</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="Microsoft.CodeAnalysis.DiagnosticDescriptor" />
        <Parameter Name="location" Type="Microsoft.CodeAnalysis.Location" />
        <Parameter Name="messageArgs" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="descriptor">A <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor" /> describing the diagnostic</param>
        <param name="location">An optional primary location of the diagnostic. If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.Location" /> will return <see cref="P:Microsoft.CodeAnalysis.Location.None" />.</param>
        <param name="messageArgs">Arguments to the message of the diagnostic</param>
        <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.Diagnostic" /> instance.
            </summary>
        <returns>The <see cref="T:Microsoft.CodeAnalysis.Diagnostic" /> instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Diagnostic Create (Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, Microsoft.CodeAnalysis.Location location, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Location&gt; additionalLocations, params object[] messageArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Diagnostic Create(class Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, class Microsoft.CodeAnalysis.Location location, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.Location&gt; additionalLocations, object[] messageArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Object[])" />
      <MemberSignature Language="F#" Value="static member Create : Microsoft.CodeAnalysis.DiagnosticDescriptor * Microsoft.CodeAnalysis.Location * seq&lt;Microsoft.CodeAnalysis.Location&gt; * obj[] -&gt; Microsoft.CodeAnalysis.Diagnostic" Usage="Microsoft.CodeAnalysis.Diagnostic.Create (descriptor, location, additionalLocations, messageArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::Diagnostic ^ Create(Microsoft::CodeAnalysis::DiagnosticDescriptor ^ descriptor, Microsoft::CodeAnalysis::Location ^ location, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::Location ^&gt; ^ additionalLocations, ... cli::array &lt;System::Object ^&gt; ^ messageArgs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Diagnostic</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="Microsoft.CodeAnalysis.DiagnosticDescriptor" />
        <Parameter Name="location" Type="Microsoft.CodeAnalysis.Location" />
        <Parameter Name="additionalLocations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Location&gt;" />
        <Parameter Name="messageArgs" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="descriptor">A <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor" /> describing the diagnostic.</param>
        <param name="location">An optional primary location of the diagnostic. If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.Location" /> will return <see cref="P:Microsoft.CodeAnalysis.Location.None" />.</param>
        <param name="additionalLocations">
            An optional set of additional locations related to the diagnostic.
            Typically, these are locations of other items referenced in the message.
            If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations" /> will return an empty list.
            </param>
        <param name="messageArgs">Arguments to the message of the diagnostic.</param>
        <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.Diagnostic" /> instance.
            </summary>
        <returns>The <see cref="T:Microsoft.CodeAnalysis.Diagnostic" /> instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Diagnostic Create (Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, Microsoft.CodeAnalysis.Location location, System.Collections.Immutable.ImmutableDictionary&lt;string,string&gt; properties, params object[] messageArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Diagnostic Create(class Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, class Microsoft.CodeAnalysis.Location location, class System.Collections.Immutable.ImmutableDictionary`2&lt;string, string&gt; properties, object[] messageArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Collections.Immutable.ImmutableDictionary{System.String,System.String},System.Object[])" />
      <MemberSignature Language="F#" Value="static member Create : Microsoft.CodeAnalysis.DiagnosticDescriptor * Microsoft.CodeAnalysis.Location * System.Collections.Immutable.ImmutableDictionary&lt;string, string&gt; * obj[] -&gt; Microsoft.CodeAnalysis.Diagnostic" Usage="Microsoft.CodeAnalysis.Diagnostic.Create (descriptor, location, properties, messageArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::Diagnostic ^ Create(Microsoft::CodeAnalysis::DiagnosticDescriptor ^ descriptor, Microsoft::CodeAnalysis::Location ^ location, System::Collections::Immutable::ImmutableDictionary&lt;System::String ^, System::String ^&gt; ^ properties, ... cli::array &lt;System::Object ^&gt; ^ messageArgs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Diagnostic</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="Microsoft.CodeAnalysis.DiagnosticDescriptor" />
        <Parameter Name="location" Type="Microsoft.CodeAnalysis.Location" />
        <Parameter Name="properties" Type="System.Collections.Immutable.ImmutableDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="messageArgs" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="descriptor">A <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor" /> describing the diagnostic.</param>
        <param name="location">An optional primary location of the diagnostic. If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.Location" /> will return <see cref="P:Microsoft.CodeAnalysis.Location.None" />.</param>
        <param name="properties">
            An optional set of name-value pairs by means of which the analyzer that creates the diagnostic
            can convey more detailed information to the fixer. If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.Properties" /> will return
            <see cref="F:System.Collections.Immutable.ImmutableDictionary`2.Empty" />.
            </param>
        <param name="messageArgs">Arguments to the message of the diagnostic.</param>
        <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.Diagnostic" /> instance.
            </summary>
        <returns>The <see cref="T:Microsoft.CodeAnalysis.Diagnostic" /> instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Diagnostic Create (Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, Microsoft.CodeAnalysis.Location location, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Location&gt; additionalLocations, System.Collections.Immutable.ImmutableDictionary&lt;string,string&gt; properties, params object[] messageArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Diagnostic Create(class Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, class Microsoft.CodeAnalysis.Location location, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.Location&gt; additionalLocations, class System.Collections.Immutable.ImmutableDictionary`2&lt;string, string&gt; properties, object[] messageArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Collections.Immutable.ImmutableDictionary{System.String,System.String},System.Object[])" />
      <MemberSignature Language="F#" Value="static member Create : Microsoft.CodeAnalysis.DiagnosticDescriptor * Microsoft.CodeAnalysis.Location * seq&lt;Microsoft.CodeAnalysis.Location&gt; * System.Collections.Immutable.ImmutableDictionary&lt;string, string&gt; * obj[] -&gt; Microsoft.CodeAnalysis.Diagnostic" Usage="Microsoft.CodeAnalysis.Diagnostic.Create (descriptor, location, additionalLocations, properties, messageArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::Diagnostic ^ Create(Microsoft::CodeAnalysis::DiagnosticDescriptor ^ descriptor, Microsoft::CodeAnalysis::Location ^ location, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::Location ^&gt; ^ additionalLocations, System::Collections::Immutable::ImmutableDictionary&lt;System::String ^, System::String ^&gt; ^ properties, ... cli::array &lt;System::Object ^&gt; ^ messageArgs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Diagnostic</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="Microsoft.CodeAnalysis.DiagnosticDescriptor" />
        <Parameter Name="location" Type="Microsoft.CodeAnalysis.Location" />
        <Parameter Name="additionalLocations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Location&gt;" />
        <Parameter Name="properties" Type="System.Collections.Immutable.ImmutableDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="messageArgs" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="descriptor">A <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor" /> describing the diagnostic.</param>
        <param name="location">An optional primary location of the diagnostic. If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.Location" /> will return <see cref="P:Microsoft.CodeAnalysis.Location.None" />.</param>
        <param name="additionalLocations">
            An optional set of additional locations related to the diagnostic.
            Typically, these are locations of other items referenced in the message.
            If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations" /> will return an empty list.
            </param>
        <param name="properties">
            An optional set of name-value pairs by means of which the analyzer that creates the diagnostic
            can convey more detailed information to the fixer. If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.Properties" /> will return
            <see cref="F:System.Collections.Immutable.ImmutableDictionary`2.Empty" />.
            </param>
        <param name="messageArgs">Arguments to the message of the diagnostic.</param>
        <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.Diagnostic" /> instance.
            </summary>
        <returns>The <see cref="T:Microsoft.CodeAnalysis.Diagnostic" /> instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Diagnostic Create (Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, Microsoft.CodeAnalysis.Location location, Microsoft.CodeAnalysis.DiagnosticSeverity effectiveSeverity, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Location&gt; additionalLocations, System.Collections.Immutable.ImmutableDictionary&lt;string,string&gt; properties, params object[] messageArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Diagnostic Create(class Microsoft.CodeAnalysis.DiagnosticDescriptor descriptor, class Microsoft.CodeAnalysis.Location location, valuetype Microsoft.CodeAnalysis.DiagnosticSeverity effectiveSeverity, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.Location&gt; additionalLocations, class System.Collections.Immutable.ImmutableDictionary`2&lt;string, string&gt; properties, object[] messageArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Collections.Immutable.ImmutableDictionary{System.String,System.String},System.Object[])" />
      <MemberSignature Language="F#" Value="static member Create : Microsoft.CodeAnalysis.DiagnosticDescriptor * Microsoft.CodeAnalysis.Location * Microsoft.CodeAnalysis.DiagnosticSeverity * seq&lt;Microsoft.CodeAnalysis.Location&gt; * System.Collections.Immutable.ImmutableDictionary&lt;string, string&gt; * obj[] -&gt; Microsoft.CodeAnalysis.Diagnostic" Usage="Microsoft.CodeAnalysis.Diagnostic.Create (descriptor, location, effectiveSeverity, additionalLocations, properties, messageArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Diagnostic</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="Microsoft.CodeAnalysis.DiagnosticDescriptor" />
        <Parameter Name="location" Type="Microsoft.CodeAnalysis.Location" />
        <Parameter Name="effectiveSeverity" Type="Microsoft.CodeAnalysis.DiagnosticSeverity" />
        <Parameter Name="additionalLocations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Location&gt;" />
        <Parameter Name="properties" Type="System.Collections.Immutable.ImmutableDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="messageArgs" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="descriptor">A <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor" /> describing the diagnostic.</param>
        <param name="location">An optional primary location of the diagnostic. If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.Location" /> will return <see cref="P:Microsoft.CodeAnalysis.Location.None" />.</param>
        <param name="effectiveSeverity">Effective severity of the diagnostic.</param>
        <param name="additionalLocations">
            An optional set of additional locations related to the diagnostic.
            Typically, these are locations of other items referenced in the message.
            If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations" /> will return an empty list.
            </param>
        <param name="properties">
            An optional set of name-value pairs by means of which the analyzer that creates the diagnostic
            can convey more detailed information to the fixer. If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.Properties" /> will return
            <see cref="F:System.Collections.Immutable.ImmutableDictionary`2.Empty" />.
            </param>
        <param name="messageArgs">Arguments to the message of the diagnostic.</param>
        <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.Diagnostic" /> instance.
            </summary>
        <returns>The <see cref="T:Microsoft.CodeAnalysis.Diagnostic" /> instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Diagnostic Create (string id, string category, Microsoft.CodeAnalysis.LocalizableString message, Microsoft.CodeAnalysis.DiagnosticSeverity severity, Microsoft.CodeAnalysis.DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, int warningLevel, Microsoft.CodeAnalysis.LocalizableString title = null, Microsoft.CodeAnalysis.LocalizableString description = null, string helpLink = null, Microsoft.CodeAnalysis.Location location = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Location&gt; additionalLocations = null, System.Collections.Generic.IEnumerable&lt;string&gt; customTags = null, System.Collections.Immutable.ImmutableDictionary&lt;string,string&gt; properties = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Diagnostic Create(string id, string category, class Microsoft.CodeAnalysis.LocalizableString message, valuetype Microsoft.CodeAnalysis.DiagnosticSeverity severity, valuetype Microsoft.CodeAnalysis.DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, int32 warningLevel, class Microsoft.CodeAnalysis.LocalizableString title, class Microsoft.CodeAnalysis.LocalizableString description, string helpLink, class Microsoft.CodeAnalysis.Location location, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.Location&gt; additionalLocations, class System.Collections.Generic.IEnumerable`1&lt;string&gt; customTags, class System.Collections.Immutable.ImmutableDictionary`2&lt;string, string&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostic.Create(System.String,System.String,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.DiagnosticSeverity,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,System.Int32,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.LocalizableString,System.String,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Collections.Generic.IEnumerable{System.String},System.Collections.Immutable.ImmutableDictionary{System.String,System.String})" />
      <MemberSignature Language="F#" Value="static member Create : string * string * Microsoft.CodeAnalysis.LocalizableString * Microsoft.CodeAnalysis.DiagnosticSeverity * Microsoft.CodeAnalysis.DiagnosticSeverity * bool * int * Microsoft.CodeAnalysis.LocalizableString * Microsoft.CodeAnalysis.LocalizableString * string * Microsoft.CodeAnalysis.Location * seq&lt;Microsoft.CodeAnalysis.Location&gt; * seq&lt;string&gt; * System.Collections.Immutable.ImmutableDictionary&lt;string, string&gt; -&gt; Microsoft.CodeAnalysis.Diagnostic" Usage="Microsoft.CodeAnalysis.Diagnostic.Create (id, category, message, severity, defaultSeverity, isEnabledByDefault, warningLevel, title, description, helpLink, location, additionalLocations, customTags, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Diagnostic</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="message" Type="Microsoft.CodeAnalysis.LocalizableString" />
        <Parameter Name="severity" Type="Microsoft.CodeAnalysis.DiagnosticSeverity" />
        <Parameter Name="defaultSeverity" Type="Microsoft.CodeAnalysis.DiagnosticSeverity" />
        <Parameter Name="isEnabledByDefault" Type="System.Boolean" />
        <Parameter Name="warningLevel" Type="System.Int32" />
        <Parameter Name="title" Type="Microsoft.CodeAnalysis.LocalizableString" />
        <Parameter Name="description" Type="Microsoft.CodeAnalysis.LocalizableString" />
        <Parameter Name="helpLink" Type="System.String" />
        <Parameter Name="location" Type="Microsoft.CodeAnalysis.Location" />
        <Parameter Name="additionalLocations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Location&gt;" />
        <Parameter Name="customTags" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="properties" Type="System.Collections.Immutable.ImmutableDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="id">An identifier for the diagnostic. For diagnostics generated by the compiler, this will be a numeric code with a prefix such as "CS1001".</param>
        <param name="category">The category of the diagnostic. For diagnostics generated by the compiler, the category will be "Compiler".</param>
        <param name="message">The diagnostic message text.</param>
        <param name="severity">The diagnostic's effective severity.</param>
        <param name="defaultSeverity">The diagnostic's default severity.</param>
        <param name="isEnabledByDefault">True if the diagnostic is enabled by default</param>
        <param name="warningLevel">The warning level, between 1 and 4 if severity is <see cref="F:Microsoft.CodeAnalysis.DiagnosticSeverity.Warning" />; otherwise 0.</param>
        <param name="title">An optional short localizable title describing the diagnostic.</param>
        <param name="description">An optional longer localizable description for the diagnostic.</param>
        <param name="helpLink">An optional hyperlink that provides more detailed information regarding the diagnostic.</param>
        <param name="location">An optional primary location of the diagnostic. If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.Location" /> will return <see cref="P:Microsoft.CodeAnalysis.Location.None" />.</param>
        <param name="additionalLocations">
            An optional set of additional locations related to the diagnostic.
            Typically, these are locations of other items referenced in the message.
            If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations" /> will return an empty list.
            </param>
        <param name="customTags">
            An optional set of custom tags for the diagnostic. See <see cref="T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags" /> for some well known tags.
            If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.CustomTags" /> will return an empty list.
            </param>
        <param name="properties">
            An optional set of name-value pairs by means of which the analyzer that creates the diagnostic
            can convey more detailed information to the fixer. If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.Properties" /> will return
            <see cref="F:System.Collections.Immutable.ImmutableDictionary`2.Empty" />.
            </param>
        <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.Diagnostic" /> instance which is localizable.
            </summary>
        <returns>The <see cref="T:Microsoft.CodeAnalysis.Diagnostic" /> instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Diagnostic Create (string id, string category, Microsoft.CodeAnalysis.LocalizableString message, Microsoft.CodeAnalysis.DiagnosticSeverity severity, Microsoft.CodeAnalysis.DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, int warningLevel, bool isSuppressed, Microsoft.CodeAnalysis.LocalizableString title = null, Microsoft.CodeAnalysis.LocalizableString description = null, string helpLink = null, Microsoft.CodeAnalysis.Location location = null, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Location&gt; additionalLocations = null, System.Collections.Generic.IEnumerable&lt;string&gt; customTags = null, System.Collections.Immutable.ImmutableDictionary&lt;string,string&gt; properties = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Diagnostic Create(string id, string category, class Microsoft.CodeAnalysis.LocalizableString message, valuetype Microsoft.CodeAnalysis.DiagnosticSeverity severity, valuetype Microsoft.CodeAnalysis.DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, int32 warningLevel, bool isSuppressed, class Microsoft.CodeAnalysis.LocalizableString title, class Microsoft.CodeAnalysis.LocalizableString description, string helpLink, class Microsoft.CodeAnalysis.Location location, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.Location&gt; additionalLocations, class System.Collections.Generic.IEnumerable`1&lt;string&gt; customTags, class System.Collections.Immutable.ImmutableDictionary`2&lt;string, string&gt; properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostic.Create(System.String,System.String,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.DiagnosticSeverity,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,System.Int32,System.Boolean,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.LocalizableString,System.String,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Collections.Generic.IEnumerable{System.String},System.Collections.Immutable.ImmutableDictionary{System.String,System.String})" />
      <MemberSignature Language="F#" Value="static member Create : string * string * Microsoft.CodeAnalysis.LocalizableString * Microsoft.CodeAnalysis.DiagnosticSeverity * Microsoft.CodeAnalysis.DiagnosticSeverity * bool * int * bool * Microsoft.CodeAnalysis.LocalizableString * Microsoft.CodeAnalysis.LocalizableString * string * Microsoft.CodeAnalysis.Location * seq&lt;Microsoft.CodeAnalysis.Location&gt; * seq&lt;string&gt; * System.Collections.Immutable.ImmutableDictionary&lt;string, string&gt; -&gt; Microsoft.CodeAnalysis.Diagnostic" Usage="Microsoft.CodeAnalysis.Diagnostic.Create (id, category, message, severity, defaultSeverity, isEnabledByDefault, warningLevel, isSuppressed, title, description, helpLink, location, additionalLocations, customTags, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Diagnostic</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="message" Type="Microsoft.CodeAnalysis.LocalizableString" />
        <Parameter Name="severity" Type="Microsoft.CodeAnalysis.DiagnosticSeverity" />
        <Parameter Name="defaultSeverity" Type="Microsoft.CodeAnalysis.DiagnosticSeverity" />
        <Parameter Name="isEnabledByDefault" Type="System.Boolean" />
        <Parameter Name="warningLevel" Type="System.Int32" />
        <Parameter Name="isSuppressed" Type="System.Boolean" />
        <Parameter Name="title" Type="Microsoft.CodeAnalysis.LocalizableString" />
        <Parameter Name="description" Type="Microsoft.CodeAnalysis.LocalizableString" />
        <Parameter Name="helpLink" Type="System.String" />
        <Parameter Name="location" Type="Microsoft.CodeAnalysis.Location" />
        <Parameter Name="additionalLocations" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.Location&gt;" />
        <Parameter Name="customTags" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="properties" Type="System.Collections.Immutable.ImmutableDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="id">An identifier for the diagnostic. For diagnostics generated by the compiler, this will be a numeric code with a prefix such as "CS1001".</param>
        <param name="category">The category of the diagnostic. For diagnostics generated by the compiler, the category will be "Compiler".</param>
        <param name="message">The diagnostic message text.</param>
        <param name="severity">The diagnostic's effective severity.</param>
        <param name="defaultSeverity">The diagnostic's default severity.</param>
        <param name="isEnabledByDefault">True if the diagnostic is enabled by default</param>
        <param name="warningLevel">The warning level, between 1 and 4 if severity is <see cref="F:Microsoft.CodeAnalysis.DiagnosticSeverity.Warning" />; otherwise 0.</param>
        <param name="isSuppressed">Flag indicating whether the diagnostic is suppressed by a source suppression.</param>
        <param name="title">An optional short localizable title describing the diagnostic.</param>
        <param name="description">An optional longer localizable description for the diagnostic.</param>
        <param name="helpLink">An optional hyperlink that provides more detailed information regarding the diagnostic.</param>
        <param name="location">An optional primary location of the diagnostic. If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.Location" /> will return <see cref="P:Microsoft.CodeAnalysis.Location.None" />.</param>
        <param name="additionalLocations">
            An optional set of additional locations related to the diagnostic.
            Typically, these are locations of other items referenced in the message.
            If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations" /> will return an empty list.
            </param>
        <param name="customTags">
            An optional set of custom tags for the diagnostic. See <see cref="T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags" /> for some well known tags.
            If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.CustomTags" /> will return an empty list.
            </param>
        <param name="properties">
            An optional set of name-value pairs by means of which the analyzer that creates the diagnostic
            can convey more detailed information to the fixer. If null, <see cref="P:Microsoft.CodeAnalysis.Diagnostic.Properties" /> will return
            <see cref="F:System.Collections.Immutable.ImmutableDictionary`2.Empty" />.
            </param>
        <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.Diagnostic" /> instance which is localizable.
            </summary>
        <returns>The <see cref="T:Microsoft.CodeAnalysis.Diagnostic" /> instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSeverity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.CodeAnalysis.DiagnosticSeverity DefaultSeverity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.DiagnosticSeverity DefaultSeverity" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostic.DefaultSeverity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DefaultSeverity As DiagnosticSeverity" />
      <MemberSignature Language="F#" Value="member this.DefaultSeverity : Microsoft.CodeAnalysis.DiagnosticSeverity" Usage="Microsoft.CodeAnalysis.Diagnostic.DefaultSeverity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::CodeAnalysis::DiagnosticSeverity DefaultSeverity { Microsoft::CodeAnalysis::DiagnosticSeverity get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property Microsoft::CodeAnalysis::DiagnosticSeverity DefaultSeverity { Microsoft::CodeAnalysis::DiagnosticSeverity get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.DiagnosticSeverity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the default <see cref="T:Microsoft.CodeAnalysis.DiagnosticSeverity" /> of the diagnostic's <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor" />.
            </summary>
        <value>To be added.</value>
        <remarks>
            To get the effective severity of the diagnostic, use <see cref="P:Microsoft.CodeAnalysis.Diagnostic.Severity" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Descriptor">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.DiagnosticDescriptor Descriptor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.DiagnosticDescriptor Descriptor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostic.Descriptor" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Descriptor As DiagnosticDescriptor" />
      <MemberSignature Language="F#" Value="member this.Descriptor : Microsoft.CodeAnalysis.DiagnosticDescriptor" Usage="Microsoft.CodeAnalysis.Diagnostic.Descriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Microsoft::CodeAnalysis::DiagnosticDescriptor ^ Descriptor { Microsoft::CodeAnalysis::DiagnosticDescriptor ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.DiagnosticDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the diagnostic descriptor, which provides a description about a <see cref="T:Microsoft.CodeAnalysis.Diagnostic" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (Microsoft.CodeAnalysis.Diagnostic obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class Microsoft.CodeAnalysis.Diagnostic obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostic.Equals(Microsoft.CodeAnalysis.Diagnostic)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Equals (obj As Diagnostic) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : Microsoft.CodeAnalysis.Diagnostic -&gt; bool" Usage="diagnostic.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Equals(Microsoft::CodeAnalysis::Diagnostic ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="Microsoft.CodeAnalysis.Diagnostic" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostic.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="diagnostic.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract bool Equals(Platform::Object ^ obj);" />
      <MemberSignature Language="C++ WINRT" Value=" abstract bool Equals(winrt::Windows::Foundation::IInspectable const &amp; obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public abstract int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostic.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="diagnostic.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetHashCode();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract int GetHashCode();" />
      <MemberSignature Language="C++ WINRT" Value=" abstract int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMessage">
      <MemberSignature Language="C#" Value="public abstract string GetMessage (IFormatProvider formatProvider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetMessage(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostic.GetMessage(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMessage (Optional formatProvider As IFormatProvider = null) As String" />
      <MemberSignature Language="F#" Value="abstract member GetMessage : IFormatProvider -&gt; string" Usage="diagnostic.GetMessage formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">To be added.</param>
        <summary>
            Get the culture specific text of the message.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSuppressionInfo">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Diagnostics.SuppressionInfo GetSuppressionInfo (Microsoft.CodeAnalysis.Compilation compilation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.Diagnostics.SuppressionInfo GetSuppressionInfo(class Microsoft.CodeAnalysis.Compilation compilation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostic.GetSuppressionInfo(Microsoft.CodeAnalysis.Compilation)" />
      <MemberSignature Language="F#" Value="member this.GetSuppressionInfo : Microsoft.CodeAnalysis.Compilation -&gt; Microsoft.CodeAnalysis.Diagnostics.SuppressionInfo" Usage="diagnostic.GetSuppressionInfo compilation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::Diagnostics::SuppressionInfo ^ GetSuppressionInfo(Microsoft::CodeAnalysis::Compilation ^ compilation);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::Diagnostics::SuppressionInfo ^ GetSuppressionInfo(Microsoft::CodeAnalysis::Compilation ^ compilation);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::Diagnostics::SuppressionInfo GetSuppressionInfo(Microsoft::CodeAnalysis::Compilation const &amp; compilation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Diagnostics.SuppressionInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compilation" Type="Microsoft.CodeAnalysis.Compilation" />
      </Parameters>
      <Docs>
        <param name="compilation">To be added.</param>
        <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.Diagnostics.SuppressionInfo" /> for suppressed diagnostics, i.e. <see cref="P:Microsoft.CodeAnalysis.Diagnostic.IsSuppressed" /> = true.
            Otherwise, returns null.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public abstract string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostic.Id" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Id As String" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="Microsoft.CodeAnalysis.Diagnostic.Id" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract property Platform::String ^ Id { Platform::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the diagnostic identifier. For diagnostics generated by the compiler, this will be a numeric code with a prefix such as "CS1001".
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSuppressed">
      <MemberSignature Language="C#" Value="public abstract bool IsSuppressed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSuppressed" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostic.IsSuppressed" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsSuppressed As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsSuppressed : bool" Usage="Microsoft.CodeAnalysis.Diagnostic.IsSuppressed" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsSuppressed { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract property bool IsSuppressed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the diagnostic has a source suppression, i.e. an attribute or a pragma suppression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWarningAsError">
      <MemberSignature Language="C#" Value="public bool IsWarningAsError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWarningAsError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostic.IsWarningAsError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWarningAsError As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsWarningAsError : bool" Usage="Microsoft.CodeAnalysis.Diagnostic.IsWarningAsError" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWarningAsError { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsWarningAsError { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if this is a warning treated as an error; otherwise false.
            </summary>
        <value>To be added.</value>
        <remarks>
            True implies <see cref="P:Microsoft.CodeAnalysis.Diagnostic.DefaultSeverity" /> = <see cref="F:Microsoft.CodeAnalysis.DiagnosticSeverity.Warning" />
            and <see cref="P:Microsoft.CodeAnalysis.Diagnostic.Severity" /> = <see cref="F:Microsoft.CodeAnalysis.DiagnosticSeverity.Error" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.Location Location { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.Location Location" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostic.Location" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Location As Location" />
      <MemberSignature Language="F#" Value="member this.Location : Microsoft.CodeAnalysis.Location" Usage="Microsoft.CodeAnalysis.Diagnostic.Location" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Microsoft::CodeAnalysis::Location ^ Location { Microsoft::CodeAnalysis::Location ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract property Microsoft::CodeAnalysis::Location ^ Location { Microsoft::CodeAnalysis::Location ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Location</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the primary location of the diagnostic, or <see cref="P:Microsoft.CodeAnalysis.Location.None" /> if no primary location.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Immutable.ImmutableDictionary&lt;string,string&gt; Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Immutable.ImmutableDictionary`2&lt;string, string&gt; Properties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostic.Properties" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Properties As ImmutableDictionary(Of String, String)" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Collections.Immutable.ImmutableDictionary&lt;string, string&gt;" Usage="Microsoft.CodeAnalysis.Diagnostic.Properties" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Immutable::ImmutableDictionary&lt;System::String ^, System::String ^&gt; ^ Properties { System::Collections::Immutable::ImmutableDictionary&lt;System::String ^, System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets property bag for the diagnostic. it will return <see cref="F:System.Collections.Immutable.ImmutableDictionary`2.Empty" /> 
            if there is no entry. This can be used to put diagnostic specific information you want 
            to pass around. for example, to corresponding fixer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Severity">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.DiagnosticSeverity Severity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.DiagnosticSeverity Severity" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostic.Severity" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Severity As DiagnosticSeverity" />
      <MemberSignature Language="F#" Value="member this.Severity : Microsoft.CodeAnalysis.DiagnosticSeverity" Usage="Microsoft.CodeAnalysis.Diagnostic.Severity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Microsoft::CodeAnalysis::DiagnosticSeverity Severity { Microsoft::CodeAnalysis::DiagnosticSeverity get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract property Microsoft::CodeAnalysis::DiagnosticSeverity Severity { Microsoft::CodeAnalysis::DiagnosticSeverity get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.DiagnosticSeverity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the effective <see cref="T:Microsoft.CodeAnalysis.DiagnosticSeverity" /> of the diagnostic.
            </summary>
        <value>To be added.</value>
        <remarks>
            To get the default severity of diagnostic's <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor" />, use <see cref="P:Microsoft.CodeAnalysis.Diagnostic.DefaultSeverity" />.
            To determine if this is a warning treated as an error, use <see cref="P:Microsoft.CodeAnalysis.Diagnostic.IsWarningAsError" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string ignored, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string ignored, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostic.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (ignored As String, formatProvider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ ignored, IFormatProvider ^ formatProvider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ignored" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="ignored">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostic.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="diagnostic.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override Platform::String ^ ToString();" />
      <MemberSignature Language="C++ WINRT" Value=" override std::wstring ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WarningLevel">
      <MemberSignature Language="C#" Value="public abstract int WarningLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WarningLevel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostic.WarningLevel" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property WarningLevel As Integer" />
      <MemberSignature Language="F#" Value="member this.WarningLevel : int" Usage="Microsoft.CodeAnalysis.Diagnostic.WarningLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int WarningLevel { int get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract property int WarningLevel { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the warning level. This is 0 for diagnostics with severity <see cref="F:Microsoft.CodeAnalysis.DiagnosticSeverity.Error" />,
            otherwise an integer between 1 and 4.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>