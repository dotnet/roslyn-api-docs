<Type Name="OrderingSyntax" FullName="Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax">
  <TypeSignature Language="C#" Value="public sealed class OrderingSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed OrderingSyntax extends Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OrderingSyntax&#xA;Inherits VisualBasicSyntaxNode" />
  <TypeSignature Language="F#" Value="type OrderingSyntax = class&#xA;    inherit VisualBasicSyntaxNode" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
 An expression to order by, plus an optional ordering. The Kind indicates
 whether to order in ascending or descending order.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public override void Accept (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Accept(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax.Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Accept (visitor As VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor -&gt; unit" Usage="orderingSyntax.Accept visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public override TResult Accept&lt;TResult&gt; (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt; visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!TResult Accept&lt;TResult&gt;(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor`1&lt;!!TResult&gt; visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax.Accept``1(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Accept(Of TResult) (visitor As VisualBasicSyntaxVisitor(Of TResult)) As TResult" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;'Result&gt; -&gt; 'Result" Usage="orderingSyntax.Accept visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AscendingOrDescendingKeyword">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxToken AscendingOrDescendingKeyword { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken AscendingOrDescendingKeyword" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax.AscendingOrDescendingKeyword" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AscendingOrDescendingKeyword As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.AscendingOrDescendingKeyword : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax.AscendingOrDescendingKeyword" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The "Ascending" or "Descending" keyword, if present. To determine whether to
 sort in ascending or descending order, checking the Kind property is easier.
 </summary>
        <value>To be added.</value>
        <remarks>
 This child is optional. If it is not present, then Nothing is returned.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Expression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax.Expression" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Expression As ExpressionSyntax" />
      <MemberSignature Language="F#" Value="member this.Expression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax.Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The expression to sort by.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax Update (Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SyntaxToken ascendingOrDescendingKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax Update(valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind kind, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SyntaxToken ascendingOrDescendingKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax.Update(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (kind As SyntaxKind, expression As ExpressionSyntax, ascendingOrDescendingKeyword As SyntaxToken) As OrderingSyntax" />
      <MemberSignature Language="F#" Value="member this.Update : Microsoft.CodeAnalysis.VisualBasic.SyntaxKind * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax" Usage="orderingSyntax.Update (kind, expression, ascendingOrDescendingKeyword)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="ascendingOrDescendingKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="kind">
 The new kind.
 </param>
        <param name="expression">
 The value for the Expression property.
 </param>
        <param name="ascendingOrDescendingKeyword">
 The value for the AscendingOrDescendingKeyword property.
 </param>
        <summary>
 Returns a copy of this with the specified changes. Returns this instance if
 there are no actual changes.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAscendingOrDescendingKeyword">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax WithAscendingOrDescendingKeyword (Microsoft.CodeAnalysis.SyntaxToken ascendingOrDescendingKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax WithAscendingOrDescendingKeyword(valuetype Microsoft.CodeAnalysis.SyntaxToken ascendingOrDescendingKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax.WithAscendingOrDescendingKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithAscendingOrDescendingKeyword (ascendingOrDescendingKeyword As SyntaxToken) As OrderingSyntax" />
      <MemberSignature Language="F#" Value="member this.WithAscendingOrDescendingKeyword : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax" Usage="orderingSyntax.WithAscendingOrDescendingKeyword ascendingOrDescendingKeyword" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascendingOrDescendingKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="ascendingOrDescendingKeyword">To be added.</param>
        <summary>
 Returns a copy of this with the AscendingOrDescendingKeyword property changed
 to the specified value. Returns this instance if the specified value is the
 same as the current value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithExpression">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax WithExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax WithExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax.WithExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithExpression (expression As ExpressionSyntax) As OrderingSyntax" />
      <MemberSignature Language="F#" Value="member this.WithExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax" Usage="orderingSyntax.WithExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <summary>
 Returns a copy of this with the Expression property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>