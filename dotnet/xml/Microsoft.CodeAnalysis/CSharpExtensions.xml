<Type Name="CSharpExtensions" FullName="Microsoft.CodeAnalysis.CSharpExtensions">
  <TypeSignature Language="C#" Value="public static class CSharpExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CSharpExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CSharpExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module CSharpExtensions" />
  <TypeSignature Language="F#" Value="type CSharpExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class CSharpExtensions abstract sealed" />
  <TypeSignature Language="C++ CX" Value="public ref class CSharpExtensions abstract sealed" />
  <TypeSignature Language="C++ WINRT" Value="class CSharpExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Any">
      <MemberSignature Language="C#" Value="public static bool Any (this Microsoft.CodeAnalysis.SyntaxTokenList list, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any(valuetype Microsoft.CodeAnalysis.SyntaxTokenList list, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharpExtensions.Any(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any (list As SyntaxTokenList, kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member Any : Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharpExtensions.Any (list, kind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(Microsoft::CodeAnalysis::SyntaxTokenList list, Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="Microsoft.CodeAnalysis.SyntaxTokenList" RefType="this" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="list"></param>
        <param name="kind">The <see cref="T:Microsoft.CodeAnalysis.CSharp.SyntaxKind" /> to test for.</param>
        <summary>
            Tests whether a list contains a token of a particular kind.
            </summary>
        <returns>Returns true if the list contains a token which matches <paramref name="kind" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Any">
      <MemberSignature Language="C#" Value="public static bool Any (this Microsoft.CodeAnalysis.SyntaxTriviaList list, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList list, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharpExtensions.Any(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any (list As SyntaxTriviaList, kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member Any : Microsoft.CodeAnalysis.SyntaxTriviaList * Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharpExtensions.Any (list, kind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(Microsoft::CodeAnalysis::SyntaxTriviaList list, Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" RefType="this" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="list">To be added.</param>
        <param name="kind">To be added.</param>
        <summary>
            True if the list has at least one trivia of the specified kind.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Any&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;TNode&gt; (this Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; list, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; list, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharpExtensions.Any``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of TNode As SyntaxNode) (list As SeparatedSyntaxList(Of TNode), kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member Any : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.CSharpExtensions.Any (list, kind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNode&gt;&#xA; where TNode : Microsoft::CodeAnalysis::SyntaxNode[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; list, Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;" RefType="this" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="list">To be added.</param>
        <param name="kind">To be added.</param>
        <summary>
            True if the list has at least one node of the specified kind.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Any&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;TNode&gt; (this Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; list, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!!TNode&gt; list, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharpExtensions.Any``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of TNode As SyntaxNode) (list As SyntaxList(Of TNode), kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member Any : Microsoft.CodeAnalysis.SyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.CSharpExtensions.Any (list, kind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNode&gt;&#xA; where TNode : Microsoft::CodeAnalysis::SyntaxNode[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(Microsoft::CodeAnalysis::SyntaxList&lt;TNode&gt; list, Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;" RefType="this" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="list">To be added.</param>
        <param name="kind">To be added.</param>
        <summary>
            True if the list has at least one node of the specified kind.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public static int IndexOf (this Microsoft.CodeAnalysis.SyntaxTokenList list, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf(valuetype Microsoft.CodeAnalysis.SyntaxTokenList list, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharpExtensions.IndexOf(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf (list As SyntaxTokenList, kind As SyntaxKind) As Integer" />
      <MemberSignature Language="F#" Value="static member IndexOf : Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; int" Usage="Microsoft.CodeAnalysis.CSharpExtensions.IndexOf (list, kind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOf(Microsoft::CodeAnalysis::SyntaxTokenList list, Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="Microsoft.CodeAnalysis.SyntaxTokenList" RefType="this" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="list">Token list.</param>
        <param name="kind">The <see cref="T:Microsoft.CodeAnalysis.CSharp.SyntaxKind" /> to find.</param>
        <summary>
            Returns the index of the first token of a specified kind in the token list.
            </summary>
        <returns>Returns non-negative index if the list contains a token which matches <paramref name="kind" />, -1 otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public static int IndexOf (this Microsoft.CodeAnalysis.SyntaxTriviaList list, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList list, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharpExtensions.IndexOf(Microsoft.CodeAnalysis.SyntaxTriviaList,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf (list As SyntaxTriviaList, kind As SyntaxKind) As Integer" />
      <MemberSignature Language="F#" Value="static member IndexOf : Microsoft.CodeAnalysis.SyntaxTriviaList * Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; int" Usage="Microsoft.CodeAnalysis.CSharpExtensions.IndexOf (list, kind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOf(Microsoft::CodeAnalysis::SyntaxTriviaList list, Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" RefType="this" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="list">Trivia list.</param>
        <param name="kind">The <see cref="T:Microsoft.CodeAnalysis.CSharp.SyntaxKind" /> to find.</param>
        <summary>
            Returns the index of the first trivia of a specified kind in the trivia list.
            </summary>
        <returns>Returns non-negative index if the list contains a trivia which matches <paramref name="kind" />, -1 otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOf&lt;TNode&gt; (this Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; list, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!!TNode&gt; list, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharpExtensions.IndexOf``1(Microsoft.CodeAnalysis.SeparatedSyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf(Of TNode As SyntaxNode) (list As SeparatedSyntaxList(Of TNode), kind As SyntaxKind) As Integer" />
      <MemberSignature Language="F#" Value="static member IndexOf : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; int (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.CSharpExtensions.IndexOf (list, kind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNode&gt;&#xA; where TNode : Microsoft::CodeAnalysis::SyntaxNode[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOf(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; list, Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;" RefType="this" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="list">Node list.</param>
        <param name="kind">The <see cref="T:Microsoft.CodeAnalysis.CSharp.SyntaxKind" /> to find.</param>
        <summary>
            Returns the index of the first node of a specified kind in the node list.
            </summary>
        <returns>Returns non-negative index if the list contains a node which matches <paramref name="kind" />, -1 otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static int IndexOf&lt;TNode&gt; (this Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt; list, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 IndexOf&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;!!TNode&gt; list, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharpExtensions.IndexOf``1(Microsoft.CodeAnalysis.SyntaxList{``0},Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IndexOf(Of TNode As SyntaxNode) (list As SyntaxList(Of TNode), kind As SyntaxKind) As Integer" />
      <MemberSignature Language="F#" Value="static member IndexOf : Microsoft.CodeAnalysis.SyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; int (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)" Usage="Microsoft.CodeAnalysis.CSharpExtensions.IndexOf (list, kind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TNode&gt;&#xA; where TNode : Microsoft::CodeAnalysis::SyntaxNode[System::Runtime::CompilerServices::Extension]&#xA; static int IndexOf(Microsoft::CodeAnalysis::SyntaxList&lt;TNode&gt; list, Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;" RefType="this" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="list">Node list.</param>
        <param name="kind">The <see cref="T:Microsoft.CodeAnalysis.CSharp.SyntaxKind" /> to find.</param>
        <summary>
            Returns the index of the first node of a specified kind in the node list.
            </summary>
        <returns>Returns non-negative index if the list contains a node which matches <paramref name="kind" />, -1 otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKind">
      <MemberSignature Language="C#" Value="public static bool IsKind (this Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKind(class Microsoft.CodeAnalysis.SyntaxNode node, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsKind (node As SyntaxNode, kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsKind : Microsoft.CodeAnalysis.SyntaxNode * Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharpExtensions.IsKind (node, kind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsKind(Microsoft::CodeAnalysis::SyntaxNode ^ node, Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsKind(Microsoft::CodeAnalysis::SyntaxNode ^ node, Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" RefType="this" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKind">
      <MemberSignature Language="C#" Value="public static bool IsKind (this Microsoft.CodeAnalysis.SyntaxNodeOrToken nodeOrToken, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKind(valuetype Microsoft.CodeAnalysis.SyntaxNodeOrToken nodeOrToken, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxNodeOrToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsKind (nodeOrToken As SyntaxNodeOrToken, kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsKind : Microsoft.CodeAnalysis.SyntaxNodeOrToken * Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharpExtensions.IsKind (nodeOrToken, kind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsKind(Microsoft::CodeAnalysis::SyntaxNodeOrToken nodeOrToken, Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeOrToken" Type="Microsoft.CodeAnalysis.SyntaxNodeOrToken" RefType="this" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="nodeOrToken">To be added.</param>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKind">
      <MemberSignature Language="C#" Value="public static bool IsKind (this Microsoft.CodeAnalysis.SyntaxToken token, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKind(valuetype Microsoft.CodeAnalysis.SyntaxToken token, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsKind (token As SyntaxToken, kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsKind : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharpExtensions.IsKind (token, kind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsKind(Microsoft::CodeAnalysis::SyntaxToken token, Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" RefType="this" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKind">
      <MemberSignature Language="C#" Value="public static bool IsKind (this Microsoft.CodeAnalysis.SyntaxTrivia trivia, Microsoft.CodeAnalysis.CSharp.SyntaxKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKind(valuetype Microsoft.CodeAnalysis.SyntaxTrivia trivia, valuetype Microsoft.CodeAnalysis.CSharp.SyntaxKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharpExtensions.IsKind(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsKind (trivia As SyntaxTrivia, kind As SyntaxKind) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsKind : Microsoft.CodeAnalysis.SyntaxTrivia * Microsoft.CodeAnalysis.CSharp.SyntaxKind -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharpExtensions.IsKind (trivia, kind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsKind(Microsoft::CodeAnalysis::SyntaxTrivia trivia, Microsoft::CodeAnalysis::CSharp::SyntaxKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trivia" Type="Microsoft.CodeAnalysis.SyntaxTrivia" RefType="this" />
        <Parameter Name="kind" Type="Microsoft.CodeAnalysis.CSharp.SyntaxKind" />
      </Parameters>
      <Docs>
        <param name="trivia">To be added.</param>
        <param name="kind">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>