<Type Name="CompilationAnalysisContext" FullName="Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext">
  <TypeSignature Language="C#" Value="public struct CompilationAnalysisContext" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit CompilationAnalysisContext extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext" />
  <TypeSignature Language="VB.NET" Value="Public Structure CompilationAnalysisContext" />
  <TypeSignature Language="F#" Value="type CompilationAnalysisContext = struct" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Context for a compilation action or compilation end action.
            A compilation action or compilation end action can use a <see cref="T:Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext" /> to report <see cref="T:Microsoft.CodeAnalysis.Diagnostic" />s about a <see cref="T:Microsoft.CodeAnalysis.Compilation" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilationAnalysisContext (Microsoft.CodeAnalysis.Compilation compilation, Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, Action&lt;Microsoft.CodeAnalysis.Diagnostic&gt; reportDiagnostic, Func&lt;Microsoft.CodeAnalysis.Diagnostic,bool&gt; isSupportedDiagnostic, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.CodeAnalysis.Compilation compilation, class Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions options, class System.Action`1&lt;class Microsoft.CodeAnalysis.Diagnostic&gt; reportDiagnostic, class System.Func`2&lt;class Microsoft.CodeAnalysis.Diagnostic, bool&gt; isSupportedDiagnostic, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.#ctor(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Action{Microsoft.CodeAnalysis.Diagnostic},System.Func{Microsoft.CodeAnalysis.Diagnostic,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="new Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext : Microsoft.CodeAnalysis.Compilation * Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions * Action&lt;Microsoft.CodeAnalysis.Diagnostic&gt; * Func&lt;Microsoft.CodeAnalysis.Diagnostic, bool&gt; * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext" Usage="new Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext (compilation, options, reportDiagnostic, isSupportedDiagnostic, cancellationToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="compilation" Type="Microsoft.CodeAnalysis.Compilation" />
        <Parameter Name="options" Type="Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions" />
        <Parameter Name="reportDiagnostic" Type="System.Action&lt;Microsoft.CodeAnalysis.Diagnostic&gt;" />
        <Parameter Name="isSupportedDiagnostic" Type="System.Func&lt;Microsoft.CodeAnalysis.Diagnostic,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="compilation">To be added.</param>
        <param name="options">To be added.</param>
        <param name="reportDiagnostic">To be added.</param>
        <param name="isSupportedDiagnostic">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancellationToken">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken CancellationToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken CancellationToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.CancellationToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CancellationToken As CancellationToken" />
      <MemberSignature Language="F#" Value="member this.CancellationToken : System.Threading.CancellationToken" Usage="Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.CancellationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Token to check for requested cancellation of the analysis.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compilation">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Compilation Compilation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.Compilation Compilation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.Compilation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Compilation As Compilation" />
      <MemberSignature Language="F#" Value="member this.Compilation : Microsoft.CodeAnalysis.Compilation" Usage="Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.Compilation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Compilation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:Microsoft.CodeAnalysis.Compilation" /> that is the subject of the analysis.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions Options" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As AnalyzerOptions" />
      <MemberSignature Language="F#" Value="member this.Options : Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions" Usage="Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Options specified for the analysis.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportDiagnostic">
      <MemberSignature Language="C#" Value="public void ReportDiagnostic (Microsoft.CodeAnalysis.Diagnostic diagnostic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportDiagnostic(class Microsoft.CodeAnalysis.Diagnostic diagnostic) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)" />
      <MemberSignature Language="F#" Value="member this.ReportDiagnostic : Microsoft.CodeAnalysis.Diagnostic -&gt; unit" Usage="compilationAnalysisContext.ReportDiagnostic diagnostic" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="diagnostic" Type="Microsoft.CodeAnalysis.Diagnostic" />
      </Parameters>
      <Docs>
        <param name="diagnostic">
          <see cref="T:Microsoft.CodeAnalysis.Diagnostic" /> to be reported.</param>
        <summary>
            Report a <see cref="T:Microsoft.CodeAnalysis.Diagnostic" /> about a <see cref="T:Microsoft.CodeAnalysis.Compilation" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public bool TryGetValue&lt;TValue&gt; (Microsoft.CodeAnalysis.SyntaxTree tree, Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeValueProvider&lt;TValue&gt; valueProvider, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue&lt;TValue&gt;(class Microsoft.CodeAnalysis.SyntaxTree tree, class Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeValueProvider`1&lt;!!TValue&gt; valueProvider, [out] !!TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.TryGetValue``1(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeValueProvider{``0},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue(Of TValue) (tree As SyntaxTree, valueProvider As SyntaxTreeValueProvider(Of TValue), ByRef value As TValue) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : Microsoft.CodeAnalysis.SyntaxTree * Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeValueProvider&lt;'Value&gt; *  -&gt; bool" Usage="compilationAnalysisContext.TryGetValue (tree, valueProvider, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tree" Type="Microsoft.CodeAnalysis.SyntaxTree" />
        <Parameter Name="valueProvider" Type="Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeValueProvider&lt;TValue&gt;" />
        <Parameter Name="value" Type="TValue&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">The type of the value associated with the key.</typeparam>
        <param name="tree">
          <see cref="T:Microsoft.CodeAnalysis.SyntaxTree" /> for which the value is queried.</param>
        <param name="valueProvider">Provider that computes the underlying value.</param>
        <param name="value">Value associated with the key.</param>
        <summary>
            Attempts to compute or get the cached value provided by the given <paramref name="valueProvider" /> for the given <paramref name="tree" />.
            Note that the pair {<paramref name="valueProvider" />, <paramref name="tree" />} acts as the key.
            Reusing the same <paramref name="valueProvider" /> instance across analyzer actions and/or analyzer instances can improve the overall analyzer performance by avoiding recomputation of the values.
            </summary>
        <returns>Returns true on success, false otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public bool TryGetValue&lt;TValue&gt; (Microsoft.CodeAnalysis.Text.SourceText text, Microsoft.CodeAnalysis.Diagnostics.SourceTextValueProvider&lt;TValue&gt; valueProvider, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue&lt;TValue&gt;(class Microsoft.CodeAnalysis.Text.SourceText text, class Microsoft.CodeAnalysis.Diagnostics.SourceTextValueProvider`1&lt;!!TValue&gt; valueProvider, [out] !!TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Diagnostics.CompilationAnalysisContext.TryGetValue``1(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Diagnostics.SourceTextValueProvider{``0},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue(Of TValue) (text As SourceText, valueProvider As SourceTextValueProvider(Of TValue), ByRef value As TValue) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : Microsoft.CodeAnalysis.Text.SourceText * Microsoft.CodeAnalysis.Diagnostics.SourceTextValueProvider&lt;'Value&gt; *  -&gt; bool" Usage="compilationAnalysisContext.TryGetValue (text, valueProvider, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="text" Type="Microsoft.CodeAnalysis.Text.SourceText" />
        <Parameter Name="valueProvider" Type="Microsoft.CodeAnalysis.Diagnostics.SourceTextValueProvider&lt;TValue&gt;" />
        <Parameter Name="value" Type="TValue&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">The type of the value associated with the key.</typeparam>
        <param name="text">
          <see cref="T:Microsoft.CodeAnalysis.Text.SourceText" /> for which the value is queried.</param>
        <param name="valueProvider">Provider that computes the underlying value.</param>
        <param name="value">Value associated with the key.</param>
        <summary>
            Attempts to compute or get the cached value provided by the given <paramref name="valueProvider" /> for the given <paramref name="text" />.
            Note that the pair {<paramref name="valueProvider" />, <paramref name="text" />} acts as the key.
            Reusing the same <paramref name="valueProvider" /> instance across analyzer actions and/or analyzer instances can improve the overall analyzer performance by avoiding recomputation of the values.
            </summary>
        <returns>Returns true on success, false otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>