<Type Name="Conversion" FullName="Microsoft.CodeAnalysis.CSharp.Conversion">
  <TypeSignature Language="C#" Value="public struct Conversion : IEquatable&lt;Microsoft.CodeAnalysis.CSharp.Conversion&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Conversion extends System.ValueType implements class System.IEquatable`1&lt;valuetype Microsoft.CodeAnalysis.CSharp.Conversion&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CSharp.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Structure Conversion&#xA;Implements IEquatable(Of Conversion)" />
  <TypeSignature Language="F#" Value="type Conversion = struct" />
  <TypeSignature Language="C++ CLI" Value="public value class Conversion : IEquatable&lt;Microsoft::CodeAnalysis::CSharp::Conversion&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Microsoft.CodeAnalysis.CSharp.Conversion&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Summarizes whether a conversion is allowed, and if so, which kind of conversion (and in some cases, the
            associated symbol).
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Microsoft.CodeAnalysis.CSharp.Conversion other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype Microsoft.CodeAnalysis.CSharp.Conversion other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Conversion.Equals(Microsoft.CodeAnalysis.CSharp.Conversion)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Conversion) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : Microsoft.CodeAnalysis.CSharp.Conversion -&gt; bool" Usage="conversion.Equals other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Microsoft::CodeAnalysis::CSharp::Conversion other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.CodeAnalysis.CSharp.Conversion" />
      </Parameters>
      <Docs>
        <param name="other">The <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> object to compare with the current <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> object.</param>
        <summary>
            Determines whether the specified <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> object is equal to the current <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> object.
            </summary>
        <returns>true if the specified <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> object is equal to the current <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> object; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Conversion.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="conversion.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override bool Equals(Platform::Object ^ obj);" />
      <MemberSignature Language="C++ WINRT" Value=" override bool Equals(winrt::Windows::Foundation::IInspectable const &amp; obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> object to compare with the current <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> object.</param>
        <summary>
            Determines whether the specified <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> object is equal to the current <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> object.
            </summary>
        <returns>true if the specified <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> object is equal to the current <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> object; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public bool Exists { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Exists" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.Exists" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exists As Boolean" />
      <MemberSignature Language="F#" Value="member this.Exists : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.Exists" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Exists { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool Exists { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion exists, either as an implicit or explicit conversion.
            </summary>
        <value>To be added.</value>
        <remarks>
            The existence of a conversion does not necessarily imply that the conversion is valid.
            For example, an ambiguous user-defined conversion may exist but may not be valid.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Conversion.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="conversion.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="C++ WINRT" Value=" override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a hash code for the current <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> object.
            </summary>
        <returns>A hash code for the current <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAnonymousFunction">
      <MemberSignature Language="C#" Value="public bool IsAnonymousFunction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnonymousFunction" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsAnonymousFunction" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnonymousFunction As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsAnonymousFunction : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsAnonymousFunction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnonymousFunction { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsAnonymousFunction { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is an implicit anonymous function conversion.
            </summary>
        <value>To be added.</value>
        <remarks>
            Implicit anonymous function conversions are described in section 6.5 of the C# language specification.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBoxing">
      <MemberSignature Language="C#" Value="public bool IsBoxing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBoxing" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsBoxing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBoxing As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsBoxing : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsBoxing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBoxing { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsBoxing { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is an implicit boxing conversion.
            </summary>
        <value>To be added.</value>
        <remarks>
            Implicit boxing conversions are described in section 6.1.7 of the C# language specification.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstantExpression">
      <MemberSignature Language="C#" Value="public bool IsConstantExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstantExpression" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsConstantExpression" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsConstantExpression As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsConstantExpression : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsConstantExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsConstantExpression { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsConstantExpression { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is an implicit constant expression conversion.
            </summary>
        <value>To be added.</value>
        <remarks>
            Implicit constant expression conversions are described in section 6.1.9 of the C# language specification.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDynamic">
      <MemberSignature Language="C#" Value="public bool IsDynamic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDynamic" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsDynamic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDynamic As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsDynamic : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsDynamic" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDynamic { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsDynamic { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is an implicit dynamic conversion. 
            </summary>
        <value>To be added.</value>
        <remarks>
            Implicit dynamic conversions are described in section 6.1.8 of the C# language specification.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnumeration">
      <MemberSignature Language="C#" Value="public bool IsEnumeration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnumeration" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsEnumeration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEnumeration As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsEnumeration : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsEnumeration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnumeration { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsEnumeration { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is an implicit enumeration conversion or explicit enumeration conversion.
            </summary>
        <value>To be added.</value>
        <remarks>
            Implicit and explicit enumeration conversions are described in sections 6.1.3 and 6.2.2 of the C# language specification.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExplicit">
      <MemberSignature Language="C#" Value="public bool IsExplicit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExplicit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsExplicit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExplicit As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsExplicit : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsExplicit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExplicit { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsExplicit { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is explicit.
            </summary>
        <value>To be added.</value>
        <remarks>
            Explicit conversions are described in section 6.2 of the C# language specification.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdentity">
      <MemberSignature Language="C#" Value="public bool IsIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIdentity" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsIdentity" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIdentity As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsIdentity : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIdentity { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsIdentity { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is an identity conversion.
            </summary>
        <value>To be added.</value>
        <remarks>
            Identity conversions are described in section 6.1.1 of the C# language specification.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImplicit">
      <MemberSignature Language="C#" Value="public bool IsImplicit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImplicit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsImplicit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsImplicit As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsImplicit : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsImplicit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsImplicit { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsImplicit { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is implicit.
            </summary>
        <value>To be added.</value>
        <remarks>
            Implicit conversions are described in section 6.1 of the C# language specification.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterpolatedString">
      <MemberSignature Language="C#" Value="public bool IsInterpolatedString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterpolatedString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsInterpolatedString" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInterpolatedString As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsInterpolatedString : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsInterpolatedString" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterpolatedString { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsInterpolatedString { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is an interpolated string conversion.
            </summary>
        <value>To be added.</value>
        <remarks>
            The interpolated string conversion described in section 6.1.N of the C# language specification.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIntPtr">
      <MemberSignature Language="C#" Value="public bool IsIntPtr { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIntPtr" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsIntPtr" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIntPtr As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsIntPtr : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsIntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIntPtr { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsIntPtr { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is a conversion to or from IntPtr or UIntPtr.
            </summary>
        <value>To be added.</value>
        <remarks>
            Returns true if the conversion is a conversion to or from IntPtr or UIntPtr.
            This includes:
              IntPtr to/from int
              IntPtr to/from long
              IntPtr to/from void*
              UIntPtr to/from int
              UIntPtr to/from long
              UIntPtr to/from void*
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMethodGroup">
      <MemberSignature Language="C#" Value="public bool IsMethodGroup { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMethodGroup" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsMethodGroup" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMethodGroup As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsMethodGroup : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsMethodGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMethodGroup { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsMethodGroup { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is an implicit method group conversion.
            </summary>
        <value>To be added.</value>
        <remarks>
            Implicit method group conversions are described in section 6.6 of the C# language specification.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNullable As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsNullable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsNullable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is an implicit nullable conversion or explicit nullable conversion.
            </summary>
        <value>To be added.</value>
        <remarks>
            Implicit and explicit nullable conversions are described in sections 6.1.4 and 6.2.3 of the C# language specification.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullLiteral">
      <MemberSignature Language="C#" Value="public bool IsNullLiteral { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullLiteral" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsNullLiteral" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNullLiteral As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNullLiteral : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsNullLiteral" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullLiteral { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsNullLiteral { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is an implicit null or default literal conversion.
            </summary>
        <value>To be added.</value>
        <remarks>
            Null or default literal conversions are described in section 6.1.5 of the C# language specification.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public bool IsNumeric { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNumeric" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsNumeric" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNumeric As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNumeric : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsNumeric" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNumeric { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsNumeric { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is an implicit numeric conversion or explicit numeric conversion. 
            </summary>
        <value>To be added.</value>
        <remarks>
            Implicit and explicit numeric conversions are described in sections 6.1.2 and 6.2.1 of the C# language specification.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPointer">
      <MemberSignature Language="C#" Value="public bool IsPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPointer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsPointer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPointer As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsPointer : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPointer { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsPointer { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is a pointer conversion 
            </summary>
        <value>To be added.</value>
        <remarks>
            Pointer conversions are described in section 18.4 of the C# language specification.
            
            Returns true if the conversion is a conversion 
             a) from a pointer type to void*, 
             b) from a pointer type to another pointer type (other than void*),
             c) from the null literal to a pointer type,
             d) from an integral numeric type to a pointer type, or
             e) from a pointer type to an integral numeric type.
            
            Does not return true for user-defined conversions to/from pointer types.
            Does not return true for conversions between pointer types and IntPtr/UIntPtr.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public bool IsReference { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReference" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsReference" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReference As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsReference : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReference { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsReference { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is an implicit reference conversion or explicit reference conversion.
            </summary>
        <value>To be added.</value>
        <remarks>
            Implicit and explicit reference conversions are described in sections 6.1.6 and 6.2.4 of the C# language specification.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStackAlloc">
      <MemberSignature Language="C#" Value="public bool IsStackAlloc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStackAlloc" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsStackAlloc" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStackAlloc As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsStackAlloc : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsStackAlloc" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStackAlloc { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsStackAlloc { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is a stackalloc conversion.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsThrow">
      <MemberSignature Language="C#" Value="public bool IsThrow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThrow" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsThrow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsThrow As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsThrow : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsThrow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThrow { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsThrow { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is an implicit throw conversion.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTupleConversion">
      <MemberSignature Language="C#" Value="public bool IsTupleConversion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTupleConversion" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsTupleConversion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTupleConversion As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsTupleConversion : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsTupleConversion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTupleConversion { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsTupleConversion { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is an implicit tuple conversion or explicit tuple conversion.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTupleLiteralConversion">
      <MemberSignature Language="C#" Value="public bool IsTupleLiteralConversion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTupleLiteralConversion" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsTupleLiteralConversion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTupleLiteralConversion As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsTupleLiteralConversion : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsTupleLiteralConversion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTupleLiteralConversion { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsTupleLiteralConversion { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is an implicit tuple literal conversion or explicit tuple literal conversion.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnboxing">
      <MemberSignature Language="C#" Value="public bool IsUnboxing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnboxing" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsUnboxing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnboxing As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsUnboxing : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsUnboxing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnboxing { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsUnboxing { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is an explicit unboxing conversion.
            </summary>
        <value>To be added.</value>
        <remarks>
            Explicit unboxing conversions as described in section 6.2.5 of the C# language specification.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUserDefined">
      <MemberSignature Language="C#" Value="public bool IsUserDefined { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUserDefined" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsUserDefined" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUserDefined As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsUserDefined : bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.IsUserDefined" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUserDefined { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsUserDefined { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the conversion is an implicit user-defined conversion or explicit user-defined conversion.
            </summary>
        <value>To be added.</value>
        <remarks>
            Implicit and explicit user-defined conversions are described in section 6.4 of the C# language specification.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodSymbol">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IMethodSymbol MethodSymbol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IMethodSymbol MethodSymbol" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Conversion.MethodSymbol" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MethodSymbol As IMethodSymbol" />
      <MemberSignature Language="F#" Value="member this.MethodSymbol : Microsoft.CodeAnalysis.IMethodSymbol" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.MethodSymbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::IMethodSymbol ^ MethodSymbol { Microsoft::CodeAnalysis::IMethodSymbol ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IMethodSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the method used to create the delegate for a method group conversion if <see cref="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsMethodGroup" /> is true 
            or the method used to perform the conversion for a user-defined conversion if <see cref="P:Microsoft.CodeAnalysis.CSharp.Conversion.IsUserDefined" /> is true.
            Otherwise, returns null.
            </summary>
        <value>To be added.</value>
        <remarks>
            Method group conversions are described in section 6.6 of the C# language specification.
            User-defined conversions are described in section 6.4 of the C# language specification.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Microsoft.CodeAnalysis.CSharp.Conversion left, Microsoft.CodeAnalysis.CSharp.Conversion right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype Microsoft.CodeAnalysis.CSharp.Conversion left, valuetype Microsoft.CodeAnalysis.CSharp.Conversion right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Conversion.op_Equality(Microsoft.CodeAnalysis.CSharp.Conversion,Microsoft.CodeAnalysis.CSharp.Conversion)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Conversion, right As Conversion) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( = ) : Microsoft.CodeAnalysis.CSharp.Conversion * Microsoft.CodeAnalysis.CSharp.Conversion -&gt; bool" Usage="left = right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Microsoft::CodeAnalysis::CSharp::Conversion left, Microsoft::CodeAnalysis::CSharp::Conversion right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.CSharp.Conversion" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.CSharp.Conversion" />
      </Parameters>
      <Docs>
        <param name="left">The first <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> object.</param>
        <param name="right">The second <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> object.</param>
        <summary>
            Returns true if the specified <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> objects are equal and false otherwise.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Microsoft.CodeAnalysis.CSharp.Conversion left, Microsoft.CodeAnalysis.CSharp.Conversion right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype Microsoft.CodeAnalysis.CSharp.Conversion left, valuetype Microsoft.CodeAnalysis.CSharp.Conversion right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Conversion.op_Inequality(Microsoft.CodeAnalysis.CSharp.Conversion,Microsoft.CodeAnalysis.CSharp.Conversion)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Conversion, right As Conversion) As Boolean" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Microsoft.CodeAnalysis.CSharp.Conversion * Microsoft.CodeAnalysis.CSharp.Conversion -&gt; bool" Usage="Microsoft.CodeAnalysis.CSharp.Conversion.op_Inequality (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Microsoft::CodeAnalysis::CSharp::Conversion left, Microsoft::CodeAnalysis::CSharp::Conversion right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.CSharp.Conversion" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.CSharp.Conversion" />
      </Parameters>
      <Docs>
        <param name="left">The first <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> object.</param>
        <param name="right">The second <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> object.</param>
        <summary>
            Returns false if the specified <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" /> objects are equal and true otherwise.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToCommonConversion">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Operations.CommonConversion ToCommonConversion ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.CodeAnalysis.Operations.CommonConversion ToCommonConversion() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Conversion.ToCommonConversion" />
      <MemberSignature Language="VB.NET" Value="Public Function ToCommonConversion () As CommonConversion" />
      <MemberSignature Language="F#" Value="abstract member ToCommonConversion : unit -&gt; Microsoft.CodeAnalysis.Operations.CommonConversion&#xA;override this.ToCommonConversion : unit -&gt; Microsoft.CodeAnalysis.Operations.CommonConversion" Usage="conversion.ToCommonConversion " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::Operations::CommonConversion ToCommonConversion();" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::Operations::CommonConversion ToCommonConversion();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.CodeAnalysis.Operations.IConvertibleConversion.ToCommonConversion</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Operations.CommonConversion</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates a <seealso cref="T:Microsoft.CodeAnalysis.Operations.CommonConversion" /> from this C# conversion.
            </summary>
        <returns>The <see cref="T:Microsoft.CodeAnalysis.Operations.CommonConversion" /> that represents this conversion.</returns>
        <remarks>
            This is a lossy conversion; it is not possible to recover the original <see cref="T:Microsoft.CodeAnalysis.CSharp.Conversion" />
            from the <see cref="T:Microsoft.CodeAnalysis.Operations.CommonConversion" /> struct.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Conversion.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="conversion.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override Platform::String ^ ToString();" />
      <MemberSignature Language="C++ WINRT" Value=" override std::wstring ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a string that represents the <see cref="P:Microsoft.CodeAnalysis.CSharp.Conversion.Kind" /> of the conversion.
            </summary>
        <returns>A string that represents the <see cref="P:Microsoft.CodeAnalysis.CSharp.Conversion.Kind" /> of the conversion.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>