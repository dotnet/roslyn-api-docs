<Type Name="ConversionKind" FullName="Microsoft.CodeAnalysis.Semantics.ConversionKind">
  <TypeSignature Language="C#" Value="public enum ConversionKind" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ConversionKind extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Semantics.ConversionKind" />
  <TypeSignature Language="VB.NET" Value="Public Enum ConversionKind" />
  <TypeSignature Language="F#" Value="type ConversionKind = " />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
            Kinds of conversions.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Basic">
      <MemberSignature Language="C#" Value="Basic" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.Semantics.ConversionKind Basic = int32(3)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.Semantics.ConversionKind.Basic" />
      <MemberSignature Language="VB.NET" Value="Basic" />
      <MemberSignature Language="F#" Value="Basic = 3" Usage="Microsoft.CodeAnalysis.Semantics.ConversionKind.Basic" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Semantics.ConversionKind</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>
            Conversion has VB-specific semantics.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Cast">
      <MemberSignature Language="C#" Value="Cast" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.Semantics.ConversionKind Cast = int32(1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.Semantics.ConversionKind.Cast" />
      <MemberSignature Language="VB.NET" Value="Cast" />
      <MemberSignature Language="F#" Value="Cast = 1" Usage="Microsoft.CodeAnalysis.Semantics.ConversionKind.Cast" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Semantics.ConversionKind</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
            Conversion is defined by the underlying type system and throws an exception if it fails.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="CSharp">
      <MemberSignature Language="C#" Value="CSharp" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.Semantics.ConversionKind CSharp = int32(4)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.Semantics.ConversionKind.CSharp" />
      <MemberSignature Language="VB.NET" Value="CSharp" />
      <MemberSignature Language="F#" Value="CSharp = 4" Usage="Microsoft.CodeAnalysis.Semantics.ConversionKind.CSharp" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Semantics.ConversionKind</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>
            Conversion has C#-specific semantics.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Invalid">
      <MemberSignature Language="C#" Value="Invalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.Semantics.ConversionKind Invalid = int32(15)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.Semantics.ConversionKind.Invalid" />
      <MemberSignature Language="VB.NET" Value="Invalid" />
      <MemberSignature Language="F#" Value="Invalid = 15" Usage="Microsoft.CodeAnalysis.Semantics.ConversionKind.Invalid" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Semantics.ConversionKind</ReturnType>
      </ReturnValue>
      <MemberValue>15</MemberValue>
      <Docs>
        <summary>
            Conversion is invalid.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.Semantics.ConversionKind None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.Semantics.ConversionKind.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="Microsoft.CodeAnalysis.Semantics.ConversionKind.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Semantics.ConversionKind</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="OperatorMethod">
      <MemberSignature Language="C#" Value="OperatorMethod" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.Semantics.ConversionKind OperatorMethod = int32(5)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.Semantics.ConversionKind.OperatorMethod" />
      <MemberSignature Language="VB.NET" Value="OperatorMethod" />
      <MemberSignature Language="F#" Value="OperatorMethod = 5" Usage="Microsoft.CodeAnalysis.Semantics.ConversionKind.OperatorMethod" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Semantics.ConversionKind</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>
            Conversion is implemented by a conversion operator method.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="TryCast">
      <MemberSignature Language="C#" Value="TryCast" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.Semantics.ConversionKind TryCast = int32(2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.Semantics.ConversionKind.TryCast" />
      <MemberSignature Language="VB.NET" Value="TryCast" />
      <MemberSignature Language="F#" Value="TryCast = 2" Usage="Microsoft.CodeAnalysis.Semantics.ConversionKind.TryCast" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Semantics.ConversionKind</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
            Conversion is defined by the underlying type system and produces a null result if it fails.
            </summary>
      </Docs>
    </Member>
  </Members>
</Type>