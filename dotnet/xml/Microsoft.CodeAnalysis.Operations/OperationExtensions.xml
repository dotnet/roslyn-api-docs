<Type Name="OperationExtensions" FullName="Microsoft.CodeAnalysis.Operations.OperationExtensions">
  <TypeSignature Language="C#" Value="public static class OperationExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit OperationExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Operations.OperationExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module OperationExtensions" />
  <TypeSignature Language="F#" Value="type OperationExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class OperationExtensions abstract sealed" />
  <TypeSignature Language="C++ CX" Value="public ref class OperationExtensions abstract sealed" />
  <TypeSignature Language="C++ WINRT" Value="class OperationExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Descendants">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt; Descendants (this Microsoft.CodeAnalysis.IOperation operation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.IOperation&gt; Descendants(class Microsoft.CodeAnalysis.IOperation operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Operations.OperationExtensions.Descendants(Microsoft.CodeAnalysis.IOperation)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Descendants (operation As IOperation) As IEnumerable(Of IOperation)" />
      <MemberSignature Language="F#" Value="static member Descendants : Microsoft.CodeAnalysis.IOperation -&gt; seq&lt;Microsoft.CodeAnalysis.IOperation&gt;" Usage="Microsoft.CodeAnalysis.Operations.OperationExtensions.Descendants operation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::IOperation ^&gt; ^ Descendants(Microsoft::CodeAnalysis::IOperation ^ operation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operation" Type="Microsoft.CodeAnalysis.IOperation" RefType="this" />
      </Parameters>
      <Docs>
        <param name="operation">Operation whose descendants are to be fetched.</param>
        <summary>
            Returns all the descendant operations of the given <paramref name="operation" /> in evaluation order.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DescendantsAndSelf">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt; DescendantsAndSelf (this Microsoft.CodeAnalysis.IOperation operation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.CodeAnalysis.IOperation&gt; DescendantsAndSelf(class Microsoft.CodeAnalysis.IOperation operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Operations.OperationExtensions.DescendantsAndSelf(Microsoft.CodeAnalysis.IOperation)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DescendantsAndSelf (operation As IOperation) As IEnumerable(Of IOperation)" />
      <MemberSignature Language="F#" Value="static member DescendantsAndSelf : Microsoft.CodeAnalysis.IOperation -&gt; seq&lt;Microsoft.CodeAnalysis.IOperation&gt;" Usage="Microsoft.CodeAnalysis.Operations.OperationExtensions.DescendantsAndSelf operation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::IOperation ^&gt; ^ DescendantsAndSelf(Microsoft::CodeAnalysis::IOperation ^ operation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.IOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operation" Type="Microsoft.CodeAnalysis.IOperation" RefType="this" />
      </Parameters>
      <Docs>
        <param name="operation">Operation whose descendants are to be fetched.</param>
        <summary>
            Returns all the descendant operations of the given <paramref name="operation" /> including the given <paramref name="operation" /> in evaluation order.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgumentName">
      <MemberSignature Language="C#" Value="public static string GetArgumentName (this Microsoft.CodeAnalysis.Operations.IDynamicIndexerAccessOperation dynamicOperation, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetArgumentName(class Microsoft.CodeAnalysis.Operations.IDynamicIndexerAccessOperation dynamicOperation, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Operations.OperationExtensions.GetArgumentName(Microsoft.CodeAnalysis.Operations.IDynamicIndexerAccessOperation,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetArgumentName (dynamicOperation As IDynamicIndexerAccessOperation, index As Integer) As String" />
      <MemberSignature Language="F#" Value="static member GetArgumentName : Microsoft.CodeAnalysis.Operations.IDynamicIndexerAccessOperation * int -&gt; string" Usage="Microsoft.CodeAnalysis.Operations.OperationExtensions.GetArgumentName (dynamicOperation, index)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ GetArgumentName(Microsoft::CodeAnalysis::Operations::IDynamicIndexerAccessOperation ^ dynamicOperation, int index);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::String ^ GetArgumentName(Microsoft::CodeAnalysis::Operations::IDynamicIndexerAccessOperation ^ dynamicOperation, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dynamicOperation" Type="Microsoft.CodeAnalysis.Operations.IDynamicIndexerAccessOperation" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dynamicOperation">Dynamic or late bound operation.</param>
        <param name="index">Argument index.</param>
        <summary>
            Get an optional argument name for a named argument to the given <paramref name="dynamicOperation" /> at the given <paramref name="index" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgumentName">
      <MemberSignature Language="C#" Value="public static string GetArgumentName (this Microsoft.CodeAnalysis.Operations.IDynamicInvocationOperation dynamicOperation, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetArgumentName(class Microsoft.CodeAnalysis.Operations.IDynamicInvocationOperation dynamicOperation, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Operations.OperationExtensions.GetArgumentName(Microsoft.CodeAnalysis.Operations.IDynamicInvocationOperation,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetArgumentName (dynamicOperation As IDynamicInvocationOperation, index As Integer) As String" />
      <MemberSignature Language="F#" Value="static member GetArgumentName : Microsoft.CodeAnalysis.Operations.IDynamicInvocationOperation * int -&gt; string" Usage="Microsoft.CodeAnalysis.Operations.OperationExtensions.GetArgumentName (dynamicOperation, index)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ GetArgumentName(Microsoft::CodeAnalysis::Operations::IDynamicInvocationOperation ^ dynamicOperation, int index);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::String ^ GetArgumentName(Microsoft::CodeAnalysis::Operations::IDynamicInvocationOperation ^ dynamicOperation, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dynamicOperation" Type="Microsoft.CodeAnalysis.Operations.IDynamicInvocationOperation" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dynamicOperation">Dynamic or late bound operation.</param>
        <param name="index">Argument index.</param>
        <summary>
            Get an optional argument name for a named argument to the given <paramref name="dynamicOperation" /> at the given <paramref name="index" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgumentName">
      <MemberSignature Language="C#" Value="public static string GetArgumentName (this Microsoft.CodeAnalysis.Operations.IDynamicObjectCreationOperation dynamicOperation, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetArgumentName(class Microsoft.CodeAnalysis.Operations.IDynamicObjectCreationOperation dynamicOperation, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Operations.OperationExtensions.GetArgumentName(Microsoft.CodeAnalysis.Operations.IDynamicObjectCreationOperation,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetArgumentName (dynamicOperation As IDynamicObjectCreationOperation, index As Integer) As String" />
      <MemberSignature Language="F#" Value="static member GetArgumentName : Microsoft.CodeAnalysis.Operations.IDynamicObjectCreationOperation * int -&gt; string" Usage="Microsoft.CodeAnalysis.Operations.OperationExtensions.GetArgumentName (dynamicOperation, index)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ GetArgumentName(Microsoft::CodeAnalysis::Operations::IDynamicObjectCreationOperation ^ dynamicOperation, int index);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::String ^ GetArgumentName(Microsoft::CodeAnalysis::Operations::IDynamicObjectCreationOperation ^ dynamicOperation, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dynamicOperation" Type="Microsoft.CodeAnalysis.Operations.IDynamicObjectCreationOperation" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dynamicOperation">Dynamic or late bound operation.</param>
        <param name="index">Argument index.</param>
        <summary>
            Get an optional argument name for a named argument to the given <paramref name="dynamicOperation" /> at the given <paramref name="index" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgumentRefKind">
      <MemberSignature Language="C#" Value="public static Nullable&lt;Microsoft.CodeAnalysis.RefKind&gt; GetArgumentRefKind (this Microsoft.CodeAnalysis.Operations.IDynamicIndexerAccessOperation dynamicOperation, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.CodeAnalysis.RefKind&gt; GetArgumentRefKind(class Microsoft.CodeAnalysis.Operations.IDynamicIndexerAccessOperation dynamicOperation, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Operations.OperationExtensions.GetArgumentRefKind(Microsoft.CodeAnalysis.Operations.IDynamicIndexerAccessOperation,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetArgumentRefKind (dynamicOperation As IDynamicIndexerAccessOperation, index As Integer) As Nullable(Of RefKind)" />
      <MemberSignature Language="F#" Value="static member GetArgumentRefKind : Microsoft.CodeAnalysis.Operations.IDynamicIndexerAccessOperation * int -&gt; Nullable&lt;Microsoft.CodeAnalysis.RefKind&gt;" Usage="Microsoft.CodeAnalysis.Operations.OperationExtensions.GetArgumentRefKind (dynamicOperation, index)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;Microsoft::CodeAnalysis::RefKind&gt; GetArgumentRefKind(Microsoft::CodeAnalysis::Operations::IDynamicIndexerAccessOperation ^ dynamicOperation, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.CodeAnalysis.RefKind&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dynamicOperation" Type="Microsoft.CodeAnalysis.Operations.IDynamicIndexerAccessOperation" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dynamicOperation">Dynamic or late bound operation.</param>
        <param name="index">Argument index.</param>
        <summary>
            Get an optional argument <see cref="T:Microsoft.CodeAnalysis.RefKind" /> for an argument at the given <paramref name="index" /> to the given <paramref name="dynamicOperation" />.
            Returns a non-null argument <see cref="T:Microsoft.CodeAnalysis.RefKind" /> for C#.
            Always returns null for VB as <see cref="T:Microsoft.CodeAnalysis.RefKind" /> cannot be specified for an the argument in VB.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgumentRefKind">
      <MemberSignature Language="C#" Value="public static Nullable&lt;Microsoft.CodeAnalysis.RefKind&gt; GetArgumentRefKind (this Microsoft.CodeAnalysis.Operations.IDynamicInvocationOperation dynamicOperation, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.CodeAnalysis.RefKind&gt; GetArgumentRefKind(class Microsoft.CodeAnalysis.Operations.IDynamicInvocationOperation dynamicOperation, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Operations.OperationExtensions.GetArgumentRefKind(Microsoft.CodeAnalysis.Operations.IDynamicInvocationOperation,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetArgumentRefKind (dynamicOperation As IDynamicInvocationOperation, index As Integer) As Nullable(Of RefKind)" />
      <MemberSignature Language="F#" Value="static member GetArgumentRefKind : Microsoft.CodeAnalysis.Operations.IDynamicInvocationOperation * int -&gt; Nullable&lt;Microsoft.CodeAnalysis.RefKind&gt;" Usage="Microsoft.CodeAnalysis.Operations.OperationExtensions.GetArgumentRefKind (dynamicOperation, index)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;Microsoft::CodeAnalysis::RefKind&gt; GetArgumentRefKind(Microsoft::CodeAnalysis::Operations::IDynamicInvocationOperation ^ dynamicOperation, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.CodeAnalysis.RefKind&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dynamicOperation" Type="Microsoft.CodeAnalysis.Operations.IDynamicInvocationOperation" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dynamicOperation">Dynamic or late bound operation.</param>
        <param name="index">Argument index.</param>
        <summary>
            Get an optional argument <see cref="T:Microsoft.CodeAnalysis.RefKind" /> for an argument at the given <paramref name="index" /> to the given <paramref name="dynamicOperation" />.
            Returns a non-null argument <see cref="T:Microsoft.CodeAnalysis.RefKind" /> for C#.
            Always returns null for VB as <see cref="T:Microsoft.CodeAnalysis.RefKind" /> cannot be specified for an the argument in VB.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgumentRefKind">
      <MemberSignature Language="C#" Value="public static Nullable&lt;Microsoft.CodeAnalysis.RefKind&gt; GetArgumentRefKind (this Microsoft.CodeAnalysis.Operations.IDynamicObjectCreationOperation dynamicOperation, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype Microsoft.CodeAnalysis.RefKind&gt; GetArgumentRefKind(class Microsoft.CodeAnalysis.Operations.IDynamicObjectCreationOperation dynamicOperation, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Operations.OperationExtensions.GetArgumentRefKind(Microsoft.CodeAnalysis.Operations.IDynamicObjectCreationOperation,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetArgumentRefKind (dynamicOperation As IDynamicObjectCreationOperation, index As Integer) As Nullable(Of RefKind)" />
      <MemberSignature Language="F#" Value="static member GetArgumentRefKind : Microsoft.CodeAnalysis.Operations.IDynamicObjectCreationOperation * int -&gt; Nullable&lt;Microsoft.CodeAnalysis.RefKind&gt;" Usage="Microsoft.CodeAnalysis.Operations.OperationExtensions.GetArgumentRefKind (dynamicOperation, index)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;Microsoft::CodeAnalysis::RefKind&gt; GetArgumentRefKind(Microsoft::CodeAnalysis::Operations::IDynamicObjectCreationOperation ^ dynamicOperation, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.CodeAnalysis.RefKind&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dynamicOperation" Type="Microsoft.CodeAnalysis.Operations.IDynamicObjectCreationOperation" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dynamicOperation">Dynamic or late bound operation.</param>
        <param name="index">Argument index.</param>
        <summary>
            Get an optional argument <see cref="T:Microsoft.CodeAnalysis.RefKind" /> for an argument at the given <paramref name="index" /> to the given <paramref name="dynamicOperation" />.
            Returns a non-null argument <see cref="T:Microsoft.CodeAnalysis.RefKind" /> for C#.
            Always returns null for VB as <see cref="T:Microsoft.CodeAnalysis.RefKind" /> cannot be specified for an the argument in VB.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredVariables">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ILocalSymbol&gt; GetDeclaredVariables (this Microsoft.CodeAnalysis.Operations.IVariableDeclarationGroupOperation declarationGroup);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.ILocalSymbol&gt; GetDeclaredVariables(class Microsoft.CodeAnalysis.Operations.IVariableDeclarationGroupOperation declarationGroup) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Operations.OperationExtensions.GetDeclaredVariables(Microsoft.CodeAnalysis.Operations.IVariableDeclarationGroupOperation)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredVariables (declarationGroup As IVariableDeclarationGroupOperation) As ImmutableArray(Of ILocalSymbol)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredVariables : Microsoft.CodeAnalysis.Operations.IVariableDeclarationGroupOperation -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ILocalSymbol&gt;" Usage="Microsoft.CodeAnalysis.Operations.OperationExtensions.GetDeclaredVariables declarationGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::ILocalSymbol ^&gt; GetDeclaredVariables(Microsoft::CodeAnalysis::Operations::IVariableDeclarationGroupOperation ^ declarationGroup);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ILocalSymbol&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declarationGroup" Type="Microsoft.CodeAnalysis.Operations.IVariableDeclarationGroupOperation" RefType="this" />
      </Parameters>
      <Docs>
        <param name="declarationGroup">Variable declaration group</param>
        <summary>
            Gets all the declared local variables in the given <paramref name="declarationGroup" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredVariables">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ILocalSymbol&gt; GetDeclaredVariables (this Microsoft.CodeAnalysis.Operations.IVariableDeclarationOperation declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.ILocalSymbol&gt; GetDeclaredVariables(class Microsoft.CodeAnalysis.Operations.IVariableDeclarationOperation declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Operations.OperationExtensions.GetDeclaredVariables(Microsoft.CodeAnalysis.Operations.IVariableDeclarationOperation)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDeclaredVariables (declaration As IVariableDeclarationOperation) As ImmutableArray(Of ILocalSymbol)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredVariables : Microsoft.CodeAnalysis.Operations.IVariableDeclarationOperation -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ILocalSymbol&gt;" Usage="Microsoft.CodeAnalysis.Operations.OperationExtensions.GetDeclaredVariables declaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::ILocalSymbol ^&gt; GetDeclaredVariables(Microsoft::CodeAnalysis::Operations::IVariableDeclarationOperation ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ILocalSymbol&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declaration" Type="Microsoft.CodeAnalysis.Operations.IVariableDeclarationOperation" RefType="this" />
      </Parameters>
      <Docs>
        <param name="declaration">Variable declaration</param>
        <summary>
            Gets all the declared local variables in the given <paramref name="declaration" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVariableInitializer">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Operations.IVariableInitializerOperation GetVariableInitializer (this Microsoft.CodeAnalysis.Operations.IVariableDeclaratorOperation declarationOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Operations.IVariableInitializerOperation GetVariableInitializer(class Microsoft.CodeAnalysis.Operations.IVariableDeclaratorOperation declarationOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Operations.OperationExtensions.GetVariableInitializer(Microsoft.CodeAnalysis.Operations.IVariableDeclaratorOperation)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetVariableInitializer (declarationOperation As IVariableDeclaratorOperation) As IVariableInitializerOperation" />
      <MemberSignature Language="F#" Value="static member GetVariableInitializer : Microsoft.CodeAnalysis.Operations.IVariableDeclaratorOperation -&gt; Microsoft.CodeAnalysis.Operations.IVariableInitializerOperation" Usage="Microsoft.CodeAnalysis.Operations.OperationExtensions.GetVariableInitializer declarationOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::Operations::IVariableInitializerOperation ^ GetVariableInitializer(Microsoft::CodeAnalysis::Operations::IVariableDeclaratorOperation ^ declarationOperation);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::Operations::IVariableInitializerOperation ^ GetVariableInitializer(Microsoft::CodeAnalysis::Operations::IVariableDeclaratorOperation ^ declarationOperation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Operations.IVariableInitializerOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="declarationOperation" Type="Microsoft.CodeAnalysis.Operations.IVariableDeclaratorOperation" RefType="this" />
      </Parameters>
      <Docs>
        <param name="declarationOperation">Single variable declaration to retrieve initializer for.</param>
        <summary>
            Gets the variable initialzer for the given <paramref name="declarationOperation" />, checking to see if there is a parent initializer
            if the single variable initializer is null.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>