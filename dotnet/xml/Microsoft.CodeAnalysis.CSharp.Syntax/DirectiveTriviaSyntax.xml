<Type Name="DirectiveTriviaSyntax" FullName="Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax">
  <TypeSignature Language="C#" Value="public abstract class DirectiveTriviaSyntax : Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DirectiveTriviaSyntax extends Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DirectiveTriviaSyntax&#xA;Inherits StructuredTriviaSyntax" />
  <TypeSignature Language="F#" Value="type DirectiveTriviaSyntax = class&#xA;    inherit StructuredTriviaSyntax" />
  <TypeSignature Language="C++ CLI" Value="public ref class DirectiveTriviaSyntax abstract : Microsoft::CodeAnalysis::CSharp::Syntax::StructuredTriviaSyntax" />
  <TypeSignature Language="C++ CX" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;public ref class DirectiveTriviaSyntax abstract : Microsoft::CodeAnalysis::CSharp::Syntax::StructuredTriviaSyntax" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class DirectiveTriviaSyntax abstract : Microsoft::CodeAnalysis::CSharp::Syntax::StructuredTriviaSyntax" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DirectiveNameToken">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxToken DirectiveNameToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken DirectiveNameToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.DirectiveNameToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DirectiveNameToken As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.DirectiveNameToken : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.DirectiveNameToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxToken DirectiveNameToken { Microsoft::CodeAnalysis::SyntaxToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOfDirectiveToken">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxToken EndOfDirectiveToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken EndOfDirectiveToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.EndOfDirectiveToken" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property EndOfDirectiveToken As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.EndOfDirectiveToken : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.EndOfDirectiveToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Microsoft::CodeAnalysis::SyntaxToken EndOfDirectiveToken { Microsoft::CodeAnalysis::SyntaxToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextDirective">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax GetNextDirective (Func&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,bool&gt; predicate = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax GetNextDirective(class System.Func`2&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.GetNextDirective(System.Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextDirective (Optional predicate As Func(Of DirectiveTriviaSyntax, Boolean) = null) As DirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="member this.GetNextDirective : Func&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax, bool&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax" Usage="directiveTriviaSyntax.GetNextDirective predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreviousDirective">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax GetPreviousDirective (Func&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,bool&gt; predicate = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax GetPreviousDirective(class System.Func`2&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.GetPreviousDirective(System.Func{Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPreviousDirective (Optional predicate As Func(Of DirectiveTriviaSyntax, Boolean) = null) As DirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="member this.GetPreviousDirective : Func&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax, bool&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax" Usage="directiveTriviaSyntax.GetPreviousDirective predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRelatedDirectives">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax&gt; GetRelatedDirectives ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax&gt; GetRelatedDirectives() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.GetRelatedDirectives" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelatedDirectives () As List(Of DirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="member this.GetRelatedDirectives : unit -&gt; System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax&gt;" Usage="directiveTriviaSyntax.GetRelatedDirectives " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;Microsoft::CodeAnalysis::CSharp::Syntax::DirectiveTriviaSyntax ^&gt; ^ GetRelatedDirectives();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashToken">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxToken HashToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken HashToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.HashToken" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property HashToken As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.HashToken : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.HashToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Microsoft::CodeAnalysis::SyntaxToken HashToken { Microsoft::CodeAnalysis::SyntaxToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public abstract bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax.IsActive" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsActive { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; abstract property bool IsActive { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>