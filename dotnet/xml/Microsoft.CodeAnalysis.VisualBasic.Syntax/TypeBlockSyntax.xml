<Type Name="TypeBlockSyntax" FullName="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax">
  <TypeSignature Language="C#" Value="public abstract class TypeBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract TypeBlockSyntax extends Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TypeBlockSyntax&#xA;Inherits DeclarationStatementSyntax" />
  <TypeSignature Language="F#" Value="type TypeBlockSyntax = class&#xA;    inherit DeclarationStatementSyntax" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeBlockSyntax abstract : Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclarationStatementSyntax" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
 Represents a declaration of a Class, Interface, Structure, Module, its contents
 and the End statement that ends it.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddImplements">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax AddImplements (params Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax AddImplements(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.AddImplements(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddImplements (ParamArray items As ImplementsStatementSyntax()) As TypeBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.AddImplements : Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" Usage="typeBlockSyntax.AddImplements items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeBlockSyntax ^ AddImplements(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInherits">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax AddInherits (params Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax AddInherits(class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.AddInherits(Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddInherits (ParamArray items As InheritsStatementSyntax()) As TypeBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.AddInherits : Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" Usage="typeBlockSyntax.AddInherits items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeBlockSyntax ^ AddInherits(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMembers">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax AddMembers (params Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax AddMembers(class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.AddMembers(Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMembers (ParamArray items As StatementSyntax()) As TypeBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.AddMembers : Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" Usage="typeBlockSyntax.AddMembers items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeBlockSyntax ^ AddMembers(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax Begin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax Begin" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.Begin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Begin As TypeStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.Begin : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.Begin" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeStatementSyntax ^ Begin { Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This member is obsolete. Use BlockStatement or a more specific property (e.g. ClassStatement) instead.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BlockStatement">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax BlockStatement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax BlockStatement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.BlockStatement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property BlockStatement As TypeStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.BlockStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.BlockStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeStatementSyntax ^ BlockStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The statement that begins the block declaration.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax End { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax End" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.End" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property End As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.End : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.End" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ End { Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This member is obsolete. Use EndBlockStatement or a more specific property (e.g. EndClassStatement) instead.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBlockStatement">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndBlockStatement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.EndBlockStatement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property EndBlockStatement As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.EndBlockStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.EndBlockStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndBlockStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The statement that ends the block declaration.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Implements">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; Implements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; Implements" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.Implements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Implements As SyntaxList(Of ImplementsStatementSyntax)" />
      <MemberSignature Language="F#" Value="member this.Implements : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.Implements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^&gt; Implements { Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 A list of the Implements declarations for the type.
 </summary>
        <value>To be added.</value>
        <remarks>
 If nothing is present, an empty list is returned.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inherits">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; Inherits { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; Inherits" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.Inherits" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Inherits As SyntaxList(Of InheritsStatementSyntax)" />
      <MemberSignature Language="F#" Value="member this.Inherits : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.Inherits" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^&gt; Inherits { Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 A list of the Inherits declarations for the type.
 </summary>
        <value>To be added.</value>
        <remarks>
 If nothing is present, an empty list is returned.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="Members">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; Members { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; Members" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.Members" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Members As SyntaxList(Of StatementSyntax)" />
      <MemberSignature Language="F#" Value="member this.Members : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.Members" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; Members { Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The declarations contained in the type or module.
 </summary>
        <value>To be added.</value>
        <remarks>
 If nothing is present, an empty list is returned.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithBegin">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithBegin (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax begin);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithBegin(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax begin) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.WithBegin(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithBegin (begin As TypeStatementSyntax) As TypeBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.WithBegin : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" Usage="typeBlockSyntax.WithBegin begin" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeBlockSyntax ^ WithBegin(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeStatementSyntax ^ begin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This member is obsolete. Use WithBlockStatement or a more specific property (e.g. WithClassStatement) instead.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="begin" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="begin">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithBlockStatement">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithBlockStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax blockStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithBlockStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax blockStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.WithBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WithBlockStatement (blockStatement As TypeStatementSyntax) As TypeBlockSyntax" />
      <MemberSignature Language="F#" Value="abstract member WithBlockStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" Usage="typeBlockSyntax.WithBlockStatement blockStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeBlockSyntax ^ WithBlockStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeStatementSyntax ^ blockStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blockStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="blockStatement">To be added.</param>
        <summary>
 Returns a copy of this <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" /> with the <see cref="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.BlockStatement" /> property changed to the
 specified value. Returns this instance if the specified value is the same as the current value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithEnd">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithEnd (Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax end);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithEnd(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax end) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.WithEnd(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithEnd (end As EndBlockStatementSyntax) As TypeBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.WithEnd : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" Usage="typeBlockSyntax.WithEnd end" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeBlockSyntax ^ WithEnd(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ end);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This member is obsolete. Use WithEndBlockStatement or a more specific property (e.g. WithEndClassStatement) instead.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="end" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="end">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithEndBlockStatement">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithEndBlockStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endBlockStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithEndBlockStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endBlockStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.WithEndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WithEndBlockStatement (endBlockStatement As EndBlockStatementSyntax) As TypeBlockSyntax" />
      <MemberSignature Language="F#" Value="abstract member WithEndBlockStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" Usage="typeBlockSyntax.WithEndBlockStatement endBlockStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeBlockSyntax ^ WithEndBlockStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endBlockStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endBlockStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="endBlockStatement">To be added.</param>
        <summary>
 Returns a copy of this <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" /> with the <see cref="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.EndBlockStatement" /> property changed to the
 specified value. Returns this instance if the specified value is the same as the current value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithImplements">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithImplements (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithImplements(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; implements) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.WithImplements(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithImplements (implements As SyntaxList(Of ImplementsStatementSyntax)) As TypeBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.WithImplements : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" Usage="typeBlockSyntax.WithImplements implements" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeBlockSyntax ^ WithImplements(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^&gt; implements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implements" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="implements">To be added.</param>
        <summary>
 Returns a copy of this with the [Implements] property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithInherits">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithInherits (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithInherits(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; inherits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.WithInherits(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithInherits (inherits As SyntaxList(Of InheritsStatementSyntax)) As TypeBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.WithInherits : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" Usage="typeBlockSyntax.WithInherits inherits" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeBlockSyntax ^ WithInherits(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^&gt; inherits);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherits" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="inherits">To be added.</param>
        <summary>
 Returns a copy of this with the [Inherits] property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithMembers">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithMembers (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax WithMembers(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax.WithMembers(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithMembers (members As SyntaxList(Of StatementSyntax)) As TypeBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.WithMembers : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" Usage="typeBlockSyntax.WithMembers members" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeBlockSyntax ^ WithMembers(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^&gt; members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="members">To be added.</param>
        <summary>
 Returns a copy of this with the Members property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>