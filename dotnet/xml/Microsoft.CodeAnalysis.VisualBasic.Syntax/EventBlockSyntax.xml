<Type Name="EventBlockSyntax" FullName="Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax">
  <TypeSignature Language="C#" Value="public sealed class EventBlockSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed EventBlockSyntax extends Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventBlockSyntax&#xA;Inherits DeclarationStatementSyntax" />
  <TypeSignature Language="F#" Value="type EventBlockSyntax = class&#xA;    inherit DeclarationStatementSyntax" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventBlockSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclarationStatementSyntax" />
  <TypeSignature Language="C++ CX" Value="public ref class EventBlockSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclarationStatementSyntax" />
  <TypeSignature Language="C++ WINRT" Value="class EventBlockSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclarationStatementSyntax" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclarationStatementSyntax</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
 Represents a custom event declaration: A declaration that has a beginning event
 declaration, some accessor blocks and an end statement.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public override void Accept (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Accept(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax.Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Accept (visitor As VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor -&gt; unit" Usage="eventBlockSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value=" override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public override TResult Accept&lt;TResult&gt; (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt; visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!TResult Accept&lt;TResult&gt;(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor`1&lt;!!TResult&gt; visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax.Accept``1(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Accept(Of TResult) (visitor As VisualBasicSyntaxVisitor(Of TResult)) As TResult" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;'Result&gt; -&gt; 'Result" Usage="eventBlockSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor&lt;TResult&gt; ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor&lt;TResult&gt; const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accessors">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; Accessors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; Accessors" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax.Accessors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Accessors As SyntaxList(Of AccessorBlockSyntax)" />
      <MemberSignature Language="F#" Value="member this.Accessors : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax.Accessors" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^&gt; Accessors { Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The accessor blocks contained in the custom event declaration, between the
 Event statement and the End Event statement.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessors">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax AddAccessors (params Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax AddAccessors(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax.AddAccessors(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddAccessors (ParamArray items As AccessorBlockSyntax()) As EventBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.AddAccessors : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax" Usage="eventBlockSyntax.AddAccessors items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::EventBlockSyntax ^ AddAccessors(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndEventStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndEventStatement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax EndEventStatement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax.EndEventStatement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndEventStatement As EndBlockStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.EndEventStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax.EndEventStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndEventStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ EndEventStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The End Event statement that ends the block.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax EventStatement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax EventStatement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax.EventStatement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventStatement As EventStatementSyntax" />
      <MemberSignature Language="F#" Value="member this.EventStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax.EventStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::EventStatementSyntax ^ EventStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::EventStatementSyntax ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::EventStatementSyntax ^ EventStatement { Microsoft::CodeAnalysis::VisualBasic::Syntax::EventStatementSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The event declaration that begins the block.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax Update (Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax eventStatement, Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; accessors, Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endEventStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax Update(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax eventStatement, valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; accessors, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endEventStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax.Update(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax,Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax},Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (eventStatement As EventStatementSyntax, accessors As SyntaxList(Of AccessorBlockSyntax), endEventStatement As EndBlockStatementSyntax) As EventBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.Update : Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax * Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; * Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax" Usage="eventBlockSyntax.Update (eventStatement, accessors, endEventStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::EventBlockSyntax ^ Update(Microsoft::CodeAnalysis::VisualBasic::Syntax::EventStatementSyntax ^ eventStatement, Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^&gt; accessors, Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endEventStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax" />
        <Parameter Name="accessors" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt;" />
        <Parameter Name="endEventStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="eventStatement">
 The value for the EventStatement property.
 </param>
        <param name="accessors">
 The value for the Accessors property.
 </param>
        <param name="endEventStatement">
 The value for the EndEventStatement property.
 </param>
        <summary>
 Returns a copy of this with the specified changes. Returns this instance if
 there are no actual changes.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAccessors">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax WithAccessors (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; accessors);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax WithAccessors(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; accessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax.WithAccessors(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithAccessors (accessors As SyntaxList(Of AccessorBlockSyntax)) As EventBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.WithAccessors : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax" Usage="eventBlockSyntax.WithAccessors accessors" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::EventBlockSyntax ^ WithAccessors(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^&gt; accessors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessors" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="accessors">To be added.</param>
        <summary>
 Returns a copy of this with the Accessors property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithEndEventStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax WithEndEventStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endEventStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax WithEndEventStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax endEventStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax.WithEndEventStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithEndEventStatement (endEventStatement As EndBlockStatementSyntax) As EventBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.WithEndEventStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax" Usage="eventBlockSyntax.WithEndEventStatement endEventStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::EventBlockSyntax ^ WithEndEventStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endEventStatement);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::EventBlockSyntax ^ WithEndEventStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ endEventStatement);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::VisualBasic::Syntax::EventBlockSyntax WithEndEventStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax const &amp; endEventStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endEventStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="endEventStatement">To be added.</param>
        <summary>
 Returns a copy of this with the EndEventStatement property changed to the
 specified value. Returns this instance if the specified value is the same as
 the current value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithEventStatement">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax WithEventStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax eventStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax WithEventStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax eventStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax.WithEventStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithEventStatement (eventStatement As EventStatementSyntax) As EventBlockSyntax" />
      <MemberSignature Language="F#" Value="member this.WithEventStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax" Usage="eventBlockSyntax.WithEventStatement eventStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::EventBlockSyntax ^ WithEventStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EventStatementSyntax ^ eventStatement);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::EventBlockSyntax ^ WithEventStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EventStatementSyntax ^ eventStatement);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::VisualBasic::Syntax::EventBlockSyntax WithEventStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EventStatementSyntax const &amp; eventStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="eventStatement">To be added.</param>
        <summary>
 Returns a copy of this with the EventStatement property changed to the
 specified value. Returns this instance if the specified value is the same as
 the current value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>