<Type Name="IVariableDeclaration" FullName="Microsoft.CodeAnalysis.Semantics.IVariableDeclaration">
  <TypeSignature Language="C#" Value="public interface IVariableDeclaration : Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IVariableDeclaration implements class Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Semantics.IVariableDeclaration" />
  <TypeSignature Language="VB.NET" Value="Public Interface IVariableDeclaration&#xA;Implements IOperation" />
  <TypeSignature Language="F#" Value="type IVariableDeclaration = interface&#xA;    interface IOperation" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.CodeAnalysis.IOperation</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents a local variable declaration.
            </summary>
    <remarks>
            This interface is reserved for implementation by its associated APIs. We reserve the right to
            change it in the future.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Initializer">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IOperation Initializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IOperation Initializer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Semantics.IVariableDeclaration.Initializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Initializer As IOperation" />
      <MemberSignature Language="F#" Value="member this.Initializer : Microsoft.CodeAnalysis.IOperation" Usage="Microsoft.CodeAnalysis.Semantics.IVariableDeclaration.Initializer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Optional initializer of the variable.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Variables">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ILocalSymbol&gt; Variables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.ILocalSymbol&gt; Variables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Semantics.IVariableDeclaration.Variables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Variables As ImmutableArray(Of ILocalSymbol)" />
      <MemberSignature Language="F#" Value="member this.Variables : System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ILocalSymbol&gt;" Usage="Microsoft.CodeAnalysis.Semantics.IVariableDeclaration.Variables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ILocalSymbol&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Symbols declared by the declaration. In VB, it's possible to declare multiple variables with the
            same initializer. In C#, this will always have a single symbol.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>