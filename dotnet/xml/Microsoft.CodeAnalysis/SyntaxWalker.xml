<Type Name="SyntaxWalker" FullName="Microsoft.CodeAnalysis.SyntaxWalker">
  <TypeSignature Language="C#" Value="public abstract class SyntaxWalker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SyntaxWalker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.SyntaxWalker" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SyntaxWalker" />
  <TypeSignature Language="F#" Value="type SyntaxWalker = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class SyntaxWalker abstract" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Walks the syntax tree, allowing subclasses to operate on all nodes, token and trivia.  The
            walker will perform a depth first walk of the tree.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SyntaxWalker (Microsoft.CodeAnalysis.SyntaxWalkerDepth depth = Microsoft.CodeAnalysis.SyntaxWalkerDepth.Node);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype Microsoft.CodeAnalysis.SyntaxWalkerDepth depth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxWalker.#ctor(Microsoft.CodeAnalysis.SyntaxWalkerDepth)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (Optional depth As SyntaxWalkerDepth = Microsoft.CodeAnalysis.SyntaxWalkerDepth.Node)" />
      <MemberSignature Language="F#" Value="new Microsoft.CodeAnalysis.SyntaxWalker : Microsoft.CodeAnalysis.SyntaxWalkerDepth -&gt; Microsoft.CodeAnalysis.SyntaxWalker" Usage="new Microsoft.CodeAnalysis.SyntaxWalker depth" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="depth" Type="Microsoft.CodeAnalysis.SyntaxWalkerDepth" />
      </Parameters>
      <Docs>
        <param name="depth">Syntax the <see cref="T:Microsoft.CodeAnalysis.SyntaxWalker" /> should descent into.</param>
        <summary>
            Creates a new walker instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="protected Microsoft.CodeAnalysis.SyntaxWalkerDepth Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxWalkerDepth Depth" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.SyntaxWalker.Depth" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Depth As SyntaxWalkerDepth" />
      <MemberSignature Language="F#" Value="member this.Depth : Microsoft.CodeAnalysis.SyntaxWalkerDepth" Usage="Microsoft.CodeAnalysis.SyntaxWalker.Depth" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property Microsoft::CodeAnalysis::SyntaxWalkerDepth Depth { Microsoft::CodeAnalysis::SyntaxWalkerDepth get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxWalkerDepth</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Syntax the <see cref="T:Microsoft.CodeAnalysis.SyntaxWalker" /> should descent into.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public virtual void Visit (Microsoft.CodeAnalysis.SyntaxNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Visit(class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxWalker.Visit(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Visit (node As SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member Visit : Microsoft.CodeAnalysis.SyntaxNode -&gt; unit&#xA;override this.Visit : Microsoft.CodeAnalysis.SyntaxNode -&gt; unit" Usage="syntaxWalker.Visit node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Visit(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">The current node that the walker is visiting.</param>
        <summary>
            Called when the walker visits a node.  This method may be overridden if subclasses want
            to handle the node.  Overrides should call back into this base method if they want the
            children of this node to be visited.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitToken">
      <MemberSignature Language="C#" Value="protected virtual void VisitToken (Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void VisitToken(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxWalker.VisitToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub VisitToken (token As SyntaxToken)" />
      <MemberSignature Language="F#" Value="abstract member VisitToken : Microsoft.CodeAnalysis.SyntaxToken -&gt; unit&#xA;override this.VisitToken : Microsoft.CodeAnalysis.SyntaxToken -&gt; unit" Usage="syntaxWalker.VisitToken token" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void VisitToken(Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="token">The current token that the walker is visiting.</param>
        <summary>
            Called when the walker visits a token.  This method may be overridden if subclasses want
            to handle the token.  Overrides should call back into this base method if they want the 
            trivia of this token to be visited.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTrivia">
      <MemberSignature Language="C#" Value="protected virtual void VisitTrivia (Microsoft.CodeAnalysis.SyntaxTrivia trivia);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void VisitTrivia(valuetype Microsoft.CodeAnalysis.SyntaxTrivia trivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SyntaxWalker.VisitTrivia(Microsoft.CodeAnalysis.SyntaxTrivia)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub VisitTrivia (trivia As SyntaxTrivia)" />
      <MemberSignature Language="F#" Value="abstract member VisitTrivia : Microsoft.CodeAnalysis.SyntaxTrivia -&gt; unit&#xA;override this.VisitTrivia : Microsoft.CodeAnalysis.SyntaxTrivia -&gt; unit" Usage="syntaxWalker.VisitTrivia trivia" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void VisitTrivia(Microsoft::CodeAnalysis::SyntaxTrivia trivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trivia" Type="Microsoft.CodeAnalysis.SyntaxTrivia" />
      </Parameters>
      <Docs>
        <param name="trivia">The current trivia syntax that the walker is visiting.</param>
        <summary>
            Called when the walker visits a trivia syntax.  This method may be overridden if
            subclasses want to handle the token.  Overrides should call back into this base method if
            they want the children of this trivia syntax to be visited.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>