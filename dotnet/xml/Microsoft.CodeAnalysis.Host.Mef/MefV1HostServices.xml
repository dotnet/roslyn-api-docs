<Type Name="MefV1HostServices" FullName="Microsoft.CodeAnalysis.Host.Mef.MefV1HostServices">
  <TypeSignature Language="C#" Value="public class MefV1HostServices : Microsoft.CodeAnalysis.Host.HostServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MefV1HostServices extends Microsoft.CodeAnalysis.Host.HostServices" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Host.Mef.MefV1HostServices" />
  <TypeSignature Language="VB.NET" Value="Public Class MefV1HostServices&#xA;Inherits HostServices" />
  <TypeSignature Language="F#" Value="type MefV1HostServices = class&#xA;    inherit HostServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class MefV1HostServices : Microsoft::CodeAnalysis::Host::HostServices" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.Workspaces.Desktop</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.Host.HostServices</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A class that provides host services via classes instances exported via a MEF version 1 composition.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Host.Mef.MefV1HostServices Create (System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; assemblies);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Host.Mef.MefV1HostServices Create(class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; assemblies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Host.Mef.MefV1HostServices.Create(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (assemblies As IEnumerable(Of Assembly)) As MefV1HostServices" />
      <MemberSignature Language="F#" Value="static member Create : seq&lt;System.Reflection.Assembly&gt; -&gt; Microsoft.CodeAnalysis.Host.Mef.MefV1HostServices" Usage="Microsoft.CodeAnalysis.Host.Mef.MefV1HostServices.Create assemblies" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::Host::Mef::MefV1HostServices ^ Create(System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ assemblies);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces.Desktop</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Host.Mef.MefV1HostServices</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblies" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;" />
      </Parameters>
      <Docs>
        <param name="assemblies">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.Host.Mef.MefV1HostServices Create (System.ComponentModel.Composition.Hosting.ExportProvider exportProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CodeAnalysis.Host.Mef.MefV1HostServices Create(class System.ComponentModel.Composition.Hosting.ExportProvider exportProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Host.Mef.MefV1HostServices.Create(System.ComponentModel.Composition.Hosting.ExportProvider)" />
      <MemberSignature Language="F#" Value="static member Create : System.ComponentModel.Composition.Hosting.ExportProvider -&gt; Microsoft.CodeAnalysis.Host.Mef.MefV1HostServices" Usage="Microsoft.CodeAnalysis.Host.Mef.MefV1HostServices.Create exportProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CodeAnalysis::Host::Mef::MefV1HostServices ^ Create(System::ComponentModel::Composition::Hosting::ExportProvider ^ exportProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces.Desktop</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Host.Mef.MefV1HostServices</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportProvider" Type="System.ComponentModel.Composition.Hosting.ExportProvider" />
      </Parameters>
      <Docs>
        <param name="exportProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkspaceServices">
      <MemberSignature Language="C#" Value="protected internal override Microsoft.CodeAnalysis.Host.HostWorkspaceServices CreateWorkspaceServices (Microsoft.CodeAnalysis.Workspace workspace);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class Microsoft.CodeAnalysis.Host.HostWorkspaceServices CreateWorkspaceServices(class Microsoft.CodeAnalysis.Workspace workspace) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Host.Mef.MefV1HostServices.CreateWorkspaceServices(Microsoft.CodeAnalysis.Workspace)" />
      <MemberSignature Language="F#" Value="override this.CreateWorkspaceServices : Microsoft.CodeAnalysis.Workspace -&gt; Microsoft.CodeAnalysis.Host.HostWorkspaceServices" Usage="mefV1HostServices.CreateWorkspaceServices workspace" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override Microsoft::CodeAnalysis::Host::HostWorkspaceServices ^ CreateWorkspaceServices(Microsoft::CodeAnalysis::Workspace ^ workspace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces.Desktop</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Host.HostWorkspaceServices</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workspace" Type="Microsoft.CodeAnalysis.Workspace" />
      </Parameters>
      <Docs>
        <param name="workspace">To be added.</param>
        <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Host.HostWorkspaceServices" /> associated with the specified workspace.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;TExtension&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;TExtension&gt;&gt; GetExports&lt;TExtension&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!TExtension&gt;&gt; GetExports&lt;TExtension&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Host.Mef.MefV1HostServices.GetExports``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of TExtension) () As IEnumerable(Of Lazy(Of TExtension))" />
      <MemberSignature Language="F#" Value="abstract member GetExports : unit -&gt; seq&lt;Lazy&lt;'Extension&gt;&gt;&#xA;override this.GetExports : unit -&gt; seq&lt;Lazy&lt;'Extension&gt;&gt;" Usage="mefV1HostServices.GetExports " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExtension&gt;&#xA; virtual System::Collections::Generic::IEnumerable&lt;Lazy&lt;TExtension&gt; ^&gt; ^ GetExports();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.CodeAnalysis.Host.Mef.IMefHostExportProvider.GetExports``1</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces.Desktop</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;TExtension&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExtension" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TExtension">To be added.</typeparam>
        <summary>
            Gets all the MEF exports of the specified type.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;TExtension,TMetadata&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;TExtension,TMetadata&gt;&gt; GetExports&lt;TExtension,TMetadata&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!TExtension, !!TMetadata&gt;&gt; GetExports&lt;TExtension, TMetadata&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Host.Mef.MefV1HostServices.GetExports``2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of TExtension, TMetadata) () As IEnumerable(Of Lazy(Of TExtension, TMetadata))" />
      <MemberSignature Language="F#" Value="abstract member GetExports : unit -&gt; seq&lt;Lazy&lt;'Extension, 'Metadata&gt;&gt;&#xA;override this.GetExports : unit -&gt; seq&lt;Lazy&lt;'Extension, 'Metadata&gt;&gt;" Usage="mefV1HostServices.GetExports " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExtension, typename TMetadata&gt;&#xA; virtual System::Collections::Generic::IEnumerable&lt;Lazy&lt;TExtension, TMetadata&gt; ^&gt; ^ GetExports();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.CodeAnalysis.Host.Mef.IMefHostExportProvider.GetExports``2</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces.Desktop</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;TExtension,TMetadata&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExtension" />
        <TypeParameter Name="TMetadata" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TExtension">To be added.</typeparam>
        <typeparam name="TMetadata">To be added.</typeparam>
        <summary>
            Gets all the MEF exports of the specified type with the specified metadata.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>