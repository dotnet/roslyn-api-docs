<Type Name="TypeSyntax" FullName="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax">
  <TypeSignature Language="C#" Value="public abstract class TypeSyntax : Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TypeSyntax extends Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TypeSyntax&#xA;Inherits ExpressionSyntax" />
  <TypeSignature Language="F#" Value="type TypeSyntax = class&#xA;    inherit ExpressionSyntax" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeSyntax abstract : Microsoft::CodeAnalysis::CSharp::Syntax::ExpressionSyntax" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides the base class from which the classes that represent type syntax nodes are derived. This is an abstract class.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="IsUnmanaged">
      <MemberSignature Language="C#" Value="public bool IsUnmanaged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnmanaged" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.IsUnmanaged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnmanaged As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsUnmanaged : bool" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.IsUnmanaged" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnmanaged { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVar">
      <MemberSignature Language="C#" Value="public bool IsVar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVar" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.IsVar" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVar As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsVar : bool" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax.IsVar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVar { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>