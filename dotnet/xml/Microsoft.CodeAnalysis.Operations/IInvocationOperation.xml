<Type Name="IInvocationOperation" FullName="Microsoft.CodeAnalysis.Operations.IInvocationOperation">
  <TypeSignature Language="C#" Value="public interface IInvocationOperation : Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInvocationOperation implements class Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Operations.IInvocationOperation" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInvocationOperation&#xA;Implements IOperation" />
  <TypeSignature Language="F#" Value="type IInvocationOperation = interface&#xA;    interface IOperation" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInvocationOperation : Microsoft::CodeAnalysis::IOperation" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.CodeAnalysis.IOperation</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents an invocation of a method.
            <para>
            Current usage:
             (1) C# method invocation expression.
             (2) C# collection element initializer.
                 For example, in the following collection initializer: <code>new C() { 1, 2, 3 }</code>, we will have
                 3 <see cref="T:Microsoft.CodeAnalysis.Operations.IInvocationOperation" /> nodes, each of which will be a call to the corresponding Add method
                 with either 1, 2, 3 as the argument.
             (3) VB method invocation expression.
             (4) VB collection element initializer.
                 Similar to the C# example, <code>New C() From {1, 2, 3}</code> will have 3 <see cref="T:Microsoft.CodeAnalysis.Operations.IInvocationOperation" />
                 nodes with 1, 2, and 3 as their arguments, respectively.
            </para></summary>
    <remarks>
            This interface is reserved for implementation by its associated APIs. We reserve the right to
            change it in the future.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Operations.IArgumentOperation&gt; Arguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.Operations.IArgumentOperation&gt; Arguments" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IInvocationOperation.Arguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Arguments As ImmutableArray(Of IArgumentOperation)" />
      <MemberSignature Language="F#" Value="member this.Arguments : System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Operations.IArgumentOperation&gt;" Usage="Microsoft.CodeAnalysis.Operations.IInvocationOperation.Arguments" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::Operations::IArgumentOperation ^&gt; Arguments { System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::Operations::IArgumentOperation ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Operations.IArgumentOperation&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Arguments of the invocation, excluding the instance argument. Arguments are in evaluation order.
            </summary>
        <value>To be added.</value>
        <remarks>
            If the invocation is in its expanded form, then params/ParamArray arguments would be collected into arrays. 
            Default values are supplied for optional arguments missing in source.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IOperation Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IOperation Instance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IInvocationOperation.Instance" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Instance As IOperation" />
      <MemberSignature Language="F#" Value="member this.Instance : Microsoft.CodeAnalysis.IOperation" Usage="Microsoft.CodeAnalysis.Operations.IInvocationOperation.Instance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ Instance { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            'This' or 'Me' instance to be supplied to the method, or null if the method is static.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVirtual">
      <MemberSignature Language="C#" Value="public bool IsVirtual { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVirtual" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IInvocationOperation.IsVirtual" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVirtual As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsVirtual : bool" Usage="Microsoft.CodeAnalysis.Operations.IInvocationOperation.IsVirtual" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVirtual { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            True if the invocation uses a virtual mechanism, and false otherwise.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetMethod">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IMethodSymbol TargetMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IMethodSymbol TargetMethod" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IInvocationOperation.TargetMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetMethod As IMethodSymbol" />
      <MemberSignature Language="F#" Value="member this.TargetMethod : Microsoft.CodeAnalysis.IMethodSymbol" Usage="Microsoft.CodeAnalysis.Operations.IInvocationOperation.TargetMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::IMethodSymbol ^ TargetMethod { Microsoft::CodeAnalysis::IMethodSymbol ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IMethodSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Method to be invoked.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>