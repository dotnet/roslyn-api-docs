<Type Name="IIsTypeOperation" FullName="Microsoft.CodeAnalysis.Operations.IIsTypeOperation">
  <TypeSignature Language="C#" Value="public interface IIsTypeOperation : Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IIsTypeOperation implements class Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Operations.IIsTypeOperation" />
  <TypeSignature Language="VB.NET" Value="Public Interface IIsTypeOperation&#xA;Implements IOperation" />
  <TypeSignature Language="F#" Value="type IIsTypeOperation = interface&#xA;    interface IOperation" />
  <TypeSignature Language="C++ CLI" Value="public interface class IIsTypeOperation : Microsoft::CodeAnalysis::IOperation" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.CodeAnalysis.IOperation</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents an operation that tests if a value is of a specific type.
            <para>
            Current usage:
             (1) C# "is" operator expression.
             (2) VB "TypeOf" and "TypeOf IsNot" expression.
            </para></summary>
    <remarks>
            This interface is reserved for implementation by its associated APIs. We reserve the right to
            change it in the future.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsNegated">
      <MemberSignature Language="C#" Value="public bool IsNegated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNegated" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IIsTypeOperation.IsNegated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNegated As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNegated : bool" Usage="Microsoft.CodeAnalysis.Operations.IIsTypeOperation.IsNegated" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNegated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Flag indicating if this is an "is not" type expression.
            True for VB "TypeOf ... IsNot ..." expression.
            False, otherwise.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeOperand">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.ITypeSymbol TypeOperand { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.ITypeSymbol TypeOperand" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IIsTypeOperation.TypeOperand" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeOperand As ITypeSymbol" />
      <MemberSignature Language="F#" Value="member this.TypeOperand : Microsoft.CodeAnalysis.ITypeSymbol" Usage="Microsoft.CodeAnalysis.Operations.IIsTypeOperation.TypeOperand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::ITypeSymbol ^ TypeOperand { Microsoft::CodeAnalysis::ITypeSymbol ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ITypeSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Type for which to test.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueOperand">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IOperation ValueOperand { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IOperation ValueOperand" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.IIsTypeOperation.ValueOperand" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueOperand As IOperation" />
      <MemberSignature Language="F#" Value="member this.ValueOperand : Microsoft.CodeAnalysis.IOperation" Usage="Microsoft.CodeAnalysis.Operations.IIsTypeOperation.ValueOperand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ ValueOperand { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Value to test.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>