<Type Name="CatchFilterClauseSyntax" FullName="Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax">
  <TypeSignature Language="C#" Value="public sealed class CatchFilterClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CatchFilterClauseSyntax extends Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CatchFilterClauseSyntax&#xA;Inherits VisualBasicSyntaxNode" />
  <TypeSignature Language="F#" Value="type CatchFilterClauseSyntax = class&#xA;    inherit VisualBasicSyntaxNode" />
  <TypeSignature Language="C++ CLI" Value="public ref class CatchFilterClauseSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxNode" />
  <TypeSignature Language="C++ CX" Value="public ref class CatchFilterClauseSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxNode" />
  <TypeSignature Language="C++ WINRT" Value="class CatchFilterClauseSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxNode" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
 Represents the "When ..." clause of a "Catch" statement.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public override void Accept (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Accept(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax.Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Accept (visitor As VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor -&gt; unit" Usage="catchFilterClauseSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value=" override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public override TResult Accept&lt;TResult&gt; (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt; visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!TResult Accept&lt;TResult&gt;(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor`1&lt;!!TResult&gt; visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax.Accept``1(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Accept(Of TResult) (visitor As VisualBasicSyntaxVisitor(Of TResult)) As TResult" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;'Result&gt; -&gt; 'Result" Usage="catchFilterClauseSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor&lt;TResult&gt; ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor&lt;TResult&gt; const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Filter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax Filter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax.Filter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Filter As ExpressionSyntax" />
      <MemberSignature Language="F#" Value="member this.Filter : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax.Filter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ Filter { Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ Filter { Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The filter expression to be evaluated.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax Update (Microsoft.CodeAnalysis.SyntaxToken whenKeyword, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax filter);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax Update(valuetype Microsoft.CodeAnalysis.SyntaxToken whenKeyword, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (whenKeyword As SyntaxToken, filter As ExpressionSyntax) As CatchFilterClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.Update : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax" Usage="catchFilterClauseSyntax.Update (whenKeyword, filter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax ^ Update(Microsoft::CodeAnalysis::SyntaxToken whenKeyword, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ filter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whenKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="filter" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="whenKeyword">
 The value for the WhenKeyword property.
 </param>
        <param name="filter">
 The value for the Filter property.
 </param>
        <summary>
 Returns a copy of this with the specified changes. Returns this instance if
 there are no actual changes.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhenKeyword">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxToken WhenKeyword { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken WhenKeyword" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax.WhenKeyword" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhenKeyword As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.WhenKeyword : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax.WhenKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxToken WhenKeyword { Microsoft::CodeAnalysis::SyntaxToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The "When" keyword.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithFilter">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax WithFilter (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax filter);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax WithFilter(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax.WithFilter(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithFilter (filter As ExpressionSyntax) As CatchFilterClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.WithFilter : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax" Usage="catchFilterClauseSyntax.WithFilter filter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax ^ WithFilter(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ filter);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax ^ WithFilter(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ filter);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax WithFilter(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax const &amp; filter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="filter">To be added.</param>
        <summary>
 Returns a copy of this with the Filter property changed to the specified value.
 Returns this instance if the specified value is the same as the current value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithWhenKeyword">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax WithWhenKeyword (Microsoft.CodeAnalysis.SyntaxToken whenKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax WithWhenKeyword(valuetype Microsoft.CodeAnalysis.SyntaxToken whenKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax.WithWhenKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithWhenKeyword (whenKeyword As SyntaxToken) As CatchFilterClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.WithWhenKeyword : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax" Usage="catchFilterClauseSyntax.WithWhenKeyword whenKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax ^ WithWhenKeyword(Microsoft::CodeAnalysis::SyntaxToken whenKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whenKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="whenKeyword">To be added.</param>
        <summary>
 Returns a copy of this with the WhenKeyword property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>