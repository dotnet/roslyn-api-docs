<Type Name="SeparatedSyntaxList&lt;TNode&gt;" FullName="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;">
  <TypeSignature Language="C#" Value="public struct SeparatedSyntaxList&lt;TNode&gt; : IEquatable&lt;Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;&gt;, System.Collections.Generic.IEnumerable&lt;TNode&gt;, System.Collections.Generic.IReadOnlyCollection&lt;TNode&gt;, System.Collections.Generic.IReadOnlyList&lt;TNode&gt; where TNode : SyntaxNode" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SeparatedSyntaxList`1&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt; extends System.ValueType implements class System.Collections.Generic.IEnumerable`1&lt;!TNode&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!TNode&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!TNode&gt;, class System.Collections.IEnumerable, class System.IEquatable`1&lt;valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!TNode&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure SeparatedSyntaxList(Of TNode)&#xA;Implements IEnumerable(Of TNode), IEquatable(Of SeparatedSyntaxList(Of TNode)), IReadOnlyCollection(Of TNode), IReadOnlyList(Of TNode)" />
  <TypeSignature Language="F#" Value="type SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; SyntaxNode)&gt; = struct&#xA;    interface IReadOnlyList&lt;'Node (requires 'Node :&gt; SyntaxNode)&gt;&#xA;    interface seq&lt;'Node (requires 'Node :&gt; SyntaxNode)&gt;&#xA;    interface IEnumerable&#xA;    interface IReadOnlyCollection&lt;'Node (requires 'Node :&gt; SyntaxNode)&gt;" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TNode&gt;&#xA; where TNode : SyntaxNodepublic value class SeparatedSyntaxList : IEquatable&lt;Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt;&gt;, System::Collections::Generic::IEnumerable&lt;TNode&gt;, System::Collections::Generic::IReadOnlyCollection&lt;TNode&gt;, System::Collections::Generic::IReadOnlyList&lt;TNode&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TNode">
      <Constraints>
        <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TNode&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;TNode&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;TNode&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TNode">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; Add (TNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!TNode&gt; Add(!TNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (node As TNode) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="member this.Add : 'Node -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;" Usage="separatedSyntaxList.Add node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; Add(TNode node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="TNode" />
      </Parameters>
      <Docs>
        <param name="node">The node to add.</param>
        <summary>
            Creates a new list with the specified node added to the end.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; AddRange (System.Collections.Generic.IEnumerable&lt;TNode&gt; nodes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!TNode&gt; AddRange(class System.Collections.Generic.IEnumerable`1&lt;!TNode&gt; nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddRange (nodes As IEnumerable(Of TNode)) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="member this.AddRange : seq&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;" Usage="separatedSyntaxList.AddRange nodes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; AddRange(System::Collections::Generic::IEnumerable&lt;TNode&gt; ^ nodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <param name="nodes">The nodes to add.</param>
        <summary>
            Creates a new list with the specified nodes added to the end.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Any">
      <MemberSignature Language="C#" Value="public bool Any ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Any() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Any" />
      <MemberSignature Language="VB.NET" Value="Public Function Any () As Boolean" />
      <MemberSignature Language="F#" Value="member this.Any : unit -&gt; bool" Usage="separatedSyntaxList.Any " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Any();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!TNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (node As TNode) As Boolean" />
      <MemberSignature Language="F#" Value="member this.Contains : 'Node -&gt; bool" Usage="separatedSyntaxList.Contains node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(TNode node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="TNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;.Count" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!TNode&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Equals(Microsoft.CodeAnalysis.SeparatedSyntaxList{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As SeparatedSyntaxList(Of TNode)) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; -&gt; bool" Usage="separatedSyntaxList.Equals other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="separatedSyntaxList.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="First">
      <MemberSignature Language="C#" Value="public TNode First ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TNode First() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.First" />
      <MemberSignature Language="VB.NET" Value="Public Function First () As TNode" />
      <MemberSignature Language="F#" Value="member this.First : unit -&gt; 'Node" Usage="separatedSyntaxList.First " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TNode First();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefault">
      <MemberSignature Language="C#" Value="public TNode FirstOrDefault ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TNode FirstOrDefault() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.FirstOrDefault" />
      <MemberSignature Language="VB.NET" Value="Public Function FirstOrDefault () As TNode" />
      <MemberSignature Language="F#" Value="member this.FirstOrDefault : unit -&gt; 'Node" Usage="separatedSyntaxList.FirstOrDefault " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TNode FirstOrDefault();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullSpan">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Text.TextSpan FullSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.Text.TextSpan FullSpan" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.FullSpan" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullSpan As TextSpan" />
      <MemberSignature Language="F#" Value="member this.FullSpan : Microsoft.CodeAnalysis.Text.TextSpan" Usage="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;.FullSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::Text::TextSpan FullSpan { Microsoft::CodeAnalysis::Text::TextSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.TextSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1/Enumerator&lt;!TNode&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As SeparatedSyntaxList(Of TNode).Enumerator" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;.Enumerator" Usage="separatedSyntaxList.GetEnumerator " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt;::Enumerator GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="separatedSyntaxList.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSeparator">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxToken GetSeparator (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxToken GetSeparator(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetSeparator(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSeparator (index As Integer) As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.GetSeparator : int -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="separatedSyntaxList.GetSeparator index" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxToken GetSeparator(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index.</param>
        <summary>
            Gets the separator at the given index in this list.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSeparators">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt; GetSeparators ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxToken&gt; GetSeparators() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetSeparators" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSeparators () As IEnumerable(Of SyntaxToken)" />
      <MemberSignature Language="F#" Value="member this.GetSeparators : unit -&gt; seq&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;" Usage="separatedSyntaxList.GetSeparators " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxToken&gt; ^ GetSeparators();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns the sequence of just the separator tokens.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWithSeparators">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxNodeOrTokenList GetWithSeparators ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SyntaxNodeOrTokenList GetWithSeparators() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetWithSeparators" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWithSeparators () As SyntaxNodeOrTokenList" />
      <MemberSignature Language="F#" Value="member this.GetWithSeparators : unit -&gt; Microsoft.CodeAnalysis.SyntaxNodeOrTokenList" Usage="separatedSyntaxList.GetWithSeparators " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SyntaxNodeOrTokenList GetWithSeparators();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxNodeOrTokenList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (Func&lt;TNode,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Func`2&lt;!TNode, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.IndexOf(System.Func{`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (predicate As Func(Of TNode, Boolean)) As Integer" />
      <MemberSignature Language="F#" Value="member this.IndexOf : Func&lt;'Node, bool (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; -&gt; int" Usage="separatedSyntaxList.IndexOf predicate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(Func&lt;TNode, bool&gt; ^ predicate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TNode,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (TNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!TNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (node As TNode) As Integer" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'Node -&gt; int" Usage="separatedSyntaxList.IndexOf node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(TNode node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="TNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; Insert (int index, TNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!TNode&gt; Insert(int32 index, !TNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, node As TNode) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="member this.Insert : int * 'Node -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;" Usage="separatedSyntaxList.Insert (index, node)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; Insert(int index, TNode node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="node" Type="TNode" />
      </Parameters>
      <Docs>
        <param name="index">The index to insert at.</param>
        <param name="node">The node to insert.</param>
        <summary>
            Creates a new list with the specified node inserted at the index.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; InsertRange (int index, System.Collections.Generic.IEnumerable&lt;TNode&gt; nodes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!TNode&gt; InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!TNode&gt; nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertRange (index As Integer, nodes As IEnumerable(Of TNode)) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="member this.InsertRange : int * seq&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;" Usage="separatedSyntaxList.InsertRange (index, nodes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; InsertRange(int index, System::Collections::Generic::IEnumerable&lt;TNode&gt; ^ nodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="nodes" Type="System.Collections.Generic.IEnumerable&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <param name="index">The index to insert at.</param>
        <param name="nodes">The nodes to insert.</param>
        <summary>
            Creates a new list with the specified nodes inserted at the index.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TNode this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TNode Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As TNode" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'Node" Usage="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;.Item" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TNode default[int] { TNode get(int index); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Last">
      <MemberSignature Language="C#" Value="public TNode Last ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TNode Last() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Last" />
      <MemberSignature Language="VB.NET" Value="Public Function Last () As TNode" />
      <MemberSignature Language="F#" Value="member this.Last : unit -&gt; 'Node" Usage="separatedSyntaxList.Last " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TNode Last();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (Func&lt;TNode,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(class System.Func`2&lt;!TNode, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.LastIndexOf(System.Func{`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (predicate As Func(Of TNode, Boolean)) As Integer" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : Func&lt;'Node, bool (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; -&gt; int" Usage="separatedSyntaxList.LastIndexOf predicate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(Func&lt;TNode, bool&gt; ^ predicate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;TNode,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (TNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!TNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.LastIndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (node As TNode) As Integer" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'Node -&gt; int" Usage="separatedSyntaxList.LastIndexOf node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(TNode node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="TNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefault">
      <MemberSignature Language="C#" Value="public TNode LastOrDefault ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TNode LastOrDefault() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.LastOrDefault" />
      <MemberSignature Language="VB.NET" Value="Public Function LastOrDefault () As TNode" />
      <MemberSignature Language="F#" Value="member this.LastOrDefault : unit -&gt; 'Node" Usage="separatedSyntaxList.LastOrDefault " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TNode LastOrDefault();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; left, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!TNode&gt; left, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!TNode&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.op_Equality(Microsoft.CodeAnalysis.SeparatedSyntaxList{`0},Microsoft.CodeAnalysis.SeparatedSyntaxList{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As SeparatedSyntaxList(Of TNode), right As SeparatedSyntaxList(Of TNode)) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( = ) : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; -&gt; bool" Usage="left = right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; left, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; nodes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!TNode&gt; op_Implicit(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.op_Implicit(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.SyntaxNode})~Microsoft.CodeAnalysis.SeparatedSyntaxList{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (nodes As SeparatedSyntaxList(Of SyntaxNode)) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;" Usage="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;.op_Implicit nodes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt;(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt; nodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodes" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" />
      </Parameters>
      <Docs>
        <param name="nodes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt; (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; nodes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.SyntaxNode&gt; op_Implicit(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!TNode&gt; nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.op_Implicit(Microsoft.CodeAnalysis.SeparatedSyntaxList{`0})~Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.SyntaxNode}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (nodes As SeparatedSyntaxList(Of TNode)) As SeparatedSyntaxList(Of SyntaxNode)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;" Usage="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;.op_Implicit nodes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::SyntaxNode ^&gt;(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; nodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.SyntaxNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodes" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <param name="nodes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; left, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!TNode&gt; left, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!TNode&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.op_Inequality(Microsoft.CodeAnalysis.SeparatedSyntaxList{`0},Microsoft.CodeAnalysis.SeparatedSyntaxList{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As SeparatedSyntaxList(Of TNode), right As SeparatedSyntaxList(Of TNode)) As Boolean" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; -&gt; bool" Usage="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;.op_Inequality (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; left, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; Remove (TNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!TNode&gt; Remove(!TNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (node As TNode) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="member this.Remove : 'Node -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;" Usage="separatedSyntaxList.Remove node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; Remove(TNode node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="TNode" />
      </Parameters>
      <Docs>
        <param name="node">The element to remove.</param>
        <summary>
            Creates a new list with specified element removed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!TNode&gt; RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAt (index As Integer) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;" Usage="separatedSyntaxList.RemoveAt index" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of the element to remove.</param>
        <summary>
            Creates a new list with the element at the specified index removed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; Replace (TNode nodeInList, TNode newNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!TNode&gt; Replace(!TNode nodeInList, !TNode newNode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Replace(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (nodeInList As TNode, newNode As TNode) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="member this.Replace : 'Node * 'Node -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;" Usage="separatedSyntaxList.Replace (nodeInList, newNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; Replace(TNode nodeInList, TNode newNode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeInList" Type="TNode" />
        <Parameter Name="newNode" Type="TNode" />
      </Parameters>
      <Docs>
        <param name="nodeInList">The element to replace.</param>
        <param name="newNode">The new node.</param>
        <summary>
            Creates a new list with the specified element replaced by the new node.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceRange">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; ReplaceRange (TNode nodeInList, System.Collections.Generic.IEnumerable&lt;TNode&gt; newNodes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!TNode&gt; ReplaceRange(!TNode nodeInList, class System.Collections.Generic.IEnumerable`1&lt;!TNode&gt; newNodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ReplaceRange(`0,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplaceRange (nodeInList As TNode, newNodes As IEnumerable(Of TNode)) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="member this.ReplaceRange : 'Node * seq&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt; -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;" Usage="separatedSyntaxList.ReplaceRange (nodeInList, newNodes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; ReplaceRange(TNode nodeInList, System::Collections::Generic::IEnumerable&lt;TNode&gt; ^ newNodes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeInList" Type="TNode" />
        <Parameter Name="newNodes" Type="System.Collections.Generic.IEnumerable&lt;TNode&gt;" />
      </Parameters>
      <Docs>
        <param name="nodeInList">The element to replace.</param>
        <param name="newNodes">The new nodes.</param>
        <summary>
            Creates a new list with the specified element replaced by the new nodes.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceSeparator">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt; ReplaceSeparator (Microsoft.CodeAnalysis.SyntaxToken separatorToken, Microsoft.CodeAnalysis.SyntaxToken newSeparator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;!TNode&gt; ReplaceSeparator(valuetype Microsoft.CodeAnalysis.SyntaxToken separatorToken, valuetype Microsoft.CodeAnalysis.SyntaxToken newSeparator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ReplaceSeparator(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplaceSeparator (separatorToken As SyntaxToken, newSeparator As SyntaxToken) As SeparatedSyntaxList(Of TNode)" />
      <MemberSignature Language="F#" Value="member this.ReplaceSeparator : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;" Usage="separatedSyntaxList.ReplaceSeparator (separatorToken, newSeparator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;TNode&gt; ReplaceSeparator(Microsoft::CodeAnalysis::SyntaxToken separatorToken, Microsoft::CodeAnalysis::SyntaxToken newSeparator);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separatorToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="newSeparator" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="separatorToken">The separator token to be replaced.</param>
        <param name="newSeparator">The new separator token.</param>
        <summary>
            Creates a new list with the specified separator token replaced with the new separator.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatorCount">
      <MemberSignature Language="C#" Value="public int SeparatorCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SeparatorCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.SeparatorCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SeparatorCount As Integer" />
      <MemberSignature Language="F#" Value="member this.SeparatorCount : int" Usage="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;.SeparatorCount" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SeparatorCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Span">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Text.TextSpan Span { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.Text.TextSpan Span" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Span" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Span As TextSpan" />
      <MemberSignature Language="F#" Value="member this.Span : Microsoft.CodeAnalysis.Text.TextSpan" Usage="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;'Node (requires 'Node :&gt; Microsoft.CodeAnalysis.SyntaxNode)&gt;.Span" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::Text::TextSpan Span { Microsoft::CodeAnalysis::Text::TextSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.TextSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;TNode&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;TNode&gt; IEnumerable&lt;TNode&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TNode&gt; System.Collections.Generic.IEnumerable&lt;TNode&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.System#Collections#Generic#IEnumerable&lt;TNode&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of TNode) Implements IEnumerable(Of TNode).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;TNode&gt; ^ System.Collections.Generic.IEnumerable&lt;TNode&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;TNode&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFullString">
      <MemberSignature Language="C#" Value="public string ToFullString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToFullString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ToFullString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFullString () As String" />
      <MemberSignature Language="F#" Value="member this.ToFullString : unit -&gt; string" Usage="separatedSyntaxList.ToFullString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToFullString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns the full string representation of the nodes in this list including separators, 
            the first node's leading trivia, and the last node or token's trailing trivia.
            </summary>
        <returns>
            The full string representation of the nodes in this list including separators including separators,
            the first node's leading trivia, and the last node or token's trailing trivia.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="separatedSyntaxList.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns the string representation of the nodes in this list including separators but not including 
            the first node's leading trivia and the last node or token's trailing trivia.
            </summary>
        <returns>
            The string representation of the nodes in this list including separators but not including 
            the first node's leading trivia and the last node or token's trailing trivia.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>