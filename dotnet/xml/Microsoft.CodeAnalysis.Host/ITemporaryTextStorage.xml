<Type Name="ITemporaryTextStorage" FullName="Microsoft.CodeAnalysis.Host.ITemporaryTextStorage">
  <TypeSignature Language="C#" Value="public interface ITemporaryTextStorage : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITemporaryTextStorage implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Host.ITemporaryTextStorage" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITemporaryTextStorage&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type ITemporaryTextStorage = interface&#xA;    interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITemporaryTextStorage : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            TemporaryStorage can be used to read and write text to a temporary storage location.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ReadText">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Text.SourceText ReadText (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.CodeAnalysis.Text.SourceText ReadText(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Host.ITemporaryTextStorage.ReadText(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReadText : System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.Text.SourceText" Usage="iTemporaryTextStorage.ReadText cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Text.SourceText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadTextAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Text.SourceText&gt; ReadTextAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.CodeAnalysis.Text.SourceText&gt; ReadTextAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Host.ITemporaryTextStorage.ReadTextAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReadTextAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Text.SourceText&gt;" Usage="iTemporaryTextStorage.ReadTextAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.CodeAnalysis.Text.SourceText&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteText">
      <MemberSignature Language="C#" Value="public void WriteText (Microsoft.CodeAnalysis.Text.SourceText text, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteText(class Microsoft.CodeAnalysis.Text.SourceText text, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Host.ITemporaryTextStorage.WriteText(Microsoft.CodeAnalysis.Text.SourceText,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member WriteText : Microsoft.CodeAnalysis.Text.SourceText * System.Threading.CancellationToken -&gt; unit" Usage="iTemporaryTextStorage.WriteText (text, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Microsoft.CodeAnalysis.Text.SourceText" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTextAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteTextAsync (Microsoft.CodeAnalysis.Text.SourceText text, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteTextAsync(class Microsoft.CodeAnalysis.Text.SourceText text, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.Host.ITemporaryTextStorage.WriteTextAsync(Microsoft.CodeAnalysis.Text.SourceText,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member WriteTextAsync : Microsoft.CodeAnalysis.Text.SourceText * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iTemporaryTextStorage.WriteTextAsync (text, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.Workspaces</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Microsoft.CodeAnalysis.Text.SourceText" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>