<Type Name="MidExpressionSyntax" FullName="Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax">
  <TypeSignature Language="C#" Value="public sealed class MidExpressionSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed MidExpressionSyntax extends Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MidExpressionSyntax&#xA;Inherits ExpressionSyntax" />
  <TypeSignature Language="F#" Value="type MidExpressionSyntax = class&#xA;    inherit ExpressionSyntax" />
  <TypeSignature Language="C++ CLI" Value="public ref class MidExpressionSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax" />
  <TypeSignature Language="C++ CX" Value="public ref class MidExpressionSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax" />
  <TypeSignature Language="C++ WINRT" Value="class MidExpressionSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
 Represents a left-hand side of a MidAssignment statement.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public override void Accept (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Accept(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax.Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Accept (visitor As VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor -&gt; unit" Usage="midExpressionSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value=" override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public override TResult Accept&lt;TResult&gt; (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt; visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!TResult Accept&lt;TResult&gt;(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor`1&lt;!!TResult&gt; visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax.Accept``1(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Accept(Of TResult) (visitor As VisualBasicSyntaxVisitor(Of TResult)) As TResult" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;'Result&gt; -&gt; 'Result" Usage="midExpressionSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor&lt;TResult&gt; ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor&lt;TResult&gt; const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddArgumentListArguments">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax AddArgumentListArguments (params Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax AddArgumentListArguments(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax.AddArgumentListArguments(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddArgumentListArguments (ParamArray items As ArgumentSyntax()) As MidExpressionSyntax" />
      <MemberSignature Language="F#" Value="member this.AddArgumentListArguments : Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax" Usage="midExpressionSyntax.AddArgumentListArguments items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::MidExpressionSyntax ^ AddArgumentListArguments(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArgumentList">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArgumentList { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax ArgumentList" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax.ArgumentList" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentList As ArgumentListSyntax" />
      <MemberSignature Language="F#" Value="member this.ArgumentList : Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax.ArgumentList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ ArgumentList { Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ ArgumentList { Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The argument list.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxToken Mid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken Mid" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax.Mid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Mid As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.Mid : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax.Mid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxToken Mid { Microsoft::CodeAnalysis::SyntaxToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The "Mid" possibly followed by a type character.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax Update (Microsoft.CodeAnalysis.SyntaxToken mid, Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax Update(valuetype Microsoft.CodeAnalysis.SyntaxToken mid, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (mid As SyntaxToken, argumentList As ArgumentListSyntax) As MidExpressionSyntax" />
      <MemberSignature Language="F#" Value="member this.Update : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax" Usage="midExpressionSyntax.Update (mid, argumentList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::MidExpressionSyntax ^ Update(Microsoft::CodeAnalysis::SyntaxToken mid, Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ argumentList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mid" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="mid">
 The value for the Mid property.
 </param>
        <param name="argumentList">
 The value for the ArgumentList property.
 </param>
        <summary>
 Returns a copy of this with the specified changes. Returns this instance if
 there are no actual changes.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithArgumentList">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax WithArgumentList (Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax WithArgumentList(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax argumentList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax.WithArgumentList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithArgumentList (argumentList As ArgumentListSyntax) As MidExpressionSyntax" />
      <MemberSignature Language="F#" Value="member this.WithArgumentList : Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax" Usage="midExpressionSyntax.WithArgumentList argumentList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::MidExpressionSyntax ^ WithArgumentList(Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ argumentList);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::MidExpressionSyntax ^ WithArgumentList(Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ argumentList);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::VisualBasic::Syntax::MidExpressionSyntax WithArgumentList(Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax const &amp; argumentList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argumentList" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="argumentList">To be added.</param>
        <summary>
 Returns a copy of this with the ArgumentList property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithMid">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax WithMid (Microsoft.CodeAnalysis.SyntaxToken mid);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax WithMid(valuetype Microsoft.CodeAnalysis.SyntaxToken mid) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax.WithMid(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithMid (mid As SyntaxToken) As MidExpressionSyntax" />
      <MemberSignature Language="F#" Value="member this.WithMid : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax" Usage="midExpressionSyntax.WithMid mid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::MidExpressionSyntax ^ WithMid(Microsoft::CodeAnalysis::SyntaxToken mid);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mid" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="mid">To be added.</param>
        <summary>
 Returns a copy of this with the Mid property changed to the specified value.
 Returns this instance if the specified value is the same as the current value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>