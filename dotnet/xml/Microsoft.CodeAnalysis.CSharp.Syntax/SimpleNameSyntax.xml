<Type Name="SimpleNameSyntax" FullName="Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax">
  <TypeSignature Language="C#" Value="public abstract class SimpleNameSyntax : Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SimpleNameSyntax extends Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides the base class from which the classes that represent simple name syntax nodes are derived. This is an abstract class.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Identifier">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxToken Identifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken Identifier" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax.Identifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>SyntaxToken representing the identifier of the simple name.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>