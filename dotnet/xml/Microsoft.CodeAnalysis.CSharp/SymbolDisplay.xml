<Type Name="SymbolDisplay" FullName="Microsoft.CodeAnalysis.CSharp.SymbolDisplay">
  <TypeSignature Language="C#" Value="public static class SymbolDisplay" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit SymbolDisplay extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CSharp.SymbolDisplay" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Displays a symbol in the C# style.
            </summary>
    <remarks>To be added.</remarks>
    <altmember cref="T:Microsoft.CodeAnalysis.VisualBasic.Symbols.SymbolDisplay" />
  </Docs>
  <Members>
    <Member MemberName="FormatLiteral">
      <MemberSignature Language="C#" Value="public static string FormatLiteral (char c, bool quote);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatLiteral(char c, bool quote) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SymbolDisplay.FormatLiteral(System.Char,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
        <Parameter Name="quote" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="c">The value that the resulting character literal should have.</param>
        <param name="quote">True to put (single) quotes around the character literal.</param>
        <summary>
            Returns a C# character literal with the given value.
            </summary>
        <returns>A character literal with the given value.</returns>
        <remarks>
            Escapes non-printable characters.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatLiteral">
      <MemberSignature Language="C#" Value="public static string FormatLiteral (string value, bool quote);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatLiteral(string value, bool quote) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SymbolDisplay.FormatLiteral(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="quote" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The value that the resulting string literal should have.</param>
        <param name="quote">True to put (double) quotes around the string literal.</param>
        <summary>
            Returns a C# string literal with the given value.
            </summary>
        <returns>A string literal with the given value.</returns>
        <remarks>
            Escapes non-printable characters.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatPrimitive">
      <MemberSignature Language="C#" Value="public static string FormatPrimitive (object obj, bool quoteStrings, bool useHexadecimalNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatPrimitive(object obj, bool quoteStrings, bool useHexadecimalNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SymbolDisplay.FormatPrimitive(System.Object,System.Boolean,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="quoteStrings" Type="System.Boolean" />
        <Parameter Name="useHexadecimalNumbers" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">A value to display as a string.</param>
        <param name="quoteStrings">Whether or not to quote string literals.</param>
        <param name="useHexadecimalNumbers">Whether or not to display integral literals in hexadecimal.</param>
        <summary>
            Returns a string representation of an object of primitive type.
            </summary>
        <returns>A string representation of an object of primitive type (or null if the type is not supported).</returns>
        <remarks>
            Handles <see cref="T:System.Boolean" />, <see cref="T:System.String" />, <see cref="T:System.Char" />, <see cref="T:System.SByte" /><see cref="T:System.Byte" />, <see cref="T:System.Int16" />, <see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, <see cref="T:System.UInt32" />,
            <see cref="T:System.Int64" />, <see cref="T:System.UInt64" />, <see cref="T:System.Double" />, <see cref="T:System.Single" />, <see cref="T:System.Decimal" />,
            and <c>null</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDisplayParts">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SymbolDisplayPart&gt; ToDisplayParts (Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.SymbolDisplayFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;valuetype Microsoft.CodeAnalysis.SymbolDisplayPart&gt; ToDisplayParts(class Microsoft.CodeAnalysis.ISymbol symbol, class Microsoft.CodeAnalysis.SymbolDisplayFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SymbolDisplay.ToDisplayParts(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SymbolDisplayFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SymbolDisplayPart&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.ISymbol" />
        <Parameter Name="format" Type="Microsoft.CodeAnalysis.SymbolDisplayFormat" />
      </Parameters>
      <Docs>
        <param name="symbol">The symbol to be displayed.</param>
        <param name="format">The formatting options to apply.  If null is passed, <see cref="P:Microsoft.CodeAnalysis.SymbolDisplayFormat.CSharpErrorMessageFormat" /> will be used.</param>
        <summary>
            Convert a symbol to an array of string parts, each of which has a kind. Useful for
            colorizing the display string.
            </summary>
        <returns>A list of display parts.</returns>
        <remarks>
            Parts are not localized until they are converted to strings.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDisplayString">
      <MemberSignature Language="C#" Value="public static string ToDisplayString (Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.SymbolDisplayFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToDisplayString(class Microsoft.CodeAnalysis.ISymbol symbol, class Microsoft.CodeAnalysis.SymbolDisplayFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SymbolDisplay.ToDisplayString(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SymbolDisplayFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.ISymbol" />
        <Parameter Name="format" Type="Microsoft.CodeAnalysis.SymbolDisplayFormat" />
      </Parameters>
      <Docs>
        <param name="symbol">The symbol to be displayed.</param>
        <param name="format">The formatting options to apply.  If null is passed, <see cref="P:Microsoft.CodeAnalysis.SymbolDisplayFormat.CSharpErrorMessageFormat" /> will be used.</param>
        <summary>
            Displays a symbol in the C# style, based on a <see cref="T:Microsoft.CodeAnalysis.SymbolDisplayFormat" />.
            </summary>
        <returns>A formatted string that can be displayed to the user.</returns>
        <remarks>
            The return value is not expected to be syntactically valid C#.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToMinimalDisplayParts">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SymbolDisplayPart&gt; ToMinimalDisplayParts (Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.SymbolDisplayFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;valuetype Microsoft.CodeAnalysis.SymbolDisplayPart&gt; ToMinimalDisplayParts(class Microsoft.CodeAnalysis.ISymbol symbol, class Microsoft.CodeAnalysis.SemanticModel semanticModel, int32 position, class Microsoft.CodeAnalysis.SymbolDisplayFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SymbolDisplay.ToMinimalDisplayParts(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.SymbolDisplayPart&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.ISymbol" />
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="format" Type="Microsoft.CodeAnalysis.SymbolDisplayFormat" />
      </Parameters>
      <Docs>
        <param name="symbol">The symbol to be displayed.</param>
        <param name="semanticModel">Semantic information about the context in which the symbol is being displayed.</param>
        <param name="position">A position within the <see cref="T:Microsoft.CodeAnalysis.SyntaxTree" /> or <paramref name="semanticModel" />.</param>
        <param name="format">The formatting options to apply.  If null is passed, <see cref="P:Microsoft.CodeAnalysis.SymbolDisplayFormat.CSharpErrorMessageFormat" /> will be used.</param>
        <summary>
            Convert a symbol to an array of string parts, each of which has a kind. Useful for
            colorizing the display string.
            </summary>
        <returns>A list of display parts.</returns>
        <remarks>
            Parts are not localized until they are converted to strings.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToMinimalDisplayString">
      <MemberSignature Language="C#" Value="public static string ToMinimalDisplayString (Microsoft.CodeAnalysis.ISymbol symbol, Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.SymbolDisplayFormat format = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToMinimalDisplayString(class Microsoft.CodeAnalysis.ISymbol symbol, class Microsoft.CodeAnalysis.SemanticModel semanticModel, int32 position, class Microsoft.CodeAnalysis.SymbolDisplayFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.SymbolDisplay.ToMinimalDisplayString(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.ISymbol" />
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="format" Type="Microsoft.CodeAnalysis.SymbolDisplayFormat" />
      </Parameters>
      <Docs>
        <param name="symbol">The symbol to be displayed.</param>
        <param name="semanticModel">Semantic information about the context in which the symbol is being displayed.</param>
        <param name="position">A position within the <see cref="T:Microsoft.CodeAnalysis.SyntaxTree" /> or <paramref name="semanticModel" />.</param>
        <param name="format">The formatting options to apply.  If null is passed, <see cref="P:Microsoft.CodeAnalysis.SymbolDisplayFormat.CSharpErrorMessageFormat" /> will be used.</param>
        <summary>
            Displays a symbol in the C# style, based on a <see cref="T:Microsoft.CodeAnalysis.SymbolDisplayFormat" />.
            Based on the context, qualify type and member names as little as possible without
            introducing ambiguities.
            </summary>
        <returns>A formatted string that can be displayed to the user.</returns>
        <remarks>
            The return value is not expected to be syntactically valid C#.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>