<Type Name="RuntimeCapability" FullName="Microsoft.CodeAnalysis.RuntimeCapability">
  <TypeSignature Language="C#" Value="public enum RuntimeCapability" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed RuntimeCapability extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.RuntimeCapability" />
  <TypeSignature Language="VB.NET" Value="Public Enum RuntimeCapability" />
  <TypeSignature Language="F#" Value="type RuntimeCapability = " />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
    <AssemblyVersion>4.8.0.0</AssemblyVersion>
    <AssemblyVersion>4.9.0.0</AssemblyVersion>
    <AssemblyVersion>4.12.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
            Specifies capabilities that may or may not be supported by the common language runtime the compilation is
            targeting.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ByRefFields">
      <MemberSignature Language="C#" Value="ByRefFields" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.RuntimeCapability ByRefFields = int32(1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.RuntimeCapability.ByRefFields" />
      <MemberSignature Language="VB.NET" Value="ByRefFields" />
      <MemberSignature Language="F#" Value="ByRefFields = 1" Usage="Microsoft.CodeAnalysis.RuntimeCapability.ByRefFields" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.RuntimeCapability</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
            Represents a runtime feature where types can define ref fields.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="ByRefLikeGenerics">
      <MemberSignature Language="C#" Value="ByRefLikeGenerics" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.RuntimeCapability ByRefLikeGenerics = int32(8)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.RuntimeCapability.ByRefLikeGenerics" />
      <MemberSignature Language="VB.NET" Value="ByRefLikeGenerics" />
      <MemberSignature Language="F#" Value="ByRefLikeGenerics = 8" Usage="Microsoft.CodeAnalysis.RuntimeCapability.ByRefLikeGenerics" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.RuntimeCapability</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>
            Indicates that this version of runtime supports generic type parameters allowing substitution with a ref struct.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="CovariantReturnsOfClasses">
      <MemberSignature Language="C#" Value="CovariantReturnsOfClasses" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.RuntimeCapability CovariantReturnsOfClasses = int32(2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.RuntimeCapability.CovariantReturnsOfClasses" />
      <MemberSignature Language="VB.NET" Value="CovariantReturnsOfClasses" />
      <MemberSignature Language="F#" Value="CovariantReturnsOfClasses = 2" Usage="Microsoft.CodeAnalysis.RuntimeCapability.CovariantReturnsOfClasses" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.RuntimeCapability</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
            Represents a runtime feature where overriding methods can return more derived types than the method they override.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="DefaultImplementationsOfInterfaces">
      <MemberSignature Language="C#" Value="DefaultImplementationsOfInterfaces" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.RuntimeCapability DefaultImplementationsOfInterfaces = int32(3)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.RuntimeCapability.DefaultImplementationsOfInterfaces" />
      <MemberSignature Language="VB.NET" Value="DefaultImplementationsOfInterfaces" />
      <MemberSignature Language="F#" Value="DefaultImplementationsOfInterfaces = 3" Usage="Microsoft.CodeAnalysis.RuntimeCapability.DefaultImplementationsOfInterfaces" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.RuntimeCapability</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>
            Represents a runtime feature where interfaces can define default method implementations.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="InlineArrayTypes">
      <MemberSignature Language="C#" Value="InlineArrayTypes" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.RuntimeCapability InlineArrayTypes = int32(7)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.RuntimeCapability.InlineArrayTypes" />
      <MemberSignature Language="VB.NET" Value="InlineArrayTypes" />
      <MemberSignature Language="F#" Value="InlineArrayTypes = 7" Usage="Microsoft.CodeAnalysis.RuntimeCapability.InlineArrayTypes" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.RuntimeCapability</ReturnType>
      </ReturnValue>
      <MemberValue>7</MemberValue>
      <Docs>
        <summary>
            Indicates that this version of runtime supports inline array types.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="NumericIntPtr">
      <MemberSignature Language="C#" Value="NumericIntPtr" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.RuntimeCapability NumericIntPtr = int32(4)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.RuntimeCapability.NumericIntPtr" />
      <MemberSignature Language="VB.NET" Value="NumericIntPtr" />
      <MemberSignature Language="F#" Value="NumericIntPtr = 4" Usage="Microsoft.CodeAnalysis.RuntimeCapability.NumericIntPtr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.RuntimeCapability</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>
            Indicates that this version of the runtime supports IntPtr and UIntPtr as numeric types.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="UnmanagedSignatureCallingConvention">
      <MemberSignature Language="C#" Value="UnmanagedSignatureCallingConvention" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.RuntimeCapability UnmanagedSignatureCallingConvention = int32(5)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.RuntimeCapability.UnmanagedSignatureCallingConvention" />
      <MemberSignature Language="VB.NET" Value="UnmanagedSignatureCallingConvention" />
      <MemberSignature Language="F#" Value="UnmanagedSignatureCallingConvention = 5" Usage="Microsoft.CodeAnalysis.RuntimeCapability.UnmanagedSignatureCallingConvention" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.RuntimeCapability</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>
            Represents a runtime feature where C# function pointers can be declared with an unmanaged calling convention.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="VirtualStaticsInInterfaces">
      <MemberSignature Language="C#" Value="VirtualStaticsInInterfaces" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.CodeAnalysis.RuntimeCapability VirtualStaticsInInterfaces = int32(6)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.CodeAnalysis.RuntimeCapability.VirtualStaticsInInterfaces" />
      <MemberSignature Language="VB.NET" Value="VirtualStaticsInInterfaces" />
      <MemberSignature Language="F#" Value="VirtualStaticsInInterfaces = 6" Usage="Microsoft.CodeAnalysis.RuntimeCapability.VirtualStaticsInInterfaces" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.RuntimeCapability</ReturnType>
      </ReturnValue>
      <MemberValue>6</MemberValue>
      <Docs>
        <summary>
            Indicates that this version of runtime supports virtual static members of interfaces.
            </summary>
      </Docs>
    </Member>
  </Members>
</Type>
