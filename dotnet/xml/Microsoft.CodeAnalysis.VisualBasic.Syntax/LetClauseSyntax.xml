<Type Name="LetClauseSyntax" FullName="Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax">
  <TypeSignature Language="C#" Value="public sealed class LetClauseSyntax : Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LetClauseSyntax extends Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LetClauseSyntax&#xA;Inherits QueryClauseSyntax" />
  <TypeSignature Language="F#" Value="type LetClauseSyntax = class&#xA;    inherit QueryClauseSyntax" />
  <TypeSignature Language="C++ CLI" Value="public ref class LetClauseSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::QueryClauseSyntax" />
  <TypeSignature Language="C++ CX" Value="public ref class LetClauseSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::QueryClauseSyntax" />
  <TypeSignature Language="C++ WINRT" Value="class LetClauseSyntax sealed : Microsoft::CodeAnalysis::VisualBasic::Syntax::QueryClauseSyntax" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
 Represents a "Let" query operator.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public override void Accept (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Accept(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax.Accept(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Accept (visitor As VisualBasicSyntaxVisitor)" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor -&gt; unit" Usage="letClauseSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value=" override void Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public override TResult Accept&lt;TResult&gt; (Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt; visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!TResult Accept&lt;TResult&gt;(class Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor`1&lt;!!TResult&gt; visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax.Accept``1(Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Accept(Of TResult) (visitor As VisualBasicSyntaxVisitor(Of TResult)) As TResult" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;'Result&gt; -&gt; 'Result" Usage="letClauseSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor&lt;TResult&gt; ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::VisualBasic::VisualBasicSyntaxVisitor&lt;TResult&gt; const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddVariables">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax AddVariables (params Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax AddVariables(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax.AddVariables(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddVariables (ParamArray items As ExpressionRangeVariableSyntax()) As LetClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.AddVariables : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[] -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax" Usage="letClauseSyntax.AddVariables items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::LetClauseSyntax ^ AddVariables(... cli::array &lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LetKeyword">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxToken LetKeyword { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken LetKeyword" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax.LetKeyword" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LetKeyword As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.LetKeyword : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax.LetKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxToken LetKeyword { Microsoft::CodeAnalysis::SyntaxToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The "Let" keyword.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax Update (Microsoft.CodeAnalysis.SyntaxToken letKeyword, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax Update(valuetype Microsoft.CodeAnalysis.SyntaxToken letKeyword, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax.Update(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (letKeyword As SyntaxToken, variables As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)) As LetClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.Update : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax" Usage="letClauseSyntax.Update (letKeyword, variables)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::LetClauseSyntax ^ Update(Microsoft::CodeAnalysis::SyntaxToken letKeyword, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^&gt; variables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="letKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="letKeyword">
 The value for the LetKeyword property.
 </param>
        <param name="variables">
 The value for the Variables property.
 </param>
        <summary>
 Returns a copy of this with the specified changes. Returns this instance if
 there are no actual changes.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Variables">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; Variables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; Variables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax.Variables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Variables As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)" />
      <MemberSignature Language="F#" Value="member this.Variables : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax.Variables" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^&gt; Variables { Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 The list of expression range variable being defined by the Let operator.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithLetKeyword">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax WithLetKeyword (Microsoft.CodeAnalysis.SyntaxToken letKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax WithLetKeyword(valuetype Microsoft.CodeAnalysis.SyntaxToken letKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax.WithLetKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithLetKeyword (letKeyword As SyntaxToken) As LetClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.WithLetKeyword : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax" Usage="letClauseSyntax.WithLetKeyword letKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::LetClauseSyntax ^ WithLetKeyword(Microsoft::CodeAnalysis::SyntaxToken letKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="letKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="letKeyword">To be added.</param>
        <summary>
 Returns a copy of this with the LetKeyword property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithVariables">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax WithVariables (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax WithVariables(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax.WithVariables(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithVariables (variables As SeparatedSyntaxList(Of ExpressionRangeVariableSyntax)) As LetClauseSyntax" />
      <MemberSignature Language="F#" Value="member this.WithVariables : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax" Usage="letClauseSyntax.WithVariables variables" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::VisualBasic::Syntax::LetClauseSyntax ^ WithVariables(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^&gt; variables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">To be added.</param>
        <summary>
 Returns a copy of this with the Variables property changed to the specified
 value. Returns this instance if the specified value is the same as the current
 value.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>