<Type Name="SyntaxExtensions" FullName="Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions">
  <TypeSignature Language="C#" Value="public sealed class SyntaxExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SyntaxExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; Attributes (this Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClauseSyntax);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt; Attributes(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClauseSyntax) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions.Attributes(Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asClauseSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax" RefType="this" />
      </Parameters>
      <Docs>
        <param name="asClauseSyntax">To be added.</param>
        <summary>
 Returns the AttributeBlockSyntax of the given AsClauseSyntax if specified.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalizeWhitespace">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken NormalizeWhitespace (this Microsoft.CodeAnalysis.SyntaxToken token, string indentation, bool elasticTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken NormalizeWhitespace(valuetype Microsoft.CodeAnalysis.SyntaxToken token, string indentation, bool elasticTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions.NormalizeWhitespace(Microsoft.CodeAnalysis.SyntaxToken,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" RefType="this" />
        <Parameter Name="indentation" Type="System.String" />
        <Parameter Name="elasticTrivia" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <param name="indentation">To be added.</param>
        <param name="elasticTrivia">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalizeWhitespace">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken NormalizeWhitespace (this Microsoft.CodeAnalysis.SyntaxToken token, string indentation = &quot;    &quot;, string eol = &quot;&#xD;&#xA;&quot;, bool elasticTrivia = false, bool useDefaultCasing = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken NormalizeWhitespace(valuetype Microsoft.CodeAnalysis.SyntaxToken token, string indentation, string eol, bool elasticTrivia, bool useDefaultCasing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions.NormalizeWhitespace(Microsoft.CodeAnalysis.SyntaxToken,System.String,System.String,System.Boolean,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" RefType="this" />
        <Parameter Name="indentation" Type="System.String" />
        <Parameter Name="eol" Type="System.String" />
        <Parameter Name="elasticTrivia" Type="System.Boolean" />
        <Parameter Name="useDefaultCasing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <param name="indentation">To be added.</param>
        <param name="eol">To be added.</param>
        <param name="elasticTrivia">To be added.</param>
        <param name="useDefaultCasing">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalizeWhitespace">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTriviaList NormalizeWhitespace (this Microsoft.CodeAnalysis.SyntaxTriviaList trivia, string indentation = &quot;    &quot;, string eol = &quot;&#xD;&#xA;&quot;, bool elasticTrivia = false, bool useDefaultCasing = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTriviaList NormalizeWhitespace(valuetype Microsoft.CodeAnalysis.SyntaxTriviaList trivia, string indentation, string eol, bool elasticTrivia, bool useDefaultCasing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions.NormalizeWhitespace(Microsoft.CodeAnalysis.SyntaxTriviaList,System.String,System.String,System.Boolean,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTriviaList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trivia" Type="Microsoft.CodeAnalysis.SyntaxTriviaList" RefType="this" />
        <Parameter Name="indentation" Type="System.String" />
        <Parameter Name="eol" Type="System.String" />
        <Parameter Name="elasticTrivia" Type="System.Boolean" />
        <Parameter Name="useDefaultCasing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="trivia">To be added.</param>
        <param name="indentation">To be added.</param>
        <param name="eol">To be added.</param>
        <param name="elasticTrivia">To be added.</param>
        <param name="useDefaultCasing">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalizeWhitespace&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static TNode NormalizeWhitespace&lt;TNode&gt; (this TNode node, bool useDefaultCasing, string indentation, bool elasticTrivia) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TNode NormalizeWhitespace&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(!!TNode node, bool useDefaultCasing, string indentation, bool elasticTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions.NormalizeWhitespace``1(``0,System.Boolean,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="TNode" RefType="this" />
        <Parameter Name="useDefaultCasing" Type="System.Boolean" />
        <Parameter Name="indentation" Type="System.String" />
        <Parameter Name="elasticTrivia" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="node">To be added.</param>
        <param name="useDefaultCasing">To be added.</param>
        <param name="indentation">To be added.</param>
        <param name="elasticTrivia">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalizeWhitespace&lt;TNode&gt;">
      <MemberSignature Language="C#" Value="public static TNode NormalizeWhitespace&lt;TNode&gt; (this TNode node, bool useDefaultCasing, string indentation = &quot;    &quot;, string eol = &quot;&#xD;&#xA;&quot;, bool elasticTrivia = false) where TNode : Microsoft.CodeAnalysis.SyntaxNode;" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TNode NormalizeWhitespace&lt;(class Microsoft.CodeAnalysis.SyntaxNode) TNode&gt;(!!TNode node, bool useDefaultCasing, string indentation, string eol, bool elasticTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions.NormalizeWhitespace``1(``0,System.Boolean,System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TNode</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNode">
          <Constraints>
            <BaseTypeName>Microsoft.CodeAnalysis.SyntaxNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="node" Type="TNode" RefType="this" />
        <Parameter Name="useDefaultCasing" Type="System.Boolean" />
        <Parameter Name="indentation" Type="System.String" />
        <Parameter Name="eol" Type="System.String" />
        <Parameter Name="elasticTrivia" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TNode">To be added.</typeparam>
        <param name="node">To be added.</param>
        <param name="useDefaultCasing">To be added.</param>
        <param name="indentation">To be added.</param>
        <param name="eol">To be added.</param>
        <param name="elasticTrivia">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSyntaxTriviaList">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTriviaList ToSyntaxTriviaList (this System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; sequence);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTriviaList ToSyntaxTriviaList(class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; sequence) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions.ToSyntaxTriviaList(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTriviaList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="sequence">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetInferredMemberName">
      <MemberSignature Language="C#" Value="public static string TryGetInferredMemberName (this Microsoft.CodeAnalysis.SyntaxNode syntax);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TryGetInferredMemberName(class Microsoft.CodeAnalysis.SyntaxNode syntax) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions.TryGetInferredMemberName(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syntax" Type="Microsoft.CodeAnalysis.SyntaxNode" RefType="this" />
      </Parameters>
      <Docs>
        <param name="syntax">To be added.</param>
        <summary>
 Given an initializer expression infer the name of anonymous property or tuple element.
 Returns Nothing if unsuccessful
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Type (this Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClauseSyntax);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Type(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax asClauseSyntax) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions.Type(Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asClauseSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AsClauseSyntax" RefType="this" />
      </Parameters>
      <Docs>
        <param name="asClauseSyntax">To be added.</param>
        <summary>
 Returns the TypeSyntax of the given AsClauseSyntax if specified.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Type (this Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax newExpressionSyntax);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax Type(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax newExpressionSyntax) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions.Type(Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpressionSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NewExpressionSyntax" RefType="this" />
      </Parameters>
      <Docs>
        <param name="newExpressionSyntax">To be added.</param>
        <summary>
 Returns the TypeSyntax of the given NewExpressionSyntax if specified.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithIdentifier">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax WithIdentifier (this Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax simpleName, Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax WithIdentifier(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax simpleName, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.SyntaxExtensions.WithIdentifier(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="simpleName" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleNameSyntax" RefType="this" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="simpleName"></param>
        <param name="identifier"></param>
        <summary>
 Updates the given SimpleNameSyntax node with the given identifier token.
 This function is a wrapper that calls WithIdentifier on derived syntax nodes.
 </summary>
        <returns>The given simple name updated with the given identifier.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>