<Type Name="LambdaExpressionSyntax" FullName="Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax">
  <TypeSignature Language="C#" Value="public abstract class LambdaExpressionSyntax : Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit LambdaExpressionSyntax extends Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class LambdaExpressionSyntax&#xA;Inherits AnonymousFunctionExpressionSyntax" />
  <TypeSignature Language="F#" Value="type LambdaExpressionSyntax = class&#xA;    inherit AnonymousFunctionExpressionSyntax" />
  <TypeSignature Language="C++ CLI" Value="public ref class LambdaExpressionSyntax abstract : Microsoft::CodeAnalysis::CSharp::Syntax::AnonymousFunctionExpressionSyntax" />
  <TypeSignature Language="C++ CX" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;public ref class LambdaExpressionSyntax abstract : Microsoft::CodeAnalysis::CSharp::Syntax::AnonymousFunctionExpressionSyntax" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class LambdaExpressionSyntax abstract : Microsoft::CodeAnalysis::CSharp::Syntax::AnonymousFunctionExpressionSyntax" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides the base class from which the classes that represent lambda expressions are derived.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ArrowToken">
      <MemberSignature Language="C#" Value="public abstract Microsoft.CodeAnalysis.SyntaxToken ArrowToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken ArrowToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax.ArrowToken" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ArrowToken As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.ArrowToken : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax.ArrowToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Microsoft::CodeAnalysis::SyntaxToken ArrowToken { Microsoft::CodeAnalysis::SyntaxToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>SyntaxToken representing equals greater than.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>