<Type Name="Conversion" FullName="Microsoft.CodeAnalysis.VisualBasic.Conversion">
  <TypeSignature Language="C#" Value="public struct Conversion : IEquatable&lt;Microsoft.CodeAnalysis.VisualBasic.Conversion&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed Conversion extends System.ValueType implements class System.IEquatable`1&lt;valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Structure Conversion&#xA;Implements IEquatable(Of Conversion)" />
  <TypeSignature Language="F#" Value="type Conversion = struct" />
  <TypeSignature Language="C++ CLI" Value="public value class Conversion : IEquatable&lt;Microsoft::CodeAnalysis::VisualBasic::Conversion&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Microsoft.CodeAnalysis.VisualBasic.Conversion&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
 Summarizes whether a conversion is allowed, and if so, which kind of conversion (and in some cases, the
 associated symbol).
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Microsoft.CodeAnalysis.VisualBasic.Conversion other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Conversion.Equals(Microsoft.CodeAnalysis.VisualBasic.Conversion)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Conversion) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : Microsoft.CodeAnalysis.VisualBasic.Conversion -&gt; bool" Usage="conversion.Equals other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Microsoft::CodeAnalysis::VisualBasic::Conversion other) = IEquatable&lt;Microsoft::CodeAnalysis::VisualBasic::Conversion&gt;::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.CodeAnalysis.VisualBasic.Conversion" />
      </Parameters>
      <Docs>
        <param name="other">
 The object to compare with the current object. 
 </param>
        <summary>
 Determines whether the specified object is equal to the current object.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Conversion.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="conversion.Equals obj" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override bool Equals(Platform::Object ^ obj);" />
      <MemberSignature Language="C++ WINRT" Value=" override bool Equals(winrt::Windows::Foundation::IInspectable const &amp; obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
 The object to compare with the current object. 
 </param>
        <summary>
 Determines whether the specified object is equal to the current object.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public bool Exists { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Exists" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.Exists" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exists As Boolean" />
      <MemberSignature Language="F#" Value="member this.Exists : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.Conversion.Exists" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Exists { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool Exists { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Returns True if the conversion exists, either as a widening or narrowing conversion.
 </summary>
        <value>To be added.</value>
        <remarks>
 If this returns True, exactly one of <see cref="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsNarrowing" /> or <see cref="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsWidening" /> will return True. 
 If this returns False, neither <see cref="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsNarrowing" /> or <see cref="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsWidening" /> will return True.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Conversion.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="conversion.GetHashCode " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="C++ WINRT" Value=" override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Returns a hash code for the current object.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAnonymousDelegate">
      <MemberSignature Language="C#" Value="public bool IsAnonymousDelegate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnonymousDelegate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsAnonymousDelegate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnonymousDelegate As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsAnonymousDelegate : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.Conversion.IsAnonymousDelegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnonymousDelegate { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsAnonymousDelegate { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Returns True if this conversion is a widening anonymous delegate conversion as defined in section 8.8, or a
 narrowing anonymous delegate conversion as defined in section 8.9.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsArray : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.Conversion.IsArray" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Returns True if this conversion is a widening array conversion or a narrowing array conversion, as defined in
 section 8.5.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBoolean">
      <MemberSignature Language="C#" Value="public bool IsBoolean { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBoolean" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsBoolean" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBoolean As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsBoolean : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.Conversion.IsBoolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBoolean { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsBoolean { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Returns True if this conversion is a narrowing boolean conversion, as defined in section 8.2.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsDefault" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDefault As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsDefault : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.Conversion.IsDefault" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDefault { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsDefault { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Returns True if this conversion is a default conversion (a conversion from the "Nothing" literal). 
 </summary>
        <value>To be added.</value>
        <remarks>Note that default conversions are considered widening conversions.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdentity">
      <MemberSignature Language="C#" Value="public bool IsIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIdentity" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsIdentity" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIdentity As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsIdentity : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.Conversion.IsIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIdentity { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsIdentity { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Returns True if this conversion is an identity conversion. 
 </summary>
        <value>To be added.</value>
        <remarks>
 Note that identity conversion are also considered widening conversions.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLambda">
      <MemberSignature Language="C#" Value="public bool IsLambda { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLambda" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsLambda" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLambda As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsLambda : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.Conversion.IsLambda" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLambda { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsLambda { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Returns True if this is a lambda conversion.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNarrowing">
      <MemberSignature Language="C#" Value="public bool IsNarrowing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNarrowing" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsNarrowing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNarrowing As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNarrowing : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.Conversion.IsNarrowing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNarrowing { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsNarrowing { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Returns True if this conversion a narrowing conversion, and not a widening conversion. 
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullableValueType">
      <MemberSignature Language="C#" Value="public bool IsNullableValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullableValueType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsNullableValueType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNullableValueType As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNullableValueType : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.Conversion.IsNullableValueType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullableValueType { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsNullableValueType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Returns True if this conversion a widening nullable value type conversion or a narrowing nullable value type
 conversion as defined in section 8.6.1.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public bool IsNumeric { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNumeric" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsNumeric" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNumeric As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsNumeric : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.Conversion.IsNumeric" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNumeric { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsNumeric { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Returns True if this conversion is a widening numeric conversion or a narrowing numeric conversion, as defined in
 section 8.3.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public bool IsReference { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReference" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsReference" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReference As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsReference : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.Conversion.IsReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReference { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsReference { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Returns True if this conversion is a widening reference conversion or narrowing reference conversion, as defined in
 section 8.4.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsString">
      <MemberSignature Language="C#" Value="public bool IsString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsString" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsString As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsString : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.Conversion.IsString" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsString { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsString { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Returns True if this conversion a widening string conversion or a narrowing string conversion as defined in section
 8.7.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeParameter">
      <MemberSignature Language="C#" Value="public bool IsTypeParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeParameter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsTypeParameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTypeParameter As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsTypeParameter : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.Conversion.IsTypeParameter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTypeParameter { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsTypeParameter { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Returns True if this conversion a widening type parameter or a narrowing type parameter conversion, as defined in
 section 8.10.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUserDefined">
      <MemberSignature Language="C#" Value="public bool IsUserDefined { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUserDefined" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsUserDefined" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUserDefined As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsUserDefined : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.Conversion.IsUserDefined" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUserDefined { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsUserDefined { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Returns True if this conversion a widening user defined or a narrowing user defined conversion, as defined in
 section 8.11.
 </summary>
        <value>To be added.</value>
        <remarks>
 If this returns True, the involved conversion method can be obtained with the <see cref="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.Method" />
 property.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueType">
      <MemberSignature Language="C#" Value="public bool IsValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsValueType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueType As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsValueType : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.Conversion.IsValueType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueType { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsValueType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Returns True if this conversion a widening value type conversion or a narrowing value type conversion as defined in
 section 8.6.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWidening">
      <MemberSignature Language="C#" Value="public bool IsWidening { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWidening" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.IsWidening" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWidening As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsWidening : bool" Usage="Microsoft.CodeAnalysis.VisualBasic.Conversion.IsWidening" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWidening { bool get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsWidening { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Returns True if this conversion is a widening conversion, and not a narrowing conversion.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodSymbol">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IMethodSymbol MethodSymbol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IMethodSymbol MethodSymbol" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.VisualBasic.Conversion.MethodSymbol" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MethodSymbol As IMethodSymbol" />
      <MemberSignature Language="F#" Value="member this.MethodSymbol : Microsoft.CodeAnalysis.IMethodSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.Conversion.MethodSymbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::IMethodSymbol ^ MethodSymbol { Microsoft::CodeAnalysis::IMethodSymbol ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IMethodSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
 Returns the method that defines the user defined conversion, if any. Otherwise returns Nothing.
 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Microsoft.CodeAnalysis.VisualBasic.Conversion left, Microsoft.CodeAnalysis.VisualBasic.Conversion right);" />
      <MemberSignature Language="ILAsm" Value=".method public static specialname bool op_Equality(valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion left, valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Conversion.op_Equality(Microsoft.CodeAnalysis.VisualBasic.Conversion,Microsoft.CodeAnalysis.VisualBasic.Conversion)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Conversion, right As Conversion) As Boolean" />
      <MemberSignature Language="F#" Value="static member ( = ) : Microsoft.CodeAnalysis.VisualBasic.Conversion * Microsoft.CodeAnalysis.VisualBasic.Conversion -&gt; bool" Usage="left = right" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Microsoft::CodeAnalysis::VisualBasic::Conversion left, Microsoft::CodeAnalysis::VisualBasic::Conversion right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Conversion" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Conversion" />
      </Parameters>
      <Docs>
        <param name="left">The left value.</param>
        <param name="right">The right value.</param>
        <summary>
 Returns True if two <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Conversion" /> values are equal.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Microsoft.CodeAnalysis.VisualBasic.Conversion left, Microsoft.CodeAnalysis.VisualBasic.Conversion right);" />
      <MemberSignature Language="ILAsm" Value=".method public static specialname bool op_Inequality(valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion left, valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Conversion.op_Inequality(Microsoft.CodeAnalysis.VisualBasic.Conversion,Microsoft.CodeAnalysis.VisualBasic.Conversion)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Conversion, right As Conversion) As Boolean" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Microsoft.CodeAnalysis.VisualBasic.Conversion * Microsoft.CodeAnalysis.VisualBasic.Conversion -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.Conversion.op_Inequality (left, right)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Microsoft::CodeAnalysis::VisualBasic::Conversion left, Microsoft::CodeAnalysis::VisualBasic::Conversion right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Microsoft.CodeAnalysis.VisualBasic.Conversion" />
        <Parameter Name="right" Type="Microsoft.CodeAnalysis.VisualBasic.Conversion" />
      </Parameters>
      <Docs>
        <param name="left">The left value.</param>
        <param name="right">The right value.</param>
        <summary>
 Returns True if two <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Conversion" /> values are not equal.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToCommonConversion">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Operations.CommonConversion ToCommonConversion ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance valuetype Microsoft.CodeAnalysis.Operations.CommonConversion ToCommonConversion() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Conversion.ToCommonConversion" />
      <MemberSignature Language="VB.NET" Value="Public Function ToCommonConversion () As CommonConversion" />
      <MemberSignature Language="F#" Value="member this.ToCommonConversion : unit -&gt; Microsoft.CodeAnalysis.Operations.CommonConversion" Usage="conversion.ToCommonConversion " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::Operations::CommonConversion ToCommonConversion();" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::Operations::CommonConversion ToCommonConversion();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Operations.CommonConversion</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Creates a <seealso cref="T:Microsoft.CodeAnalysis.Operations.CommonConversion" /> from this Visual Basic conversion.
 </summary>
        <returns>The <see cref="T:Microsoft.CodeAnalysis.Operations.CommonConversion" /> that represents this conversion.</returns>
        <remarks>
 This is a lossy conversion; it is not possible to recover the original <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Conversion" />
 from the <see cref="T:Microsoft.CodeAnalysis.Operations.CommonConversion" /> struct.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.Conversion.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="conversion.ToString " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override Platform::String ^ ToString();" />
      <MemberSignature Language="C++ WINRT" Value=" override std::wstring ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
 Returns a string that represents the current object.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>