<Type Name="IWhileUntilLoopStatement" FullName="Microsoft.CodeAnalysis.Semantics.IWhileUntilLoopStatement">
  <TypeSignature Language="C#" Value="public interface IWhileUntilLoopStatement : Microsoft.CodeAnalysis.Semantics.IForWhileUntilLoopStatement" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWhileUntilLoopStatement implements class Microsoft.CodeAnalysis.IOperation, class Microsoft.CodeAnalysis.Semantics.IForWhileUntilLoopStatement, class Microsoft.CodeAnalysis.Semantics.ILoopStatement" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Semantics.IWhileUntilLoopStatement" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWhileUntilLoopStatement&#xA;Implements IForWhileUntilLoopStatement" />
  <TypeSignature Language="F#" Value="type IWhileUntilLoopStatement = interface&#xA;    interface IForWhileUntilLoopStatement&#xA;    interface ILoopStatement&#xA;    interface IOperation" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.CodeAnalysis.Semantics.IForWhileUntilLoopStatement</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents a C# while or do statement, or a VB While or Do statement.
            </summary>
    <remarks>
            This interface is reserved for implementation by its associated APIs. We reserve the right to
            change it in the future.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsTopTest">
      <MemberSignature Language="C#" Value="public bool IsTopTest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTopTest" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Semantics.IWhileUntilLoopStatement.IsTopTest" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTopTest As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsTopTest : bool" Usage="Microsoft.CodeAnalysis.Semantics.IWhileUntilLoopStatement.IsTopTest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            True if the loop test executes at the top of the loop; false if the loop test executes at the bottom of the loop.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWhile">
      <MemberSignature Language="C#" Value="public bool IsWhile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWhile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Semantics.IWhileUntilLoopStatement.IsWhile" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWhile As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsWhile : bool" Usage="Microsoft.CodeAnalysis.Semantics.IWhileUntilLoopStatement.IsWhile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            True if the loop is a while loop; false if the loop is an until loop.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>