<Type Name="ITryOperation" FullName="Microsoft.CodeAnalysis.Operations.ITryOperation">
  <TypeSignature Language="C#" Value="public interface ITryOperation : Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITryOperation implements class Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Operations.ITryOperation" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITryOperation&#xA;Implements IOperation" />
  <TypeSignature Language="F#" Value="type ITryOperation = interface&#xA;    interface IOperation" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITryOperation : Microsoft::CodeAnalysis::IOperation" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.CodeAnalysis.IOperation</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents a try operation for exception handling code with a body, catch clauses and a finally handler.
            <para>
            Current usage:
             (1) C# try statement.
             (2) VB Try statement.
            </para></summary>
    <remarks>
            This interface is reserved for implementation by its associated APIs. We reserve the right to
            change it in the future.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Operations.IBlockOperation Body { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.Operations.IBlockOperation Body" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.ITryOperation.Body" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Body As IBlockOperation" />
      <MemberSignature Language="F#" Value="member this.Body : Microsoft.CodeAnalysis.Operations.IBlockOperation" Usage="Microsoft.CodeAnalysis.Operations.ITryOperation.Body" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::Operations::IBlockOperation ^ Body { Microsoft::CodeAnalysis::Operations::IBlockOperation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Operations.IBlockOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Body of the try, over which the handlers are active.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catches">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Operations.ICatchClauseOperation&gt; Catches { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.Operations.ICatchClauseOperation&gt; Catches" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.ITryOperation.Catches" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Catches As ImmutableArray(Of ICatchClauseOperation)" />
      <MemberSignature Language="F#" Value="member this.Catches : System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Operations.ICatchClauseOperation&gt;" Usage="Microsoft.CodeAnalysis.Operations.ITryOperation.Catches" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::Operations::ICatchClauseOperation ^&gt; Catches { System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::Operations::ICatchClauseOperation ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.Operations.ICatchClauseOperation&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Catch clauses of the try.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitLabel">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.ILabelSymbol ExitLabel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.ILabelSymbol ExitLabel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.ITryOperation.ExitLabel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExitLabel As ILabelSymbol" />
      <MemberSignature Language="F#" Value="member this.ExitLabel : Microsoft.CodeAnalysis.ILabelSymbol" Usage="Microsoft.CodeAnalysis.Operations.ITryOperation.ExitLabel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::ILabelSymbol ^ ExitLabel { Microsoft::CodeAnalysis::ILabelSymbol ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ILabelSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Exit label for the try. This will always be null for C#.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finally">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Operations.IBlockOperation Finally { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.Operations.IBlockOperation Finally" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.ITryOperation.Finally" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Finally As IBlockOperation" />
      <MemberSignature Language="F#" Value="member this.Finally : Microsoft.CodeAnalysis.Operations.IBlockOperation" Usage="Microsoft.CodeAnalysis.Operations.ITryOperation.Finally" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::Operations::IBlockOperation ^ Finally { Microsoft::CodeAnalysis::Operations::IBlockOperation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Operations.IBlockOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Finally handler of the try.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>