<Type Name="EnumDeclarationSyntax" FullName="Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax">
  <TypeSignature Language="C#" Value="public sealed class EnumDeclarationSyntax : Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EnumDeclarationSyntax extends Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EnumDeclarationSyntax&#xA;Inherits BaseTypeDeclarationSyntax" />
  <TypeSignature Language="F#" Value="type EnumDeclarationSyntax = class&#xA;    inherit BaseTypeDeclarationSyntax" />
  <TypeSignature Language="C++ CLI" Value="public ref class EnumDeclarationSyntax sealed : Microsoft::CodeAnalysis::CSharp::Syntax::BaseTypeDeclarationSyntax" />
  <TypeSignature Language="C++ CX" Value="public ref class EnumDeclarationSyntax sealed : Microsoft::CodeAnalysis::CSharp::Syntax::BaseTypeDeclarationSyntax" />
  <TypeSignature Language="C++ WINRT" Value="class EnumDeclarationSyntax sealed : Microsoft::CodeAnalysis::CSharp::Syntax::BaseTypeDeclarationSyntax" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Enum type declaration syntax.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public override void Accept (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Accept(class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.Accept(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Accept (visitor As CSharpSyntaxVisitor)" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor -&gt; unit" Usage="enumDeclarationSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::CSharp::CSharpSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; override void Accept(Microsoft::CodeAnalysis::CSharp::CSharpSyntaxVisitor ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value=" override void Accept(Microsoft::CodeAnalysis::CSharp::CSharpSyntaxVisitor const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public override TResult Accept&lt;TResult&gt; (Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;TResult&gt; visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!TResult Accept&lt;TResult&gt;(class Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor`1&lt;!!TResult&gt; visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.Accept``1(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Accept(Of TResult) (visitor As CSharpSyntaxVisitor(Of TResult)) As TResult" />
      <MemberSignature Language="F#" Value="override this.Accept : Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;'Result&gt; -&gt; 'Result" Usage="enumDeclarationSyntax.Accept visitor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::CSharp::CSharpSyntaxVisitor&lt;TResult&gt; ^ visitor);" />
      <MemberSignature Language="C++ WINRT" Value="template &lt;typename TResult&gt;&#xA; override TResult Accept(Microsoft::CodeAnalysis::CSharp::CSharpSyntaxVisitor&lt;TResult&gt; const &amp; visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="Microsoft.CodeAnalysis.CSharp.CSharpSyntaxVisitor&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributeLists">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax AddAttributeLists (params Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax AddAttributeLists(class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.AddAttributeLists(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddAttributeLists (ParamArray items As AttributeListSyntax()) As EnumDeclarationSyntax" />
      <MemberSignature Language="F#" Value="member this.AddAttributeLists : Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Usage="enumDeclarationSyntax.AddAttributeLists items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::EnumDeclarationSyntax ^ AddAttributeLists(... cli::array &lt;Microsoft::CodeAnalysis::CSharp::Syntax::AttributeListSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddBaseListTypes">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax AddBaseListTypes (params Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax AddBaseListTypes(class Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.AddBaseListTypes(Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddBaseListTypes (ParamArray items As BaseTypeSyntax()) As EnumDeclarationSyntax" />
      <MemberSignature Language="F#" Value="member this.AddBaseListTypes : Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Usage="enumDeclarationSyntax.AddBaseListTypes items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::EnumDeclarationSyntax ^ AddBaseListTypes(... cli::array &lt;Microsoft::CodeAnalysis::CSharp::Syntax::BaseTypeSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMembers">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax AddMembers (params Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax AddMembers(class Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.AddMembers(Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMembers (ParamArray items As EnumMemberDeclarationSyntax()) As EnumDeclarationSyntax" />
      <MemberSignature Language="F#" Value="member this.AddMembers : Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Usage="enumDeclarationSyntax.AddMembers items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::EnumDeclarationSyntax ^ AddMembers(... cli::array &lt;Microsoft::CodeAnalysis::CSharp::Syntax::EnumMemberDeclarationSyntax ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddModifiers">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax AddModifiers (params Microsoft.CodeAnalysis.SyntaxToken[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax AddModifiers(valuetype Microsoft.CodeAnalysis.SyntaxToken[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.AddModifiers(Microsoft.CodeAnalysis.SyntaxToken[])" />
      <MemberSignature Language="VB.NET" Value="Public Function AddModifiers (ParamArray items As SyntaxToken()) As EnumDeclarationSyntax" />
      <MemberSignature Language="F#" Value="member this.AddModifiers : Microsoft.CodeAnalysis.SyntaxToken[] -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Usage="enumDeclarationSyntax.AddModifiers items" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::EnumDeclarationSyntax ^ AddModifiers(... cli::array &lt;Microsoft::CodeAnalysis::SyntaxToken&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.SyntaxToken[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeLists">
      <MemberSignature Language="C#" Value="public override Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; AttributeLists { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; AttributeLists" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.AttributeLists" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AttributeLists As SyntaxList(Of AttributeListSyntax)" />
      <MemberSignature Language="F#" Value="member this.AttributeLists : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.AttributeLists" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::CSharp::Syntax::AttributeListSyntax ^&gt; AttributeLists { Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::CSharp::Syntax::AttributeListSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseList">
      <MemberSignature Language="C#" Value="public override Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax BaseList { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax BaseList" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.BaseList" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseList As BaseListSyntax" />
      <MemberSignature Language="F#" Value="member this.BaseList : Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.BaseList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::CodeAnalysis::CSharp::Syntax::BaseListSyntax ^ BaseList { Microsoft::CodeAnalysis::CSharp::Syntax::BaseListSyntax ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual property Microsoft::CodeAnalysis::CSharp::Syntax::BaseListSyntax ^ BaseList { Microsoft::CodeAnalysis::CSharp::Syntax::BaseListSyntax ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseBraceToken">
      <MemberSignature Language="C#" Value="public override Microsoft.CodeAnalysis.SyntaxToken CloseBraceToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken CloseBraceToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.CloseBraceToken" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CloseBraceToken As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.CloseBraceToken : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.CloseBraceToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::CodeAnalysis::SyntaxToken CloseBraceToken { Microsoft::CodeAnalysis::SyntaxToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumKeyword">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SyntaxToken EnumKeyword { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken EnumKeyword" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.EnumKeyword" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EnumKeyword As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.EnumKeyword : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.EnumKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SyntaxToken EnumKeyword { Microsoft::CodeAnalysis::SyntaxToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the enum keyword token.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identifier">
      <MemberSignature Language="C#" Value="public override Microsoft.CodeAnalysis.SyntaxToken Identifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken Identifier" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.Identifier" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Identifier As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.Identifier : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.Identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::CodeAnalysis::SyntaxToken Identifier { Microsoft::CodeAnalysis::SyntaxToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Members">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt; Members { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt; Members" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.Members" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Members As SeparatedSyntaxList(Of EnumMemberDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="member this.Members : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt;" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.Members" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::CSharp::Syntax::EnumMemberDeclarationSyntax ^&gt; Members { Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::CSharp::Syntax::EnumMemberDeclarationSyntax ^&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the members declaration list.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public override Microsoft.CodeAnalysis.SyntaxTokenList Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxTokenList Modifiers" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Modifiers As SyntaxTokenList" />
      <MemberSignature Language="F#" Value="member this.Modifiers : Microsoft.CodeAnalysis.SyntaxTokenList" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.Modifiers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::CodeAnalysis::SyntaxTokenList Modifiers { Microsoft::CodeAnalysis::SyntaxTokenList get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTokenList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenBraceToken">
      <MemberSignature Language="C#" Value="public override Microsoft.CodeAnalysis.SyntaxToken OpenBraceToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken OpenBraceToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.OpenBraceToken" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property OpenBraceToken As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.OpenBraceToken : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.OpenBraceToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::CodeAnalysis::SyntaxToken OpenBraceToken { Microsoft::CodeAnalysis::SyntaxToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SemicolonToken">
      <MemberSignature Language="C#" Value="public override Microsoft.CodeAnalysis.SyntaxToken SemicolonToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.SyntaxToken SemicolonToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.SemicolonToken" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SemicolonToken As SyntaxToken" />
      <MemberSignature Language="F#" Value="member this.SemicolonToken : Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.SemicolonToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::CodeAnalysis::SyntaxToken SemicolonToken { Microsoft::CodeAnalysis::SyntaxToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the optional semicolon token.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax Update (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, Microsoft.CodeAnalysis.SyntaxTokenList modifiers, Microsoft.CodeAnalysis.SyntaxToken enumKeyword, Microsoft.CodeAnalysis.SyntaxToken identifier, Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, Microsoft.CodeAnalysis.SyntaxToken openBraceToken, Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt; members, Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax Update(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists, valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers, valuetype Microsoft.CodeAnalysis.SyntaxToken enumKeyword, valuetype Microsoft.CodeAnalysis.SyntaxToken identifier, class Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList, valuetype Microsoft.CodeAnalysis.SyntaxToken openBraceToken, valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt; members, valuetype Microsoft.CodeAnalysis.SyntaxToken closeBraceToken, valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.Update(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax},Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax},Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (attributeLists As SyntaxList(Of AttributeListSyntax), modifiers As SyntaxTokenList, enumKeyword As SyntaxToken, identifier As SyntaxToken, baseList As BaseListSyntax, openBraceToken As SyntaxToken, members As SeparatedSyntaxList(Of EnumMemberDeclarationSyntax), closeBraceToken As SyntaxToken, semicolonToken As SyntaxToken) As EnumDeclarationSyntax" />
      <MemberSignature Language="F#" Value="member this.Update : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; * Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt; * Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Usage="enumDeclarationSyntax.Update (attributeLists, modifiers, enumKeyword, identifier, baseList, openBraceToken, members, closeBraceToken, semicolonToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::EnumDeclarationSyntax ^ Update(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::CSharp::Syntax::AttributeListSyntax ^&gt; attributeLists, Microsoft::CodeAnalysis::SyntaxTokenList modifiers, Microsoft::CodeAnalysis::SyntaxToken enumKeyword, Microsoft::CodeAnalysis::SyntaxToken identifier, Microsoft::CodeAnalysis::CSharp::Syntax::BaseListSyntax ^ baseList, Microsoft::CodeAnalysis::SyntaxToken openBraceToken, Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::CSharp::Syntax::EnumMemberDeclarationSyntax ^&gt; members, Microsoft::CodeAnalysis::SyntaxToken closeBraceToken, Microsoft::CodeAnalysis::SyntaxToken semicolonToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
        <Parameter Name="enumKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="baseList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" />
        <Parameter Name="openBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt;" />
        <Parameter Name="closeBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <param name="modifiers">To be added.</param>
        <param name="enumKeyword">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="baseList">To be added.</param>
        <param name="openBraceToken">To be added.</param>
        <param name="members">To be added.</param>
        <param name="closeBraceToken">To be added.</param>
        <param name="semicolonToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAttributeLists">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax WithAttributeLists (Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax WithAttributeLists(valuetype Microsoft.CodeAnalysis.SyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; attributeLists) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.WithAttributeLists(Microsoft.CodeAnalysis.SyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithAttributeLists (attributeLists As SyntaxList(Of AttributeListSyntax)) As EnumDeclarationSyntax" />
      <MemberSignature Language="F#" Value="member this.WithAttributeLists : Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Usage="enumDeclarationSyntax.WithAttributeLists attributeLists" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::EnumDeclarationSyntax ^ WithAttributeLists(Microsoft::CodeAnalysis::SyntaxList&lt;Microsoft::CodeAnalysis::CSharp::Syntax::AttributeListSyntax ^&gt; attributeLists);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeLists" Type="Microsoft.CodeAnalysis.SyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="attributeLists">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithBaseList">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax WithBaseList (Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax WithBaseList(class Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax baseList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.WithBaseList(Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithBaseList (baseList As BaseListSyntax) As EnumDeclarationSyntax" />
      <MemberSignature Language="F#" Value="member this.WithBaseList : Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Usage="enumDeclarationSyntax.WithBaseList baseList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::EnumDeclarationSyntax ^ WithBaseList(Microsoft::CodeAnalysis::CSharp::Syntax::BaseListSyntax ^ baseList);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::EnumDeclarationSyntax ^ WithBaseList(Microsoft::CodeAnalysis::CSharp::Syntax::BaseListSyntax ^ baseList);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CodeAnalysis::CSharp::Syntax::EnumDeclarationSyntax WithBaseList(Microsoft::CodeAnalysis::CSharp::Syntax::BaseListSyntax const &amp; baseList);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseList" Type="Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" />
      </Parameters>
      <Docs>
        <param name="baseList">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithCloseBraceToken">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax WithCloseBraceToken (Microsoft.CodeAnalysis.SyntaxToken closeBraceToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax WithCloseBraceToken(valuetype Microsoft.CodeAnalysis.SyntaxToken closeBraceToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.WithCloseBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithCloseBraceToken (closeBraceToken As SyntaxToken) As EnumDeclarationSyntax" />
      <MemberSignature Language="F#" Value="member this.WithCloseBraceToken : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Usage="enumDeclarationSyntax.WithCloseBraceToken closeBraceToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::EnumDeclarationSyntax ^ WithCloseBraceToken(Microsoft::CodeAnalysis::SyntaxToken closeBraceToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="closeBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="closeBraceToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithEnumKeyword">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax WithEnumKeyword (Microsoft.CodeAnalysis.SyntaxToken enumKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax WithEnumKeyword(valuetype Microsoft.CodeAnalysis.SyntaxToken enumKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.WithEnumKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithEnumKeyword (enumKeyword As SyntaxToken) As EnumDeclarationSyntax" />
      <MemberSignature Language="F#" Value="member this.WithEnumKeyword : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Usage="enumDeclarationSyntax.WithEnumKeyword enumKeyword" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::EnumDeclarationSyntax ^ WithEnumKeyword(Microsoft::CodeAnalysis::SyntaxToken enumKeyword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumKeyword" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="enumKeyword">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithIdentifier">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax WithIdentifier (Microsoft.CodeAnalysis.SyntaxToken identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax WithIdentifier(valuetype Microsoft.CodeAnalysis.SyntaxToken identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.WithIdentifier(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithIdentifier (identifier As SyntaxToken) As EnumDeclarationSyntax" />
      <MemberSignature Language="F#" Value="member this.WithIdentifier : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Usage="enumDeclarationSyntax.WithIdentifier identifier" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::EnumDeclarationSyntax ^ WithIdentifier(Microsoft::CodeAnalysis::SyntaxToken identifier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithMembers">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax WithMembers (Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax WithMembers(valuetype Microsoft.CodeAnalysis.SeparatedSyntaxList`1&lt;class Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.WithMembers(Microsoft.CodeAnalysis.SeparatedSyntaxList{Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithMembers (members As SeparatedSyntaxList(Of EnumMemberDeclarationSyntax)) As EnumDeclarationSyntax" />
      <MemberSignature Language="F#" Value="member this.WithMembers : Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt; -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Usage="enumDeclarationSyntax.WithMembers members" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::EnumDeclarationSyntax ^ WithMembers(Microsoft::CodeAnalysis::SeparatedSyntaxList&lt;Microsoft::CodeAnalysis::CSharp::Syntax::EnumMemberDeclarationSyntax ^&gt; members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="members" Type="Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax&gt;" />
      </Parameters>
      <Docs>
        <param name="members">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithModifiers">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax WithModifiers (Microsoft.CodeAnalysis.SyntaxTokenList modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax WithModifiers(valuetype Microsoft.CodeAnalysis.SyntaxTokenList modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.WithModifiers(Microsoft.CodeAnalysis.SyntaxTokenList)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithModifiers (modifiers As SyntaxTokenList) As EnumDeclarationSyntax" />
      <MemberSignature Language="F#" Value="member this.WithModifiers : Microsoft.CodeAnalysis.SyntaxTokenList -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Usage="enumDeclarationSyntax.WithModifiers modifiers" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::EnumDeclarationSyntax ^ WithModifiers(Microsoft::CodeAnalysis::SyntaxTokenList modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modifiers" Type="Microsoft.CodeAnalysis.SyntaxTokenList" />
      </Parameters>
      <Docs>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithOpenBraceToken">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax WithOpenBraceToken (Microsoft.CodeAnalysis.SyntaxToken openBraceToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax WithOpenBraceToken(valuetype Microsoft.CodeAnalysis.SyntaxToken openBraceToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.WithOpenBraceToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithOpenBraceToken (openBraceToken As SyntaxToken) As EnumDeclarationSyntax" />
      <MemberSignature Language="F#" Value="member this.WithOpenBraceToken : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Usage="enumDeclarationSyntax.WithOpenBraceToken openBraceToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::EnumDeclarationSyntax ^ WithOpenBraceToken(Microsoft::CodeAnalysis::SyntaxToken openBraceToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openBraceToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="openBraceToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithSemicolonToken">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax WithSemicolonToken (Microsoft.CodeAnalysis.SyntaxToken semicolonToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax WithSemicolonToken(valuetype Microsoft.CodeAnalysis.SyntaxToken semicolonToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.WithSemicolonToken(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithSemicolonToken (semicolonToken As SyntaxToken) As EnumDeclarationSyntax" />
      <MemberSignature Language="F#" Value="member this.WithSemicolonToken : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Usage="enumDeclarationSyntax.WithSemicolonToken semicolonToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CodeAnalysis::CSharp::Syntax::EnumDeclarationSyntax ^ WithSemicolonToken(Microsoft::CodeAnalysis::SyntaxToken semicolonToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.CSharp</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semicolonToken" Type="Microsoft.CodeAnalysis.SyntaxToken" />
      </Parameters>
      <Docs>
        <param name="semicolonToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>