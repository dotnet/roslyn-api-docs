<Type Name="VisualBasicExtensions" FullName="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions">
  <TypeSignature Language="C#" Value="public sealed class VisualBasicExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed VisualBasicExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module VisualBasicExtensions" />
  <TypeSignature Language="F#" Value="type VisualBasicExtensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualBasicExtensions sealed" />
  <TypeSignature Language="C++ CX" Value="public ref class VisualBasicExtensions sealed" />
  <TypeSignature Language="C++ WINRT" Value="class VisualBasicExtensions sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTokenList Add (this Microsoft.CodeAnalysis.SyntaxTokenList list, params Microsoft.CodeAnalysis.SyntaxToken[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTokenList Add(valuetype Microsoft.CodeAnalysis.SyntaxTokenList list, valuetype Microsoft.CodeAnalysis.SyntaxToken[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.Add(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Add (list As SyntaxTokenList, ParamArray items As SyntaxToken()) As SyntaxTokenList" />
      <MemberSignature Language="F#" Value="static member Add : Microsoft.CodeAnalysis.SyntaxTokenList * Microsoft.CodeAnalysis.SyntaxToken[] -&gt; Microsoft.CodeAnalysis.SyntaxTokenList" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.Add (list, items)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::SyntaxTokenList Add(Microsoft::CodeAnalysis::SyntaxTokenList list, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxToken&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTokenList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="Microsoft.CodeAnalysis.SyntaxTokenList" RefType="this" />
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.SyntaxToken[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="list">To be added.</param>
        <param name="items">To be added.</param>
        <summary>
 Add one or more tokens to the end of the list.
 </summary>
        <returns>A new list with the tokens added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AliasImports">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IAliasSymbol&gt; AliasImports (this Microsoft.CodeAnalysis.Compilation compilation);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.IAliasSymbol&gt; AliasImports(class Microsoft.CodeAnalysis.Compilation compilation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.AliasImports(Microsoft.CodeAnalysis.Compilation)" />
      <MemberSignature Language="F#" Value="static member AliasImports : Microsoft.CodeAnalysis.Compilation -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IAliasSymbol&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.AliasImports compilation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::IAliasSymbol ^&gt; AliasImports(Microsoft::CodeAnalysis::Compilation ^ compilation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.IAliasSymbol&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compilation" Type="Microsoft.CodeAnalysis.Compilation" RefType="this" />
      </Parameters>
      <Docs>
        <param name="compilation">A source Compilation object.</param>
        <summary>
 Gets the compilation AliasImports property.
 </summary>
        <returns>An ImmutableArray of AliasSymbol, from the compilation instance AliasImports property; otherwise an empty ImmutableArray if compilation instance is Null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeControlFlow">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.ControlFlowAnalysis AnalyzeControlFlow (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.ControlFlowAnalysis AnalyzeControlFlow(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.AnalyzeControlFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax)" />
      <MemberSignature Language="F#" Value="static member AnalyzeControlFlow : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.ControlFlowAnalysis" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.AnalyzeControlFlow (semanticModel, statement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::ControlFlowAnalysis ^ AnalyzeControlFlow(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^ statement);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::ControlFlowAnalysis ^ AnalyzeControlFlow(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^ statement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ControlFlowAnalysis</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>
 Analyze control-flow within a part of a method body.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeControlFlow">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.ControlFlowAnalysis AnalyzeControlFlow (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax firstStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax lastStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.ControlFlowAnalysis AnalyzeControlFlow(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax firstStatement, class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax lastStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.AnalyzeControlFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax)" />
      <MemberSignature Language="F#" Value="static member AnalyzeControlFlow : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.ControlFlowAnalysis" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.AnalyzeControlFlow (semanticModel, firstStatement, lastStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::ControlFlowAnalysis ^ AnalyzeControlFlow(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^ firstStatement, Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^ lastStatement);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::ControlFlowAnalysis ^ AnalyzeControlFlow(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^ firstStatement, Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^ lastStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ControlFlowAnalysis</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="firstStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax" />
        <Parameter Name="lastStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="firstStatement">To be added.</param>
        <param name="lastStatement">To be added.</param>
        <summary>
 Analyze control-flow within a part of a method body.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeDataFlow">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.DataFlowAnalysis AnalyzeDataFlow (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.DataFlowAnalysis AnalyzeDataFlow(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.AnalyzeDataFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="F#" Value="static member AnalyzeDataFlow : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; Microsoft.CodeAnalysis.DataFlowAnalysis" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.AnalyzeDataFlow (semanticModel, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::DataFlowAnalysis ^ AnalyzeDataFlow(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::DataFlowAnalysis ^ AnalyzeDataFlow(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.DataFlowAnalysis</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>
 Analyze data-flow within an expression. 
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeDataFlow">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.DataFlowAnalysis AnalyzeDataFlow (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax statement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.DataFlowAnalysis AnalyzeDataFlow(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.AnalyzeDataFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax)" />
      <MemberSignature Language="F#" Value="static member AnalyzeDataFlow : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.DataFlowAnalysis" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.AnalyzeDataFlow (semanticModel, statement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::DataFlowAnalysis ^ AnalyzeDataFlow(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^ statement);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::DataFlowAnalysis ^ AnalyzeDataFlow(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^ statement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.DataFlowAnalysis</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>
 Analyze data-flow within a statement.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeDataFlow">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.DataFlowAnalysis AnalyzeDataFlow (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax firstStatement, Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax lastStatement);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.DataFlowAnalysis AnalyzeDataFlow(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax firstStatement, class Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax lastStatement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.AnalyzeDataFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax)" />
      <MemberSignature Language="F#" Value="static member AnalyzeDataFlow : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax * Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax -&gt; Microsoft.CodeAnalysis.DataFlowAnalysis" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.AnalyzeDataFlow (semanticModel, firstStatement, lastStatement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::DataFlowAnalysis ^ AnalyzeDataFlow(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^ firstStatement, Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^ lastStatement);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::DataFlowAnalysis ^ AnalyzeDataFlow(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^ firstStatement, Microsoft::CodeAnalysis::VisualBasic::Syntax::StatementSyntax ^ lastStatement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.DataFlowAnalysis</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="firstStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax" />
        <Parameter Name="lastStatement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="firstStatement">To be added.</param>
        <param name="lastStatement">To be added.</param>
        <summary>
 Analyze data-flow within a set of contiguous statements.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociatedField">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IFieldSymbol AssociatedField (this Microsoft.CodeAnalysis.IEventSymbol eventSymbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IFieldSymbol AssociatedField(class Microsoft.CodeAnalysis.IEventSymbol eventSymbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.AssociatedField(Microsoft.CodeAnalysis.IEventSymbol)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AssociatedField (eventSymbol As IEventSymbol) As IFieldSymbol" />
      <MemberSignature Language="F#" Value="static member AssociatedField : Microsoft.CodeAnalysis.IEventSymbol -&gt; Microsoft.CodeAnalysis.IFieldSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.AssociatedField eventSymbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::IFieldSymbol ^ AssociatedField(Microsoft::CodeAnalysis::IEventSymbol ^ eventSymbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IFieldSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSymbol" Type="Microsoft.CodeAnalysis.IEventSymbol" RefType="this" />
      </Parameters>
      <Docs>
        <param name="eventSymbol">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassifyConversion">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Conversion ClassifyConversion (this Microsoft.CodeAnalysis.Compilation compilation, Microsoft.CodeAnalysis.ITypeSymbol source, Microsoft.CodeAnalysis.ITypeSymbol destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion ClassifyConversion(class Microsoft.CodeAnalysis.Compilation compilation, class Microsoft.CodeAnalysis.ITypeSymbol source, class Microsoft.CodeAnalysis.ITypeSymbol destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.ClassifyConversion(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.ITypeSymbol)" />
      <MemberSignature Language="F#" Value="static member ClassifyConversion : Microsoft.CodeAnalysis.Compilation * Microsoft.CodeAnalysis.ITypeSymbol * Microsoft.CodeAnalysis.ITypeSymbol -&gt; Microsoft.CodeAnalysis.VisualBasic.Conversion" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.ClassifyConversion (compilation, source, destination)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::Conversion ClassifyConversion(Microsoft::CodeAnalysis::Compilation ^ compilation, Microsoft::CodeAnalysis::ITypeSymbol ^ source, Microsoft::CodeAnalysis::ITypeSymbol ^ destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Conversion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compilation" Type="Microsoft.CodeAnalysis.Compilation" RefType="this" />
        <Parameter Name="source" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
        <Parameter Name="destination" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
      </Parameters>
      <Docs>
        <param name="compilation">A source Compilation object.</param>
        <param name="source">A source Typesymbol</param>
        <param name="destination">A destination Typesymbol</param>
        <summary>
 Determines what kind of conversion there is between the specified types.
 </summary>
        <returns>A Conversion instance, representing the kind of conversion between the two type symbols; otherwise Null if compilation instance is Null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassifyConversion">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Conversion ClassifyConversion (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.ITypeSymbol destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion ClassifyConversion(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.ITypeSymbol destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.ClassifyConversion(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.ITypeSymbol)" />
      <MemberSignature Language="F#" Value="static member ClassifyConversion : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.ITypeSymbol -&gt; Microsoft.CodeAnalysis.VisualBasic.Conversion" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.ClassifyConversion (semanticModel, expression, destination)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::Conversion ClassifyConversion(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::ITypeSymbol ^ destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Conversion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="destination" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
      </Parameters>
      <Docs>
        <param name="semanticModel">A source semantic model.</param>
        <param name="expression">A source expression syntax.</param>
        <param name="destination">A destination TypeSymbol.</param>
        <summary>
 Determines what kind of conversion there is between the expression syntax and a specified type.
 </summary>
        <returns>A Conversion instance, representing the kind of conversion between the expression and type symbol; otherwise Null if semantic model instance is Null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassifyConversion">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Conversion ClassifyConversion (this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.ITypeSymbol destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion ClassifyConversion(class Microsoft.CodeAnalysis.SemanticModel semanticModel, int32 position, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, class Microsoft.CodeAnalysis.ITypeSymbol destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.ClassifyConversion(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.ITypeSymbol)" />
      <MemberSignature Language="F#" Value="static member ClassifyConversion : Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.ITypeSymbol -&gt; Microsoft.CodeAnalysis.VisualBasic.Conversion" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.ClassifyConversion (semanticModel, position, expression, destination)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::Conversion ClassifyConversion(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::ITypeSymbol ^ destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Conversion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="destination" Type="Microsoft.CodeAnalysis.ITypeSymbol" />
      </Parameters>
      <Docs>
        <param name="semanticModel">A source semantic model.</param>
        <param name="position">A position within the expression syntax.</param>
        <param name="expression">A source expression syntax.</param>
        <param name="destination">A destination TypeSymbol.</param>
        <summary>
 Determines what kind of conversion there is between the expression syntax and a specified type.
 </summary>
        <returns>A Conversion instance, representing the kind of conversion between the expression and type symbol; otherwise Null if semantic model instance is Null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAggregateClauseSymbolInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.AggregateClauseSymbolInfo GetAggregateClauseSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax aggregateSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.AggregateClauseSymbolInfo GetAggregateClauseSymbolInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax aggregateSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetAggregateClauseSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetAggregateClauseSymbolInfo : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.VisualBasic.AggregateClauseSymbolInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetAggregateClauseSymbolInfo (semanticModel, aggregateSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.AggregateClauseSymbolInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="aggregateSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="aggregateSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Returns information about methods associated with AggregateClauseSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAliasInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IAliasSymbol GetAliasInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax nameSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IAliasSymbol GetAliasInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax nameSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetAliasInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetAliasInfo : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IAliasSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetAliasInfo (semanticModel, nameSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IAliasSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="nameSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="nameSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 If "nameSyntax" resolves to an alias name, return the AliasSymbol corresponding
 to A. Otherwise return null.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAwaitExpressionInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.AwaitExpressionInfo GetAwaitExpressionInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax awaitExpression, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.AwaitExpressionInfo GetAwaitExpressionInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax awaitExpression, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetAwaitExpressionInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetAwaitExpressionInfo : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.VisualBasic.AwaitExpressionInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetAwaitExpressionInfo (semanticModel, awaitExpression, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.AwaitExpressionInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="awaitExpression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="awaitExpression">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding AwaitExpressionInfo containing semantic info for a specified AwaitExpressionSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBase">
      <MemberSignature Language="C#" Value="public static Nullable&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralBase&gt; GetBase (this Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Nullable`1&lt;valuetype Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralBase&gt; GetBase(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetBase(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetBase (token As SyntaxToken) As Nullable(Of LiteralBase)" />
      <MemberSignature Language="F#" Value="static member GetBase : Microsoft.CodeAnalysis.SyntaxToken -&gt; Nullable&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralBase&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetBase token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralBase&gt; GetBase(Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralBase&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" RefType="this" />
      </Parameters>
      <Docs>
        <param name="token">The source SyntaxToken.</param>
        <summary>
 The source token base for Integer literals.  Base can be Decimal, Hex or Octal.
 </summary>
        <returns>An instance representing the integer literal base.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCollectionInitializerSymbolInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SymbolInfo GetCollectionInitializerSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SymbolInfo GetCollectionInitializerSymbolInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetCollectionInitializerSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetCollectionInitializerSymbolInfo : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.SymbolInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetCollectionInitializerSymbolInfo (semanticModel, expression, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SymbolInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Returns what 'Add' method symbol(s), if any, corresponds to the given expression syntax 
 within <see cref="P:Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax.Initializer" />.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCollectionRangeVariableSymbolInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.CollectionRangeVariableSymbolInfo GetCollectionRangeVariableSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax variableSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.CollectionRangeVariableSymbolInfo GetCollectionRangeVariableSymbolInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax variableSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetCollectionRangeVariableSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetCollectionRangeVariableSymbolInfo : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.VisualBasic.CollectionRangeVariableSymbolInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetCollectionRangeVariableSymbolInfo (semanticModel, variableSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.CollectionRangeVariableSymbolInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="variableSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="variableSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Returns information about methods associated with CollectionRangeVariableSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompilationUnitRoot">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax GetCompilationUnitRoot (this Microsoft.CodeAnalysis.SyntaxTree tree);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax GetCompilationUnitRoot(class Microsoft.CodeAnalysis.SyntaxTree tree) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetCompilationUnitRoot(Microsoft.CodeAnalysis.SyntaxTree)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetCompilationUnitRoot (tree As SyntaxTree) As CompilationUnitSyntax" />
      <MemberSignature Language="F#" Value="static member GetCompilationUnitRoot : Microsoft.CodeAnalysis.SyntaxTree -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetCompilationUnitRoot tree" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CompilationUnitSyntax ^ GetCompilationUnitRoot(Microsoft::CodeAnalysis::SyntaxTree ^ tree);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::CompilationUnitSyntax ^ GetCompilationUnitRoot(Microsoft::CodeAnalysis::SyntaxTree ^ tree);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tree" Type="Microsoft.CodeAnalysis.SyntaxTree" RefType="this" />
      </Parameters>
      <Docs>
        <param name="tree">The source SyntaxTree.</param>
        <summary>
 Gets the root CompilationUnitSyntax for a specified SyntaxTree.
 </summary>
        <returns>A CompilationUnitSyntax.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConversion">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Conversion GetConversion (this Microsoft.CodeAnalysis.Operations.IConversionOperation conversionExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion GetConversion(class Microsoft.CodeAnalysis.Operations.IConversionOperation conversionExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetConversion(Microsoft.CodeAnalysis.Operations.IConversionOperation)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConversion (conversionExpression As IConversionOperation) As Conversion" />
      <MemberSignature Language="F#" Value="static member GetConversion : Microsoft.CodeAnalysis.Operations.IConversionOperation -&gt; Microsoft.CodeAnalysis.VisualBasic.Conversion" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetConversion conversionExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::Conversion GetConversion(Microsoft::CodeAnalysis::Operations::IConversionOperation ^ conversionExpression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Conversion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conversionExpression" Type="Microsoft.CodeAnalysis.Operations.IConversionOperation" RefType="this" />
      </Parameters>
      <Docs>
        <param name="conversionExpression">The conversion expression to get original info from.</param>
        <summary>
 Gets the underlying <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Conversion" /> information from an <see cref="T:Microsoft.CodeAnalysis.Operations.IConversionOperation" /> that was created from Visual Basic code.
 </summary>
        <returns>The underlying <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Conversion" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">If the <see cref="T:Microsoft.CodeAnalysis.Operations.IConversionOperation" /> was not created from Visual Basic code.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetConversion">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Conversion GetConversion (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.SyntaxNode expression, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion GetConversion(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.SyntaxNode expression, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetConversion(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetConversion : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.SyntaxNode * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Conversion" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetConversion (semanticModel, expression, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Conversion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.SyntaxNode" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding TypeInfo containing semantic info for a specified ExpressionSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IMethodSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IMethodSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IMethodSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IMethodSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding MethodSymbol for a specified AccessorStatementSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IRangeVariableSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax rangeVariableSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IRangeVariableSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax rangeVariableSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IRangeVariableSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, rangeVariableSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IRangeVariableSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="rangeVariableSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="rangeVariableSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding RangeVariableSymbol for a specified AggregationRangeVariableSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.INamedTypeSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax anonymousObjectCreationExpressionSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.INamedTypeSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax anonymousObjectCreationExpressionSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.INamedTypeSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, anonymousObjectCreationExpressionSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamedTypeSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="anonymousObjectCreationExpressionSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="anonymousObjectCreationExpressionSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding  NamedTypeSymbol for a specified  AnonymousObjectCreationExpressionSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.ILocalSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.ILocalSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.ILocalSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ILocalSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding LocalSymbol for a specified CatchStatementSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IRangeVariableSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax rangeVariableSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IRangeVariableSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax rangeVariableSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IRangeVariableSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, rangeVariableSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IRangeVariableSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="rangeVariableSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="rangeVariableSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding RangeVariableSymbol for a specified CollectionRangeVariableSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IMethodSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IMethodSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IMethodSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IMethodSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding symbol for a specified  DeclareStatementSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.INamedTypeSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.INamedTypeSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.INamedTypeSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamedTypeSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding NamedTypeSymbol for a specified DelegateStatementSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.INamedTypeSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.INamedTypeSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.INamedTypeSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamedTypeSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding NamedTypeSymbol for a specified EnumBlockSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IFieldSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IFieldSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IFieldSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IFieldSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding FieldSymbol for a specified EnumMemberDeclarationSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.INamedTypeSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.INamedTypeSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.INamedTypeSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamedTypeSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding NamedTypeSymbol for a specified EnumStatementSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IEventSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IEventSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IEventSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IEventSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding EventSymbol for a specified EventBlockSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IEventSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IEventSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IEventSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IEventSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding EventSymbol for a specified EventStatementSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IRangeVariableSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax rangeVariableSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IRangeVariableSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax rangeVariableSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IRangeVariableSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, rangeVariableSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IRangeVariableSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="rangeVariableSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="rangeVariableSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding RangeVariableSymbol for a specified ExpressionRangeVariableSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IPropertySymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax fieldInitializerSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IPropertySymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax fieldInitializerSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IPropertySymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, fieldInitializerSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IPropertySymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="fieldInitializerSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldInitializerSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">A source semantic model.</param>
        <param name="fieldInitializerSyntax">A FieldInitializerSyntax object.</param>
        <param name="cancellationToken">A cancellation token.</param>
        <summary>
 Gets the corresponding PropertySymbol for a specified FieldInitializerSyntax.
 </summary>
        <returns>A PropertySymbol. Null if semantic model is null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.ILabelSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.ILabelSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.ILabelSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ILabelSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding LabelSymbol for a specified LabelStatementSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IMethodSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IMethodSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IMethodSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IMethodSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding MethodSymbol for a specified MethodBlockBaseSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IMethodSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IMethodSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IMethodSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IMethodSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding MethodSymbol for a specified MethodStatementSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.ISymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifierSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.ISymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax identifierSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.ISymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, identifierSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ISymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="identifierSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">A source semantic model.</param>
        <param name="identifierSyntax">A IdentifierSyntax object.</param>
        <param name="cancellationToken">A cancellation token.</param>
        <summary>
 Gets the corresponding symbol for a specified identifier.
 </summary>
        <returns>A symbol, for the specified identifier; otherwise Null if semantic model is Null. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.INamespaceSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.INamespaceSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.INamespaceSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamespaceSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding NamespaceSymbol for a specified NamespaceBlockSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.INamespaceSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.INamespaceSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.INamespaceSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamespaceSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding NamespaceSymbol for a specified NamespaceStatementSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IMethodSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IMethodSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IMethodSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IMethodSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding MethodSymbol for a specified OperatorStatementSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IParameterSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax parameter, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IParameterSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax parameter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IParameterSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, parameter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IParameterSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="parameter" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="parameter">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding ParameterSymbol for a specified ParameterSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IPropertySymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IPropertySymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IPropertySymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IPropertySymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding PropertySymbol for a specified PropertyBlockSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IPropertySymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IPropertySymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IPropertySymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IPropertySymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding PropertySymbol for a specified PropertyStatementSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IAliasSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IAliasSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IAliasSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IAliasSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding AliasSymbol for a specified AliasImportsClauseSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IMethodSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IMethodSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.IMethodSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IMethodSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding MethodSymbol for a specified SubNewStatementSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.ISymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax elementSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.ISymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax elementSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.ISymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, elementSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ISymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="elementSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleElementSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">A source semantic model.</param>
        <param name="elementSyntax">A TupleElementSyntax object.</param>
        <param name="cancellationToken">A cancellation token.</param>
        <summary>
 Gets the corresponding symbol for a specified tuple element.
 </summary>
        <returns>A symbol, for the specified element; otherwise Nothing. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.INamedTypeSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.INamedTypeSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.INamedTypeSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamedTypeSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeBlockSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding NamedTypeSymbol for a specified TypeBlockSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.ITypeParameterSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax typeParameter, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.ITypeParameterSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax typeParameter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.ITypeParameterSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, typeParameter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ITypeParameterSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="typeParameter" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="typeParameter">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding TypeParameterSymbol Symbol for a specified TypeParameterSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeclaredSymbol">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.INamedTypeSymbol GetDeclaredSymbol (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax declarationSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.INamedTypeSymbol GetDeclaredSymbol(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax declarationSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetDeclaredSymbol : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.INamedTypeSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDeclaredSymbol (semanticModel, declarationSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamedTypeSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="declarationSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeStatementSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="declarationSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding NamedTypeSymbol for a specified TypeStatementSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDirectives">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax&gt; GetDirectives (this Microsoft.CodeAnalysis.SyntaxNode node, Func&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,bool&gt; filter = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.Generic.IList`1&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax&gt; GetDirectives(class Microsoft.CodeAnalysis.SyntaxNode node, class System.Func`2&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool&gt; filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDirectives(Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDirectives (node As SyntaxNode, Optional filter As Func(Of DirectiveTriviaSyntax, Boolean) = null) As IList(Of DirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="static member GetDirectives : Microsoft.CodeAnalysis.SyntaxNode * Func&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool&gt; -&gt; System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetDirectives (node, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" RefType="this" />
        <Parameter Name="filter" Type="System.Func&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="node">The source SyntaxNode.</param>
        <param name="filter">The optional DirectiveTrivia Syntax filter predicate.</param>
        <summary>
 Gets the DirectiveTriviaSyntax items for a specified SyntaxNode with optional filtering.
 </summary>
        <returns>A list of DirectiveTriviaSyntax items</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFieldAttributes">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.AttributeData&gt; GetFieldAttributes (this Microsoft.CodeAnalysis.IEventSymbol eventSymbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.AttributeData&gt; GetFieldAttributes(class Microsoft.CodeAnalysis.IEventSymbol eventSymbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetFieldAttributes(Microsoft.CodeAnalysis.IEventSymbol)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFieldAttributes (eventSymbol As IEventSymbol) As ImmutableArray(Of AttributeData)" />
      <MemberSignature Language="F#" Value="static member GetFieldAttributes : Microsoft.CodeAnalysis.IEventSymbol -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.AttributeData&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetFieldAttributes eventSymbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::AttributeData ^&gt; GetFieldAttributes(Microsoft::CodeAnalysis::IEventSymbol ^ eventSymbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.AttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSymbol" Type="Microsoft.CodeAnalysis.IEventSymbol" RefType="this" />
      </Parameters>
      <Docs>
        <param name="eventSymbol">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFirstDirective">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax GetFirstDirective (this Microsoft.CodeAnalysis.SyntaxNode node, Func&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,bool&gt; predicate = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax GetFirstDirective(class Microsoft.CodeAnalysis.SyntaxNode node, class System.Func`2&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetFirstDirective(Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFirstDirective (node As SyntaxNode, Optional predicate As Func(Of DirectiveTriviaSyntax, Boolean) = null) As DirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member GetFirstDirective : Microsoft.CodeAnalysis.SyntaxNode * Func&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetFirstDirective (node, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="node">The source SyntaxNode.</param>
        <param name="predicate">The optional DirectiveTriviaSyntax filter predicate.</param>
        <summary>
 Gets the first DirectiveTriviaSyntax item for a specified SyntaxNode.
 </summary>
        <returns>The first DirectiveSyntaxTrivia item.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForEachStatementInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo GetForEachStatementInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo GetForEachStatementInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetForEachStatementInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax)" />
      <MemberSignature Language="F#" Value="static member GetForEachStatementInfo : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetForEachStatementInfo (semanticModel, node)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::ForEachStatementInfo GetForEachStatementInfo(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, Microsoft::CodeAnalysis::VisualBasic::Syntax::ForEachBlockSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="node">To be added.</param>
        <summary>
 Gets the corresponding ForEachStatementInfo containing semantic info for a specified ForBlockSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForEachStatementInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo GetForEachStatementInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo GetForEachStatementInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetForEachStatementInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax)" />
      <MemberSignature Language="F#" Value="static member GetForEachStatementInfo : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax -&gt; Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetForEachStatementInfo (semanticModel, node)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::ForEachStatementInfo GetForEachStatementInfo(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, Microsoft::CodeAnalysis::VisualBasic::Syntax::ForEachStatementSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.ForEachStatementInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="node">To be added.</param>
        <summary>
 Gets the corresponding ForEachStatementInfo containing semantic info for a specified ForEachStatementSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIdentifierText">
      <MemberSignature Language="C#" Value="public static string GetIdentifierText (this Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetIdentifierText(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetIdentifierText(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetIdentifierText (token As SyntaxToken) As String" />
      <MemberSignature Language="F#" Value="static member GetIdentifierText : Microsoft.CodeAnalysis.SyntaxToken -&gt; string" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetIdentifierText token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ GetIdentifierText(Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" RefType="this" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>
 Returns the Identifiertext for a specified SyntaxToken.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInConversion">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Conversion GetInConversion (this Microsoft.CodeAnalysis.Operations.IArgumentOperation argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion GetInConversion(class Microsoft.CodeAnalysis.Operations.IArgumentOperation argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetInConversion(Microsoft.CodeAnalysis.Operations.IArgumentOperation)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetInConversion (argument As IArgumentOperation) As Conversion" />
      <MemberSignature Language="F#" Value="static member GetInConversion : Microsoft.CodeAnalysis.Operations.IArgumentOperation -&gt; Microsoft.CodeAnalysis.VisualBasic.Conversion" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetInConversion argument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::Conversion GetInConversion(Microsoft::CodeAnalysis::Operations::IArgumentOperation ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Conversion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="Microsoft.CodeAnalysis.Operations.IArgumentOperation" RefType="this" />
      </Parameters>
      <Docs>
        <param name="argument">The argument to get original info from.</param>
        <summary>
 Gets the underlying <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Conversion" /> information for InConversion of <see cref="T:Microsoft.CodeAnalysis.Operations.IArgumentOperation" /> that was created from Visual Basic code.
 </summary>
        <returns>The underlying <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Conversion" /> of the InConversion.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">If the <see cref="T:Microsoft.CodeAnalysis.Operations.IArgumentOperation" /> was not created from Visual Basic code.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInConversion">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Conversion GetInConversion (this Microsoft.CodeAnalysis.Operations.ICompoundAssignmentOperation compoundAssignment);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion GetInConversion(class Microsoft.CodeAnalysis.Operations.ICompoundAssignmentOperation compoundAssignment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetInConversion(Microsoft.CodeAnalysis.Operations.ICompoundAssignmentOperation)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetInConversion (compoundAssignment As ICompoundAssignmentOperation) As Conversion" />
      <MemberSignature Language="F#" Value="static member GetInConversion : Microsoft.CodeAnalysis.Operations.ICompoundAssignmentOperation -&gt; Microsoft.CodeAnalysis.VisualBasic.Conversion" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetInConversion compoundAssignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::Conversion GetInConversion(Microsoft::CodeAnalysis::Operations::ICompoundAssignmentOperation ^ compoundAssignment);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Conversion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compoundAssignment" Type="Microsoft.CodeAnalysis.Operations.ICompoundAssignmentOperation" RefType="this" />
      </Parameters>
      <Docs>
        <param name="compoundAssignment">To be added.</param>
        <summary>
 Gets the underlying <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Conversion" /> information from this <see cref="T:Microsoft.CodeAnalysis.Operations.ICompoundAssignmentOperation" />. This
 conversion is applied before the operator is applied to the result of this conversion and <see cref="P:Microsoft.CodeAnalysis.Operations.IAssignmentOperation.Value" />.
 </summary>
        <returns>To be added.</returns>
        <remarks>
 This compound assignment must have been created from Visual Basic code.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLastDirective">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax GetLastDirective (this Microsoft.CodeAnalysis.SyntaxNode node, Func&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,bool&gt; predicate = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax GetLastDirective(class Microsoft.CodeAnalysis.SyntaxNode node, class System.Func`2&lt;class Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetLastDirective(Microsoft.CodeAnalysis.SyntaxNode,System.Func{Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetLastDirective (node As SyntaxNode, Optional predicate As Func(Of DirectiveTriviaSyntax, Boolean) = null) As DirectiveTriviaSyntax" />
      <MemberSignature Language="F#" Value="static member GetLastDirective : Microsoft.CodeAnalysis.SyntaxNode * Func&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax, bool&gt; -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetLastDirective (node, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="node">The source node</param>
        <param name="predicate">The optional DirectiveTriviaSyntax filter predicate.</param>
        <summary>
 Gets the last DirectiveTriviaSyntax item for a specified SyntaxNode.
 </summary>
        <returns>The last DirectiveSyntaxTrivia item.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMemberGroup">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ISymbol&gt; GetMemberGroup (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax attribute, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.ISymbol&gt; GetMemberGroup(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax attribute, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetMemberGroup(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetMemberGroup : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax * System.Threading.CancellationToken -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ISymbol&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetMemberGroup (semanticModel, attribute, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ISymbol&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="attribute" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="attribute">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding ImmutableArray of Symbols for a specified AttributeSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMemberGroup">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ISymbol&gt; GetMemberGroup (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.ISymbol&gt; GetMemberGroup(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetMemberGroup(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetMemberGroup : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * System.Threading.CancellationToken -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ISymbol&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetMemberGroup (semanticModel, expression, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ISymbol&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding ImmutableArray of Symbols for a specified ExpressionSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModuleMembers">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.INamedTypeSymbol&gt; GetModuleMembers (this Microsoft.CodeAnalysis.INamespaceSymbol namespace);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.INamedTypeSymbol&gt; GetModuleMembers(class Microsoft.CodeAnalysis.INamespaceSymbol namespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetModuleMembers(Microsoft.CodeAnalysis.INamespaceSymbol)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetModuleMembers (namespace As INamespaceSymbol) As ImmutableArray(Of INamedTypeSymbol)" />
      <MemberSignature Language="F#" Value="static member GetModuleMembers : Microsoft.CodeAnalysis.INamespaceSymbol -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.INamedTypeSymbol&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetModuleMembers namespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::INamedTypeSymbol ^&gt; GetModuleMembers(Microsoft::CodeAnalysis::INamespaceSymbol ^ namespace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.INamedTypeSymbol&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespace" Type="Microsoft.CodeAnalysis.INamespaceSymbol" RefType="this" />
      </Parameters>
      <Docs>
        <param name="namespace">To be added.</param>
        <summary>
 Gets all module members in a namespace.
 </summary>
        <returns>An ImmutableArray of NamedTypeSymbol for all module members in namespace.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModuleMembers">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.INamedTypeSymbol&gt; GetModuleMembers (this Microsoft.CodeAnalysis.INamespaceSymbol namespace, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.INamedTypeSymbol&gt; GetModuleMembers(class Microsoft.CodeAnalysis.INamespaceSymbol namespace, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetModuleMembers(Microsoft.CodeAnalysis.INamespaceSymbol,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetModuleMembers (namespace As INamespaceSymbol, name As String) As ImmutableArray(Of INamedTypeSymbol)" />
      <MemberSignature Language="F#" Value="static member GetModuleMembers : Microsoft.CodeAnalysis.INamespaceSymbol * string -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.INamedTypeSymbol&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetModuleMembers (namespace, name)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::INamedTypeSymbol ^&gt; GetModuleMembers(Microsoft::CodeAnalysis::INamespaceSymbol ^ namespace, System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.INamedTypeSymbol&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespace" Type="Microsoft.CodeAnalysis.INamespaceSymbol" RefType="this" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespace">To be added.</param>
        <param name="name">The name of the namespace.</param>
        <summary>
 Gets all module members in a specified namespace.
 </summary>
        <returns>An ImmutableArray of NamedTypeSymbol for all module members in namespace.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutConversion">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Conversion GetOutConversion (this Microsoft.CodeAnalysis.Operations.IArgumentOperation argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion GetOutConversion(class Microsoft.CodeAnalysis.Operations.IArgumentOperation argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetOutConversion(Microsoft.CodeAnalysis.Operations.IArgumentOperation)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOutConversion (argument As IArgumentOperation) As Conversion" />
      <MemberSignature Language="F#" Value="static member GetOutConversion : Microsoft.CodeAnalysis.Operations.IArgumentOperation -&gt; Microsoft.CodeAnalysis.VisualBasic.Conversion" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetOutConversion argument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::Conversion GetOutConversion(Microsoft::CodeAnalysis::Operations::IArgumentOperation ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Conversion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="Microsoft.CodeAnalysis.Operations.IArgumentOperation" RefType="this" />
      </Parameters>
      <Docs>
        <param name="argument">The argument to get original info from.</param>
        <summary>
 Gets the underlying <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Conversion" /> information for OutConversion of <see cref="T:Microsoft.CodeAnalysis.Operations.IArgumentOperation" /> that was created from Visual Basic code.
 </summary>
        <returns>The underlying <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Conversion" /> of the OutConversion.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">If the <see cref="T:Microsoft.CodeAnalysis.Operations.IArgumentOperation" /> was not created from Visual Basic code.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOutConversion">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Conversion GetOutConversion (this Microsoft.CodeAnalysis.Operations.ICompoundAssignmentOperation compoundAssignment);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion GetOutConversion(class Microsoft.CodeAnalysis.Operations.ICompoundAssignmentOperation compoundAssignment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetOutConversion(Microsoft.CodeAnalysis.Operations.ICompoundAssignmentOperation)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOutConversion (compoundAssignment As ICompoundAssignmentOperation) As Conversion" />
      <MemberSignature Language="F#" Value="static member GetOutConversion : Microsoft.CodeAnalysis.Operations.ICompoundAssignmentOperation -&gt; Microsoft.CodeAnalysis.VisualBasic.Conversion" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetOutConversion compoundAssignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::Conversion GetOutConversion(Microsoft::CodeAnalysis::Operations::ICompoundAssignmentOperation ^ compoundAssignment);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Conversion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compoundAssignment" Type="Microsoft.CodeAnalysis.Operations.ICompoundAssignmentOperation" RefType="this" />
      </Parameters>
      <Docs>
        <param name="compoundAssignment">To be added.</param>
        <summary>
 Gets the underlying <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Conversion" /> information from this <see cref="T:Microsoft.CodeAnalysis.Operations.ICompoundAssignmentOperation" />. This
 conversion is applied after the operator is applied, before the result is assigned to <see cref="P:Microsoft.CodeAnalysis.Operations.IAssignmentOperation.Target" />.
 </summary>
        <returns>To be added.</returns>
        <remarks>
 This compound assignment must have been created from Visual Basic code.
 </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreprocessingSymbolInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.PreprocessingSymbolInfo GetPreprocessingSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.PreprocessingSymbolInfo GetPreprocessingSymbolInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetPreprocessingSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax)" />
      <MemberSignature Language="F#" Value="static member GetPreprocessingSymbolInfo : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax -&gt; Microsoft.CodeAnalysis.PreprocessingSymbolInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetPreprocessingSymbolInfo (semanticModel, node)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::PreprocessingSymbolInfo GetPreprocessingSymbolInfo(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.PreprocessingSymbolInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="node">To be added.</param>
        <summary>
 If the given node is within a preprocessing directive, gets the preprocessing symbol info for it.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSpecialType">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.INamedTypeSymbol GetSpecialType (this Microsoft.CodeAnalysis.Compilation compilation, Microsoft.CodeAnalysis.SpecialType typeId);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.INamedTypeSymbol GetSpecialType(class Microsoft.CodeAnalysis.Compilation compilation, valuetype Microsoft.CodeAnalysis.SpecialType typeId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSpecialType(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.SpecialType)" />
      <MemberSignature Language="F#" Value="static member GetSpecialType : Microsoft.CodeAnalysis.Compilation * Microsoft.CodeAnalysis.SpecialType -&gt; Microsoft.CodeAnalysis.INamedTypeSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSpecialType (compilation, typeId)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::INamedTypeSymbol ^ GetSpecialType(Microsoft::CodeAnalysis::Compilation ^ compilation, Microsoft::CodeAnalysis::SpecialType typeId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamedTypeSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compilation" Type="Microsoft.CodeAnalysis.Compilation" RefType="this" />
        <Parameter Name="typeId" Type="Microsoft.CodeAnalysis.SpecialType" />
      </Parameters>
      <Docs>
        <param name="compilation">A source Compilation object.</param>
        <param name="typeId">The SpecialType to get.</param>
        <summary>
 Gets the special type symbol in current compilation.
 </summary>
        <returns>A NamedTypeSymbol for the specified type in compilation; Null if compilation is Null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSpeculativeAliasInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.IAliasSymbol GetSpeculativeAliasInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax nameSyntax, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.IAliasSymbol GetSpeculativeAliasInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, int32 position, class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax nameSyntax, valuetype Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSpeculativeAliasInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SpeculativeBindingOption)" />
      <MemberSignature Language="F#" Value="static member GetSpeculativeAliasInfo : Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax * Microsoft.CodeAnalysis.SpeculativeBindingOption -&gt; Microsoft.CodeAnalysis.IAliasSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSpeculativeAliasInfo (semanticModel, position, nameSyntax, bindingOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::IAliasSymbol ^ GetSpeculativeAliasInfo(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ nameSyntax, Microsoft::CodeAnalysis::SpeculativeBindingOption bindingOption);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IAliasSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="nameSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
        <Parameter Name="bindingOption" Type="Microsoft.CodeAnalysis.SpeculativeBindingOption" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="position">To be added.</param>
        <param name="nameSyntax">To be added.</param>
        <param name="bindingOption">To be added.</param>
        <summary>
 Binds the name in the context of the specified location and sees if it resolves to an
 alias name. If it does, return the AliasSymbol corresponding to it. Otherwise, return null.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSpeculativeConversion">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Conversion GetSpeculativeConversion (this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.Conversion GetSpeculativeConversion(class Microsoft.CodeAnalysis.SemanticModel semanticModel, int32 position, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSpeculativeConversion(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SpeculativeBindingOption)" />
      <MemberSignature Language="F#" Value="static member GetSpeculativeConversion : Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SpeculativeBindingOption -&gt; Microsoft.CodeAnalysis.VisualBasic.Conversion" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSpeculativeConversion (semanticModel, position, expression, bindingOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::Conversion GetSpeculativeConversion(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SpeculativeBindingOption bindingOption);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Conversion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="bindingOption" Type="Microsoft.CodeAnalysis.SpeculativeBindingOption" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="position">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="bindingOption">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSpeculativeMemberGroup">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ISymbol&gt; GetSpeculativeMemberGroup (this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.ISymbol&gt; GetSpeculativeMemberGroup(class Microsoft.CodeAnalysis.SemanticModel semanticModel, int32 position, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSpeculativeMemberGroup(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)" />
      <MemberSignature Language="F#" Value="static member GetSpeculativeMemberGroup : Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ISymbol&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSpeculativeMemberGroup (semanticModel, position, expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::ISymbol ^&gt; GetSpeculativeMemberGroup(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.ISymbol&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="position">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>
 Gets the corresponding ImmutableArray of Symbols for a speculating an ExpressionSyntax at a given position, used in Semantic Info for items not appearing in source code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSpeculativeSymbolInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SymbolInfo GetSpeculativeSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SymbolInfo GetSpeculativeSymbolInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, int32 position, class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax)" />
      <MemberSignature Language="F#" Value="static member GetSpeculativeSymbolInfo : Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax -&gt; Microsoft.CodeAnalysis.SymbolInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSpeculativeSymbolInfo (semanticModel, position, attribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::SymbolInfo GetSpeculativeSymbolInfo(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeSyntax ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SymbolInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="attribute" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="position">To be added.</param>
        <param name="attribute">To be added.</param>
        <summary>
 Gets the corresponding SymbolInfo containing semantic info for specified  AttributeSyntax at a given position, used in Semantic Info for items not appearing in source code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSpeculativeSymbolInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SymbolInfo GetSpeculativeSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SymbolInfo GetSpeculativeSymbolInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, int32 position, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SpeculativeBindingOption)" />
      <MemberSignature Language="F#" Value="static member GetSpeculativeSymbolInfo : Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SpeculativeBindingOption -&gt; Microsoft.CodeAnalysis.SymbolInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSpeculativeSymbolInfo (semanticModel, position, expression, bindingOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::SymbolInfo GetSpeculativeSymbolInfo(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SpeculativeBindingOption bindingOption);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SymbolInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="bindingOption" Type="Microsoft.CodeAnalysis.SpeculativeBindingOption" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="position">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="bindingOption">To be added.</param>
        <summary>
 Gets the corresponding SymbolInfo containing semantic info for a specified AttributeSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSpeculativeTypeInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.TypeInfo GetSpeculativeTypeInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.TypeInfo GetSpeculativeTypeInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, int32 position, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSpeculativeTypeInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SpeculativeBindingOption)" />
      <MemberSignature Language="F#" Value="static member GetSpeculativeTypeInfo : Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * Microsoft.CodeAnalysis.SpeculativeBindingOption -&gt; Microsoft.CodeAnalysis.TypeInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSpeculativeTypeInfo (semanticModel, position, expression, bindingOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::TypeInfo GetSpeculativeTypeInfo(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionSyntax ^ expression, Microsoft::CodeAnalysis::SpeculativeBindingOption bindingOption);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.TypeInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="bindingOption" Type="Microsoft.CodeAnalysis.SpeculativeBindingOption" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="position">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="bindingOption">To be added.</param>
        <summary>
 Gets the corresponding TypeInfo  containing semantic info for a speculating an ExpressionSyntax at a given position, used in Semantic Info for items not appearing in source code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSymbolInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax attribute, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax attribute, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetSymbolInfo : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.SymbolInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSymbolInfo (semanticModel, attribute, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SymbolInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="attribute" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="attribute">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding SymbolInfo containing semantic info for a specified AttributeSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSymbolInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax crefReference, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax crefReference, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetSymbolInfo : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.SymbolInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSymbolInfo (semanticModel, crefReference, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SymbolInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="crefReference" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="crefReference">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding SymbolInfo containing semantic info for a specified CrefReferenceSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSymbolInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax variableSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax variableSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetSymbolInfo : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.SymbolInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSymbolInfo (semanticModel, variableSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SymbolInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="variableSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="variableSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Returns Select method associated with <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax" /> within a <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax" />, 
 or <see cref="F:Microsoft.CodeAnalysis.SymbolInfo.None" /> otherwise if none is.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSymbolInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetSymbolInfo : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.SymbolInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSymbolInfo (semanticModel, expression, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SymbolInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding SymbolInfo containing semantic info for a specified ExpressionSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSymbolInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax functionSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax functionSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetSymbolInfo : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.SymbolInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSymbolInfo (semanticModel, functionSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SymbolInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="functionSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="functionSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Returns aggregate function associated with <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax" />.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSymbolInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax orderingSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax orderingSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetSymbolInfo : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.SymbolInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSymbolInfo (semanticModel, orderingSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SymbolInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="orderingSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="orderingSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Returns OrderBy/OrderByDescending/ThenBy/ThenByDescending method associated with <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax" />.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSymbolInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax clauseSyntax, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SymbolInfo GetSymbolInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax clauseSyntax, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetSymbolInfo : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.SymbolInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetSymbolInfo (semanticModel, clauseSyntax, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SymbolInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="clauseSyntax" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryClauseSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="clauseSyntax">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Returns symbol information for a query clause.
 </summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <listheader>
              <term>Syntax node type</term>
              <description>Symbol information returned</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax" />
              </term>
              <description>Returns Distinct method associated with <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax" />
              </term>
              <description>Returns Where method associated with <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax" />
              </term>
              <description>Returns TakeWhile/SkipWhile method associated with <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax" />
              </term>
              <description>Returns Take/Skip method associated with <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax" />
              </term>
              <description>Returns GroupBy method associated with <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax" />
              </term>
              <description>Returns Join/GroupJoin method associated with <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinClauseSyntax" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax" />
              </term>
              <description>Returns Select method associated with <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax" />, or <see cref="F:Microsoft.CodeAnalysis.SymbolInfo.None" /> if none is.</description>
            </item>
            <item>
              <term>
                <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax" />
              </term>
              <description>
         Returns Select method associated with <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax" />, which has only one 
         <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax" /> and is the only query clause within 
         <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax" />. <see cref="F:Microsoft.CodeAnalysis.SymbolInfo.None" /> otherwise. 
         The method call is injected by the compiler to make sure that query is translated to at 
         least one method call. 
     </description>
            </item>
            <item>
              <term>
                <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax" />
              </term>
              <description>
                <see cref="F:Microsoft.CodeAnalysis.SymbolInfo.None" />
              </description>
            </item>
            <item>
              <term>
                <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax" />
              </term>
              <description>
                <see cref="F:Microsoft.CodeAnalysis.SymbolInfo.None" />
              </description>
            </item>
            <item>
              <term>
                <see cref="T:Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax" />
              </term>
              <description>
                <see cref="F:Microsoft.CodeAnalysis.SymbolInfo.None" />.
         Use <see cref="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetAggregateClauseSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax,System.Threading.CancellationToken)" /> instead.
     </description>
            </item>
          </list>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCharacter">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter GetTypeCharacter (this Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter GetTypeCharacter(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetTypeCharacter(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetTypeCharacter (token As SyntaxToken) As TypeCharacter" />
      <MemberSignature Language="F#" Value="static member GetTypeCharacter : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetTypeCharacter token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeCharacter GetTypeCharacter(Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeCharacter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" RefType="this" />
      </Parameters>
      <Docs>
        <param name="token">The source SyntaxToken.</param>
        <summary>
 Returns the Type character for a given syntax token.  This returns type character for Identifiers or Integer, Floating Point or Decimal Literals.
 Examples: Dim a$   or Dim l1 = 1L
 </summary>
        <returns>A type character used for the specific Internal Syntax Token Types.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.TypeInfo GetTypeInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax attribute, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.TypeInfo GetTypeInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax attribute, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetTypeInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetTypeInfo : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.TypeInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetTypeInfo (semanticModel, attribute, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.TypeInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="attribute" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="attribute">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
 Gets the corresponding TypeInfo containing semantic info for a specified AttributeSyntax.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.TypeInfo GetTypeInfo (this Microsoft.CodeAnalysis.SemanticModel semanticModel, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.TypeInfo GetTypeInfo(class Microsoft.CodeAnalysis.SemanticModel semanticModel, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax expression, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetTypeInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetTypeInfo : Microsoft.CodeAnalysis.SemanticModel * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax * System.Threading.CancellationToken -&gt; Microsoft.CodeAnalysis.TypeInfo" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.GetTypeInfo (semanticModel, expression, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.TypeInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="expression" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandledEvents">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.VisualBasic.HandledEvent&gt; HandledEvents (this Microsoft.CodeAnalysis.IMethodSymbol methodSymbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.VisualBasic.HandledEvent&gt; HandledEvents(class Microsoft.CodeAnalysis.IMethodSymbol methodSymbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.HandledEvents(Microsoft.CodeAnalysis.IMethodSymbol)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HandledEvents (methodSymbol As IMethodSymbol) As ImmutableArray(Of HandledEvent)" />
      <MemberSignature Language="F#" Value="static member HandledEvents : Microsoft.CodeAnalysis.IMethodSymbol -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.VisualBasic.HandledEvent&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.HandledEvents methodSymbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::VisualBasic::HandledEvent ^&gt; HandledEvents(Microsoft::CodeAnalysis::IMethodSymbol ^ methodSymbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.VisualBasic.HandledEvent&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodSymbol" Type="Microsoft.CodeAnalysis.IMethodSymbol" RefType="this" />
      </Parameters>
      <Docs>
        <param name="methodSymbol">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAssociatedField">
      <MemberSignature Language="C#" Value="public static bool HasAssociatedField (this Microsoft.CodeAnalysis.IEventSymbol eventSymbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool HasAssociatedField(class Microsoft.CodeAnalysis.IEventSymbol eventSymbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.HasAssociatedField(Microsoft.CodeAnalysis.IEventSymbol)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasAssociatedField (eventSymbol As IEventSymbol) As Boolean" />
      <MemberSignature Language="F#" Value="static member HasAssociatedField : Microsoft.CodeAnalysis.IEventSymbol -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.HasAssociatedField eventSymbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool HasAssociatedField(Microsoft::CodeAnalysis::IEventSymbol ^ eventSymbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSymbol" Type="Microsoft.CodeAnalysis.IEventSymbol" RefType="this" />
      </Parameters>
      <Docs>
        <param name="eventSymbol">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxTokenList Insert (this Microsoft.CodeAnalysis.SyntaxTokenList list, int index, params Microsoft.CodeAnalysis.SyntaxToken[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxTokenList Insert(valuetype Microsoft.CodeAnalysis.SyntaxTokenList list, int32 index, valuetype Microsoft.CodeAnalysis.SyntaxToken[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.Insert(Microsoft.CodeAnalysis.SyntaxTokenList,System.Int32,Microsoft.CodeAnalysis.SyntaxToken[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Insert (list As SyntaxTokenList, index As Integer, ParamArray items As SyntaxToken()) As SyntaxTokenList" />
      <MemberSignature Language="F#" Value="static member Insert : Microsoft.CodeAnalysis.SyntaxTokenList * int * Microsoft.CodeAnalysis.SyntaxToken[] -&gt; Microsoft.CodeAnalysis.SyntaxTokenList" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.Insert (list, index, items)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::SyntaxTokenList Insert(Microsoft::CodeAnalysis::SyntaxTokenList list, int index, ... cli::array &lt;Microsoft::CodeAnalysis::SyntaxToken&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxTokenList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="Microsoft.CodeAnalysis.SyntaxTokenList" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="items" Type="Microsoft.CodeAnalysis.SyntaxToken[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="list">To be added.</param>
        <param name="index">To be added.</param>
        <param name="items">To be added.</param>
        <summary>
 Insert one or more tokens in the list at the specified index.
 </summary>
        <returns>A new list with the tokens inserted.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBracketed">
      <MemberSignature Language="C#" Value="public static bool IsBracketed (this Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsBracketed(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsBracketed(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsBracketed (token As SyntaxToken) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsBracketed : Microsoft.CodeAnalysis.SyntaxToken -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsBracketed token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsBracketed(Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" RefType="this" />
      </Parameters>
      <Docs>
        <param name="token">The source SyntaxToken.</param>
        <summary>
 Checks to see if SyntaxToken is a bracketed identifier.
 </summary>
        <returns>A boolean value, True if token represents a bracketed Identifier.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCatch">
      <MemberSignature Language="C#" Value="public static bool IsCatch (this Microsoft.CodeAnalysis.ILocalSymbol localSymbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsCatch(class Microsoft.CodeAnalysis.ILocalSymbol localSymbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsCatch(Microsoft.CodeAnalysis.ILocalSymbol)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsCatch (localSymbol As ILocalSymbol) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsCatch : Microsoft.CodeAnalysis.ILocalSymbol -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsCatch localSymbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsCatch(Microsoft::CodeAnalysis::ILocalSymbol ^ localSymbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localSymbol" Type="Microsoft.CodeAnalysis.ILocalSymbol" RefType="this" />
      </Parameters>
      <Docs>
        <param name="localSymbol">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContextualKeyword">
      <MemberSignature Language="C#" Value="public static bool IsContextualKeyword (this Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsContextualKeyword(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsContextualKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsContextualKeyword (token As SyntaxToken) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsContextualKeyword : Microsoft.CodeAnalysis.SyntaxToken -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsContextualKeyword token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsContextualKeyword(Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" RefType="this" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>
 Determines if the token represents a contextual keyword
 </summary>
        <returns>A boolean value True if token is a contextual keyword.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public static bool IsDefault (this Microsoft.CodeAnalysis.IPropertySymbol propertySymbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDefault(class Microsoft.CodeAnalysis.IPropertySymbol propertySymbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsDefault(Microsoft.CodeAnalysis.IPropertySymbol)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsDefault (propertySymbol As IPropertySymbol) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsDefault : Microsoft.CodeAnalysis.IPropertySymbol -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsDefault propertySymbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsDefault(Microsoft::CodeAnalysis::IPropertySymbol ^ propertySymbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertySymbol" Type="Microsoft.CodeAnalysis.IPropertySymbol" RefType="this" />
      </Parameters>
      <Docs>
        <param name="propertySymbol">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFor">
      <MemberSignature Language="C#" Value="public static bool IsFor (this Microsoft.CodeAnalysis.ILocalSymbol localSymbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsFor(class Microsoft.CodeAnalysis.ILocalSymbol localSymbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsFor(Microsoft.CodeAnalysis.ILocalSymbol)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsFor (localSymbol As ILocalSymbol) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsFor : Microsoft.CodeAnalysis.ILocalSymbol -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsFor localSymbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsFor(Microsoft::CodeAnalysis::ILocalSymbol ^ localSymbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localSymbol" Type="Microsoft.CodeAnalysis.ILocalSymbol" RefType="this" />
      </Parameters>
      <Docs>
        <param name="localSymbol">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsForEach">
      <MemberSignature Language="C#" Value="public static bool IsForEach (this Microsoft.CodeAnalysis.ILocalSymbol localSymbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsForEach(class Microsoft.CodeAnalysis.ILocalSymbol localSymbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsForEach(Microsoft.CodeAnalysis.ILocalSymbol)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsForEach (localSymbol As ILocalSymbol) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsForEach : Microsoft.CodeAnalysis.ILocalSymbol -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsForEach localSymbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsForEach(Microsoft::CodeAnalysis::ILocalSymbol ^ localSymbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localSymbol" Type="Microsoft.CodeAnalysis.ILocalSymbol" RefType="this" />
      </Parameters>
      <Docs>
        <param name="localSymbol">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImplicitlyDeclared">
      <MemberSignature Language="C#" Value="public static bool IsImplicitlyDeclared (this Microsoft.CodeAnalysis.IEventSymbol eventSymbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsImplicitlyDeclared(class Microsoft.CodeAnalysis.IEventSymbol eventSymbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsImplicitlyDeclared(Microsoft.CodeAnalysis.IEventSymbol)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsImplicitlyDeclared (eventSymbol As IEventSymbol) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsImplicitlyDeclared : Microsoft.CodeAnalysis.IEventSymbol -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsImplicitlyDeclared eventSymbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsImplicitlyDeclared(Microsoft::CodeAnalysis::IEventSymbol ^ eventSymbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSymbol" Type="Microsoft.CodeAnalysis.IEventSymbol" RefType="this" />
      </Parameters>
      <Docs>
        <param name="eventSymbol">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyword">
      <MemberSignature Language="C#" Value="public static bool IsKeyword (this Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsKeyword(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsKeyword (token As SyntaxToken) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsKeyword : Microsoft.CodeAnalysis.SyntaxToken -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsKeyword token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsKeyword(Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" RefType="this" />
      </Parameters>
      <Docs>
        <param name="token">The source SyntaxToken.</param>
        <summary>
 Determines if the token represents a reserved or contextual keyword
 </summary>
        <returns>A boolean value True if token is a keyword.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMe">
      <MemberSignature Language="C#" Value="public static bool IsMe (this Microsoft.CodeAnalysis.IParameterSymbol parameterSymbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsMe(class Microsoft.CodeAnalysis.IParameterSymbol parameterSymbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsMe(Microsoft.CodeAnalysis.IParameterSymbol)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsMe (parameterSymbol As IParameterSymbol) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsMe : Microsoft.CodeAnalysis.IParameterSymbol -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsMe parameterSymbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsMe(Microsoft::CodeAnalysis::IParameterSymbol ^ parameterSymbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterSymbol" Type="Microsoft.CodeAnalysis.IParameterSymbol" RefType="this" />
      </Parameters>
      <Docs>
        <param name="parameterSymbol">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMustOverride">
      <MemberSignature Language="C#" Value="public static bool IsMustOverride (this Microsoft.CodeAnalysis.ISymbol symbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsMustOverride(class Microsoft.CodeAnalysis.ISymbol symbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsMustOverride(Microsoft.CodeAnalysis.ISymbol)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsMustOverride (symbol As ISymbol) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsMustOverride : Microsoft.CodeAnalysis.ISymbol -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsMustOverride symbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsMustOverride(Microsoft::CodeAnalysis::ISymbol ^ symbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.ISymbol" RefType="this" />
      </Parameters>
      <Docs>
        <param name="symbol">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotOverridable">
      <MemberSignature Language="C#" Value="public static bool IsNotOverridable (this Microsoft.CodeAnalysis.ISymbol symbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNotOverridable(class Microsoft.CodeAnalysis.ISymbol symbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsNotOverridable(Microsoft.CodeAnalysis.ISymbol)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsNotOverridable (symbol As ISymbol) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNotOverridable : Microsoft.CodeAnalysis.ISymbol -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsNotOverridable symbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsNotOverridable(Microsoft::CodeAnalysis::ISymbol ^ symbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.ISymbol" RefType="this" />
      </Parameters>
      <Docs>
        <param name="symbol">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOverloads">
      <MemberSignature Language="C#" Value="public static bool IsOverloads (this Microsoft.CodeAnalysis.IMethodSymbol methodSymbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsOverloads(class Microsoft.CodeAnalysis.IMethodSymbol methodSymbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsOverloads(Microsoft.CodeAnalysis.IMethodSymbol)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsOverloads (methodSymbol As IMethodSymbol) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsOverloads : Microsoft.CodeAnalysis.IMethodSymbol -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsOverloads methodSymbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsOverloads(Microsoft::CodeAnalysis::IMethodSymbol ^ methodSymbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodSymbol" Type="Microsoft.CodeAnalysis.IMethodSymbol" RefType="this" />
      </Parameters>
      <Docs>
        <param name="methodSymbol">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOverloads">
      <MemberSignature Language="C#" Value="public static bool IsOverloads (this Microsoft.CodeAnalysis.IPropertySymbol propertySymbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsOverloads(class Microsoft.CodeAnalysis.IPropertySymbol propertySymbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsOverloads(Microsoft.CodeAnalysis.IPropertySymbol)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsOverloads (propertySymbol As IPropertySymbol) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsOverloads : Microsoft.CodeAnalysis.IPropertySymbol -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsOverloads propertySymbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsOverloads(Microsoft::CodeAnalysis::IPropertySymbol ^ propertySymbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertySymbol" Type="Microsoft.CodeAnalysis.IPropertySymbol" RefType="this" />
      </Parameters>
      <Docs>
        <param name="propertySymbol">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOverridable">
      <MemberSignature Language="C#" Value="public static bool IsOverridable (this Microsoft.CodeAnalysis.ISymbol symbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsOverridable(class Microsoft.CodeAnalysis.ISymbol symbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsOverridable(Microsoft.CodeAnalysis.ISymbol)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsOverridable (symbol As ISymbol) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsOverridable : Microsoft.CodeAnalysis.ISymbol -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsOverridable symbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsOverridable(Microsoft::CodeAnalysis::ISymbol ^ symbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.ISymbol" RefType="this" />
      </Parameters>
      <Docs>
        <param name="symbol">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOverrides">
      <MemberSignature Language="C#" Value="public static bool IsOverrides (this Microsoft.CodeAnalysis.ISymbol symbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsOverrides(class Microsoft.CodeAnalysis.ISymbol symbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsOverrides(Microsoft.CodeAnalysis.ISymbol)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsOverrides (symbol As ISymbol) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsOverrides : Microsoft.CodeAnalysis.ISymbol -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsOverrides symbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsOverrides(Microsoft::CodeAnalysis::ISymbol ^ symbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.ISymbol" RefType="this" />
      </Parameters>
      <Docs>
        <param name="symbol">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPreprocessorKeyword">
      <MemberSignature Language="C#" Value="public static bool IsPreprocessorKeyword (this Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsPreprocessorKeyword(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsPreprocessorKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsPreprocessorKeyword (token As SyntaxToken) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPreprocessorKeyword : Microsoft.CodeAnalysis.SyntaxToken -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsPreprocessorKeyword token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsPreprocessorKeyword(Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" RefType="this" />
      </Parameters>
      <Docs>
        <param name="token">The source SyntaxToken.</param>
        <summary>
 Determines if the token  represents a preprocessor keyword
 </summary>
        <returns> A boolean value True if token is a pre processor keyword.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReservedKeyword">
      <MemberSignature Language="C#" Value="public static bool IsReservedKeyword (this Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReservedKeyword(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsReservedKeyword(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsReservedKeyword (token As SyntaxToken) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsReservedKeyword : Microsoft.CodeAnalysis.SyntaxToken -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsReservedKeyword token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsReservedKeyword(Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" RefType="this" />
      </Parameters>
      <Docs>
        <param name="token">The source SyntaxToken.</param>
        <summary>
 Determines if the token represents a reserved keyword
 </summary>
        <returns>A boolean value True if token is a reserved keyword.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public static bool IsShared (this Microsoft.CodeAnalysis.ISymbol symbol);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsShared(class Microsoft.CodeAnalysis.ISymbol symbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsShared(Microsoft.CodeAnalysis.ISymbol)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsShared (symbol As ISymbol) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsShared : Microsoft.CodeAnalysis.ISymbol -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.IsShared symbol" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool IsShared(Microsoft::CodeAnalysis::ISymbol ^ symbol);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="Microsoft.CodeAnalysis.ISymbol" RefType="this" />
      </Parameters>
      <Docs>
        <param name="symbol">The source symbol.</param>
        <summary>
 Determines if symbol is Shared.
 </summary>
        <returns>A boolean value, True if symbol is Shared; otherwise False.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind Kind (this Microsoft.CodeAnalysis.SyntaxNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind Kind(class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.Kind(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Kind (node As SyntaxNode) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member Kind : Microsoft.CodeAnalysis.SyntaxNode -&gt; Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.Kind node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::SyntaxKind Kind(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::SyntaxKind Kind(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" RefType="this" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>
 Returns <see cref="T:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" /> for <see cref="T:Microsoft.CodeAnalysis.SyntaxNode" /> from <see cref="P:Microsoft.CodeAnalysis.SyntaxToken.RawKind" /> property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind Kind (this Microsoft.CodeAnalysis.SyntaxNodeOrToken nodeOrToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind Kind(valuetype Microsoft.CodeAnalysis.SyntaxNodeOrToken nodeOrToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.Kind(Microsoft.CodeAnalysis.SyntaxNodeOrToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Kind (nodeOrToken As SyntaxNodeOrToken) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member Kind : Microsoft.CodeAnalysis.SyntaxNodeOrToken -&gt; Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.Kind nodeOrToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::SyntaxKind Kind(Microsoft::CodeAnalysis::SyntaxNodeOrToken nodeOrToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeOrToken" Type="Microsoft.CodeAnalysis.SyntaxNodeOrToken" RefType="this" />
      </Parameters>
      <Docs>
        <param name="nodeOrToken">To be added.</param>
        <summary>
 Returns <see cref="T:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" /> for <see cref="T:Microsoft.CodeAnalysis.SyntaxNodeOrToken" /> from <see cref="P:Microsoft.CodeAnalysis.SyntaxToken.RawKind" /> property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind Kind (this Microsoft.CodeAnalysis.SyntaxToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind Kind(valuetype Microsoft.CodeAnalysis.SyntaxToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.Kind(Microsoft.CodeAnalysis.SyntaxToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Kind (token As SyntaxToken) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member Kind : Microsoft.CodeAnalysis.SyntaxToken -&gt; Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.Kind token" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::SyntaxKind Kind(Microsoft::CodeAnalysis::SyntaxToken token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" RefType="this" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>
 Returns <see cref="T:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" /> for <see cref="T:Microsoft.CodeAnalysis.SyntaxToken" /> from <see cref="P:Microsoft.CodeAnalysis.SyntaxToken.RawKind" /> property.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.SyntaxKind Kind (this Microsoft.CodeAnalysis.SyntaxTrivia trivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.SyntaxKind Kind(valuetype Microsoft.CodeAnalysis.SyntaxTrivia trivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.Kind(Microsoft.CodeAnalysis.SyntaxTrivia)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Kind (trivia As SyntaxTrivia) As SyntaxKind" />
      <MemberSignature Language="F#" Value="static member Kind : Microsoft.CodeAnalysis.SyntaxTrivia -&gt; Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.Kind trivia" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::SyntaxKind Kind(Microsoft::CodeAnalysis::SyntaxTrivia trivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.SyntaxKind</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trivia" Type="Microsoft.CodeAnalysis.SyntaxTrivia" RefType="this" />
      </Parameters>
      <Docs>
        <param name="trivia">To be added.</param>
        <summary>
 Returns <see cref="T:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind" /> for <see cref="T:Microsoft.CodeAnalysis.SyntaxTrivia" /> nodes.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberImports">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.INamespaceOrTypeSymbol&gt; MemberImports (this Microsoft.CodeAnalysis.Compilation compilation);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Collections.Immutable.ImmutableArray`1&lt;class Microsoft.CodeAnalysis.INamespaceOrTypeSymbol&gt; MemberImports(class Microsoft.CodeAnalysis.Compilation compilation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.MemberImports(Microsoft.CodeAnalysis.Compilation)" />
      <MemberSignature Language="F#" Value="static member MemberImports : Microsoft.CodeAnalysis.Compilation -&gt; System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.INamespaceOrTypeSymbol&gt;" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.MemberImports compilation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Immutable::ImmutableArray&lt;Microsoft::CodeAnalysis::INamespaceOrTypeSymbol ^&gt; MemberImports(Microsoft::CodeAnalysis::Compilation ^ compilation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;Microsoft.CodeAnalysis.INamespaceOrTypeSymbol&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compilation" Type="Microsoft.CodeAnalysis.Compilation" RefType="this" />
      </Parameters>
      <Docs>
        <param name="compilation">A source Compilation object.</param>
        <summary>
  Gets the compilation MemberImports property.
 </summary>
        <returns>An ImmutableArray of NamespaceOrTypeSymbol, from the compilation instance MemberImports property; otherwise an empty ImmutableArray if compilation instance is Null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionCompareText">
      <MemberSignature Language="C#" Value="public static bool OptionCompareText (this Microsoft.CodeAnalysis.SemanticModel semanticModel);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool OptionCompareText(class Microsoft.CodeAnalysis.SemanticModel semanticModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.OptionCompareText(Microsoft.CodeAnalysis.SemanticModel)" />
      <MemberSignature Language="F#" Value="static member OptionCompareText : Microsoft.CodeAnalysis.SemanticModel -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.OptionCompareText semanticModel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool OptionCompareText(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool OptionCompareText(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
      </Parameters>
      <Docs>
        <param name="semanticModel">A source Semantic model object.</param>
        <summary>
 Gets the Semantic Model OptionCompareText property.
 </summary>
        <returns>A boolean values, for the semantic model instance OptionCompareText property. otherwise Null if semantic model is Null. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionExplicit">
      <MemberSignature Language="C#" Value="public static bool OptionExplicit (this Microsoft.CodeAnalysis.SemanticModel semanticModel);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool OptionExplicit(class Microsoft.CodeAnalysis.SemanticModel semanticModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.OptionExplicit(Microsoft.CodeAnalysis.SemanticModel)" />
      <MemberSignature Language="F#" Value="static member OptionExplicit : Microsoft.CodeAnalysis.SemanticModel -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.OptionExplicit semanticModel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool OptionExplicit(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool OptionExplicit(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
      </Parameters>
      <Docs>
        <param name="semanticModel">A source Semantic model object.</param>
        <summary>
 Gets the Semantic Model OptionExplicit property.
 </summary>
        <returns>A boolean values, for the semantic model instance OptionExplicit property. otherwise Null if semantic model is Null. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionInfer">
      <MemberSignature Language="C#" Value="public static bool OptionInfer (this Microsoft.CodeAnalysis.SemanticModel semanticModel);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool OptionInfer(class Microsoft.CodeAnalysis.SemanticModel semanticModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.OptionInfer(Microsoft.CodeAnalysis.SemanticModel)" />
      <MemberSignature Language="F#" Value="static member OptionInfer : Microsoft.CodeAnalysis.SemanticModel -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.OptionInfer semanticModel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool OptionInfer(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool OptionInfer(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
      </Parameters>
      <Docs>
        <param name="semanticModel">A source Semantic model object.</param>
        <summary>
 Gets the Semantic Model OptionInfer property.
 </summary>
        <returns>A boolean values, for the semantic model instance OptionInfer property. otherwise Null if semantic model is Null. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionStrict">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.VisualBasic.OptionStrict OptionStrict (this Microsoft.CodeAnalysis.SemanticModel semanticModel);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.VisualBasic.OptionStrict OptionStrict(class Microsoft.CodeAnalysis.SemanticModel semanticModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.OptionStrict(Microsoft.CodeAnalysis.SemanticModel)" />
      <MemberSignature Language="F#" Value="static member OptionStrict : Microsoft.CodeAnalysis.SemanticModel -&gt; Microsoft.CodeAnalysis.VisualBasic.OptionStrict" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.OptionStrict semanticModel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::OptionStrict OptionStrict(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::VisualBasic::OptionStrict OptionStrict(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.VisualBasic.OptionStrict</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
      </Parameters>
      <Docs>
        <param name="semanticModel">A source Semantic model object.</param>
        <summary>
 Gets the Semantic Model OptionStrict property.
 </summary>
        <returns>The OptionStrict object for the semantic model instance OptionStrict property, otherwise Null if semantic model is Null. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken ReplaceTrivia (this Microsoft.CodeAnalysis.SyntaxToken token, Microsoft.CodeAnalysis.SyntaxTrivia oldTrivia, Microsoft.CodeAnalysis.SyntaxTrivia newTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken ReplaceTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken token, valuetype Microsoft.CodeAnalysis.SyntaxTrivia oldTrivia, valuetype Microsoft.CodeAnalysis.SyntaxTrivia newTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.ReplaceTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReplaceTrivia (token As SyntaxToken, oldTrivia As SyntaxTrivia, newTrivia As SyntaxTrivia) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member ReplaceTrivia : Microsoft.CodeAnalysis.SyntaxToken * Microsoft.CodeAnalysis.SyntaxTrivia * Microsoft.CodeAnalysis.SyntaxTrivia -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.ReplaceTrivia (token, oldTrivia, newTrivia)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::SyntaxToken ReplaceTrivia(Microsoft::CodeAnalysis::SyntaxToken token, Microsoft::CodeAnalysis::SyntaxTrivia oldTrivia, Microsoft::CodeAnalysis::SyntaxTrivia newTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" RefType="this" />
        <Parameter Name="oldTrivia" Type="Microsoft.CodeAnalysis.SyntaxTrivia" />
        <Parameter Name="newTrivia" Type="Microsoft.CodeAnalysis.SyntaxTrivia" />
      </Parameters>
      <Docs>
        <param name="token">The source SyntaxToken to change trivia on.</param>
        <param name="oldTrivia">The original Trivia.</param>
        <param name="newTrivia">The updated Trivia.</param>
        <summary>
  Replaces trivia on a specified SyntaxToken.
 </summary>
        <returns>The updated SyntaxToken with replaced trivia.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceTrivia">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.SyntaxToken ReplaceTrivia (this Microsoft.CodeAnalysis.SyntaxToken token, System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; trivia, Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia&gt; computeReplacementTrivia);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.CodeAnalysis.SyntaxToken ReplaceTrivia(valuetype Microsoft.CodeAnalysis.SyntaxToken token, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; trivia, class System.Func`3&lt;valuetype Microsoft.CodeAnalysis.SyntaxTrivia, valuetype Microsoft.CodeAnalysis.SyntaxTrivia, valuetype Microsoft.CodeAnalysis.SyntaxTrivia&gt; computeReplacementTrivia) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.ReplaceTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReplaceTrivia (token As SyntaxToken, trivia As IEnumerable(Of SyntaxTrivia), computeReplacementTrivia As Func(Of SyntaxTrivia, SyntaxTrivia, SyntaxTrivia)) As SyntaxToken" />
      <MemberSignature Language="F#" Value="static member ReplaceTrivia : Microsoft.CodeAnalysis.SyntaxToken * seq&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt; * Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia, Microsoft.CodeAnalysis.SyntaxTrivia&gt; -&gt; Microsoft.CodeAnalysis.SyntaxToken" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.ReplaceTrivia (token, trivia, computeReplacementTrivia)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::SyntaxToken ReplaceTrivia(Microsoft::CodeAnalysis::SyntaxToken token, System::Collections::Generic::IEnumerable&lt;Microsoft::CodeAnalysis::SyntaxTrivia&gt; ^ trivia, Func&lt;Microsoft::CodeAnalysis::SyntaxTrivia, Microsoft::CodeAnalysis::SyntaxTrivia, Microsoft::CodeAnalysis::SyntaxTrivia&gt; ^ computeReplacementTrivia);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.SyntaxToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.CodeAnalysis.SyntaxToken" RefType="this" />
        <Parameter Name="trivia" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
        <Parameter Name="computeReplacementTrivia" Type="System.Func&lt;Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia&gt;" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <param name="trivia">To be added.</param>
        <param name="computeReplacementTrivia">To be added.</param>
        <summary>
  Replaces trivia on a specified SyntaxToken.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RootNamespace">
      <MemberSignature Language="C#" Value="public static Microsoft.CodeAnalysis.INamespaceSymbol RootNamespace (this Microsoft.CodeAnalysis.Compilation compilation);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.CodeAnalysis.INamespaceSymbol RootNamespace(class Microsoft.CodeAnalysis.Compilation compilation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.RootNamespace(Microsoft.CodeAnalysis.Compilation)" />
      <MemberSignature Language="F#" Value="static member RootNamespace : Microsoft.CodeAnalysis.Compilation -&gt; Microsoft.CodeAnalysis.INamespaceSymbol" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.RootNamespace compilation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::CodeAnalysis::INamespaceSymbol ^ RootNamespace(Microsoft::CodeAnalysis::Compilation ^ compilation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.INamespaceSymbol</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compilation" Type="Microsoft.CodeAnalysis.Compilation" RefType="this" />
      </Parameters>
      <Docs>
        <param name="compilation">A source Compilation object.</param>
        <summary>
 Gets the compilation RootNamespace property.
 </summary>
        <returns>A NamespaceSymbol instance, for the compilation instance RootNamespace property. otherwise Null if compilation instance is Null. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetSpeculativeSemanticModel">
      <MemberSignature Language="C#" Value="public static bool TryGetSpeculativeSemanticModel (this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax attribute, out Microsoft.CodeAnalysis.SemanticModel speculativeModel);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool TryGetSpeculativeSemanticModel(class Microsoft.CodeAnalysis.SemanticModel semanticModel, int32 position, class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax attribute, [out] class Microsoft.CodeAnalysis.SemanticModel&amp; speculativeModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.TryGetSpeculativeSemanticModel(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax,Microsoft.CodeAnalysis.SemanticModel@)" />
      <MemberSignature Language="F#" Value="static member TryGetSpeculativeSemanticModel : Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax *  -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.TryGetSpeculativeSemanticModel (semanticModel, position, attribute, speculativeModel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryGetSpeculativeSemanticModel(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeSyntax ^ attribute, [Runtime::InteropServices::Out] Microsoft::CodeAnalysis::SemanticModel ^ % speculativeModel);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryGetSpeculativeSemanticModel(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeSyntax ^ attribute, [Runtime::InteropServices::Out] Microsoft::CodeAnalysis::SemanticModel ^ &amp;  speculativeModel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="attribute" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax" />
        <Parameter Name="speculativeModel" Type="Microsoft.CodeAnalysis.SemanticModel&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="position">To be added.</param>
        <param name="attribute">To be added.</param>
        <param name="speculativeModel">To be added.</param>
        <summary>
 Gets the SemanticModel for a AttributeSyntax at a given position, used in Semantic Info for items not appearing in source code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetSpeculativeSemanticModel">
      <MemberSignature Language="C#" Value="public static bool TryGetSpeculativeSemanticModel (this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer, out Microsoft.CodeAnalysis.SemanticModel speculativeModel);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool TryGetSpeculativeSemanticModel(class Microsoft.CodeAnalysis.SemanticModel semanticModel, int32 position, class Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax initializer, [out] class Microsoft.CodeAnalysis.SemanticModel&amp; speculativeModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.TryGetSpeculativeSemanticModel(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax,Microsoft.CodeAnalysis.SemanticModel@)" />
      <MemberSignature Language="F#" Value="static member TryGetSpeculativeSemanticModel : Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax *  -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.TryGetSpeculativeSemanticModel (semanticModel, position, initializer, speculativeModel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryGetSpeculativeSemanticModel(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::VisualBasic::Syntax::EqualsValueSyntax ^ initializer, [Runtime::InteropServices::Out] Microsoft::CodeAnalysis::SemanticModel ^ % speculativeModel);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryGetSpeculativeSemanticModel(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::VisualBasic::Syntax::EqualsValueSyntax ^ initializer, [Runtime::InteropServices::Out] Microsoft::CodeAnalysis::SemanticModel ^ &amp;  speculativeModel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="initializer" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax" />
        <Parameter Name="speculativeModel" Type="Microsoft.CodeAnalysis.SemanticModel&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="position">To be added.</param>
        <param name="initializer">To be added.</param>
        <param name="speculativeModel">To be added.</param>
        <summary>
 Gets the SemanticModel for a EqualsValueSyntax at a given position, used in Semantic Info for items not appearing in source code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetSpeculativeSemanticModel">
      <MemberSignature Language="C#" Value="public static bool TryGetSpeculativeSemanticModel (this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax statement, out Microsoft.CodeAnalysis.SemanticModel speculativeModel);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool TryGetSpeculativeSemanticModel(class Microsoft.CodeAnalysis.SemanticModel semanticModel, int32 position, class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax statement, [out] class Microsoft.CodeAnalysis.SemanticModel&amp; speculativeModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.TryGetSpeculativeSemanticModel(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax,Microsoft.CodeAnalysis.SemanticModel@)" />
      <MemberSignature Language="F#" Value="static member TryGetSpeculativeSemanticModel : Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax *  -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.TryGetSpeculativeSemanticModel (semanticModel, position, statement, speculativeModel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryGetSpeculativeSemanticModel(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExecutableStatementSyntax ^ statement, [Runtime::InteropServices::Out] Microsoft::CodeAnalysis::SemanticModel ^ % speculativeModel);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryGetSpeculativeSemanticModel(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::VisualBasic::Syntax::ExecutableStatementSyntax ^ statement, [Runtime::InteropServices::Out] Microsoft::CodeAnalysis::SemanticModel ^ &amp;  speculativeModel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="statement" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExecutableStatementSyntax" />
        <Parameter Name="speculativeModel" Type="Microsoft.CodeAnalysis.SemanticModel&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="position">To be added.</param>
        <param name="statement">To be added.</param>
        <param name="speculativeModel">To be added.</param>
        <summary>
 Gets the SemanticModel for a ExecutableStatementSyntax at a given position, used in Semantic Info for items not appearing in source code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetSpeculativeSemanticModel">
      <MemberSignature Language="C#" Value="public static bool TryGetSpeculativeSemanticModel (this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax rangeArgument, out Microsoft.CodeAnalysis.SemanticModel speculativeModel);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool TryGetSpeculativeSemanticModel(class Microsoft.CodeAnalysis.SemanticModel semanticModel, int32 position, class Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax rangeArgument, [out] class Microsoft.CodeAnalysis.SemanticModel&amp; speculativeModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.TryGetSpeculativeSemanticModel(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax,Microsoft.CodeAnalysis.SemanticModel@)" />
      <MemberSignature Language="F#" Value="static member TryGetSpeculativeSemanticModel : Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax *  -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.TryGetSpeculativeSemanticModel (semanticModel, position, rangeArgument, speculativeModel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryGetSpeculativeSemanticModel(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::VisualBasic::Syntax::RangeArgumentSyntax ^ rangeArgument, [Runtime::InteropServices::Out] Microsoft::CodeAnalysis::SemanticModel ^ % speculativeModel);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryGetSpeculativeSemanticModel(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::VisualBasic::Syntax::RangeArgumentSyntax ^ rangeArgument, [Runtime::InteropServices::Out] Microsoft::CodeAnalysis::SemanticModel ^ &amp;  speculativeModel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="rangeArgument" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax" />
        <Parameter Name="speculativeModel" Type="Microsoft.CodeAnalysis.SemanticModel&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="position">To be added.</param>
        <param name="rangeArgument">To be added.</param>
        <param name="speculativeModel">To be added.</param>
        <summary>
 Gets the SemanticModel for a RangeArgumentSyntax at a given position, used in Semantic Info for items not appearing in source code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetSpeculativeSemanticModel">
      <MemberSignature Language="C#" Value="public static bool TryGetSpeculativeSemanticModel (this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, out Microsoft.CodeAnalysis.SemanticModel speculativeModel, Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption = Microsoft.CodeAnalysis.SpeculativeBindingOption.BindAsExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool TryGetSpeculativeSemanticModel(class Microsoft.CodeAnalysis.SemanticModel semanticModel, int32 position, class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax type, [out] class Microsoft.CodeAnalysis.SemanticModel&amp; speculativeModel, valuetype Microsoft.CodeAnalysis.SpeculativeBindingOption bindingOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.TryGetSpeculativeSemanticModel(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SemanticModel@,Microsoft.CodeAnalysis.SpeculativeBindingOption)" />
      <MemberSignature Language="F#" Value="static member TryGetSpeculativeSemanticModel : Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax *  * Microsoft.CodeAnalysis.SpeculativeBindingOption -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.TryGetSpeculativeSemanticModel (semanticModel, position, type, speculativeModel, bindingOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="type" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeSyntax" />
        <Parameter Name="speculativeModel" Type="Microsoft.CodeAnalysis.SemanticModel&amp;" RefType="out" />
        <Parameter Name="bindingOption" Type="Microsoft.CodeAnalysis.SpeculativeBindingOption" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="position">To be added.</param>
        <param name="type">To be added.</param>
        <param name="speculativeModel">To be added.</param>
        <param name="bindingOption">To be added.</param>
        <summary>
 Gets the SemanticModel for a TypeSyntax at a given position, used in Semantic Info for items not appearing in source code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetSpeculativeSemanticModelForMethodBody">
      <MemberSignature Language="C#" Value="public static bool TryGetSpeculativeSemanticModelForMethodBody (this Microsoft.CodeAnalysis.SemanticModel semanticModel, int position, Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax method, out Microsoft.CodeAnalysis.SemanticModel speculativeModel);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool TryGetSpeculativeSemanticModelForMethodBody(class Microsoft.CodeAnalysis.SemanticModel semanticModel, int32 position, class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax method, [out] class Microsoft.CodeAnalysis.SemanticModel&amp; speculativeModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.TryGetSpeculativeSemanticModelForMethodBody(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax,Microsoft.CodeAnalysis.SemanticModel@)" />
      <MemberSignature Language="F#" Value="static member TryGetSpeculativeSemanticModelForMethodBody : Microsoft.CodeAnalysis.SemanticModel * int * Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax *  -&gt; bool" Usage="Microsoft.CodeAnalysis.VisualBasic.VisualBasicExtensions.TryGetSpeculativeSemanticModelForMethodBody (semanticModel, position, method, speculativeModel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryGetSpeculativeSemanticModelForMethodBody(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodBlockBaseSyntax ^ method, [Runtime::InteropServices::Out] Microsoft::CodeAnalysis::SemanticModel ^ % speculativeModel);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryGetSpeculativeSemanticModelForMethodBody(Microsoft::CodeAnalysis::SemanticModel ^ semanticModel, int position, Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodBlockBaseSyntax ^ method, [Runtime::InteropServices::Out] Microsoft::CodeAnalysis::SemanticModel ^ &amp;  speculativeModel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticModel" Type="Microsoft.CodeAnalysis.SemanticModel" RefType="this" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="method" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockBaseSyntax" />
        <Parameter Name="speculativeModel" Type="Microsoft.CodeAnalysis.SemanticModel&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="semanticModel">To be added.</param>
        <param name="position">To be added.</param>
        <param name="method">To be added.</param>
        <param name="speculativeModel">To be added.</param>
        <summary>
 Gets the SemanticModel for a MethodBlockBaseSyntax at a given position, used in Semantic Info for items not appearing in source code.
 </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>