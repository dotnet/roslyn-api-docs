<Type Name="ICatchClause" FullName="Microsoft.CodeAnalysis.Semantics.ICatchClause">
  <TypeSignature Language="C#" Value="public interface ICatchClause : Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICatchClause implements class Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Semantics.ICatchClause" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICatchClause&#xA;Implements IOperation" />
  <TypeSignature Language="F#" Value="type ICatchClause = interface&#xA;    interface IOperation" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.CodeAnalysis.IOperation</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents a C# catch or VB Catch clause.
            </summary>
    <remarks>
            This interface is reserved for implementation by its associated APIs. We reserve the right to
            change it in the future.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="CaughtType">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.ITypeSymbol CaughtType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.ITypeSymbol CaughtType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Semantics.ICatchClause.CaughtType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CaughtType As ITypeSymbol" />
      <MemberSignature Language="F#" Value="member this.CaughtType : Microsoft.CodeAnalysis.ITypeSymbol" Usage="Microsoft.CodeAnalysis.Semantics.ICatchClause.CaughtType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ITypeSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Type of exception to be handled.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionLocal">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.ILocalSymbol ExceptionLocal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.ILocalSymbol ExceptionLocal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Semantics.ICatchClause.ExceptionLocal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionLocal As ILocalSymbol" />
      <MemberSignature Language="F#" Value="member this.ExceptionLocal : Microsoft.CodeAnalysis.ILocalSymbol" Usage="Microsoft.CodeAnalysis.Semantics.ICatchClause.ExceptionLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.ILocalSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Symbol for the local catch variable bound to the caught exception.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IOperation Filter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IOperation Filter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Semantics.ICatchClause.Filter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Filter As IOperation" />
      <MemberSignature Language="F#" Value="member this.Filter : Microsoft.CodeAnalysis.IOperation" Usage="Microsoft.CodeAnalysis.Semantics.ICatchClause.Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Filter expression to be executed to determine whether to handle the exception.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handler">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Semantics.IBlockStatement Handler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.Semantics.IBlockStatement Handler" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Semantics.ICatchClause.Handler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handler As IBlockStatement" />
      <MemberSignature Language="F#" Value="member this.Handler : Microsoft.CodeAnalysis.Semantics.IBlockStatement" Usage="Microsoft.CodeAnalysis.Semantics.ICatchClause.Handler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Semantics.IBlockStatement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Body of the exception handler.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>