<Type Name="ICoalesceOperation" FullName="Microsoft.CodeAnalysis.Operations.ICoalesceOperation">
  <TypeSignature Language="C#" Value="public interface ICoalesceOperation : Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICoalesceOperation implements class Microsoft.CodeAnalysis.IOperation" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.Operations.ICoalesceOperation" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICoalesceOperation&#xA;Implements IOperation" />
  <TypeSignature Language="F#" Value="type ICoalesceOperation = interface&#xA;    interface IOperation" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICoalesceOperation : Microsoft::CodeAnalysis::IOperation" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.CodeAnalysis.IOperation</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents a coalesce operation with two operands:
             (1) <see cref="P:Microsoft.CodeAnalysis.Operations.ICoalesceOperation.Value" />, which is the first operand that is unconditionally evaluated and is the result of the operation if non null.
             (2) <see cref="P:Microsoft.CodeAnalysis.Operations.ICoalesceOperation.WhenNull" />, which is the second operand that is conditionally evaluated and is the result of the operation iff <see cref="P:Microsoft.CodeAnalysis.Operations.ICoalesceOperation.Value" /> is null.
            <para>
            Current usage:
             (1) C# null-coalescing expression "Value ?? WhenNull".
             (2) VB binary conditional expression "If(Value, WhenNull)".
            </para></summary>
    <remarks>
            This interface is reserved for implementation by its associated APIs. We reserve the right to
            change it in the future.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IOperation Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IOperation Value" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.ICoalesceOperation.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As IOperation" />
      <MemberSignature Language="F#" Value="member this.Value : Microsoft.CodeAnalysis.IOperation" Usage="Microsoft.CodeAnalysis.Operations.ICoalesceOperation.Value" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ Value { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Operation to be unconditionally evaluated.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueConversion">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.Operations.CommonConversion ValueConversion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CodeAnalysis.Operations.CommonConversion ValueConversion" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.ICoalesceOperation.ValueConversion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueConversion As CommonConversion" />
      <MemberSignature Language="F#" Value="member this.ValueConversion : Microsoft.CodeAnalysis.Operations.CommonConversion" Usage="Microsoft.CodeAnalysis.Operations.ICoalesceOperation.ValueConversion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::Operations::CommonConversion ValueConversion { Microsoft::CodeAnalysis::Operations::CommonConversion get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.Operations.CommonConversion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Conversion associated with <see cref="P:Microsoft.CodeAnalysis.Operations.ICoalesceOperation.Value" /> when it is not null/Nothing.
            
            Identity if result type of the operation is the same as type of <see cref="P:Microsoft.CodeAnalysis.Operations.ICoalesceOperation.Value" />.
            Otherwise, if type of <see cref="P:Microsoft.CodeAnalysis.Operations.ICoalesceOperation.Value" /> is nullable, then conversion is applied to an 
            unwrapped <see cref="P:Microsoft.CodeAnalysis.Operations.ICoalesceOperation.Value" />, otherwise to the <see cref="P:Microsoft.CodeAnalysis.Operations.ICoalesceOperation.Value" /> itself.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhenNull">
      <MemberSignature Language="C#" Value="public Microsoft.CodeAnalysis.IOperation WhenNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CodeAnalysis.IOperation WhenNull" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CodeAnalysis.Operations.ICoalesceOperation.WhenNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhenNull As IOperation" />
      <MemberSignature Language="F#" Value="member this.WhenNull : Microsoft.CodeAnalysis.IOperation" Usage="Microsoft.CodeAnalysis.Operations.ICoalesceOperation.WhenNull" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CodeAnalysis::IOperation ^ WhenNull { Microsoft::CodeAnalysis::IOperation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis</AssemblyName>
        <AssemblyVersion>2.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CodeAnalysis.IOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Operation to be conditionally evaluated if <see cref="P:Microsoft.CodeAnalysis.Operations.ICoalesceOperation.Value" /> evaluates to null/Nothing.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>