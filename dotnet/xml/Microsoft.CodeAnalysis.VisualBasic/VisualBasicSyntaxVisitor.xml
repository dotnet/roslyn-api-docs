<Type Name="VisualBasicSyntaxVisitor" FullName="Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor">
  <TypeSignature Language="C#" Value="public abstract class VisualBasicSyntaxVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract VisualBasicSyntaxVisitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class VisualBasicSyntaxVisitor" />
  <TypeSignature Language="F#" Value="type VisualBasicSyntaxVisitor = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualBasicSyntaxVisitor abstract" />
  <TypeSignature Language="C++ CX" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;public ref class VisualBasicSyntaxVisitor abstract" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class VisualBasicSyntaxVisitor abstract" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
    <AssemblyVersion>2.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
 Represents a <see cref="T:Microsoft.CodeAnalysis.SyntaxNode" /> visitor that visits only the single SyntaxNode
 passed into its <see cref="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.Visit(Microsoft.CodeAnalysis.SyntaxNode)" /> method.
 </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VisualBasicSyntaxVisitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyspecialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; VisualBasicSyntaxVisitor();" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; VisualBasicSyntaxVisitor();" />
      <MemberSignature Language="C++ WINRT" Value=" VisualBasicSyntaxVisitor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultVisit">
      <MemberSignature Language="C#" Value="public virtual void DefaultVisit (Microsoft.CodeAnalysis.SyntaxNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void DefaultVisit(class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.DefaultVisit(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DefaultVisit (node As SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member DefaultVisit : Microsoft.CodeAnalysis.SyntaxNode -&gt; unit&#xA;override this.DefaultVisit : Microsoft.CodeAnalysis.SyntaxNode -&gt; unit" Usage="visualBasicSyntaxVisitor.DefaultVisit node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DefaultVisit(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void DefaultVisit(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void DefaultVisit(Microsoft::CodeAnalysis::SyntaxNode const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visit">
      <MemberSignature Language="C#" Value="public virtual void Visit (Microsoft.CodeAnalysis.SyntaxNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void Visit(class Microsoft.CodeAnalysis.SyntaxNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.Visit(Microsoft.CodeAnalysis.SyntaxNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Visit (node As SyntaxNode)" />
      <MemberSignature Language="F#" Value="abstract member Visit : Microsoft.CodeAnalysis.SyntaxNode -&gt; unit&#xA;override this.Visit : Microsoft.CodeAnalysis.SyntaxNode -&gt; unit" Usage="visualBasicSyntaxVisitor.Visit node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Visit(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void Visit(Microsoft::CodeAnalysis::SyntaxNode ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void Visit(Microsoft::CodeAnalysis::SyntaxNode const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.SyntaxNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAccessorBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitAccessorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitAccessorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitAccessorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAccessorBlock (node As AccessorBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAccessorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax -&gt; unit&#xA;override this.VisitAccessorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitAccessorBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAccessorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitAccessorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitAccessorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAccessorStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitAccessorStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitAccessorStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitAccessorStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAccessorStatement (node As AccessorStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAccessorStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax -&gt; unit&#xA;override this.VisitAccessorStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitAccessorStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAccessorStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitAccessorStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitAccessorStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::AccessorStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AccessorStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAddRemoveHandlerStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitAddRemoveHandlerStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitAddRemoveHandlerStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitAddRemoveHandlerStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAddRemoveHandlerStatement (node As AddRemoveHandlerStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAddRemoveHandlerStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax -&gt; unit&#xA;override this.VisitAddRemoveHandlerStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitAddRemoveHandlerStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAddRemoveHandlerStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::AddRemoveHandlerStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitAddRemoveHandlerStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::AddRemoveHandlerStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitAddRemoveHandlerStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::AddRemoveHandlerStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AddRemoveHandlerStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAggregateClause">
      <MemberSignature Language="C#" Value="public virtual void VisitAggregateClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitAggregateClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitAggregateClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAggregateClause (node As AggregateClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAggregateClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax -&gt; unit&#xA;override this.VisitAggregateClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitAggregateClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAggregateClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregateClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitAggregateClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregateClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitAggregateClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregateClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregateClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAggregationRangeVariable">
      <MemberSignature Language="C#" Value="public virtual void VisitAggregationRangeVariable (Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitAggregationRangeVariable(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitAggregationRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAggregationRangeVariable (node As AggregationRangeVariableSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAggregationRangeVariable : Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax -&gt; unit&#xA;override this.VisitAggregationRangeVariable : Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitAggregationRangeVariable node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAggregationRangeVariable(Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregationRangeVariableSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitAggregationRangeVariable(Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregationRangeVariableSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitAggregationRangeVariable(Microsoft::CodeAnalysis::VisualBasic::Syntax::AggregationRangeVariableSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AggregationRangeVariableSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAnonymousObjectCreationExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitAnonymousObjectCreationExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitAnonymousObjectCreationExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitAnonymousObjectCreationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAnonymousObjectCreationExpression (node As AnonymousObjectCreationExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAnonymousObjectCreationExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax -&gt; unit&#xA;override this.VisitAnonymousObjectCreationExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitAnonymousObjectCreationExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAnonymousObjectCreationExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::AnonymousObjectCreationExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitAnonymousObjectCreationExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::AnonymousObjectCreationExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitAnonymousObjectCreationExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::AnonymousObjectCreationExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AnonymousObjectCreationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitArgumentList">
      <MemberSignature Language="C#" Value="public virtual void VisitArgumentList (Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitArgumentList(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitArgumentList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitArgumentList (node As ArgumentListSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitArgumentList : Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax -&gt; unit&#xA;override this.VisitArgumentList : Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitArgumentList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitArgumentList(Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitArgumentList(Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitArgumentList(Microsoft::CodeAnalysis::VisualBasic::Syntax::ArgumentListSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitArrayCreationExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitArrayCreationExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitArrayCreationExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitArrayCreationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitArrayCreationExpression (node As ArrayCreationExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitArrayCreationExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax -&gt; unit&#xA;override this.VisitArrayCreationExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitArrayCreationExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitArrayCreationExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayCreationExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitArrayCreationExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayCreationExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitArrayCreationExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayCreationExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayCreationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitArrayRankSpecifier">
      <MemberSignature Language="C#" Value="public virtual void VisitArrayRankSpecifier (Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitArrayRankSpecifier(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitArrayRankSpecifier(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitArrayRankSpecifier (node As ArrayRankSpecifierSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitArrayRankSpecifier : Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax -&gt; unit&#xA;override this.VisitArrayRankSpecifier : Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitArrayRankSpecifier node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitArrayRankSpecifier(Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayRankSpecifierSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitArrayRankSpecifier(Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayRankSpecifierSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitArrayRankSpecifier(Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayRankSpecifierSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayRankSpecifierSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitArrayType">
      <MemberSignature Language="C#" Value="public virtual void VisitArrayType (Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitArrayType(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitArrayType(Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitArrayType (node As ArrayTypeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitArrayType : Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax -&gt; unit&#xA;override this.VisitArrayType : Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitArrayType node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitArrayType(Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayTypeSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitArrayType(Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayTypeSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitArrayType(Microsoft::CodeAnalysis::VisualBasic::Syntax::ArrayTypeSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ArrayTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAsNewClause">
      <MemberSignature Language="C#" Value="public virtual void VisitAsNewClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitAsNewClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitAsNewClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAsNewClause (node As AsNewClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAsNewClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax -&gt; unit&#xA;override this.VisitAsNewClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitAsNewClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAsNewClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::AsNewClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitAsNewClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::AsNewClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitAsNewClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::AsNewClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AsNewClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAssignmentStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitAssignmentStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitAssignmentStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitAssignmentStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAssignmentStatement (node As AssignmentStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax -&gt; unit&#xA;override this.VisitAssignmentStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitAssignmentStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitAssignmentStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::AssignmentStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AssignmentStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAttribute">
      <MemberSignature Language="C#" Value="public virtual void VisitAttribute (Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitAttribute(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAttribute (node As AttributeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAttribute : Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax -&gt; unit&#xA;override this.VisitAttribute : Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitAttribute node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAttributeList">
      <MemberSignature Language="C#" Value="public virtual void VisitAttributeList (Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitAttributeList(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitAttributeList(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAttributeList (node As AttributeListSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAttributeList : Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax -&gt; unit&#xA;override this.VisitAttributeList : Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitAttributeList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAttributeList(Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitAttributeList(Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitAttributeList(Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeListSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAttributesStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitAttributesStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitAttributesStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitAttributesStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAttributesStatement (node As AttributesStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAttributesStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax -&gt; unit&#xA;override this.VisitAttributesStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitAttributesStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAttributesStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributesStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitAttributesStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributesStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitAttributesStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributesStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributesStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAttributeTarget">
      <MemberSignature Language="C#" Value="public virtual void VisitAttributeTarget (Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitAttributeTarget(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitAttributeTarget(Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAttributeTarget (node As AttributeTargetSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAttributeTarget : Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax -&gt; unit&#xA;override this.VisitAttributeTarget : Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitAttributeTarget node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAttributeTarget(Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeTargetSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitAttributeTarget(Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeTargetSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitAttributeTarget(Microsoft::CodeAnalysis::VisualBasic::Syntax::AttributeTargetSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AttributeTargetSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAwaitExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitAwaitExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitAwaitExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitAwaitExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitAwaitExpression (node As AwaitExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitAwaitExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax -&gt; unit&#xA;override this.VisitAwaitExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitAwaitExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitAwaitExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::AwaitExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitAwaitExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::AwaitExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitAwaitExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::AwaitExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.AwaitExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBadDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitBadDirectiveTrivia (Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitBadDirectiveTrivia(class Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitBadDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitBadDirectiveTrivia (node As BadDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitBadDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitBadDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitBadDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitBadDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::BadDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitBadDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::BadDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitBadDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::BadDirectiveTriviaSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.BadDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBinaryConditionalExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitBinaryConditionalExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitBinaryConditionalExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitBinaryConditionalExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitBinaryConditionalExpression (node As BinaryConditionalExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitBinaryConditionalExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax -&gt; unit&#xA;override this.VisitBinaryConditionalExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitBinaryConditionalExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitBinaryConditionalExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryConditionalExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitBinaryConditionalExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryConditionalExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitBinaryConditionalExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryConditionalExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryConditionalExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitBinaryExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitBinaryExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitBinaryExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitBinaryExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitBinaryExpression (node As BinaryExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitBinaryExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax -&gt; unit&#xA;override this.VisitBinaryExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitBinaryExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitBinaryExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitBinaryExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitBinaryExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::BinaryExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.BinaryExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCallStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitCallStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitCallStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitCallStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCallStatement (node As CallStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCallStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax -&gt; unit&#xA;override this.VisitCallStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitCallStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCallStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::CallStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitCallStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::CallStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitCallStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::CallStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CallStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCaseBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitCaseBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitCaseBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitCaseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCaseBlock (node As CaseBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCaseBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax -&gt; unit&#xA;override this.VisitCaseBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitCaseBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCaseBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitCaseBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitCaseBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCaseStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitCaseStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitCaseStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitCaseStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCaseStatement (node As CaseStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCaseStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax -&gt; unit&#xA;override this.VisitCaseStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitCaseStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCaseStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitCaseStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitCaseStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::CaseStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CaseStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCatchBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitCatchBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitCatchBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitCatchBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCatchBlock (node As CatchBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCatchBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax -&gt; unit&#xA;override this.VisitCatchBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitCatchBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCatchBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitCatchBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitCatchBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCatchFilterClause">
      <MemberSignature Language="C#" Value="public virtual void VisitCatchFilterClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitCatchFilterClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitCatchFilterClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCatchFilterClause (node As CatchFilterClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCatchFilterClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax -&gt; unit&#xA;override this.VisitCatchFilterClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitCatchFilterClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCatchFilterClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitCatchFilterClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitCatchFilterClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchFilterClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchFilterClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCatchStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitCatchStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitCatchStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitCatchStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCatchStatement (node As CatchStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCatchStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax -&gt; unit&#xA;override this.VisitCatchStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitCatchStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCatchStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitCatchStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitCatchStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::CatchStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CatchStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitClassBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitClassBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitClassBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitClassBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitClassBlock (node As ClassBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitClassBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax -&gt; unit&#xA;override this.VisitClassBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitClassBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitClassBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ClassBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitClassBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ClassBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitClassBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ClassBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitClassStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitClassStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitClassStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitClassStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitClassStatement (node As ClassStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitClassStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax -&gt; unit&#xA;override this.VisitClassStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitClassStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitClassStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ClassStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitClassStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ClassStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitClassStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ClassStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ClassStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCollectionInitializer">
      <MemberSignature Language="C#" Value="public virtual void VisitCollectionInitializer (Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitCollectionInitializer(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitCollectionInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCollectionInitializer (node As CollectionInitializerSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCollectionInitializer : Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax -&gt; unit&#xA;override this.VisitCollectionInitializer : Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitCollectionInitializer node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCollectionInitializer(Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionInitializerSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitCollectionInitializer(Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionInitializerSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitCollectionInitializer(Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionInitializerSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionInitializerSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCollectionRangeVariable">
      <MemberSignature Language="C#" Value="public virtual void VisitCollectionRangeVariable (Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitCollectionRangeVariable(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitCollectionRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCollectionRangeVariable (node As CollectionRangeVariableSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCollectionRangeVariable : Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax -&gt; unit&#xA;override this.VisitCollectionRangeVariable : Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitCollectionRangeVariable node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCollectionRangeVariable(Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitCollectionRangeVariable(Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitCollectionRangeVariable(Microsoft::CodeAnalysis::VisualBasic::Syntax::CollectionRangeVariableSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CollectionRangeVariableSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCompilationUnit">
      <MemberSignature Language="C#" Value="public virtual void VisitCompilationUnit (Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitCompilationUnit(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitCompilationUnit(Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCompilationUnit (node As CompilationUnitSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCompilationUnit : Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax -&gt; unit&#xA;override this.VisitCompilationUnit : Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitCompilationUnit node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCompilationUnit(Microsoft::CodeAnalysis::VisualBasic::Syntax::CompilationUnitSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitCompilationUnit(Microsoft::CodeAnalysis::VisualBasic::Syntax::CompilationUnitSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitCompilationUnit(Microsoft::CodeAnalysis::VisualBasic::Syntax::CompilationUnitSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CompilationUnitSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConditionalAccessExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitConditionalAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitConditionalAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitConditionalAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitConditionalAccessExpression (node As ConditionalAccessExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitConditionalAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax -&gt; unit&#xA;override this.VisitConditionalAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitConditionalAccessExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitConditionalAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ConditionalAccessExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitConditionalAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ConditionalAccessExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitConditionalAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ConditionalAccessExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ConditionalAccessExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConstDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitConstDirectiveTrivia (Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitConstDirectiveTrivia(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitConstDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitConstDirectiveTrivia (node As ConstDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitConstDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitConstDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitConstDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitConstDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::ConstDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitConstDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::ConstDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitConstDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::ConstDirectiveTriviaSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitConstructorBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitConstructorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitConstructorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitConstructorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitConstructorBlock (node As ConstructorBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitConstructorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax -&gt; unit&#xA;override this.VisitConstructorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitConstructorBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitConstructorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ConstructorBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitConstructorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ConstructorBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitConstructorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ConstructorBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ConstructorBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitContinueStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitContinueStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitContinueStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitContinueStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitContinueStatement (node As ContinueStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitContinueStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax -&gt; unit&#xA;override this.VisitContinueStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitContinueStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitContinueStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ContinueStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitContinueStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ContinueStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitContinueStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ContinueStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ContinueStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCrefOperatorReference">
      <MemberSignature Language="C#" Value="public virtual void VisitCrefOperatorReference (Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitCrefOperatorReference(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitCrefOperatorReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCrefOperatorReference (node As CrefOperatorReferenceSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCrefOperatorReference : Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax -&gt; unit&#xA;override this.VisitCrefOperatorReference : Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitCrefOperatorReference node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCrefOperatorReference(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefOperatorReferenceSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitCrefOperatorReference(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefOperatorReferenceSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitCrefOperatorReference(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefOperatorReferenceSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefOperatorReferenceSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCrefReference">
      <MemberSignature Language="C#" Value="public virtual void VisitCrefReference (Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitCrefReference(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitCrefReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCrefReference (node As CrefReferenceSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCrefReference : Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax -&gt; unit&#xA;override this.VisitCrefReference : Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitCrefReference node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCrefReference(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefReferenceSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitCrefReference(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefReferenceSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitCrefReference(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefReferenceSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefReferenceSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCrefSignature">
      <MemberSignature Language="C#" Value="public virtual void VisitCrefSignature (Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitCrefSignature(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitCrefSignature(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCrefSignature (node As CrefSignatureSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCrefSignature : Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax -&gt; unit&#xA;override this.VisitCrefSignature : Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitCrefSignature node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCrefSignature(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefSignatureSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitCrefSignature(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefSignatureSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitCrefSignature(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefSignatureSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignatureSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCrefSignaturePart">
      <MemberSignature Language="C#" Value="public virtual void VisitCrefSignaturePart (Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitCrefSignaturePart(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitCrefSignaturePart(Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCrefSignaturePart (node As CrefSignaturePartSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCrefSignaturePart : Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax -&gt; unit&#xA;override this.VisitCrefSignaturePart : Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitCrefSignaturePart node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCrefSignaturePart(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefSignaturePartSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitCrefSignaturePart(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefSignaturePartSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitCrefSignaturePart(Microsoft::CodeAnalysis::VisualBasic::Syntax::CrefSignaturePartSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CrefSignaturePartSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitCTypeExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitCTypeExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitCTypeExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitCTypeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitCTypeExpression (node As CTypeExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitCTypeExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax -&gt; unit&#xA;override this.VisitCTypeExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitCTypeExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitCTypeExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::CTypeExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitCTypeExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::CTypeExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitCTypeExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::CTypeExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.CTypeExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDeclareStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitDeclareStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitDeclareStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitDeclareStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitDeclareStatement (node As DeclareStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitDeclareStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax -&gt; unit&#xA;override this.VisitDeclareStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitDeclareStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitDeclareStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclareStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitDeclareStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclareStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitDeclareStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::DeclareStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DeclareStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDelegateStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitDelegateStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitDelegateStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitDelegateStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitDelegateStatement (node As DelegateStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitDelegateStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax -&gt; unit&#xA;override this.VisitDelegateStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitDelegateStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitDelegateStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::DelegateStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitDelegateStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::DelegateStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitDelegateStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::DelegateStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DelegateStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDirectCastExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitDirectCastExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitDirectCastExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitDirectCastExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitDirectCastExpression (node As DirectCastExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitDirectCastExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax -&gt; unit&#xA;override this.VisitDirectCastExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitDirectCastExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitDirectCastExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::DirectCastExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitDirectCastExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::DirectCastExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitDirectCastExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::DirectCastExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectCastExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDisableWarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitDisableWarningDirectiveTrivia (Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitDisableWarningDirectiveTrivia(class Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitDisableWarningDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitDisableWarningDirectiveTrivia (node As DisableWarningDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitDisableWarningDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitDisableWarningDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitDisableWarningDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitDisableWarningDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::DisableWarningDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitDisableWarningDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::DisableWarningDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitDisableWarningDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::DisableWarningDirectiveTriviaSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DisableWarningDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDistinctClause">
      <MemberSignature Language="C#" Value="public virtual void VisitDistinctClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitDistinctClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitDistinctClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitDistinctClause (node As DistinctClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitDistinctClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax -&gt; unit&#xA;override this.VisitDistinctClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitDistinctClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitDistinctClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::DistinctClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitDistinctClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::DistinctClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitDistinctClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::DistinctClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DistinctClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDocumentationCommentTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitDocumentationCommentTrivia (Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitDocumentationCommentTrivia(class Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitDocumentationCommentTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitDocumentationCommentTrivia (node As DocumentationCommentTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitDocumentationCommentTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax -&gt; unit&#xA;override this.VisitDocumentationCommentTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitDocumentationCommentTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitDocumentationCommentTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::DocumentationCommentTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitDocumentationCommentTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::DocumentationCommentTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitDocumentationCommentTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::DocumentationCommentTriviaSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DocumentationCommentTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDoLoopBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitDoLoopBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitDoLoopBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitDoLoopBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitDoLoopBlock (node As DoLoopBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitDoLoopBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax -&gt; unit&#xA;override this.VisitDoLoopBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitDoLoopBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitDoLoopBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::DoLoopBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitDoLoopBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::DoLoopBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitDoLoopBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::DoLoopBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DoLoopBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitDoStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitDoStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitDoStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitDoStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitDoStatement (node As DoStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitDoStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax -&gt; unit&#xA;override this.VisitDoStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitDoStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitDoStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitDoStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitDoStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::DoStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.DoStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElseBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitElseBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitElseBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitElseBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitElseBlock (node As ElseBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitElseBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax -&gt; unit&#xA;override this.VisitElseBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitElseBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitElseBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitElseBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitElseBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElseCaseClause">
      <MemberSignature Language="C#" Value="public virtual void VisitElseCaseClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitElseCaseClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitElseCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitElseCaseClause (node As ElseCaseClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitElseCaseClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax -&gt; unit&#xA;override this.VisitElseCaseClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitElseCaseClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitElseCaseClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseCaseClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitElseCaseClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseCaseClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitElseCaseClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseCaseClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseCaseClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElseDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitElseDirectiveTrivia (Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitElseDirectiveTrivia(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitElseDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitElseDirectiveTrivia (node As ElseDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitElseDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitElseDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitElseDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitElseDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitElseDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitElseDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseDirectiveTriviaSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElseIfBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitElseIfBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitElseIfBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitElseIfBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitElseIfBlock (node As ElseIfBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitElseIfBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax -&gt; unit&#xA;override this.VisitElseIfBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitElseIfBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitElseIfBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseIfBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitElseIfBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseIfBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitElseIfBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseIfBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElseIfStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitElseIfStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitElseIfStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitElseIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitElseIfStatement (node As ElseIfStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitElseIfStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax -&gt; unit&#xA;override this.VisitElseIfStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitElseIfStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitElseIfStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseIfStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitElseIfStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseIfStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitElseIfStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseIfStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseIfStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitElseStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitElseStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitElseStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitElseStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitElseStatement (node As ElseStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitElseStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax -&gt; unit&#xA;override this.VisitElseStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitElseStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitElseStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitElseStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitElseStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ElseStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ElseStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEmptyStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitEmptyStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitEmptyStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitEmptyStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEmptyStatement (node As EmptyStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEmptyStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax -&gt; unit&#xA;override this.VisitEmptyStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitEmptyStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEmptyStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EmptyStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitEmptyStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EmptyStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitEmptyStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EmptyStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EmptyStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEnableWarningDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitEnableWarningDirectiveTrivia (Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitEnableWarningDirectiveTrivia(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitEnableWarningDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEnableWarningDirectiveTrivia (node As EnableWarningDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEnableWarningDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitEnableWarningDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitEnableWarningDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEnableWarningDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::EnableWarningDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitEnableWarningDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::EnableWarningDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitEnableWarningDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::EnableWarningDirectiveTriviaSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EnableWarningDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEndBlockStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitEndBlockStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitEndBlockStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitEndBlockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEndBlockStatement (node As EndBlockStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEndBlockStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; unit&#xA;override this.VisitEndBlockStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitEndBlockStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEndBlockStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitEndBlockStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitEndBlockStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndBlockStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndBlockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEndExternalSourceDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitEndExternalSourceDirectiveTrivia (Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitEndExternalSourceDirectiveTrivia(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitEndExternalSourceDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEndExternalSourceDirectiveTrivia (node As EndExternalSourceDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEndExternalSourceDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitEndExternalSourceDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitEndExternalSourceDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEndExternalSourceDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndExternalSourceDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitEndExternalSourceDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndExternalSourceDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitEndExternalSourceDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndExternalSourceDirectiveTriviaSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndExternalSourceDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEndIfDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitEndIfDirectiveTrivia (Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitEndIfDirectiveTrivia(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitEndIfDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEndIfDirectiveTrivia (node As EndIfDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEndIfDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitEndIfDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitEndIfDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEndIfDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndIfDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitEndIfDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndIfDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitEndIfDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndIfDirectiveTriviaSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndIfDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEndRegionDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitEndRegionDirectiveTrivia (Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitEndRegionDirectiveTrivia(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitEndRegionDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEndRegionDirectiveTrivia (node As EndRegionDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEndRegionDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitEndRegionDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitEndRegionDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEndRegionDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndRegionDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitEndRegionDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndRegionDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitEndRegionDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::EndRegionDirectiveTriviaSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EndRegionDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEnumBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitEnumBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitEnumBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitEnumBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEnumBlock (node As EnumBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEnumBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax -&gt; unit&#xA;override this.VisitEnumBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitEnumBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEnumBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitEnumBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitEnumBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEnumMemberDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitEnumMemberDeclaration (Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitEnumMemberDeclaration(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitEnumMemberDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEnumMemberDeclaration (node As EnumMemberDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEnumMemberDeclaration : Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax -&gt; unit&#xA;override this.VisitEnumMemberDeclaration : Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitEnumMemberDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEnumMemberDeclaration(Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumMemberDeclarationSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitEnumMemberDeclaration(Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumMemberDeclarationSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitEnumMemberDeclaration(Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumMemberDeclarationSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumMemberDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEnumStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitEnumStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitEnumStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitEnumStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEnumStatement (node As EnumStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEnumStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax -&gt; unit&#xA;override this.VisitEnumStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitEnumStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEnumStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitEnumStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitEnumStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EnumStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EnumStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEqualsValue">
      <MemberSignature Language="C#" Value="public virtual void VisitEqualsValue (Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitEqualsValue(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitEqualsValue(Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEqualsValue (node As EqualsValueSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEqualsValue : Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax -&gt; unit&#xA;override this.VisitEqualsValue : Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitEqualsValue node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEqualsValue(Microsoft::CodeAnalysis::VisualBasic::Syntax::EqualsValueSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitEqualsValue(Microsoft::CodeAnalysis::VisualBasic::Syntax::EqualsValueSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitEqualsValue(Microsoft::CodeAnalysis::VisualBasic::Syntax::EqualsValueSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EqualsValueSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEraseStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitEraseStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitEraseStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitEraseStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEraseStatement (node As EraseStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEraseStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax -&gt; unit&#xA;override this.VisitEraseStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitEraseStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEraseStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EraseStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitEraseStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EraseStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitEraseStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EraseStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EraseStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitErrorStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitErrorStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitErrorStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitErrorStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitErrorStatement (node As ErrorStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitErrorStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax -&gt; unit&#xA;override this.VisitErrorStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitErrorStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitErrorStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ErrorStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitErrorStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ErrorStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitErrorStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ErrorStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ErrorStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEventBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitEventBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitEventBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitEventBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEventBlock (node As EventBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEventBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax -&gt; unit&#xA;override this.VisitEventBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitEventBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEventBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::EventBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitEventBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::EventBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitEventBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::EventBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EventBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitEventStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitEventStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitEventStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitEventStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitEventStatement (node As EventStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitEventStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax -&gt; unit&#xA;override this.VisitEventStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitEventStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitEventStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EventStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitEventStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EventStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitEventStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::EventStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.EventStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExitStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitExitStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitExitStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitExitStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitExitStatement (node As ExitStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitExitStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax -&gt; unit&#xA;override this.VisitExitStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitExitStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitExitStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitExitStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitExitStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExitStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExitStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExpressionRangeVariable">
      <MemberSignature Language="C#" Value="public virtual void VisitExpressionRangeVariable (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitExpressionRangeVariable(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitExpressionRangeVariable(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitExpressionRangeVariable (node As ExpressionRangeVariableSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitExpressionRangeVariable : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax -&gt; unit&#xA;override this.VisitExpressionRangeVariable : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitExpressionRangeVariable node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitExpressionRangeVariable(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitExpressionRangeVariable(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitExpressionRangeVariable(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionRangeVariableSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionRangeVariableSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExpressionStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitExpressionStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitExpressionStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitExpressionStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitExpressionStatement (node As ExpressionStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitExpressionStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionStatementSyntax -&gt; unit&#xA;override this.VisitExpressionStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitExpressionStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitExpressionStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitExpressionStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitExpressionStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExpressionStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExternalChecksumDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitExternalChecksumDirectiveTrivia (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitExternalChecksumDirectiveTrivia(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitExternalChecksumDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitExternalChecksumDirectiveTrivia (node As ExternalChecksumDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitExternalChecksumDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitExternalChecksumDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitExternalChecksumDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitExternalChecksumDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExternalChecksumDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitExternalChecksumDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExternalChecksumDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitExternalChecksumDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExternalChecksumDirectiveTriviaSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalChecksumDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitExternalSourceDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitExternalSourceDirectiveTrivia (Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitExternalSourceDirectiveTrivia(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitExternalSourceDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitExternalSourceDirectiveTrivia (node As ExternalSourceDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitExternalSourceDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitExternalSourceDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitExternalSourceDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitExternalSourceDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExternalSourceDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitExternalSourceDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExternalSourceDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitExternalSourceDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::ExternalSourceDirectiveTriviaSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ExternalSourceDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitFieldDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitFieldDeclaration (Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitFieldDeclaration(class Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitFieldDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitFieldDeclaration (node As FieldDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitFieldDeclaration : Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax -&gt; unit&#xA;override this.VisitFieldDeclaration : Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitFieldDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitFieldDeclaration(Microsoft::CodeAnalysis::VisualBasic::Syntax::FieldDeclarationSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitFieldDeclaration(Microsoft::CodeAnalysis::VisualBasic::Syntax::FieldDeclarationSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitFieldDeclaration(Microsoft::CodeAnalysis::VisualBasic::Syntax::FieldDeclarationSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitFinallyBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitFinallyBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitFinallyBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitFinallyBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitFinallyBlock (node As FinallyBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitFinallyBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax -&gt; unit&#xA;override this.VisitFinallyBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitFinallyBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitFinallyBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::FinallyBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitFinallyBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::FinallyBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitFinallyBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::FinallyBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitFinallyStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitFinallyStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitFinallyStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitFinallyStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitFinallyStatement (node As FinallyStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitFinallyStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax -&gt; unit&#xA;override this.VisitFinallyStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitFinallyStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitFinallyStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::FinallyStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitFinallyStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::FinallyStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitFinallyStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::FinallyStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.FinallyStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitForBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitForBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitForBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitForBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitForBlock (node As ForBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitForBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax -&gt; unit&#xA;override this.VisitForBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitForBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitForBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitForBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitForBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitForEachBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitForEachBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitForEachBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitForEachBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitForEachBlock (node As ForEachBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitForEachBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax -&gt; unit&#xA;override this.VisitForEachBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitForEachBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitForEachBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForEachBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitForEachBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForEachBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitForEachBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForEachBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitForEachStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitForEachStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitForEachStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitForEachStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitForEachStatement (node As ForEachStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitForEachStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax -&gt; unit&#xA;override this.VisitForEachStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitForEachStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitForEachStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForEachStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitForEachStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForEachStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitForEachStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForEachStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForEachStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitForStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitForStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitForStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitForStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitForStatement (node As ForStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitForStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax -&gt; unit&#xA;override this.VisitForStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitForStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitForStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitForStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitForStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitForStepClause">
      <MemberSignature Language="C#" Value="public virtual void VisitForStepClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitForStepClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitForStepClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitForStepClause (node As ForStepClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitForStepClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax -&gt; unit&#xA;override this.VisitForStepClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitForStepClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitForStepClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStepClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitForStepClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStepClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitForStepClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ForStepClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ForStepClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitFromClause">
      <MemberSignature Language="C#" Value="public virtual void VisitFromClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitFromClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitFromClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitFromClause (node As FromClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitFromClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax -&gt; unit&#xA;override this.VisitFromClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitFromClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitFromClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::FromClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitFromClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::FromClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitFromClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::FromClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.FromClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitFunctionAggregation">
      <MemberSignature Language="C#" Value="public virtual void VisitFunctionAggregation (Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitFunctionAggregation(class Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitFunctionAggregation(Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitFunctionAggregation (node As FunctionAggregationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitFunctionAggregation : Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax -&gt; unit&#xA;override this.VisitFunctionAggregation : Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitFunctionAggregation node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitFunctionAggregation(Microsoft::CodeAnalysis::VisualBasic::Syntax::FunctionAggregationSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitFunctionAggregation(Microsoft::CodeAnalysis::VisualBasic::Syntax::FunctionAggregationSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitFunctionAggregation(Microsoft::CodeAnalysis::VisualBasic::Syntax::FunctionAggregationSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.FunctionAggregationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGenericName">
      <MemberSignature Language="C#" Value="public virtual void VisitGenericName (Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitGenericName(class Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitGenericName(Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitGenericName (node As GenericNameSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitGenericName : Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax -&gt; unit&#xA;override this.VisitGenericName : Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitGenericName node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitGenericName(Microsoft::CodeAnalysis::VisualBasic::Syntax::GenericNameSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitGenericName(Microsoft::CodeAnalysis::VisualBasic::Syntax::GenericNameSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitGenericName(Microsoft::CodeAnalysis::VisualBasic::Syntax::GenericNameSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.GenericNameSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGetTypeExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitGetTypeExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitGetTypeExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitGetTypeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitGetTypeExpression (node As GetTypeExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitGetTypeExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax -&gt; unit&#xA;override this.VisitGetTypeExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitGetTypeExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitGetTypeExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::GetTypeExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitGetTypeExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::GetTypeExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitGetTypeExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::GetTypeExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.GetTypeExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGetXmlNamespaceExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitGetXmlNamespaceExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitGetXmlNamespaceExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitGetXmlNamespaceExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitGetXmlNamespaceExpression (node As GetXmlNamespaceExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitGetXmlNamespaceExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax -&gt; unit&#xA;override this.VisitGetXmlNamespaceExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitGetXmlNamespaceExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitGetXmlNamespaceExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::GetXmlNamespaceExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitGetXmlNamespaceExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::GetXmlNamespaceExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitGetXmlNamespaceExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::GetXmlNamespaceExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.GetXmlNamespaceExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGlobalName">
      <MemberSignature Language="C#" Value="public virtual void VisitGlobalName (Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitGlobalName(class Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitGlobalName(Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitGlobalName (node As GlobalNameSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitGlobalName : Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax -&gt; unit&#xA;override this.VisitGlobalName : Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitGlobalName node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitGlobalName(Microsoft::CodeAnalysis::VisualBasic::Syntax::GlobalNameSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitGlobalName(Microsoft::CodeAnalysis::VisualBasic::Syntax::GlobalNameSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitGlobalName(Microsoft::CodeAnalysis::VisualBasic::Syntax::GlobalNameSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.GlobalNameSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGoToStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitGoToStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitGoToStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitGoToStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitGoToStatement (node As GoToStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitGoToStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax -&gt; unit&#xA;override this.VisitGoToStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitGoToStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitGoToStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::GoToStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitGoToStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::GoToStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitGoToStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::GoToStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.GoToStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGroupAggregation">
      <MemberSignature Language="C#" Value="public virtual void VisitGroupAggregation (Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitGroupAggregation(class Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitGroupAggregation(Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitGroupAggregation (node As GroupAggregationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitGroupAggregation : Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax -&gt; unit&#xA;override this.VisitGroupAggregation : Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitGroupAggregation node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitGroupAggregation(Microsoft::CodeAnalysis::VisualBasic::Syntax::GroupAggregationSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitGroupAggregation(Microsoft::CodeAnalysis::VisualBasic::Syntax::GroupAggregationSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitGroupAggregation(Microsoft::CodeAnalysis::VisualBasic::Syntax::GroupAggregationSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupAggregationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGroupByClause">
      <MemberSignature Language="C#" Value="public virtual void VisitGroupByClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitGroupByClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitGroupByClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitGroupByClause (node As GroupByClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitGroupByClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax -&gt; unit&#xA;override this.VisitGroupByClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitGroupByClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitGroupByClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::GroupByClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitGroupByClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::GroupByClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitGroupByClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::GroupByClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupByClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGroupJoinClause">
      <MemberSignature Language="C#" Value="public virtual void VisitGroupJoinClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitGroupJoinClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitGroupJoinClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitGroupJoinClause (node As GroupJoinClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitGroupJoinClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax -&gt; unit&#xA;override this.VisitGroupJoinClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitGroupJoinClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitGroupJoinClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::GroupJoinClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitGroupJoinClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::GroupJoinClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitGroupJoinClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::GroupJoinClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.GroupJoinClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitHandlesClause">
      <MemberSignature Language="C#" Value="public virtual void VisitHandlesClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitHandlesClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitHandlesClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitHandlesClause (node As HandlesClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitHandlesClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax -&gt; unit&#xA;override this.VisitHandlesClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitHandlesClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitHandlesClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitHandlesClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitHandlesClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitHandlesClauseItem">
      <MemberSignature Language="C#" Value="public virtual void VisitHandlesClauseItem (Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitHandlesClauseItem(class Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitHandlesClauseItem(Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitHandlesClauseItem (node As HandlesClauseItemSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitHandlesClauseItem : Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax -&gt; unit&#xA;override this.VisitHandlesClauseItem : Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitHandlesClauseItem node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitHandlesClauseItem(Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseItemSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitHandlesClauseItem(Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseItemSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitHandlesClauseItem(Microsoft::CodeAnalysis::VisualBasic::Syntax::HandlesClauseItemSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.HandlesClauseItemSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIdentifierName">
      <MemberSignature Language="C#" Value="public virtual void VisitIdentifierName (Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitIdentifierName(class Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitIdentifierName(Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitIdentifierName (node As IdentifierNameSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitIdentifierName : Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax -&gt; unit&#xA;override this.VisitIdentifierName : Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitIdentifierName node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitIdentifierName(Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitIdentifierName(Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitIdentifierName(Microsoft::CodeAnalysis::VisualBasic::Syntax::IdentifierNameSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IdentifierNameSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIfDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitIfDirectiveTrivia (Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitIfDirectiveTrivia(class Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitIfDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitIfDirectiveTrivia (node As IfDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitIfDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitIfDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitIfDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitIfDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::IfDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitIfDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::IfDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitIfDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::IfDirectiveTriviaSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IfDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIfStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitIfStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitIfStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitIfStatement (node As IfStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitIfStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax -&gt; unit&#xA;override this.VisitIfStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitIfStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitIfStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::IfStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitIfStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::IfStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitIfStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::IfStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IfStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitImplementsClause">
      <MemberSignature Language="C#" Value="public virtual void VisitImplementsClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitImplementsClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitImplementsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitImplementsClause (node As ImplementsClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitImplementsClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax -&gt; unit&#xA;override this.VisitImplementsClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitImplementsClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitImplementsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitImplementsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitImplementsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitImplementsStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitImplementsStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitImplementsStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitImplementsStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitImplementsStatement (node As ImplementsStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitImplementsStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax -&gt; unit&#xA;override this.VisitImplementsStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitImplementsStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitImplementsStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitImplementsStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitImplementsStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ImplementsStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ImplementsStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitImportAliasClause">
      <MemberSignature Language="C#" Value="public virtual void VisitImportAliasClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitImportAliasClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitImportAliasClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitImportAliasClause (node As ImportAliasClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitImportAliasClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax -&gt; unit&#xA;override this.VisitImportAliasClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitImportAliasClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitImportAliasClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportAliasClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitImportAliasClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportAliasClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitImportAliasClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportAliasClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportAliasClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitImportsStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitImportsStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitImportsStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitImportsStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitImportsStatement (node As ImportsStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitImportsStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax -&gt; unit&#xA;override this.VisitImportsStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitImportsStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitImportsStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportsStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitImportsStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportsStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitImportsStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ImportsStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ImportsStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitIncompleteMember">
      <MemberSignature Language="C#" Value="public virtual void VisitIncompleteMember (Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitIncompleteMember(class Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitIncompleteMember(Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitIncompleteMember (node As IncompleteMemberSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitIncompleteMember : Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax -&gt; unit&#xA;override this.VisitIncompleteMember : Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitIncompleteMember node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitIncompleteMember(Microsoft::CodeAnalysis::VisualBasic::Syntax::IncompleteMemberSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitIncompleteMember(Microsoft::CodeAnalysis::VisualBasic::Syntax::IncompleteMemberSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitIncompleteMember(Microsoft::CodeAnalysis::VisualBasic::Syntax::IncompleteMemberSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.IncompleteMemberSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInferredFieldInitializer">
      <MemberSignature Language="C#" Value="public virtual void VisitInferredFieldInitializer (Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitInferredFieldInitializer(class Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitInferredFieldInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitInferredFieldInitializer (node As InferredFieldInitializerSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitInferredFieldInitializer : Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax -&gt; unit&#xA;override this.VisitInferredFieldInitializer : Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitInferredFieldInitializer node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitInferredFieldInitializer(Microsoft::CodeAnalysis::VisualBasic::Syntax::InferredFieldInitializerSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitInferredFieldInitializer(Microsoft::CodeAnalysis::VisualBasic::Syntax::InferredFieldInitializerSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitInferredFieldInitializer(Microsoft::CodeAnalysis::VisualBasic::Syntax::InferredFieldInitializerSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InferredFieldInitializerSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInheritsStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitInheritsStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitInheritsStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitInheritsStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitInheritsStatement (node As InheritsStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitInheritsStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax -&gt; unit&#xA;override this.VisitInheritsStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitInheritsStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitInheritsStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitInheritsStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitInheritsStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::InheritsStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InheritsStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterfaceBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitInterfaceBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitInterfaceBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitInterfaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitInterfaceBlock (node As InterfaceBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitInterfaceBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax -&gt; unit&#xA;override this.VisitInterfaceBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitInterfaceBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitInterfaceBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterfaceBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitInterfaceBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterfaceBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitInterfaceBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterfaceBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterfaceStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitInterfaceStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitInterfaceStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitInterfaceStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitInterfaceStatement (node As InterfaceStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitInterfaceStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax -&gt; unit&#xA;override this.VisitInterfaceStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitInterfaceStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitInterfaceStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterfaceStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitInterfaceStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterfaceStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitInterfaceStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterfaceStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InterfaceStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterpolatedStringExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitInterpolatedStringExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitInterpolatedStringExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitInterpolatedStringExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitInterpolatedStringExpression (node As InterpolatedStringExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitInterpolatedStringExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax -&gt; unit&#xA;override this.VisitInterpolatedStringExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitInterpolatedStringExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitInterpolatedStringExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolatedStringExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitInterpolatedStringExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolatedStringExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitInterpolatedStringExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolatedStringExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterpolatedStringText">
      <MemberSignature Language="C#" Value="public virtual void VisitInterpolatedStringText (Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitInterpolatedStringText(class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitInterpolatedStringText(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitInterpolatedStringText (node As InterpolatedStringTextSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitInterpolatedStringText : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax -&gt; unit&#xA;override this.VisitInterpolatedStringText : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitInterpolatedStringText node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitInterpolatedStringText(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolatedStringTextSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitInterpolatedStringText(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolatedStringTextSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitInterpolatedStringText(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolatedStringTextSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolatedStringTextSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterpolation">
      <MemberSignature Language="C#" Value="public virtual void VisitInterpolation (Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitInterpolation(class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitInterpolation(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitInterpolation (node As InterpolationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitInterpolation : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax -&gt; unit&#xA;override this.VisitInterpolation : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitInterpolation node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitInterpolation(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitInterpolation(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitInterpolation(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterpolationAlignmentClause">
      <MemberSignature Language="C#" Value="public virtual void VisitInterpolationAlignmentClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitInterpolationAlignmentClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitInterpolationAlignmentClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitInterpolationAlignmentClause (node As InterpolationAlignmentClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitInterpolationAlignmentClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax -&gt; unit&#xA;override this.VisitInterpolationAlignmentClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitInterpolationAlignmentClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitInterpolationAlignmentClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationAlignmentClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitInterpolationAlignmentClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationAlignmentClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitInterpolationAlignmentClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationAlignmentClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationAlignmentClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInterpolationFormatClause">
      <MemberSignature Language="C#" Value="public virtual void VisitInterpolationFormatClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitInterpolationFormatClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitInterpolationFormatClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitInterpolationFormatClause (node As InterpolationFormatClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitInterpolationFormatClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax -&gt; unit&#xA;override this.VisitInterpolationFormatClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitInterpolationFormatClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitInterpolationFormatClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationFormatClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitInterpolationFormatClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationFormatClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitInterpolationFormatClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::InterpolationFormatClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InterpolationFormatClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitInvocationExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitInvocationExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitInvocationExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitInvocationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitInvocationExpression (node As InvocationExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitInvocationExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax -&gt; unit&#xA;override this.VisitInvocationExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitInvocationExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitInvocationExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::InvocationExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitInvocationExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::InvocationExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitInvocationExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::InvocationExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.InvocationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitJoinCondition">
      <MemberSignature Language="C#" Value="public virtual void VisitJoinCondition (Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitJoinCondition(class Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitJoinCondition(Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitJoinCondition (node As JoinConditionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitJoinCondition : Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax -&gt; unit&#xA;override this.VisitJoinCondition : Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitJoinCondition node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitJoinCondition(Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinConditionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitJoinCondition(Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinConditionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitJoinCondition(Microsoft::CodeAnalysis::VisualBasic::Syntax::JoinConditionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.JoinConditionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitKeywordEventContainer">
      <MemberSignature Language="C#" Value="public virtual void VisitKeywordEventContainer (Microsoft.CodeAnalysis.VisualBasic.Syntax.KeywordEventContainerSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitKeywordEventContainer(class Microsoft.CodeAnalysis.VisualBasic.Syntax.KeywordEventContainerSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitKeywordEventContainer(Microsoft.CodeAnalysis.VisualBasic.Syntax.KeywordEventContainerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitKeywordEventContainer (node As KeywordEventContainerSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitKeywordEventContainer : Microsoft.CodeAnalysis.VisualBasic.Syntax.KeywordEventContainerSyntax -&gt; unit&#xA;override this.VisitKeywordEventContainer : Microsoft.CodeAnalysis.VisualBasic.Syntax.KeywordEventContainerSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitKeywordEventContainer node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitKeywordEventContainer(Microsoft::CodeAnalysis::VisualBasic::Syntax::KeywordEventContainerSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitKeywordEventContainer(Microsoft::CodeAnalysis::VisualBasic::Syntax::KeywordEventContainerSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitKeywordEventContainer(Microsoft::CodeAnalysis::VisualBasic::Syntax::KeywordEventContainerSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.KeywordEventContainerSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLabel">
      <MemberSignature Language="C#" Value="public virtual void VisitLabel (Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitLabel(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitLabel(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitLabel (node As LabelSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitLabel : Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; unit&#xA;override this.VisitLabel : Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitLabel node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitLabel(Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitLabel(Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitLabel(Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLabelStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitLabelStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitLabelStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitLabelStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitLabelStatement (node As LabelStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitLabelStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax -&gt; unit&#xA;override this.VisitLabelStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitLabelStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitLabelStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitLabelStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitLabelStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::LabelStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LabelStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLambdaHeader">
      <MemberSignature Language="C#" Value="public virtual void VisitLambdaHeader (Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitLambdaHeader(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitLambdaHeader(Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitLambdaHeader (node As LambdaHeaderSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitLambdaHeader : Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax -&gt; unit&#xA;override this.VisitLambdaHeader : Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitLambdaHeader node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitLambdaHeader(Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitLambdaHeader(Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitLambdaHeader(Microsoft::CodeAnalysis::VisualBasic::Syntax::LambdaHeaderSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LambdaHeaderSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLetClause">
      <MemberSignature Language="C#" Value="public virtual void VisitLetClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitLetClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitLetClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitLetClause (node As LetClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitLetClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax -&gt; unit&#xA;override this.VisitLetClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitLetClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitLetClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::LetClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitLetClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::LetClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitLetClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::LetClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LetClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLiteralExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitLiteralExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitLiteralExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitLiteralExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitLiteralExpression (node As LiteralExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitLiteralExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax -&gt; unit&#xA;override this.VisitLiteralExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitLiteralExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitLiteralExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitLiteralExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitLiteralExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::LiteralExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LiteralExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLocalDeclarationStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitLocalDeclarationStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitLocalDeclarationStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitLocalDeclarationStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitLocalDeclarationStatement (node As LocalDeclarationStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitLocalDeclarationStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax -&gt; unit&#xA;override this.VisitLocalDeclarationStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitLocalDeclarationStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitLocalDeclarationStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::LocalDeclarationStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitLocalDeclarationStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::LocalDeclarationStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitLocalDeclarationStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::LocalDeclarationStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LocalDeclarationStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitLoopStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitLoopStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitLoopStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitLoopStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitLoopStatement (node As LoopStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitLoopStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax -&gt; unit&#xA;override this.VisitLoopStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitLoopStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitLoopStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitLoopStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitLoopStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::LoopStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.LoopStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMeExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitMeExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitMeExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitMeExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitMeExpression (node As MeExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitMeExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax -&gt; unit&#xA;override this.VisitMeExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitMeExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitMeExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::MeExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitMeExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::MeExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitMeExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::MeExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MeExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMemberAccessExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitMemberAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitMemberAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitMemberAccessExpression (node As MemberAccessExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitMemberAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax -&gt; unit&#xA;override this.VisitMemberAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitMemberAccessExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitMemberAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::MemberAccessExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitMemberAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::MemberAccessExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitMemberAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::MemberAccessExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MemberAccessExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMethodBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitMethodBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitMethodBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitMethodBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitMethodBlock (node As MethodBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitMethodBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax -&gt; unit&#xA;override this.VisitMethodBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitMethodBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitMethodBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitMethodBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitMethodBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMethodStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitMethodStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitMethodStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitMethodStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitMethodStatement (node As MethodStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitMethodStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax -&gt; unit&#xA;override this.VisitMethodStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitMethodStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitMethodStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitMethodStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitMethodStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::MethodStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MethodStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMidExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitMidExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitMidExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitMidExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitMidExpression (node As MidExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitMidExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax -&gt; unit&#xA;override this.VisitMidExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitMidExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitMidExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::MidExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitMidExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::MidExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitMidExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::MidExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MidExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitModifiedIdentifier">
      <MemberSignature Language="C#" Value="public virtual void VisitModifiedIdentifier (Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitModifiedIdentifier(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitModifiedIdentifier(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitModifiedIdentifier (node As ModifiedIdentifierSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitModifiedIdentifier : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax -&gt; unit&#xA;override this.VisitModifiedIdentifier : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitModifiedIdentifier node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitModifiedIdentifier(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModifiedIdentifierSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitModifiedIdentifier(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModifiedIdentifierSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitModifiedIdentifier(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModifiedIdentifierSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModifiedIdentifierSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitModuleBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitModuleBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitModuleBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitModuleBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitModuleBlock (node As ModuleBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitModuleBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax -&gt; unit&#xA;override this.VisitModuleBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitModuleBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitModuleBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitModuleBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitModuleBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitModuleStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitModuleStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitModuleStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitModuleStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitModuleStatement (node As ModuleStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitModuleStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax -&gt; unit&#xA;override this.VisitModuleStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitModuleStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitModuleStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitModuleStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitModuleStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ModuleStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ModuleStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMultiLineIfBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitMultiLineIfBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitMultiLineIfBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitMultiLineIfBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitMultiLineIfBlock (node As MultiLineIfBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitMultiLineIfBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax -&gt; unit&#xA;override this.VisitMultiLineIfBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitMultiLineIfBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitMultiLineIfBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::MultiLineIfBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitMultiLineIfBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::MultiLineIfBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitMultiLineIfBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::MultiLineIfBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineIfBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMultiLineLambdaExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitMultiLineLambdaExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitMultiLineLambdaExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitMultiLineLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitMultiLineLambdaExpression (node As MultiLineLambdaExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitMultiLineLambdaExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax -&gt; unit&#xA;override this.VisitMultiLineLambdaExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitMultiLineLambdaExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitMultiLineLambdaExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::MultiLineLambdaExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitMultiLineLambdaExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::MultiLineLambdaExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitMultiLineLambdaExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::MultiLineLambdaExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MultiLineLambdaExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMyBaseExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitMyBaseExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitMyBaseExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitMyBaseExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitMyBaseExpression (node As MyBaseExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitMyBaseExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax -&gt; unit&#xA;override this.VisitMyBaseExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitMyBaseExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitMyBaseExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::MyBaseExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitMyBaseExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::MyBaseExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitMyBaseExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::MyBaseExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MyBaseExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitMyClassExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitMyClassExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitMyClassExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitMyClassExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitMyClassExpression (node As MyClassExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitMyClassExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax -&gt; unit&#xA;override this.VisitMyClassExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitMyClassExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitMyClassExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::MyClassExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitMyClassExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::MyClassExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitMyClassExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::MyClassExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.MyClassExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNameColonEquals">
      <MemberSignature Language="C#" Value="public virtual void VisitNameColonEquals (Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitNameColonEquals(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitNameColonEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitNameColonEquals (node As NameColonEqualsSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitNameColonEquals : Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax -&gt; unit&#xA;override this.VisitNameColonEquals : Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitNameColonEquals node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitNameColonEquals(Microsoft::CodeAnalysis::VisualBasic::Syntax::NameColonEqualsSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitNameColonEquals(Microsoft::CodeAnalysis::VisualBasic::Syntax::NameColonEqualsSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitNameColonEquals(Microsoft::CodeAnalysis::VisualBasic::Syntax::NameColonEqualsSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NameColonEqualsSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNamedFieldInitializer">
      <MemberSignature Language="C#" Value="public virtual void VisitNamedFieldInitializer (Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitNamedFieldInitializer(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitNamedFieldInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitNamedFieldInitializer (node As NamedFieldInitializerSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitNamedFieldInitializer : Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax -&gt; unit&#xA;override this.VisitNamedFieldInitializer : Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitNamedFieldInitializer node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitNamedFieldInitializer(Microsoft::CodeAnalysis::VisualBasic::Syntax::NamedFieldInitializerSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitNamedFieldInitializer(Microsoft::CodeAnalysis::VisualBasic::Syntax::NamedFieldInitializerSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitNamedFieldInitializer(Microsoft::CodeAnalysis::VisualBasic::Syntax::NamedFieldInitializerSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedFieldInitializerSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNamedTupleElement">
      <MemberSignature Language="C#" Value="public virtual void VisitNamedTupleElement (Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedTupleElementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitNamedTupleElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedTupleElementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitNamedTupleElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedTupleElementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitNamedTupleElement (node As NamedTupleElementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitNamedTupleElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedTupleElementSyntax -&gt; unit&#xA;override this.VisitNamedTupleElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedTupleElementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitNamedTupleElement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitNamedTupleElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::NamedTupleElementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitNamedTupleElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::NamedTupleElementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitNamedTupleElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::NamedTupleElementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NamedTupleElementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNameOfExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitNameOfExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitNameOfExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitNameOfExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitNameOfExpression (node As NameOfExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitNameOfExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax -&gt; unit&#xA;override this.VisitNameOfExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitNameOfExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitNameOfExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::NameOfExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitNameOfExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::NameOfExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitNameOfExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::NameOfExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NameOfExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNamespaceBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitNamespaceBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitNamespaceBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitNamespaceBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitNamespaceBlock (node As NamespaceBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitNamespaceBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax -&gt; unit&#xA;override this.VisitNamespaceBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitNamespaceBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitNamespaceBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::NamespaceBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitNamespaceBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::NamespaceBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitNamespaceBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::NamespaceBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNamespaceStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitNamespaceStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitNamespaceStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitNamespaceStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitNamespaceStatement (node As NamespaceStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitNamespaceStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax -&gt; unit&#xA;override this.VisitNamespaceStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitNamespaceStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitNamespaceStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::NamespaceStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitNamespaceStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::NamespaceStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitNamespaceStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::NamespaceStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NamespaceStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNextStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitNextStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitNextStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitNextStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitNextStatement (node As NextStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitNextStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax -&gt; unit&#xA;override this.VisitNextStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitNextStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitNextStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitNextStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitNextStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::NextStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NextStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitNullableType">
      <MemberSignature Language="C#" Value="public virtual void VisitNullableType (Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitNullableType(class Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitNullableType(Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitNullableType (node As NullableTypeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitNullableType : Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax -&gt; unit&#xA;override this.VisitNullableType : Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitNullableType node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitNullableType(Microsoft::CodeAnalysis::VisualBasic::Syntax::NullableTypeSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitNullableType(Microsoft::CodeAnalysis::VisualBasic::Syntax::NullableTypeSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitNullableType(Microsoft::CodeAnalysis::VisualBasic::Syntax::NullableTypeSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.NullableTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitObjectCollectionInitializer">
      <MemberSignature Language="C#" Value="public virtual void VisitObjectCollectionInitializer (Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitObjectCollectionInitializer(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitObjectCollectionInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitObjectCollectionInitializer (node As ObjectCollectionInitializerSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitObjectCollectionInitializer : Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax -&gt; unit&#xA;override this.VisitObjectCollectionInitializer : Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitObjectCollectionInitializer node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitObjectCollectionInitializer(Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectCollectionInitializerSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitObjectCollectionInitializer(Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectCollectionInitializerSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitObjectCollectionInitializer(Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectCollectionInitializerSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCollectionInitializerSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitObjectCreationExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitObjectCreationExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitObjectCreationExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitObjectCreationExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitObjectCreationExpression (node As ObjectCreationExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitObjectCreationExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax -&gt; unit&#xA;override this.VisitObjectCreationExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitObjectCreationExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitObjectCreationExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectCreationExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitObjectCreationExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectCreationExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitObjectCreationExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectCreationExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectCreationExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitObjectMemberInitializer">
      <MemberSignature Language="C#" Value="public virtual void VisitObjectMemberInitializer (Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitObjectMemberInitializer(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitObjectMemberInitializer(Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitObjectMemberInitializer (node As ObjectMemberInitializerSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitObjectMemberInitializer : Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax -&gt; unit&#xA;override this.VisitObjectMemberInitializer : Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitObjectMemberInitializer node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitObjectMemberInitializer(Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectMemberInitializerSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitObjectMemberInitializer(Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectMemberInitializerSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitObjectMemberInitializer(Microsoft::CodeAnalysis::VisualBasic::Syntax::ObjectMemberInitializerSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ObjectMemberInitializerSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOmittedArgument">
      <MemberSignature Language="C#" Value="public virtual void VisitOmittedArgument (Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitOmittedArgument(class Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitOmittedArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitOmittedArgument (node As OmittedArgumentSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitOmittedArgument : Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax -&gt; unit&#xA;override this.VisitOmittedArgument : Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitOmittedArgument node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitOmittedArgument(Microsoft::CodeAnalysis::VisualBasic::Syntax::OmittedArgumentSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitOmittedArgument(Microsoft::CodeAnalysis::VisualBasic::Syntax::OmittedArgumentSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitOmittedArgument(Microsoft::CodeAnalysis::VisualBasic::Syntax::OmittedArgumentSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.OmittedArgumentSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOnErrorGoToStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitOnErrorGoToStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitOnErrorGoToStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitOnErrorGoToStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitOnErrorGoToStatement (node As OnErrorGoToStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitOnErrorGoToStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax -&gt; unit&#xA;override this.VisitOnErrorGoToStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitOnErrorGoToStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitOnErrorGoToStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::OnErrorGoToStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitOnErrorGoToStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::OnErrorGoToStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitOnErrorGoToStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::OnErrorGoToStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorGoToStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOnErrorResumeNextStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitOnErrorResumeNextStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitOnErrorResumeNextStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitOnErrorResumeNextStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitOnErrorResumeNextStatement (node As OnErrorResumeNextStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitOnErrorResumeNextStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax -&gt; unit&#xA;override this.VisitOnErrorResumeNextStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitOnErrorResumeNextStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitOnErrorResumeNextStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::OnErrorResumeNextStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitOnErrorResumeNextStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::OnErrorResumeNextStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitOnErrorResumeNextStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::OnErrorResumeNextStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.OnErrorResumeNextStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOperatorBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitOperatorBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitOperatorBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitOperatorBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitOperatorBlock (node As OperatorBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitOperatorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax -&gt; unit&#xA;override this.VisitOperatorBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitOperatorBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitOperatorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::OperatorBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitOperatorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::OperatorBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitOperatorBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::OperatorBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOperatorStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitOperatorStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitOperatorStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitOperatorStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitOperatorStatement (node As OperatorStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitOperatorStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax -&gt; unit&#xA;override this.VisitOperatorStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitOperatorStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitOperatorStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::OperatorStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitOperatorStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::OperatorStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitOperatorStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::OperatorStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.OperatorStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOptionStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitOptionStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitOptionStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitOptionStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitOptionStatement (node As OptionStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitOptionStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax -&gt; unit&#xA;override this.VisitOptionStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitOptionStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitOptionStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::OptionStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitOptionStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::OptionStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitOptionStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::OptionStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.OptionStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOrderByClause">
      <MemberSignature Language="C#" Value="public virtual void VisitOrderByClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitOrderByClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitOrderByClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitOrderByClause (node As OrderByClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitOrderByClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax -&gt; unit&#xA;override this.VisitOrderByClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitOrderByClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitOrderByClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::OrderByClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitOrderByClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::OrderByClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitOrderByClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::OrderByClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderByClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOrdering">
      <MemberSignature Language="C#" Value="public virtual void VisitOrdering (Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitOrdering(class Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitOrdering(Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitOrdering (node As OrderingSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitOrdering : Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax -&gt; unit&#xA;override this.VisitOrdering : Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitOrdering node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitOrdering(Microsoft::CodeAnalysis::VisualBasic::Syntax::OrderingSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitOrdering(Microsoft::CodeAnalysis::VisualBasic::Syntax::OrderingSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitOrdering(Microsoft::CodeAnalysis::VisualBasic::Syntax::OrderingSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.OrderingSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitParameter">
      <MemberSignature Language="C#" Value="public virtual void VisitParameter (Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitParameter(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitParameter(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitParameter (node As ParameterSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitParameter : Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax -&gt; unit&#xA;override this.VisitParameter : Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitParameter node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitParameter(Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitParameter(Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitParameter(Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitParameterList">
      <MemberSignature Language="C#" Value="public virtual void VisitParameterList (Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitParameterList(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitParameterList (node As ParameterListSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitParameterList : Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax -&gt; unit&#xA;override this.VisitParameterList : Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitParameterList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitParameterList(Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitParameterList(Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitParameterList(Microsoft::CodeAnalysis::VisualBasic::Syntax::ParameterListSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitParenthesizedExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitParenthesizedExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitParenthesizedExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitParenthesizedExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitParenthesizedExpression (node As ParenthesizedExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitParenthesizedExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax -&gt; unit&#xA;override this.VisitParenthesizedExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitParenthesizedExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitParenthesizedExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ParenthesizedExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitParenthesizedExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ParenthesizedExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitParenthesizedExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::ParenthesizedExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ParenthesizedExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPartitionClause">
      <MemberSignature Language="C#" Value="public virtual void VisitPartitionClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitPartitionClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitPartitionClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitPartitionClause (node As PartitionClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitPartitionClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax -&gt; unit&#xA;override this.VisitPartitionClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitPartitionClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitPartitionClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::PartitionClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitPartitionClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::PartitionClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitPartitionClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::PartitionClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPartitionWhileClause">
      <MemberSignature Language="C#" Value="public virtual void VisitPartitionWhileClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitPartitionWhileClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitPartitionWhileClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitPartitionWhileClause (node As PartitionWhileClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitPartitionWhileClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax -&gt; unit&#xA;override this.VisitPartitionWhileClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitPartitionWhileClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitPartitionWhileClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::PartitionWhileClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitPartitionWhileClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::PartitionWhileClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitPartitionWhileClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::PartitionWhileClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.PartitionWhileClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPredefinedCastExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitPredefinedCastExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitPredefinedCastExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitPredefinedCastExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitPredefinedCastExpression (node As PredefinedCastExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitPredefinedCastExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax -&gt; unit&#xA;override this.VisitPredefinedCastExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitPredefinedCastExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitPredefinedCastExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::PredefinedCastExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitPredefinedCastExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::PredefinedCastExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitPredefinedCastExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::PredefinedCastExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedCastExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPredefinedType">
      <MemberSignature Language="C#" Value="public virtual void VisitPredefinedType (Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedTypeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitPredefinedType(class Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedTypeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitPredefinedType(Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitPredefinedType (node As PredefinedTypeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitPredefinedType : Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedTypeSyntax -&gt; unit&#xA;override this.VisitPredefinedType : Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedTypeSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitPredefinedType node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitPredefinedType(Microsoft::CodeAnalysis::VisualBasic::Syntax::PredefinedTypeSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitPredefinedType(Microsoft::CodeAnalysis::VisualBasic::Syntax::PredefinedTypeSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitPredefinedType(Microsoft::CodeAnalysis::VisualBasic::Syntax::PredefinedTypeSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.PredefinedTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPrintStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitPrintStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitPrintStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitPrintStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitPrintStatement (node As PrintStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitPrintStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax -&gt; unit&#xA;override this.VisitPrintStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitPrintStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitPrintStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::PrintStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitPrintStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::PrintStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitPrintStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::PrintStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.PrintStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPropertyBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitPropertyBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitPropertyBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitPropertyBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitPropertyBlock (node As PropertyBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitPropertyBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax -&gt; unit&#xA;override this.VisitPropertyBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitPropertyBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitPropertyBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::PropertyBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitPropertyBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::PropertyBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitPropertyBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::PropertyBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitPropertyStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitPropertyStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitPropertyStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitPropertyStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitPropertyStatement (node As PropertyStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitPropertyStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax -&gt; unit&#xA;override this.VisitPropertyStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitPropertyStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitPropertyStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::PropertyStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitPropertyStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::PropertyStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitPropertyStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::PropertyStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.PropertyStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitQualifiedCrefOperatorReference">
      <MemberSignature Language="C#" Value="public virtual void VisitQualifiedCrefOperatorReference (Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitQualifiedCrefOperatorReference(class Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitQualifiedCrefOperatorReference(Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitQualifiedCrefOperatorReference (node As QualifiedCrefOperatorReferenceSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitQualifiedCrefOperatorReference : Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax -&gt; unit&#xA;override this.VisitQualifiedCrefOperatorReference : Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitQualifiedCrefOperatorReference node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitQualifiedCrefOperatorReference(Microsoft::CodeAnalysis::VisualBasic::Syntax::QualifiedCrefOperatorReferenceSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitQualifiedCrefOperatorReference(Microsoft::CodeAnalysis::VisualBasic::Syntax::QualifiedCrefOperatorReferenceSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitQualifiedCrefOperatorReference(Microsoft::CodeAnalysis::VisualBasic::Syntax::QualifiedCrefOperatorReferenceSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedCrefOperatorReferenceSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitQualifiedName">
      <MemberSignature Language="C#" Value="public virtual void VisitQualifiedName (Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitQualifiedName(class Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitQualifiedName(Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitQualifiedName (node As QualifiedNameSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitQualifiedName : Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax -&gt; unit&#xA;override this.VisitQualifiedName : Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitQualifiedName node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitQualifiedName(Microsoft::CodeAnalysis::VisualBasic::Syntax::QualifiedNameSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitQualifiedName(Microsoft::CodeAnalysis::VisualBasic::Syntax::QualifiedNameSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitQualifiedName(Microsoft::CodeAnalysis::VisualBasic::Syntax::QualifiedNameSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.QualifiedNameSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitQueryExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitQueryExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitQueryExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitQueryExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitQueryExpression (node As QueryExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitQueryExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax -&gt; unit&#xA;override this.VisitQueryExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitQueryExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitQueryExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::QueryExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitQueryExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::QueryExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitQueryExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::QueryExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.QueryExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRaiseEventStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitRaiseEventStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitRaiseEventStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitRaiseEventStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitRaiseEventStatement (node As RaiseEventStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitRaiseEventStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax -&gt; unit&#xA;override this.VisitRaiseEventStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitRaiseEventStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitRaiseEventStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::RaiseEventStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitRaiseEventStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::RaiseEventStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitRaiseEventStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::RaiseEventStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.RaiseEventStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRangeArgument">
      <MemberSignature Language="C#" Value="public virtual void VisitRangeArgument (Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitRangeArgument(class Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitRangeArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitRangeArgument (node As RangeArgumentSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitRangeArgument : Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax -&gt; unit&#xA;override this.VisitRangeArgument : Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitRangeArgument node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitRangeArgument(Microsoft::CodeAnalysis::VisualBasic::Syntax::RangeArgumentSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitRangeArgument(Microsoft::CodeAnalysis::VisualBasic::Syntax::RangeArgumentSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitRangeArgument(Microsoft::CodeAnalysis::VisualBasic::Syntax::RangeArgumentSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeArgumentSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRangeCaseClause">
      <MemberSignature Language="C#" Value="public virtual void VisitRangeCaseClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitRangeCaseClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitRangeCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitRangeCaseClause (node As RangeCaseClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitRangeCaseClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax -&gt; unit&#xA;override this.VisitRangeCaseClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitRangeCaseClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitRangeCaseClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::RangeCaseClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitRangeCaseClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::RangeCaseClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitRangeCaseClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::RangeCaseClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.RangeCaseClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRedimClause">
      <MemberSignature Language="C#" Value="public virtual void VisitRedimClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitRedimClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitRedimClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitRedimClause (node As RedimClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitRedimClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax -&gt; unit&#xA;override this.VisitRedimClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitRedimClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitRedimClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::RedimClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitRedimClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::RedimClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitRedimClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::RedimClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.RedimClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitReDimStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitReDimStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitReDimStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitReDimStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitReDimStatement (node As ReDimStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitReDimStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax -&gt; unit&#xA;override this.VisitReDimStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitReDimStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitReDimStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ReDimStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitReDimStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ReDimStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitReDimStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ReDimStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ReDimStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitReferenceDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitReferenceDirectiveTrivia (Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitReferenceDirectiveTrivia(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitReferenceDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitReferenceDirectiveTrivia (node As ReferenceDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitReferenceDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitReferenceDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitReferenceDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitReferenceDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::ReferenceDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitReferenceDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::ReferenceDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitReferenceDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::ReferenceDirectiveTriviaSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ReferenceDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRegionDirectiveTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitRegionDirectiveTrivia (Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitRegionDirectiveTrivia(class Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitRegionDirectiveTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitRegionDirectiveTrivia (node As RegionDirectiveTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitRegionDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax -&gt; unit&#xA;override this.VisitRegionDirectiveTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitRegionDirectiveTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitRegionDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::RegionDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitRegionDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::RegionDirectiveTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitRegionDirectiveTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::RegionDirectiveTriviaSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.RegionDirectiveTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitRelationalCaseClause">
      <MemberSignature Language="C#" Value="public virtual void VisitRelationalCaseClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitRelationalCaseClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitRelationalCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitRelationalCaseClause (node As RelationalCaseClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitRelationalCaseClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax -&gt; unit&#xA;override this.VisitRelationalCaseClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitRelationalCaseClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitRelationalCaseClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::RelationalCaseClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitRelationalCaseClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::RelationalCaseClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitRelationalCaseClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::RelationalCaseClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.RelationalCaseClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitResumeStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitResumeStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitResumeStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitResumeStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitResumeStatement (node As ResumeStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitResumeStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax -&gt; unit&#xA;override this.VisitResumeStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitResumeStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitResumeStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ResumeStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitResumeStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ResumeStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitResumeStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ResumeStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ResumeStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitReturnStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitReturnStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitReturnStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitReturnStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitReturnStatement (node As ReturnStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitReturnStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax -&gt; unit&#xA;override this.VisitReturnStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitReturnStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitReturnStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ReturnStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitReturnStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ReturnStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitReturnStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ReturnStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ReturnStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSelectBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitSelectBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitSelectBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitSelectBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSelectBlock (node As SelectBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSelectBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax -&gt; unit&#xA;override this.VisitSelectBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitSelectBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSelectBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitSelectBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitSelectBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSelectClause">
      <MemberSignature Language="C#" Value="public virtual void VisitSelectClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitSelectClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitSelectClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSelectClause (node As SelectClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSelectClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax -&gt; unit&#xA;override this.VisitSelectClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitSelectClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSelectClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitSelectClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitSelectClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSelectStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitSelectStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitSelectStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitSelectStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSelectStatement (node As SelectStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSelectStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax -&gt; unit&#xA;override this.VisitSelectStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitSelectStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSelectStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitSelectStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitSelectStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::SelectStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SelectStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSimpleArgument">
      <MemberSignature Language="C#" Value="public virtual void VisitSimpleArgument (Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitSimpleArgument(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitSimpleArgument(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSimpleArgument (node As SimpleArgumentSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSimpleArgument : Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax -&gt; unit&#xA;override this.VisitSimpleArgument : Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitSimpleArgument node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSimpleArgument(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleArgumentSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitSimpleArgument(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleArgumentSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitSimpleArgument(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleArgumentSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleArgumentSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSimpleAsClause">
      <MemberSignature Language="C#" Value="public virtual void VisitSimpleAsClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitSimpleAsClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitSimpleAsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSimpleAsClause (node As SimpleAsClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSimpleAsClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; unit&#xA;override this.VisitSimpleAsClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitSimpleAsClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSimpleAsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitSimpleAsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitSimpleAsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleAsClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleAsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSimpleCaseClause">
      <MemberSignature Language="C#" Value="public virtual void VisitSimpleCaseClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleCaseClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitSimpleCaseClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleCaseClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitSimpleCaseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleCaseClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSimpleCaseClause (node As SimpleCaseClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSimpleCaseClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleCaseClauseSyntax -&gt; unit&#xA;override this.VisitSimpleCaseClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleCaseClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitSimpleCaseClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSimpleCaseClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleCaseClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitSimpleCaseClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleCaseClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitSimpleCaseClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleCaseClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleCaseClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSimpleImportsClause">
      <MemberSignature Language="C#" Value="public virtual void VisitSimpleImportsClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitSimpleImportsClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitSimpleImportsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSimpleImportsClause (node As SimpleImportsClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSimpleImportsClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax -&gt; unit&#xA;override this.VisitSimpleImportsClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitSimpleImportsClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSimpleImportsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleImportsClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitSimpleImportsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleImportsClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitSimpleImportsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleImportsClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleImportsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSimpleJoinClause">
      <MemberSignature Language="C#" Value="public virtual void VisitSimpleJoinClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitSimpleJoinClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitSimpleJoinClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSimpleJoinClause (node As SimpleJoinClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSimpleJoinClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax -&gt; unit&#xA;override this.VisitSimpleJoinClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitSimpleJoinClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSimpleJoinClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleJoinClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitSimpleJoinClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleJoinClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitSimpleJoinClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SimpleJoinClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SimpleJoinClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSingleLineElseClause">
      <MemberSignature Language="C#" Value="public virtual void VisitSingleLineElseClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitSingleLineElseClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitSingleLineElseClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSingleLineElseClause (node As SingleLineElseClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSingleLineElseClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax -&gt; unit&#xA;override this.VisitSingleLineElseClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitSingleLineElseClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSingleLineElseClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineElseClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitSingleLineElseClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineElseClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitSingleLineElseClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineElseClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineElseClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSingleLineIfStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitSingleLineIfStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitSingleLineIfStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitSingleLineIfStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSingleLineIfStatement (node As SingleLineIfStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSingleLineIfStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax -&gt; unit&#xA;override this.VisitSingleLineIfStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitSingleLineIfStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSingleLineIfStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineIfStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitSingleLineIfStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineIfStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitSingleLineIfStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineIfStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineIfStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSingleLineLambdaExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitSingleLineLambdaExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitSingleLineLambdaExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitSingleLineLambdaExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSingleLineLambdaExpression (node As SingleLineLambdaExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSingleLineLambdaExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax -&gt; unit&#xA;override this.VisitSingleLineLambdaExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitSingleLineLambdaExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSingleLineLambdaExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineLambdaExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitSingleLineLambdaExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineLambdaExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitSingleLineLambdaExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::SingleLineLambdaExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SingleLineLambdaExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSkippedTokensTrivia">
      <MemberSignature Language="C#" Value="public virtual void VisitSkippedTokensTrivia (Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitSkippedTokensTrivia(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitSkippedTokensTrivia(Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSkippedTokensTrivia (node As SkippedTokensTriviaSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSkippedTokensTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax -&gt; unit&#xA;override this.VisitSkippedTokensTrivia : Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitSkippedTokensTrivia node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSkippedTokensTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::SkippedTokensTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitSkippedTokensTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::SkippedTokensTriviaSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitSkippedTokensTrivia(Microsoft::CodeAnalysis::VisualBasic::Syntax::SkippedTokensTriviaSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SkippedTokensTriviaSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSpecialConstraint">
      <MemberSignature Language="C#" Value="public virtual void VisitSpecialConstraint (Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitSpecialConstraint(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitSpecialConstraint(Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSpecialConstraint (node As SpecialConstraintSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSpecialConstraint : Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax -&gt; unit&#xA;override this.VisitSpecialConstraint : Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitSpecialConstraint node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSpecialConstraint(Microsoft::CodeAnalysis::VisualBasic::Syntax::SpecialConstraintSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitSpecialConstraint(Microsoft::CodeAnalysis::VisualBasic::Syntax::SpecialConstraintSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitSpecialConstraint(Microsoft::CodeAnalysis::VisualBasic::Syntax::SpecialConstraintSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SpecialConstraintSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitStopOrEndStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitStopOrEndStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitStopOrEndStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitStopOrEndStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitStopOrEndStatement (node As StopOrEndStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitStopOrEndStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax -&gt; unit&#xA;override this.VisitStopOrEndStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitStopOrEndStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitStopOrEndStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::StopOrEndStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitStopOrEndStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::StopOrEndStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitStopOrEndStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::StopOrEndStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.StopOrEndStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitStructureBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitStructureBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitStructureBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitStructureBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitStructureBlock (node As StructureBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitStructureBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax -&gt; unit&#xA;override this.VisitStructureBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitStructureBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitStructureBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::StructureBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitStructureBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::StructureBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitStructureBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::StructureBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitStructureStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitStructureStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitStructureStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitStructureStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitStructureStatement (node As StructureStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitStructureStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax -&gt; unit&#xA;override this.VisitStructureStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitStructureStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitStructureStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::StructureStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitStructureStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::StructureStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitStructureStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::StructureStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.StructureStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSubNewStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitSubNewStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitSubNewStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitSubNewStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSubNewStatement (node As SubNewStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSubNewStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax -&gt; unit&#xA;override this.VisitSubNewStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitSubNewStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSubNewStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::SubNewStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitSubNewStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::SubNewStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitSubNewStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::SubNewStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SubNewStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSyncLockBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitSyncLockBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitSyncLockBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitSyncLockBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSyncLockBlock (node As SyncLockBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSyncLockBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax -&gt; unit&#xA;override this.VisitSyncLockBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitSyncLockBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSyncLockBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::SyncLockBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitSyncLockBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::SyncLockBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitSyncLockBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::SyncLockBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSyncLockStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitSyncLockStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitSyncLockStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitSyncLockStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitSyncLockStatement (node As SyncLockStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitSyncLockStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax -&gt; unit&#xA;override this.VisitSyncLockStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitSyncLockStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitSyncLockStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::SyncLockStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitSyncLockStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::SyncLockStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitSyncLockStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::SyncLockStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.SyncLockStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTernaryConditionalExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitTernaryConditionalExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitTernaryConditionalExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitTernaryConditionalExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTernaryConditionalExpression (node As TernaryConditionalExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTernaryConditionalExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax -&gt; unit&#xA;override this.VisitTernaryConditionalExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitTernaryConditionalExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTernaryConditionalExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::TernaryConditionalExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitTernaryConditionalExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::TernaryConditionalExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitTernaryConditionalExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::TernaryConditionalExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TernaryConditionalExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitThrowStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitThrowStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitThrowStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitThrowStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitThrowStatement (node As ThrowStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitThrowStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax -&gt; unit&#xA;override this.VisitThrowStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitThrowStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitThrowStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ThrowStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitThrowStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ThrowStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitThrowStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::ThrowStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.ThrowStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTryBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitTryBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitTryBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitTryBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTryBlock (node As TryBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTryBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax -&gt; unit&#xA;override this.VisitTryBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitTryBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTryBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::TryBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitTryBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::TryBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitTryBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::TryBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TryBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTryCastExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitTryCastExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitTryCastExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitTryCastExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTryCastExpression (node As TryCastExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTryCastExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax -&gt; unit&#xA;override this.VisitTryCastExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitTryCastExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTryCastExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::TryCastExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitTryCastExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::TryCastExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitTryCastExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::TryCastExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TryCastExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTryStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitTryStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitTryStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitTryStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTryStatement (node As TryStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTryStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax -&gt; unit&#xA;override this.VisitTryStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitTryStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTryStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::TryStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitTryStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::TryStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitTryStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::TryStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TryStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTupleExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitTupleExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitTupleExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitTupleExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTupleExpression (node As TupleExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTupleExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleExpressionSyntax -&gt; unit&#xA;override this.VisitTupleExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitTupleExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTupleExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::TupleExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitTupleExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::TupleExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitTupleExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::TupleExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTupleType">
      <MemberSignature Language="C#" Value="public virtual void VisitTupleType (Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleTypeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitTupleType(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleTypeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitTupleType(Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleTypeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTupleType (node As TupleTypeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTupleType : Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleTypeSyntax -&gt; unit&#xA;override this.VisitTupleType : Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleTypeSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitTupleType node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTupleType(Microsoft::CodeAnalysis::VisualBasic::Syntax::TupleTypeSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitTupleType(Microsoft::CodeAnalysis::VisualBasic::Syntax::TupleTypeSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitTupleType(Microsoft::CodeAnalysis::VisualBasic::Syntax::TupleTypeSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TupleTypeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeArgumentList">
      <MemberSignature Language="C#" Value="public virtual void VisitTypeArgumentList (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitTypeArgumentList(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitTypeArgumentList(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTypeArgumentList (node As TypeArgumentListSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeArgumentList : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax -&gt; unit&#xA;override this.VisitTypeArgumentList : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitTypeArgumentList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTypeArgumentList(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeArgumentListSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitTypeArgumentList(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeArgumentListSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitTypeArgumentList(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeArgumentListSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeArgumentListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeConstraint">
      <MemberSignature Language="C#" Value="public virtual void VisitTypeConstraint (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeConstraintSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitTypeConstraint(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeConstraintSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitTypeConstraint(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeConstraintSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTypeConstraint (node As TypeConstraintSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeConstraint : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeConstraintSyntax -&gt; unit&#xA;override this.VisitTypeConstraint : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeConstraintSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitTypeConstraint node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTypeConstraint(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeConstraintSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitTypeConstraint(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeConstraintSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitTypeConstraint(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeConstraintSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeConstraintSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypedTupleElement">
      <MemberSignature Language="C#" Value="public virtual void VisitTypedTupleElement (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypedTupleElementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitTypedTupleElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypedTupleElementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitTypedTupleElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypedTupleElementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTypedTupleElement (node As TypedTupleElementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTypedTupleElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypedTupleElementSyntax -&gt; unit&#xA;override this.VisitTypedTupleElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypedTupleElementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitTypedTupleElement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTypedTupleElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypedTupleElementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitTypedTupleElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypedTupleElementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitTypedTupleElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypedTupleElementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypedTupleElementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeOfExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitTypeOfExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitTypeOfExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitTypeOfExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTypeOfExpression (node As TypeOfExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeOfExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax -&gt; unit&#xA;override this.VisitTypeOfExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitTypeOfExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTypeOfExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeOfExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitTypeOfExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeOfExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitTypeOfExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeOfExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeOfExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeParameter">
      <MemberSignature Language="C#" Value="public virtual void VisitTypeParameter (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitTypeParameter(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitTypeParameter(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTypeParameter (node As TypeParameterSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeParameter : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax -&gt; unit&#xA;override this.VisitTypeParameter : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitTypeParameter node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTypeParameter(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitTypeParameter(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitTypeParameter(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeParameterList">
      <MemberSignature Language="C#" Value="public virtual void VisitTypeParameterList (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitTypeParameterList(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitTypeParameterList(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTypeParameterList (node As TypeParameterListSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeParameterList : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax -&gt; unit&#xA;override this.VisitTypeParameterList : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitTypeParameterList node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTypeParameterList(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitTypeParameterList(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitTypeParameterList(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterListSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterListSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeParameterMultipleConstraintClause">
      <MemberSignature Language="C#" Value="public virtual void VisitTypeParameterMultipleConstraintClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitTypeParameterMultipleConstraintClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitTypeParameterMultipleConstraintClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTypeParameterMultipleConstraintClause (node As TypeParameterMultipleConstraintClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeParameterMultipleConstraintClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax -&gt; unit&#xA;override this.VisitTypeParameterMultipleConstraintClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitTypeParameterMultipleConstraintClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTypeParameterMultipleConstraintClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterMultipleConstraintClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitTypeParameterMultipleConstraintClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterMultipleConstraintClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitTypeParameterMultipleConstraintClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterMultipleConstraintClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterMultipleConstraintClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitTypeParameterSingleConstraintClause">
      <MemberSignature Language="C#" Value="public virtual void VisitTypeParameterSingleConstraintClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitTypeParameterSingleConstraintClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitTypeParameterSingleConstraintClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitTypeParameterSingleConstraintClause (node As TypeParameterSingleConstraintClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitTypeParameterSingleConstraintClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax -&gt; unit&#xA;override this.VisitTypeParameterSingleConstraintClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitTypeParameterSingleConstraintClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitTypeParameterSingleConstraintClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterSingleConstraintClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitTypeParameterSingleConstraintClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterSingleConstraintClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitTypeParameterSingleConstraintClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::TypeParameterSingleConstraintClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.TypeParameterSingleConstraintClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUnaryExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitUnaryExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitUnaryExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitUnaryExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitUnaryExpression (node As UnaryExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitUnaryExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax -&gt; unit&#xA;override this.VisitUnaryExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitUnaryExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitUnaryExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::UnaryExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitUnaryExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::UnaryExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitUnaryExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::UnaryExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.UnaryExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUsingBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitUsingBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitUsingBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitUsingBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitUsingBlock (node As UsingBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitUsingBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax -&gt; unit&#xA;override this.VisitUsingBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitUsingBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitUsingBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::UsingBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitUsingBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::UsingBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitUsingBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::UsingBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitUsingStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitUsingStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitUsingStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitUsingStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitUsingStatement (node As UsingStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitUsingStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax -&gt; unit&#xA;override this.VisitUsingStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitUsingStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitUsingStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::UsingStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitUsingStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::UsingStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitUsingStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::UsingStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.UsingStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitVariableDeclarator">
      <MemberSignature Language="C#" Value="public virtual void VisitVariableDeclarator (Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitVariableDeclarator(class Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitVariableDeclarator(Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitVariableDeclarator (node As VariableDeclaratorSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitVariableDeclarator : Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax -&gt; unit&#xA;override this.VisitVariableDeclarator : Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitVariableDeclarator node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitVariableDeclarator(Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableDeclaratorSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitVariableDeclarator(Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableDeclaratorSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitVariableDeclarator(Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableDeclaratorSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableDeclaratorSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitVariableNameEquals">
      <MemberSignature Language="C#" Value="public virtual void VisitVariableNameEquals (Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitVariableNameEquals(class Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitVariableNameEquals(Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitVariableNameEquals (node As VariableNameEqualsSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitVariableNameEquals : Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax -&gt; unit&#xA;override this.VisitVariableNameEquals : Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitVariableNameEquals node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitVariableNameEquals(Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableNameEqualsSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitVariableNameEquals(Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableNameEqualsSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitVariableNameEquals(Microsoft::CodeAnalysis::VisualBasic::Syntax::VariableNameEqualsSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.VariableNameEqualsSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitWhereClause">
      <MemberSignature Language="C#" Value="public virtual void VisitWhereClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitWhereClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitWhereClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitWhereClause (node As WhereClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitWhereClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax -&gt; unit&#xA;override this.VisitWhereClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitWhereClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitWhereClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhereClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitWhereClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhereClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitWhereClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhereClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhereClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitWhileBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitWhileBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitWhileBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitWhileBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitWhileBlock (node As WhileBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitWhileBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax -&gt; unit&#xA;override this.VisitWhileBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitWhileBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitWhileBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitWhileBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitWhileBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitWhileOrUntilClause">
      <MemberSignature Language="C#" Value="public virtual void VisitWhileOrUntilClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitWhileOrUntilClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitWhileOrUntilClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitWhileOrUntilClause (node As WhileOrUntilClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitWhileOrUntilClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax -&gt; unit&#xA;override this.VisitWhileOrUntilClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitWhileOrUntilClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitWhileOrUntilClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitWhileOrUntilClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitWhileOrUntilClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileOrUntilClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileOrUntilClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitWhileStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitWhileStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitWhileStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitWhileStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitWhileStatement (node As WhileStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitWhileStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax -&gt; unit&#xA;override this.VisitWhileStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitWhileStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitWhileStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitWhileStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitWhileStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::WhileStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WhileStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitWithBlock">
      <MemberSignature Language="C#" Value="public virtual void VisitWithBlock (Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitWithBlock(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitWithBlock(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitWithBlock (node As WithBlockSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitWithBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax -&gt; unit&#xA;override this.VisitWithBlock : Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitWithBlock node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitWithBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::WithBlockSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitWithBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::WithBlockSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitWithBlock(Microsoft::CodeAnalysis::VisualBasic::Syntax::WithBlockSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WithBlockSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitWithEventsEventContainer">
      <MemberSignature Language="C#" Value="public virtual void VisitWithEventsEventContainer (Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitWithEventsEventContainer(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitWithEventsEventContainer(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitWithEventsEventContainer (node As WithEventsEventContainerSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitWithEventsEventContainer : Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax -&gt; unit&#xA;override this.VisitWithEventsEventContainer : Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitWithEventsEventContainer node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitWithEventsEventContainer(Microsoft::CodeAnalysis::VisualBasic::Syntax::WithEventsEventContainerSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitWithEventsEventContainer(Microsoft::CodeAnalysis::VisualBasic::Syntax::WithEventsEventContainerSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitWithEventsEventContainer(Microsoft::CodeAnalysis::VisualBasic::Syntax::WithEventsEventContainerSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsEventContainerSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitWithEventsPropertyEventContainer">
      <MemberSignature Language="C#" Value="public virtual void VisitWithEventsPropertyEventContainer (Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitWithEventsPropertyEventContainer(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitWithEventsPropertyEventContainer(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitWithEventsPropertyEventContainer (node As WithEventsPropertyEventContainerSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitWithEventsPropertyEventContainer : Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax -&gt; unit&#xA;override this.VisitWithEventsPropertyEventContainer : Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitWithEventsPropertyEventContainer node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitWithEventsPropertyEventContainer(Microsoft::CodeAnalysis::VisualBasic::Syntax::WithEventsPropertyEventContainerSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitWithEventsPropertyEventContainer(Microsoft::CodeAnalysis::VisualBasic::Syntax::WithEventsPropertyEventContainerSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitWithEventsPropertyEventContainer(Microsoft::CodeAnalysis::VisualBasic::Syntax::WithEventsPropertyEventContainerSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WithEventsPropertyEventContainerSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitWithStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitWithStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitWithStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitWithStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitWithStatement (node As WithStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitWithStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax -&gt; unit&#xA;override this.VisitWithStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitWithStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitWithStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::WithStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitWithStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::WithStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitWithStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::WithStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.WithStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlAttribute">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlAttribute (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlAttribute(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlAttribute (node As XmlAttributeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlAttribute : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax -&gt; unit&#xA;override this.VisitXmlAttribute : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlAttribute node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlAttributeSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlAttributeSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlAttributeSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlAttributeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlBracketedName">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlBracketedName (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlBracketedName(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlBracketedName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlBracketedName (node As XmlBracketedNameSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlBracketedName : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax -&gt; unit&#xA;override this.VisitXmlBracketedName : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlBracketedName node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlBracketedName(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlBracketedNameSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlBracketedName(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlBracketedNameSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlBracketedName(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlBracketedNameSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlBracketedNameSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlCDataSection">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlCDataSection (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlCDataSection(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlCDataSection(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlCDataSection (node As XmlCDataSectionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlCDataSection : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax -&gt; unit&#xA;override this.VisitXmlCDataSection : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlCDataSection node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlCDataSection(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlCDataSectionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlCDataSection(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlCDataSectionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlCDataSection(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlCDataSectionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCDataSectionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlComment">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlComment (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlComment(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlComment(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlComment (node As XmlCommentSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlComment : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax -&gt; unit&#xA;override this.VisitXmlComment : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlComment node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlComment(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlCommentSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlComment(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlCommentSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlComment(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlCommentSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCommentSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlCrefAttribute">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlCrefAttribute (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlCrefAttribute(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlCrefAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlCrefAttribute (node As XmlCrefAttributeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlCrefAttribute : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax -&gt; unit&#xA;override this.VisitXmlCrefAttribute : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlCrefAttribute node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlCrefAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlCrefAttributeSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlCrefAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlCrefAttributeSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlCrefAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlCrefAttributeSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlCrefAttributeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlDeclaration">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlDeclaration (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlDeclaration(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlDeclaration(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlDeclaration (node As XmlDeclarationSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlDeclaration : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax -&gt; unit&#xA;override this.VisitXmlDeclaration : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlDeclaration node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlDeclaration(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlDeclaration(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlDeclaration(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlDeclarationOption">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlDeclarationOption (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlDeclarationOption(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlDeclarationOption(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlDeclarationOption (node As XmlDeclarationOptionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlDeclarationOption : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax -&gt; unit&#xA;override this.VisitXmlDeclarationOption : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlDeclarationOption node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlDeclarationOption(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationOptionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlDeclarationOption(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationOptionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlDeclarationOption(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDeclarationOptionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDeclarationOptionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlDocument">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlDocument (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlDocument(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlDocument(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlDocument (node As XmlDocumentSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlDocument : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax -&gt; unit&#xA;override this.VisitXmlDocument : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlDocument node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlDocument(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDocumentSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlDocument(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDocumentSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlDocument(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlDocumentSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlDocumentSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlElement">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlElement (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlElement (node As XmlElementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax -&gt; unit&#xA;override this.VisitXmlElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlElement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlElementEndTag">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlElementEndTag (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlElementEndTag(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlElementEndTag(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlElementEndTag (node As XmlElementEndTagSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlElementEndTag : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax -&gt; unit&#xA;override this.VisitXmlElementEndTag : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlElementEndTag node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlElementEndTag(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementEndTagSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlElementEndTag(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementEndTagSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlElementEndTag(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementEndTagSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementEndTagSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlElementStartTag">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlElementStartTag (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlElementStartTag(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlElementStartTag(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlElementStartTag (node As XmlElementStartTagSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlElementStartTag : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax -&gt; unit&#xA;override this.VisitXmlElementStartTag : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlElementStartTag node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlElementStartTag(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementStartTagSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlElementStartTag(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementStartTagSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlElementStartTag(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlElementStartTagSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlElementStartTagSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlEmbeddedExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlEmbeddedExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlEmbeddedExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlEmbeddedExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlEmbeddedExpression (node As XmlEmbeddedExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlEmbeddedExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax -&gt; unit&#xA;override this.VisitXmlEmbeddedExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlEmbeddedExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlEmbeddedExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmbeddedExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlEmbeddedExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmbeddedExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlEmbeddedExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmbeddedExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmbeddedExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlEmptyElement">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlEmptyElement (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlEmptyElement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlEmptyElement(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlEmptyElement (node As XmlEmptyElementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlEmptyElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax -&gt; unit&#xA;override this.VisitXmlEmptyElement : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlEmptyElement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlEmptyElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmptyElementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlEmptyElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmptyElementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlEmptyElement(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlEmptyElementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlEmptyElementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlMemberAccessExpression">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlMemberAccessExpression (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlMemberAccessExpression(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlMemberAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlMemberAccessExpression (node As XmlMemberAccessExpressionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlMemberAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax -&gt; unit&#xA;override this.VisitXmlMemberAccessExpression : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlMemberAccessExpression node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlMemberAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlMemberAccessExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlMemberAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlMemberAccessExpressionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlMemberAccessExpression(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlMemberAccessExpressionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlMemberAccessExpressionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlName">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlName (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlName(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlName (node As XmlNameSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlName : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax -&gt; unit&#xA;override this.VisitXmlName : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlName node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlName(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlName(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlName(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlNameAttribute">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlNameAttribute (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlNameAttribute(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlNameAttribute(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlNameAttribute (node As XmlNameAttributeSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlNameAttribute : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax -&gt; unit&#xA;override this.VisitXmlNameAttribute : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlNameAttribute node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlNameAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameAttributeSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlNameAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameAttributeSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlNameAttribute(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNameAttributeSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNameAttributeSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlNamespaceImportsClause">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlNamespaceImportsClause (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlNamespaceImportsClause(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlNamespaceImportsClause(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlNamespaceImportsClause (node As XmlNamespaceImportsClauseSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlNamespaceImportsClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax -&gt; unit&#xA;override this.VisitXmlNamespaceImportsClause : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlNamespaceImportsClause node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlNamespaceImportsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNamespaceImportsClauseSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlNamespaceImportsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNamespaceImportsClauseSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlNamespaceImportsClause(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlNamespaceImportsClauseSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlNamespaceImportsClauseSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlPrefix">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlPrefix (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlPrefix(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlPrefix(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlPrefix (node As XmlPrefixSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlPrefix : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax -&gt; unit&#xA;override this.VisitXmlPrefix : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlPrefix node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlPrefix(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlPrefixSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlPrefix(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlPrefixSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlPrefix(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlPrefixSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlPrefixName">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlPrefixName (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlPrefixName(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlPrefixName(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlPrefixName (node As XmlPrefixNameSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlPrefixName : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax -&gt; unit&#xA;override this.VisitXmlPrefixName : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlPrefixName node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlPrefixName(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlPrefixNameSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlPrefixName(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlPrefixNameSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlPrefixName(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlPrefixNameSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlPrefixNameSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlProcessingInstruction">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlProcessingInstruction (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlProcessingInstruction(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlProcessingInstruction(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlProcessingInstruction (node As XmlProcessingInstructionSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlProcessingInstruction : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax -&gt; unit&#xA;override this.VisitXmlProcessingInstruction : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlProcessingInstruction node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlProcessingInstruction(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlProcessingInstructionSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlProcessingInstruction(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlProcessingInstructionSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlProcessingInstruction(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlProcessingInstructionSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlProcessingInstructionSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlString">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlString (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlString(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlString(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlString (node As XmlStringSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlString : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax -&gt; unit&#xA;override this.VisitXmlString : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlString node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlString(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlStringSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlString(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlStringSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlString(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlStringSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlStringSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitXmlText">
      <MemberSignature Language="C#" Value="public virtual void VisitXmlText (Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitXmlText(class Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitXmlText(Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitXmlText (node As XmlTextSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitXmlText : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax -&gt; unit&#xA;override this.VisitXmlText : Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitXmlText node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitXmlText(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlTextSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitXmlText(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlTextSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitXmlText(Microsoft::CodeAnalysis::VisualBasic::Syntax::XmlTextSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.XmlTextSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitYieldStatement">
      <MemberSignature Language="C#" Value="public virtual void VisitYieldStatement (Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax node);" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void VisitYieldStatement(class Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax node) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSyntaxVisitor.VisitYieldStatement(Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub VisitYieldStatement (node As YieldStatementSyntax)" />
      <MemberSignature Language="F#" Value="abstract member VisitYieldStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax -&gt; unit&#xA;override this.VisitYieldStatement : Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax -&gt; unit" Usage="visualBasicSyntaxVisitor.VisitYieldStatement node" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VisitYieldStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::YieldStatementSyntax ^ node);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; virtual void VisitYieldStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::YieldStatementSyntax ^ node);" />
      <MemberSignature Language="C++ WINRT" Value=" virtual void VisitYieldStatement(Microsoft::CodeAnalysis::VisualBasic::Syntax::YieldStatementSyntax const &amp; node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CodeAnalysis.VisualBasic</AssemblyName>
        <AssemblyVersion>2.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="Microsoft.CodeAnalysis.VisualBasic.Syntax.YieldStatementSyntax" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>